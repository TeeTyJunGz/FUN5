
G474RE-Firmware-mini-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d024  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a90  0801d208  0801d208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ec98  0801ec98  00020a20  2**0
                  CONTENTS
  4 .ARM          00000008  0801ec98  0801ec98  0001fc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eca0  0801eca0  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801eca0  0801eca0  0001fca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ecb4  0801ecb4  0001fcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a20  20000000  0801ecb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b56c  20000a20  0801f6d8  00020a20  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bf8c  0801f6d8  00020f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cee7  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005df2  00000000  00000000  0004d937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d8  00000000  00000000  00053730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aef  00000000  00000000  00055a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030573  00000000  00000000  000574f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d395  00000000  00000000  00087a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012dd67  00000000  00000000  000b4dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001e2b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a444  00000000  00000000  001e2bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001ed020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a20 	.word	0x20000a20
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d1ec 	.word	0x0801d1ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a24 	.word	0x20000a24
 800021c:	0801d1ec 	.word	0x0801d1ec

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	@ 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f01a febf 	bl	801bcf4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f76:	4b39      	ldr	r3, [pc, #228]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b35      	ldr	r3, [pc, #212]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f92:	4b32      	ldr	r3, [pc, #200]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MX_ADC1_Init+0x104>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd8:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_ADC1_Init+0x104>)
 8000fe2:	f002 f9c9 	bl	8003378 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fec:	f001 fa12 	bl	8002414 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4818      	ldr	r0, [pc, #96]	@ (800105c <MX_ADC1_Init+0x104>)
 8000ffc:	f003 fd84 	bl	8004b08 <HAL_ADCEx_MultiModeConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001006:	f001 fa05 	bl	8002414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_ADC1_Init+0x108>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2306      	movs	r3, #6
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001012:	2307      	movs	r3, #7
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	@ 0x7f
 8001018:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_ADC1_Init+0x104>)
 8001028:	f002 febe 	bl	8003da8 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001032:	f001 f9ef 	bl	8002414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_ADC1_Init+0x10c>)
 8001038:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800103a:	230c      	movs	r3, #12
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_ADC1_Init+0x104>)
 8001044:	f002 feb0 	bl	8003da8 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800104e:	f001 f9e1 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	@ 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000a3c 	.word	0x20000a3c
 8001060:	04300002 	.word	0x04300002
 8001064:	08600004 	.word	0x08600004

08001068 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09e      	sub	sp, #120	@ 0x78
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2254      	movs	r2, #84	@ 0x54
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f01a fe33 	bl	801bcf4 <memset>
  if(adcHandle->Instance==ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001096:	d167      	bne.n	8001168 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800109c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800109e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 f9e9 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010b4:	f001 f9ae 	bl	8002414 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_ADC_MspInit+0x108>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e8:	2303      	movs	r3, #3
 80010ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f004 fa29 	bl	8005554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <HAL_ADC_MspInit+0x110>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800110a:	2205      	movs	r2, #5
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001132:	2220      	movs	r2, #32
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 800113e:	f003 fecb 	bl	8004ed8 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001148:	f001 f964 	bl	8002414 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_ADC_MspInit+0x10c>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	2012      	movs	r0, #18
 800115e:	f003 fe93 	bl	8004e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001162:	2012      	movs	r0, #18
 8001164:	f003 feaa 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3778      	adds	r7, #120	@ 0x78
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	20000aa8 	.word	0x20000aa8
 8001178:	40020008 	.word	0x40020008
 800117c:	00000000 	.word	0x00000000

08001180 <map_adc_to_output>:

void ADC_Averaged();
void Read_Buttons();
float map_adc_to_output(int adc_value);

float map_adc_to_output(int adc_value) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	float mapped = ((adc_value - ADC_MIN) * (OUTPUT_MAX - OUTPUT_MIN) / (ADC_MAX - ADC_MIN)) + OUTPUT_MIN;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001196:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80011f0 <map_adc_to_output+0x70>
 800119a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011a6:	edc7 7a03 	vstr	s15, [r7, #12]
	float output = (fabs(mapped) < 0.03) ? 0.0 : mapped;
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	eef0 7ae7 	vabs.f32	s15, s15
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff f9ff 	bl	80005b8 <__aeabi_f2d>
 80011ba:	a30b      	add	r3, pc, #44	@ (adr r3, 80011e8 <map_adc_to_output+0x68>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fcc4 	bl	8000b4c <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <map_adc_to_output+0x50>
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e000      	b.n	80011d2 <map_adc_to_output+0x52>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	60bb      	str	r3, [r7, #8]
	return output;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	ee07 3a90 	vmov	s15, r3
}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	f3af 8000 	nop.w
 80011e8:	eb851eb8 	.word	0xeb851eb8
 80011ec:	3f9eb851 	.word	0x3f9eb851
 80011f0:	457ff000 	.word	0x457ff000
 80011f4:	00000000 	.word	0x00000000

080011f8 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b096      	sub	sp, #88	@ 0x58
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 81b9 	beq.w	8001580 <timer_callback+0x388>
		uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 800120e:	4898      	ldr	r0, [pc, #608]	@ (8001470 <timer_callback+0x278>)
 8001210:	f004 ff5e 	bl	80060d0 <HAL_I2C_GetError>
 8001214:	6578      	str	r0, [r7, #84]	@ 0x54
		if (i2cError == HAL_I2C_ERROR_NONE){
 8001216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 818c 	bne.w	8001536 <timer_callback+0x33e>
			if (is_calib || on_calib){
 800121e:	4b95      	ldr	r3, [pc, #596]	@ (8001474 <timer_callback+0x27c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <timer_callback+0x38>
 8001226:	4b94      	ldr	r3, [pc, #592]	@ (8001478 <timer_callback+0x280>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 819f 	beq.w	800156e <timer_callback+0x376>
				MPU6050_Read_All(&hi2c1, &MPU6050);
 8001230:	4992      	ldr	r1, [pc, #584]	@ (800147c <timer_callback+0x284>)
 8001232:	488f      	ldr	r0, [pc, #572]	@ (8001470 <timer_callback+0x278>)
 8001234:	f008 fcfc 	bl	8009c30 <MPU6050_Read_All>

				double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8001238:	4b90      	ldr	r3, [pc, #576]	@ (800147c <timer_callback+0x284>)
 800123a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800123e:	a386      	add	r3, pc, #536	@ (adr r3, 8001458 <timer_callback+0x260>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fa10 	bl	8000668 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	4b8b      	ldr	r3, [pc, #556]	@ (8001480 <timer_callback+0x288>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f84f 	bl	80002f8 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
				double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8001262:	4b86      	ldr	r3, [pc, #536]	@ (800147c <timer_callback+0x284>)
 8001264:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001268:	a37b      	add	r3, pc, #492	@ (adr r3, 8001458 <timer_callback+0x260>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9fb 	bl	8000668 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	4b81      	ldr	r3, [pc, #516]	@ (8001480 <timer_callback+0x288>)
 800127c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001280:	f7ff f83a 	bl	80002f8 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 800128c:	4b7b      	ldr	r3, [pc, #492]	@ (800147c <timer_callback+0x284>)
 800128e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001292:	a371      	add	r3, pc, #452	@ (adr r3, 8001458 <timer_callback+0x260>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9e6 	bl	8000668 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b76      	ldr	r3, [pc, #472]	@ (8001480 <timer_callback+0x288>)
 80012a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012aa:	f7ff f825 	bl	80002f8 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

				double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 80012b6:	4b71      	ldr	r3, [pc, #452]	@ (800147c <timer_callback+0x284>)
 80012b8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80012bc:	a368      	add	r3, pc, #416	@ (adr r3, 8001460 <timer_callback+0x268>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f9d1 	bl	8000668 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001484 <timer_callback+0x28c>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f810 	bl	80002f8 <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
				double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 80012e0:	4b66      	ldr	r3, [pc, #408]	@ (800147c <timer_callback+0x284>)
 80012e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80012e6:	a35e      	add	r3, pc, #376	@ (adr r3, 8001460 <timer_callback+0x268>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f9bc 	bl	8000668 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	4b62      	ldr	r3, [pc, #392]	@ (8001484 <timer_callback+0x28c>)
 80012fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012fe:	f7fe fffb 	bl	80002f8 <__aeabi_dsub>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 800130a:	4b5c      	ldr	r3, [pc, #368]	@ (800147c <timer_callback+0x284>)
 800130c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001310:	a353      	add	r3, pc, #332	@ (adr r3, 8001460 <timer_callback+0x268>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f9a7 	bl	8000668 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <timer_callback+0x28c>)
 8001324:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001328:	f7fe ffe6 	bl	80002f8 <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	e9c7 2308 	strd	r2, r3, [r7, #32]

				mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8001334:	f00f fce4 	bl	8010d00 <rmw_uros_epoch_millis>
 8001338:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	f7ff fc42 	bl	8000bc8 <__aeabi_ldivmod>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4b4f      	ldr	r3, [pc, #316]	@ (8001488 <timer_callback+0x290>)
 800134a:	601a      	str	r2, [r3, #0]
				mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 800134c:	f00f fce6 	bl	8010d1c <rmw_uros_epoch_nanos>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4b4c      	ldr	r3, [pc, #304]	@ (8001488 <timer_callback+0x290>)
 8001356:	605a      	str	r2, [r3, #4]

				mpu6050_msg.linear_acceleration.x = Ax;
 8001358:	494b      	ldr	r1, [pc, #300]	@ (8001488 <timer_callback+0x290>)
 800135a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800135e:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
				mpu6050_msg.linear_acceleration.y = Ay;
 8001362:	4949      	ldr	r1, [pc, #292]	@ (8001488 <timer_callback+0x290>)
 8001364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001368:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
				mpu6050_msg.linear_acceleration.z = Az;
 800136c:	4946      	ldr	r1, [pc, #280]	@ (8001488 <timer_callback+0x290>)
 800136e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001372:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

				mpu6050_msg.angular_velocity.x = Gx;
 8001376:	4944      	ldr	r1, [pc, #272]	@ (8001488 <timer_callback+0x290>)
 8001378:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800137c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
				mpu6050_msg.angular_velocity.y = Gy;
 8001380:	4941      	ldr	r1, [pc, #260]	@ (8001488 <timer_callback+0x290>)
 8001382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001386:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
				mpu6050_msg.angular_velocity.z = Gz;
 800138a:	493f      	ldr	r1, [pc, #252]	@ (8001488 <timer_callback+0x290>)
 800138c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001390:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

//				rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
//				if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);

				rotation_real.roll = MPU6050.KalmanAngleX;
 8001394:	4b39      	ldr	r3, [pc, #228]	@ (800147c <timer_callback+0x284>)
 8001396:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800139a:	493c      	ldr	r1, [pc, #240]	@ (800148c <timer_callback+0x294>)
 800139c:	e9c1 2300 	strd	r2, r3, [r1]
				rotation_real.pitch = MPU6050.KalmanAngleY;
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <timer_callback+0x284>)
 80013a2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80013a6:	4939      	ldr	r1, [pc, #228]	@ (800148c <timer_callback+0x294>)
 80013a8:	e9c1 2302 	strd	r2, r3, [r1, #8]

				cmd_vel_msg.linear.x = -(rotation_real.pitch * DEG_TO_RAD);
 80013ac:	4b37      	ldr	r3, [pc, #220]	@ (800148c <timer_callback+0x294>)
 80013ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001468 <timer_callback+0x270>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f956 	bl	8000668 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <timer_callback+0x298>)
 80013ca:	f7ff fa77 	bl	80008bc <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4690      	mov	r8, r2
 80013d4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80013d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <timer_callback+0x29c>)
 80013da:	e9c3 8900 	strd	r8, r9, [r3]
				cmd_vel_msg.angular.z = -(rotation_real.roll * DEG_TO_RAD);
 80013de:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <timer_callback+0x294>)
 80013e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e4:	a320      	add	r3, pc, #128	@ (adr r3, 8001468 <timer_callback+0x270>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f93d 	bl	8000668 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <timer_callback+0x298>)
 80013fc:	f7ff fa5e 	bl	80008bc <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4614      	mov	r4, r2
 8001406:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800140a:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <timer_callback+0x29c>)
 800140c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28

				rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 8001410:	2200      	movs	r2, #0
 8001412:	4920      	ldr	r1, [pc, #128]	@ (8001494 <timer_callback+0x29c>)
 8001414:	4820      	ldr	r0, [pc, #128]	@ (8001498 <timer_callback+0x2a0>)
 8001416:	f00d fcd7 	bl	800edc8 <rcl_publish>
 800141a:	61f8      	str	r0, [r7, #28]
				if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <timer_callback+0x232>
 8001422:	21ee      	movs	r1, #238	@ 0xee
 8001424:	481d      	ldr	r0, [pc, #116]	@ (800149c <timer_callback+0x2a4>)
 8001426:	f01a fae5 	bl	801b9f4 <iprintf>

				ADC_Averaged();
 800142a:	f000 f963 	bl	80016f4 <ADC_Averaged>
				Read_Buttons();
 800142e:	f000 f9ad 	bl	800178c <Read_Buttons>

				float zp = (joy.A == GPIO_PIN_SET) ? 0 : 0.2;
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <timer_callback+0x2a8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <timer_callback+0x248>
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	e000      	b.n	8001442 <timer_callback+0x24a>
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <timer_callback+0x2ac>)
 8001442:	61bb      	str	r3, [r7, #24]
				float zm = (joy.C == GPIO_PIN_SET) ? 0 : -0.2;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <timer_callback+0x2a8>)
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d12d      	bne.n	80014a8 <timer_callback+0x2b0>
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e02b      	b.n	80014aa <timer_callback+0x2b2>
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	3a92a305 	.word	0x3a92a305
 800145c:	40239d01 	.word	0x40239d01
 8001460:	a2529d39 	.word	0xa2529d39
 8001464:	3f91df46 	.word	0x3f91df46
 8001468:	54442d18 	.word	0x54442d18
 800146c:	400921fb 	.word	0x400921fb
 8001470:	20004af4 	.word	0x20004af4
 8001474:	20000ed8 	.word	0x20000ed8
 8001478:	20000ed9 	.word	0x20000ed9
 800147c:	20000e30 	.word	0x20000e30
 8001480:	20000e90 	.word	0x20000e90
 8001484:	20000ea8 	.word	0x20000ea8
 8001488:	20000b18 	.word	0x20000b18
 800148c:	20000ec0 	.word	0x20000ec0
 8001490:	40668000 	.word	0x40668000
 8001494:	20000c60 	.word	0x20000c60
 8001498:	20000c58 	.word	0x20000c58
 800149c:	0801d214 	.word	0x0801d214
 80014a0:	20000f8c 	.word	0x20000f8c
 80014a4:	3e4ccccd 	.word	0x3e4ccccd
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <timer_callback+0x3a0>)
 80014aa:	617b      	str	r3, [r7, #20]

				cmd_vell_msg.linear.x = (map_adc_to_output(ADC_Average[1])) * 0.2;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <timer_callback+0x3a4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe65 	bl	8001180 <map_adc_to_output>
 80014b6:	ee10 3a10 	vmov	r3, s0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f87c 	bl	80005b8 <__aeabi_f2d>
 80014c0:	a333      	add	r3, pc, #204	@ (adr r3, 8001590 <timer_callback+0x398>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8cf 	bl	8000668 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4934      	ldr	r1, [pc, #208]	@ (80015a0 <timer_callback+0x3a8>)
 80014d0:	e9c1 2300 	strd	r2, r3, [r1]
				cmd_vell_msg.linear.y = (map_adc_to_output(ADC_Average[0])) * 0.2;
 80014d4:	4b31      	ldr	r3, [pc, #196]	@ (800159c <timer_callback+0x3a4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe51 	bl	8001180 <map_adc_to_output>
 80014de:	ee10 3a10 	vmov	r3, s0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f868 	bl	80005b8 <__aeabi_f2d>
 80014e8:	a329      	add	r3, pc, #164	@ (adr r3, 8001590 <timer_callback+0x398>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f8bb 	bl	8000668 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	492a      	ldr	r1, [pc, #168]	@ (80015a0 <timer_callback+0x3a8>)
 80014f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				cmd_vell_msg.linear.z = zp + zm;
 80014fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001500:	edd7 7a05 	vldr	s15, [r7, #20]
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001508:	ee17 0a90 	vmov	r0, s15
 800150c:	f7ff f854 	bl	80005b8 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4922      	ldr	r1, [pc, #136]	@ (80015a0 <timer_callback+0x3a8>)
 8001516:	e9c1 2304 	strd	r2, r3, [r1, #16]

				rcl_ret_t rettt = rcl_publish(&cmd_vell_publisher, &cmd_vell_msg, NULL);
 800151a:	2200      	movs	r2, #0
 800151c:	4920      	ldr	r1, [pc, #128]	@ (80015a0 <timer_callback+0x3a8>)
 800151e:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <timer_callback+0x3ac>)
 8001520:	f00d fc52 	bl	800edc8 <rcl_publish>
 8001524:	6138      	str	r0, [r7, #16]
				if (rettt != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <timer_callback+0x376>
 800152c:	21fb      	movs	r1, #251	@ 0xfb
 800152e:	481e      	ldr	r0, [pc, #120]	@ (80015a8 <timer_callback+0x3b0>)
 8001530:	f01a fa60 	bl	801b9f4 <iprintf>
 8001534:	e01b      	b.n	800156e <timer_callback+0x376>
			}
		}
		else
		{
			static uint32_t timestamp = 0;
			if (timestamp <= HAL_GetTick()){
 8001536:	f001 fcad 	bl	8002e94 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <timer_callback+0x3b4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d314      	bcc.n	800156e <timer_callback+0x376>
				timestamp = HAL_GetTick() + 1000;
 8001544:	f001 fca6 	bl	8002e94 <HAL_GetTick>
 8001548:	4603      	mov	r3, r0
 800154a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <timer_callback+0x3b4>)
 8001550:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001552:	2120      	movs	r1, #32
 8001554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001558:	f004 fa90 	bl	8005a7c <HAL_GPIO_TogglePin>
				HAL_I2C_DeInit(&hi2c1);
 800155c:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <timer_callback+0x3b8>)
 800155e:	f004 fb5a 	bl	8005c16 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 8001562:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <timer_callback+0x3b8>)
 8001564:	f004 fabc 	bl	8005ae0 <HAL_I2C_Init>
				MPU6050_Init(&hi2c1);
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <timer_callback+0x3b8>)
 800156a:	f008 fb07 	bl	8009b7c <MPU6050_Init>
			}
		}

	    HAL_IWDG_Refresh(&hiwdg);
 800156e:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <timer_callback+0x3bc>)
 8001570:	f005 f962 	bl	8006838 <HAL_IWDG_Refresh>
	    cc++;
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <timer_callback+0x3c0>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <timer_callback+0x3c0>)
 800157e:	801a      	strh	r2, [r3, #0]
	}
}
 8001580:	bf00      	nop
 8001582:	3758      	adds	r7, #88	@ 0x58
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	9999999a 	.word	0x9999999a
 8001594:	3fc99999 	.word	0x3fc99999
 8001598:	be4ccccd 	.word	0xbe4ccccd
 800159c:	20000f7c 	.word	0x20000f7c
 80015a0:	20000c98 	.word	0x20000c98
 80015a4:	20000c90 	.word	0x20000c90
 80015a8:	0801d214 	.word	0x0801d214
 80015ac:	20003ed8 	.word	0x20003ed8
 80015b0:	20004af4 	.word	0x20004af4
 80015b4:	20004b48 	.word	0x20004b48
 80015b8:	20000e88 	.word	0x20000e88

080015bc <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 80015ce:	2348      	movs	r3, #72	@ 0x48
 80015d0:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 80015d2:	2348      	movs	r3, #72	@ 0x48
 80015d4:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	33f8      	adds	r3, #248	@ 0xf8
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4619      	mov	r1, r3
 80015de:	481e      	ldr	r0, [pc, #120]	@ (8001658 <imu_calib_service_callback+0x9c>)
 80015e0:	f01a fc51 	bl	801be86 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3398      	adds	r3, #152	@ 0x98
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	4619      	mov	r1, r3
 80015ec:	481b      	ldr	r0, [pc, #108]	@ (800165c <imu_calib_service_callback+0xa0>)
 80015ee:	f01a fc4a 	bl	801be86 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80015f8:	4919      	ldr	r1, [pc, #100]	@ (8001660 <imu_calib_service_callback+0xa4>)
 80015fa:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001604:	4916      	ldr	r1, [pc, #88]	@ (8001660 <imu_calib_service_callback+0xa4>)
 8001606:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001610:	4913      	ldr	r1, [pc, #76]	@ (8001660 <imu_calib_service_callback+0xa4>)
 8001612:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800161c:	4911      	ldr	r1, [pc, #68]	@ (8001664 <imu_calib_service_callback+0xa8>)
 800161e:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001628:	490e      	ldr	r1, [pc, #56]	@ (8001664 <imu_calib_service_callback+0xa8>)
 800162a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001634:	490b      	ldr	r1, [pc, #44]	@ (8001664 <imu_calib_service_callback+0xa8>)
 8001636:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <imu_calib_service_callback+0xac>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001646:	2120      	movs	r1, #32
 8001648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164c:	f004 fa16 	bl	8005a7c <HAL_GPIO_TogglePin>

}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000c10 	.word	0x20000c10
 800165c:	20000bb0 	.word	0x20000bb0
 8001660:	20000e90 	.word	0x20000e90
 8001664:	20000ea8 	.word	0x20000ea8
 8001668:	20000ed8 	.word	0x20000ed8

0800166c <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	617b      	str	r3, [r7, #20]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	613b      	str	r3, [r7, #16]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d020      	beq.n	80016c8 <imu_status_service_callback+0x5c>
	  uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 8001686:	4815      	ldr	r0, [pc, #84]	@ (80016dc <imu_status_service_callback+0x70>)
 8001688:	f004 fd22 	bl	80060d0 <HAL_I2C_GetError>
 800168c:	60f8      	str	r0, [r7, #12]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <imu_status_service_callback+0x42>
	      res_in->success = true;
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <imu_status_service_callback+0x74>)
 800169e:	605a      	str	r2, [r3, #4]
		  cs++;
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <imu_status_service_callback+0x78>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <imu_status_service_callback+0x78>)
 80016aa:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 80016ac:	e012      	b.n	80016d4 <imu_status_service_callback+0x68>
	      res_in->success = false;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <imu_status_service_callback+0x7c>)
 80016b8:	605a      	str	r2, [r3, #4]
		  ct++;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <imu_status_service_callback+0x80>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <imu_status_service_callback+0x80>)
 80016c4:	801a      	strh	r2, [r3, #0]
}
 80016c6:	e005      	b.n	80016d4 <imu_status_service_callback+0x68>
      res_in->success = false;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <imu_status_service_callback+0x84>)
 80016d2:	605a      	str	r2, [r3, #4]
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20004af4 	.word	0x20004af4
 80016e0:	0801d230 	.word	0x0801d230
 80016e4:	20000e8a 	.word	0x20000e8a
 80016e8:	0801d248 	.word	0x0801d248
 80016ec:	20000e8c 	.word	0x20000e8c
 80016f0:	0801d27c 	.word	0x0801d27c

080016f4 <ADC_Averaged>:

void ADC_Averaged()
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 40; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e017      	b.n	8001730 <ADC_Averaged+0x3c>
	{
		ADC_SumAPot[0] += ADCBuffer[2*i];
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <ADC_Averaged+0x88>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	491d      	ldr	r1, [pc, #116]	@ (8001780 <ADC_Averaged+0x8c>)
 800170a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800170e:	4413      	add	r3, r2
 8001710:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <ADC_Averaged+0x88>)
 8001712:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(2*i)];
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <ADC_Averaged+0x88>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	3201      	adds	r2, #1
 800171e:	4918      	ldr	r1, [pc, #96]	@ (8001780 <ADC_Averaged+0x8c>)
 8001720:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001724:	4413      	add	r3, r2
 8001726:	4a15      	ldr	r2, [pc, #84]	@ (800177c <ADC_Averaged+0x88>)
 8001728:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 40; i++)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b27      	cmp	r3, #39	@ 0x27
 8001734:	dde4      	ble.n	8001700 <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	e015      	b.n	8001768 <ADC_Averaged+0x74>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 40;
 800173c:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <ADC_Averaged+0x88>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <ADC_Averaged+0x90>)
 8001746:	fb82 1203 	smull	r1, r2, r2, r3
 800174a:	1112      	asrs	r2, r2, #4
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	490d      	ldr	r1, [pc, #52]	@ (8001788 <ADC_Averaged+0x94>)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8001758:	4a08      	ldr	r2, [pc, #32]	@ (800177c <ADC_Averaged+0x88>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2100      	movs	r1, #0
 800175e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	dde6      	ble.n	800173c <ADC_Averaged+0x48>
	}
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20000f84 	.word	0x20000f84
 8001780:	20000edc 	.word	0x20000edc
 8001784:	66666667 	.word	0x66666667
 8001788:	20000f7c 	.word	0x20000f7c

0800178c <Read_Buttons>:

void Read_Buttons()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	joy.A = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8001790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001798:	f004 f940 	bl	8005a1c <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <Read_Buttons+0x2c>)
 80017a2:	701a      	strb	r2, [r3, #0]
	joy.C = HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 80017a4:	2120      	movs	r1, #32
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <Read_Buttons+0x30>)
 80017a8:	f004 f938 	bl	8005a1c <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b01      	ldr	r3, [pc, #4]	@ (80017b8 <Read_Buttons+0x2c>)
 80017b2:	709a      	strb	r2, [r3, #2]
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000f8c 	.word	0x20000f8c
 80017bc:	48000400 	.word	0x48000400

080017c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d0:	d116      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x40>
	{
		if (main_Mode == 0) main_Mode = 1;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x22>
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
		else if (main_Mode == 1) main_Mode = 2;
		else if (main_Mode == 2) main_Mode = 0;
	}
}
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_EXTI_Callback+0x40>
		else if (main_Mode == 1) main_Mode = 2;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d103      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x32>
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_EXTI_Callback+0x40>
		else if (main_Mode == 2) main_Mode = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x40>
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <HAL_GPIO_EXTI_Callback+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000f94 	.word	0x20000f94

08001810 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 8001814:	bf00      	nop
 8001816:	480c      	ldr	r0, [pc, #48]	@ (8001848 <MX_FREERTOS_Init+0x38>)
 8001818:	f008 f9b0 	bl	8009b7c <MPU6050_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	d0f9      	beq.n	8001816 <MX_FREERTOS_Init+0x6>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001822:	217f      	movs	r1, #127	@ 0x7f
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <MX_FREERTOS_Init+0x3c>)
 8001826:	f003 f8db 	bl	80049e0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 80);
 800182a:	2250      	movs	r2, #80	@ 0x50
 800182c:	4908      	ldr	r1, [pc, #32]	@ (8001850 <MX_FREERTOS_Init+0x40>)
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <MX_FREERTOS_Init+0x3c>)
 8001830:	f001 ff5e 	bl	80036f0 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <MX_FREERTOS_Init+0x44>)
 8001836:	2100      	movs	r1, #0
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <MX_FREERTOS_Init+0x48>)
 800183a:	f008 fdc9 	bl	800a3d0 <osThreadNew>
 800183e:	4603      	mov	r3, r0
 8001840:	4a06      	ldr	r2, [pc, #24]	@ (800185c <MX_FREERTOS_Init+0x4c>)
 8001842:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20004af4 	.word	0x20004af4
 800184c:	20000a3c 	.word	0x20000a3c
 8001850:	20000edc 	.word	0x20000edc
 8001854:	0801d358 	.word	0x0801d358
 8001858:	08001861 	.word	0x08001861
 800185c:	20000f98 	.word	0x20000f98

08001860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001864:	b0f0      	sub	sp, #448	@ 0x1c0
 8001866:	af02      	add	r7, sp, #8
 8001868:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800186c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001870:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8001872:	4b91      	ldr	r3, [pc, #580]	@ (8001ab8 <StartDefaultTask+0x258>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <StartDefaultTask+0x25c>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4b91      	ldr	r3, [pc, #580]	@ (8001ac0 <StartDefaultTask+0x260>)
 800187c:	4a91      	ldr	r2, [pc, #580]	@ (8001ac4 <StartDefaultTask+0x264>)
 800187e:	4992      	ldr	r1, [pc, #584]	@ (8001ac8 <StartDefaultTask+0x268>)
 8001880:	2001      	movs	r0, #1
 8001882:	f00e fb61 	bl	800ff48 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001886:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 800188a:	4618      	mov	r0, r3
 800188c:	f00e fa78 	bl	800fd80 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001890:	4b8e      	ldr	r3, [pc, #568]	@ (8001acc <StartDefaultTask+0x26c>)
 8001892:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001896:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad0 <StartDefaultTask+0x270>)
 8001898:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 800189c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad4 <StartDefaultTask+0x274>)
 800189e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80018a2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad8 <StartDefaultTask+0x278>)
 80018a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80018a8:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00e fa75 	bl	800fd9c <rcutils_set_default_allocator>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80018be:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80018c2:	4886      	ldr	r0, [pc, #536]	@ (8001adc <StartDefaultTask+0x27c>)
 80018c4:	f01a f896 	bl	801b9f4 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80018c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018cc:	4884      	ldr	r0, [pc, #528]	@ (8001ae0 <StartDefaultTask+0x280>)
 80018ce:	f004 f8a5 	bl	8005a1c <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 80018d8:	4b82      	ldr	r3, [pc, #520]	@ (8001ae4 <StartDefaultTask+0x284>)
 80018da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	const int timeout_ms = 5000;
 80018de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int executor_num = 3;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 80018ec:	f00f feaa 	bl	8011644 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80018f0:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 80018f4:	f00b fac8 	bl	800ce88 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80018f8:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 80018fc:	f00b fc00 	bl	800d100 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8001900:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 8001904:	f010 f8c4 	bl	8011a90 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8001908:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 800190c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001910:	f5a3 7486 	sub.w	r4, r3, #268	@ 0x10c
 8001914:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001918:	4618      	mov	r0, r3
 800191a:	f00e fa5d 	bl	800fdd8 <rcutils_get_default_allocator>
 800191e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001922:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001926:	461d      	mov	r5, r3
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8001930:	463b      	mov	r3, r7
 8001932:	4618      	mov	r0, r3
 8001934:	f00d fdd6 	bl	800f4e4 <rclc_executor_get_zero_initialized_executor>
 8001938:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800193c:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8001940:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001944:	4611      	mov	r1, r2
 8001946:	2288      	movs	r2, #136	@ 0x88
 8001948:	4618      	mov	r0, r3
 800194a:	f01a fa9c 	bl	801be86 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 800194e:	f00d f86b 	bl	800ea28 <rcl_get_zero_initialized_init_options>
 8001952:	4602      	mov	r2, r0
 8001954:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001958:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800195c:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800195e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001962:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001966:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800196a:	466d      	mov	r5, sp
 800196c:	f103 020c 	add.w	r2, r3, #12
 8001970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001974:	e885 0003 	stmia.w	r5, {r0, r1}
 8001978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197a:	4620      	mov	r0, r4
 800197c:	f00d f856 	bl	800ea2c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 8001980:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001984:	2145      	movs	r1, #69	@ 0x45
 8001986:	4618      	mov	r0, r3
 8001988:	f00d f94c 	bl	800ec24 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800198c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001990:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8001994:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	f00e f8aa 	bl	800faf8 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 80019a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80019a8:	2200      	movs	r2, #0
 80019aa:	4698      	mov	r8, r3
 80019ac:	4691      	mov	r9, r2
 80019ae:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80019b2:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <StartDefaultTask+0x288>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4642      	mov	r2, r8
 80019bc:	464b      	mov	r3, r9
 80019be:	f00e f9a7 	bl	800fd10 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 80019c2:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80019c6:	4a49      	ldr	r2, [pc, #292]	@ (8001aec <StartDefaultTask+0x28c>)
 80019c8:	4949      	ldr	r1, [pc, #292]	@ (8001af0 <StartDefaultTask+0x290>)
 80019ca:	484a      	ldr	r0, [pc, #296]	@ (8001af4 <StartDefaultTask+0x294>)
 80019cc:	f00e f8c8 	bl	800fb60 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 80019d0:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <StartDefaultTask+0x298>)
 80019d2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80019d6:	4947      	ldr	r1, [pc, #284]	@ (8001af4 <StartDefaultTask+0x294>)
 80019d8:	4848      	ldr	r0, [pc, #288]	@ (8001afc <StartDefaultTask+0x29c>)
 80019da:	f00e f931 	bl	800fc40 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 80019de:	4b48      	ldr	r3, [pc, #288]	@ (8001b00 <StartDefaultTask+0x2a0>)
 80019e0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80019e4:	4943      	ldr	r1, [pc, #268]	@ (8001af4 <StartDefaultTask+0x294>)
 80019e6:	4847      	ldr	r0, [pc, #284]	@ (8001b04 <StartDefaultTask+0x2a4>)
 80019e8:	f00e f8f6 	bl	800fbd8 <rclc_publisher_init_default>
	rclc_publisher_init_default(&cmd_vell_publisher, &node, cmd_type_support, "dofdof/cmd_vel");
 80019ec:	4b46      	ldr	r3, [pc, #280]	@ (8001b08 <StartDefaultTask+0x2a8>)
 80019ee:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80019f2:	4940      	ldr	r1, [pc, #256]	@ (8001af4 <StartDefaultTask+0x294>)
 80019f4:	4845      	ldr	r0, [pc, #276]	@ (8001b0c <StartDefaultTask+0x2ac>)
 80019f6:	f00e f8ef 	bl	800fbd8 <rclc_publisher_init_default>
	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 80019fa:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <StartDefaultTask+0x1bc>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8001a02:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <StartDefaultTask+0x2b0>)
 8001a04:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001a08:	493a      	ldr	r1, [pc, #232]	@ (8001af4 <StartDefaultTask+0x294>)
 8001a0a:	4842      	ldr	r0, [pc, #264]	@ (8001b14 <StartDefaultTask+0x2b4>)
 8001a0c:	f00e f94c 	bl	800fca8 <rclc_service_init_default>
		executor_num++;
 8001a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a14:	3301      	adds	r3, #1
 8001a16:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a1a:	e002      	b.n	8001a22 <StartDefaultTask+0x1c2>
	}
	else{
		on_calib = true;
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <StartDefaultTask+0x2b8>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "imu/status");
 8001a22:	4b3e      	ldr	r3, [pc, #248]	@ (8001b1c <StartDefaultTask+0x2bc>)
 8001a24:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a28:	4932      	ldr	r1, [pc, #200]	@ (8001af4 <StartDefaultTask+0x294>)
 8001a2a:	483d      	ldr	r0, [pc, #244]	@ (8001b20 <StartDefaultTask+0x2c0>)
 8001a2c:	f00e f93c 	bl	800fca8 <rclc_service_init_default>

	//create service client

	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8001a30:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a38:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8001a3c:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001a40:	f00d fd5a 	bl	800f4f8 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 8001a44:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001a48:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00d fdc2 	bl	800f5d8 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 8001a54:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <StartDefaultTask+0x20e>
 8001a5c:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001a60:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <StartDefaultTask+0x2c4>)
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <StartDefaultTask+0x2c8>)
 8001a66:	4a31      	ldr	r2, [pc, #196]	@ (8001b2c <StartDefaultTask+0x2cc>)
 8001a68:	492a      	ldr	r1, [pc, #168]	@ (8001b14 <StartDefaultTask+0x2b4>)
 8001a6a:	f00d fddf 	bl	800f62c <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 8001a6e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <StartDefaultTask+0x2d0>)
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4b2f      	ldr	r3, [pc, #188]	@ (8001b34 <StartDefaultTask+0x2d4>)
 8001a78:	4a2f      	ldr	r2, [pc, #188]	@ (8001b38 <StartDefaultTask+0x2d8>)
 8001a7a:	4929      	ldr	r1, [pc, #164]	@ (8001b20 <StartDefaultTask+0x2c0>)
 8001a7c:	f00d fdd6 	bl	800f62c <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 8001a80:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00d fff7 	bl	800fa78 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 8001a8a:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 8001a8e:	f00f f953 	bl	8010d38 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001a92:	4c2a      	ldr	r4, [pc, #168]	@ (8001b3c <StartDefaultTask+0x2dc>)
 8001a94:	463b      	mov	r3, r7
 8001a96:	492a      	ldr	r1, [pc, #168]	@ (8001b40 <StartDefaultTask+0x2e0>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00b fc21 	bl	800d2e0 <micro_ros_string_utilities_init>
 8001a9e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001aa2:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8001aa6:	f104 0308 	add.w	r3, r4, #8
 8001aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f008 fd1f 	bl	800a4f4 <osDelay>
 8001ab6:	e7fb      	b.n	8001ab0 <StartDefaultTask+0x250>
 8001ab8:	08002d45 	.word	0x08002d45
 8001abc:	08002ce1 	.word	0x08002ce1
 8001ac0:	08002cc1 	.word	0x08002cc1
 8001ac4:	08002c95 	.word	0x08002c95
 8001ac8:	20004bb4 	.word	0x20004bb4
 8001acc:	08002421 	.word	0x08002421
 8001ad0:	08002465 	.word	0x08002465
 8001ad4:	0800249d 	.word	0x0800249d
 8001ad8:	08002509 	.word	0x08002509
 8001adc:	0801d28c 	.word	0x0801d28c
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	00989680 	.word	0x00989680
 8001ae8:	080011f9 	.word	0x080011f9
 8001aec:	0801d2b4 	.word	0x0801d2b4
 8001af0:	0801d2b8 	.word	0x0801d2b8
 8001af4:	20000b08 	.word	0x20000b08
 8001af8:	0801d2cc 	.word	0x0801d2cc
 8001afc:	20000b10 	.word	0x20000b10
 8001b00:	0801d2e0 	.word	0x0801d2e0
 8001b04:	20000c58 	.word	0x20000c58
 8001b08:	0801d2e8 	.word	0x0801d2e8
 8001b0c:	20000c90 	.word	0x20000c90
 8001b10:	0801d2f8 	.word	0x0801d2f8
 8001b14:	20000cc8 	.word	0x20000cc8
 8001b18:	20000ed9 	.word	0x20000ed9
 8001b1c:	0801d308 	.word	0x0801d308
 8001b20:	20000e14 	.word	0x20000e14
 8001b24:	080015bd 	.word	0x080015bd
 8001b28:	20000e10 	.word	0x20000e10
 8001b2c:	20000cd0 	.word	0x20000cd0
 8001b30:	0800166d 	.word	0x0800166d
 8001b34:	20000e1c 	.word	0x20000e1c
 8001b38:	20000e18 	.word	0x20000e18
 8001b3c:	20000b18 	.word	0x20000b18
 8001b40:	0801d314 	.word	0x0801d314

08001b44 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b50:	f009 fd12 	bl	800b578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b54:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <pvPortMallocMicroROS+0x17c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b5c:	f000 f986 	bl	8001e6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b60:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <pvPortMallocMicroROS+0x180>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 8090 	bne.w	8001c8e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01e      	beq.n	8001bb2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001b74:	2208      	movs	r2, #8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f023 0307 	bic.w	r3, r3, #7
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	e7fd      	b.n	8001bae <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d06a      	beq.n	8001c8e <pvPortMallocMicroROS+0x14a>
 8001bb8:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <pvPortMallocMicroROS+0x184>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d865      	bhi.n	8001c8e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001bc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <pvPortMallocMicroROS+0x188>)
 8001bc4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001bc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <pvPortMallocMicroROS+0x188>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bcc:	e004      	b.n	8001bd8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d903      	bls.n	8001bea <pvPortMallocMicroROS+0xa6>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f1      	bne.n	8001bce <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bea:	4b35      	ldr	r3, [pc, #212]	@ (8001cc0 <pvPortMallocMicroROS+0x17c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d04c      	beq.n	8001c8e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	4413      	add	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	1ad2      	subs	r2, r2, r3
 8001c0e:	2308      	movs	r3, #8
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d920      	bls.n	8001c58 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	613b      	str	r3, [r7, #16]
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad2      	subs	r2, r2, r3
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c52:	69b8      	ldr	r0, [r7, #24]
 8001c54:	f000 f96c 	bl	8001f30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <pvPortMallocMicroROS+0x184>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <pvPortMallocMicroROS+0x184>)
 8001c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <pvPortMallocMicroROS+0x184>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <pvPortMallocMicroROS+0x18c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d203      	bcs.n	8001c7a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <pvPortMallocMicroROS+0x184>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <pvPortMallocMicroROS+0x18c>)
 8001c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <pvPortMallocMicroROS+0x180>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c8e:	f009 fc81 	bl	800b594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	60fb      	str	r3, [r7, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3728      	adds	r7, #40	@ 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20004ae4 	.word	0x20004ae4
 8001cc4:	20004af0 	.word	0x20004af0
 8001cc8:	20004ae8 	.word	0x20004ae8
 8001ccc:	20004adc 	.word	0x20004adc
 8001cd0:	20004aec 	.word	0x20004aec

08001cd4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d04a      	beq.n	8001d7c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	425b      	negs	r3, r3
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <vPortFreeMicroROS+0xb0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <vPortFreeMicroROS+0x46>
	__asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	60fb      	str	r3, [r7, #12]
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <vPortFreeMicroROS+0x66>
	__asm volatile
 8001d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	60bb      	str	r3, [r7, #8]
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	e7fd      	b.n	8001d36 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <vPortFreeMicroROS+0xb0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d115      	bne.n	8001d7c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <vPortFreeMicroROS+0xb0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d60:	f009 fc0a 	bl	800b578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <vPortFreeMicroROS+0xb4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <vPortFreeMicroROS+0xb4>)
 8001d70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f000 f8dc 	bl	8001f30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d78:	f009 fc0c 	bl	800b594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20004af0 	.word	0x20004af0
 8001d88:	20004ae8 	.word	0x20004ae8

08001d8c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <getBlockSize+0x38>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

	return count;
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20004af0 	.word	0x20004af0

08001dc8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001dd2:	f009 fbd1 	bl	800b578 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7ff feb4 	bl	8001b44 <pvPortMallocMicroROS>
 8001ddc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d017      	beq.n	8001e14 <pvPortReallocMicroROS+0x4c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d014      	beq.n	8001e14 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffce 	bl	8001d8c <getBlockSize>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2208      	movs	r2, #8
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d201      	bcs.n	8001e04 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f01a f83c 	bl	801be86 <memcpy>

		vPortFreeMicroROS(pv);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff60 	bl	8001cd4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001e14:	f009 fbbe 	bl	800b594 <xTaskResumeAll>

	return newmem;
 8001e18:	68bb      	ldr	r3, [r7, #8]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001e2c:	f009 fba4 	bl	800b578 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff fe82 	bl	8001b44 <pvPortMallocMicroROS>
 8001e40:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e46:	e004      	b.n	8001e52 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	613a      	str	r2, [r7, #16]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	617a      	str	r2, [r7, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f5      	bne.n	8001e48 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e5c:	f009 fb9a 	bl	800b594 <xTaskResumeAll>
  	return mem;
 8001e60:	68fb      	ldr	r3, [r7, #12]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <prvHeapInit+0xac>)
 8001e7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3307      	adds	r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <prvHeapInit+0xac>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <prvHeapInit+0xb0>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <prvHeapInit+0xb0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001eb8:	2208      	movs	r2, #8
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0307 	bic.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <prvHeapInit+0xb4>)
 8001ecc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <prvHeapInit+0xb4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <prvHeapInit+0xb4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <prvHeapInit+0xb4>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <prvHeapInit+0xb8>)
 8001efa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <prvHeapInit+0xbc>)
 8001f02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <prvHeapInit+0xc0>)
 8001f06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f0a:	601a      	str	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20003edc 	.word	0x20003edc
 8001f1c:	20004adc 	.word	0x20004adc
 8001f20:	20004ae4 	.word	0x20004ae4
 8001f24:	20004aec 	.word	0x20004aec
 8001f28:	20004ae8 	.word	0x20004ae8
 8001f2c:	20004af0 	.word	0x20004af0

08001f30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <prvInsertBlockIntoFreeList+0xac>)
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e002      	b.n	8001f44 <prvInsertBlockIntoFreeList+0x14>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d8f7      	bhi.n	8001f3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d108      	bne.n	8001f72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d118      	bne.n	8001fb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d00d      	beq.n	8001fae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e008      	b.n	8001fc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e003      	b.n	8001fc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d002      	beq.n	8001fce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20004adc 	.word	0x20004adc
 8001fe0:	20004ae4 	.word	0x20004ae4

08001fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MX_DMA_Init+0x70>)
 8001fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fee:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <MX_DMA_Init+0x70>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <MX_DMA_Init+0x70>)
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <MX_DMA_Init+0x70>)
 8002004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002006:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <MX_DMA_Init+0x70>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6493      	str	r3, [r2, #72]	@ 0x48
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_DMA_Init+0x70>)
 8002010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2105      	movs	r1, #5
 800201e:	200b      	movs	r0, #11
 8002020:	f002 ff32 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002024:	200b      	movs	r0, #11
 8002026:	f002 ff49 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	200c      	movs	r0, #12
 8002030:	f002 ff2a 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002034:	200c      	movs	r0, #12
 8002036:	f002 ff41 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2105      	movs	r1, #5
 800203e:	200d      	movs	r0, #13
 8002040:	f002 ff22 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002044:	200d      	movs	r0, #13
 8002046:	f002 ff39 	bl	8004ebc <HAL_NVIC_EnableIRQ>

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <MX_GPIO_Init+0x108>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4a3b      	ldr	r2, [pc, #236]	@ (8002160 <MX_GPIO_Init+0x108>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207a:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <MX_GPIO_Init+0x108>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002086:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <MX_GPIO_Init+0x108>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a35      	ldr	r2, [pc, #212]	@ (8002160 <MX_GPIO_Init+0x108>)
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <MX_GPIO_Init+0x108>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	4a29      	ldr	r2, [pc, #164]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c2:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <MX_GPIO_Init+0x108>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2120      	movs	r1, #32
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d6:	f003 fcb9 	bl	8005a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	481c      	ldr	r0, [pc, #112]	@ (8002164 <MX_GPIO_Init+0x10c>)
 80020f2:	f003 fa2f 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020f6:	2320      	movs	r3, #32
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002110:	f003 fa20 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 8002114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212c:	f003 fa12 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C_Pin;
 8002130:	2320      	movs	r3, #32
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <MX_GPIO_Init+0x110>)
 8002144:	f003 fa06 	bl	8005554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2105      	movs	r1, #5
 800214c:	2028      	movs	r0, #40	@ 0x28
 800214e:	f002 fe9b 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002152:	2028      	movs	r0, #40	@ 0x28
 8002154:	f002 feb2 	bl	8004ebc <HAL_NVIC_EnableIRQ>

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	@ 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	48000800 	.word	0x48000800
 8002168:	48000400 	.word	0x48000400

0800216c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <MX_I2C1_Init+0x74>)
 8002172:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <MX_I2C1_Init+0x78>)
 8002174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x8061D1FF;
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <MX_I2C1_Init+0x74>)
 8002178:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <MX_I2C1_Init+0x7c>)
 800217a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <MX_I2C1_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <MX_I2C1_Init+0x74>)
 8002184:	2201      	movs	r2, #1
 8002186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_I2C1_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <MX_I2C1_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <MX_I2C1_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_I2C1_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <MX_I2C1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a6:	480e      	ldr	r0, [pc, #56]	@ (80021e0 <MX_I2C1_Init+0x74>)
 80021a8:	f003 fc9a 	bl	8005ae0 <HAL_I2C_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021b2:	f000 f92f 	bl	8002414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021b6:	2100      	movs	r1, #0
 80021b8:	4809      	ldr	r0, [pc, #36]	@ (80021e0 <MX_I2C1_Init+0x74>)
 80021ba:	f004 fa57 	bl	800666c <HAL_I2CEx_ConfigAnalogFilter>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021c4:	f000 f926 	bl	8002414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021c8:	2100      	movs	r1, #0
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <MX_I2C1_Init+0x74>)
 80021cc:	f004 fa99 	bl	8006702 <HAL_I2CEx_ConfigDigitalFilter>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f000 f91d 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20004af4 	.word	0x20004af4
 80021e4:	40005400 	.word	0x40005400
 80021e8:	8061d1ff 	.word	0x8061d1ff

080021ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b09e      	sub	sp, #120	@ 0x78
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2254      	movs	r2, #84	@ 0x54
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f019 fd71 	bl	801bcf4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1f      	ldr	r2, [pc, #124]	@ (8002294 <HAL_I2C_MspInit+0xa8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d136      	bne.n	800228a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800221c:	2340      	movs	r3, #64	@ 0x40
 800221e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f005 f929 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002234:	f000 f8ee 	bl	8002414 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002250:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002254:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002262:	2304      	movs	r3, #4
 8002264:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800226a:	4619      	mov	r1, r3
 800226c:	480b      	ldr	r0, [pc, #44]	@ (800229c <HAL_I2C_MspInit+0xb0>)
 800226e:	f003 f971 	bl	8005554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800227c:	6593      	str	r3, [r2, #88]	@ 0x58
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_I2C_MspInit+0xac>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3778      	adds	r7, #120	@ 0x78
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40005400 	.word	0x40005400
 8002298:	40021000 	.word	0x40021000
 800229c:	48000400 	.word	0x48000400

080022a0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_I2C_MspDeInit+0x3c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10f      	bne.n	80022d2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_I2C_MspDeInit+0x40>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <HAL_I2C_MspDeInit+0x40>)
 80022b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80022be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c2:	4808      	ldr	r0, [pc, #32]	@ (80022e4 <HAL_I2C_MspDeInit+0x44>)
 80022c4:	f003 fac8 	bl	8005858 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80022c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022cc:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <HAL_I2C_MspDeInit+0x44>)
 80022ce:	f003 fac3 	bl	8005858 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40005400 	.word	0x40005400
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000400 	.word	0x48000400

080022e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <MX_IWDG_Init+0x34>)
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <MX_IWDG_Init+0x38>)
 80022f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <MX_IWDG_Init+0x34>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <MX_IWDG_Init+0x34>)
 80022fa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80022fe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_IWDG_Init+0x34>)
 8002302:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002306:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	@ (800231c <MX_IWDG_Init+0x34>)
 800230a:	f004 fa46 	bl	800679a <HAL_IWDG_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002314:	f000 f87e 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20004b48 	.word	0x20004b48
 8002320:	40003000 	.word	0x40003000

08002324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002328:	f000 fd89 	bl	8002e3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232c:	f000 f814 	bl	8002358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002330:	f7ff fe92 	bl	8002058 <MX_GPIO_Init>
  MX_DMA_Init();
 8002334:	f7ff fe56 	bl	8001fe4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002338:	f7fe fe0e 	bl	8000f58 <MX_ADC1_Init>
  MX_IWDG_Init();
 800233c:	f7ff ffd4 	bl	80022e8 <MX_IWDG_Init>
  MX_LPUART1_UART_Init();
 8002340:	f000 fba0 	bl	8002a84 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002344:	f7ff ff12 	bl	800216c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002348:	f007 fff8 	bl	800a33c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800234c:	f7ff fa60 	bl	8001810 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002350:	f008 f818 	bl	800a384 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <main+0x30>

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b094      	sub	sp, #80	@ 0x50
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0318 	add.w	r3, r7, #24
 8002362:	2238      	movs	r2, #56	@ 0x38
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f019 fcc4 	bl	801bcf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800237a:	2000      	movs	r0, #0
 800237c:	f004 fa6c 	bl	8006858 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002380:	2309      	movs	r3, #9
 8002382:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002388:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800238a:	2301      	movs	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238e:	2302      	movs	r3, #2
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002392:	2303      	movs	r3, #3
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8002396:	2306      	movs	r3, #6
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800239a:	2355      	movs	r3, #85	@ 0x55
 800239c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023a2:	2302      	movs	r3, #2
 80023a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023a6:	2302      	movs	r3, #2
 80023a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023aa:	f107 0318 	add.w	r3, r7, #24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 fb06 	bl	80069c0 <HAL_RCC_OscConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023ba:	f000 f82b 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023be:	230f      	movs	r3, #15
 80023c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c2:	2303      	movs	r3, #3
 80023c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	2104      	movs	r1, #4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fe04 	bl	8006fe4 <HAL_RCC_ClockConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80023e2:	f000 f817 	bl	8002414 <Error_Handler>
  }
}
 80023e6:	bf00      	nop
 80023e8:	3750      	adds	r7, #80	@ 0x50
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002402:	f000 fd35 	bl	8002e70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40012c00 	.word	0x40012c00

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <Error_Handler+0x8>

08002420 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <microros_allocate+0x3c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <microros_allocate+0x3c>)
 8002438:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <microros_allocate+0x40>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <microros_allocate+0x40>)
 8002448:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fb7a 	bl	8001b44 <pvPortMallocMicroROS>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20004b58 	.word	0x20004b58
 8002460:	20004b5c 	.word	0x20004b5c

08002464 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fc89 	bl	8001d8c <getBlockSize>
 800247a:	4603      	mov	r3, r0
 800247c:	4a06      	ldr	r2, [pc, #24]	@ (8002498 <microros_deallocate+0x34>)
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	461a      	mov	r2, r3
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <microros_deallocate+0x34>)
 8002486:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fc23 	bl	8001cd4 <vPortFreeMicroROS>
  }
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20004b5c 	.word	0x20004b5c

0800249c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <microros_reallocate+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4413      	add	r3, r2
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <microros_reallocate+0x64>)
 80024b6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <microros_reallocate+0x68>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4413      	add	r3, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <microros_reallocate+0x68>)
 80024c6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7ff fb38 	bl	8001b44 <pvPortMallocMicroROS>
 80024d4:	4603      	mov	r3, r0
 80024d6:	e00e      	b.n	80024f6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff fc57 	bl	8001d8c <getBlockSize>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <microros_reallocate+0x68>)
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <microros_reallocate+0x68>)
 80024ea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff fc6a 	bl	8001dc8 <pvPortReallocMicroROS>
 80024f4:	4603      	mov	r3, r0
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20004b58 	.word	0x20004b58
 8002504:	20004b5c 	.word	0x20004b5c

08002508 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	4a0c      	ldr	r2, [pc, #48]	@ (8002550 <microros_zero_allocate+0x48>)
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	461a      	mov	r2, r3
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <microros_zero_allocate+0x48>)
 8002526:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <microros_zero_allocate+0x4c>)
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	4413      	add	r3, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <microros_zero_allocate+0x4c>)
 800253a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7ff fc6f 	bl	8001e22 <pvPortCallocMicroROS>
 8002544:	4603      	mov	r3, r0
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20004b58 	.word	0x20004b58
 8002554:	20004b5c 	.word	0x20004b5c

08002558 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800256a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800256e:	a320      	add	r3, pc, #128	@ (adr r3, 80025f0 <UTILS_NanosecondsToTimespec+0x98>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe fb28 	bl	8000bc8 <__aeabi_ldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002586:	a31a      	add	r3, pc, #104	@ (adr r3, 80025f0 <UTILS_NanosecondsToTimespec+0x98>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe fb1c 	bl	8000bc8 <__aeabi_ldivmod>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	da20      	bge.n	80025de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <UTILS_NanosecondsToTimespec+0x90>)
 80025a2:	fb82 1203 	smull	r1, r2, r2, r3
 80025a6:	1712      	asrs	r2, r2, #28
 80025a8:	17db      	asrs	r3, r3, #31
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	17c8      	asrs	r0, r1, #31
 80025ba:	460c      	mov	r4, r1
 80025bc:	4605      	mov	r5, r0
 80025be:	ebb2 0804 	subs.w	r8, r2, r4
 80025c2:	eb63 0905 	sbc.w	r9, r3, r5
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4906      	ldr	r1, [pc, #24]	@ (80025ec <UTILS_NanosecondsToTimespec+0x94>)
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
    }
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025e8:	44b82fa1 	.word	0x44b82fa1
 80025ec:	3b9aca00 	.word	0x3b9aca00
 80025f0:	3b9aca00 	.word	0x3b9aca00
 80025f4:	00000000 	.word	0x00000000

080025f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b08e      	sub	sp, #56	@ 0x38
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24
 8002602:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002604:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002608:	2300      	movs	r3, #0
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800261a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800261e:	4618      	mov	r0, r3
 8002620:	f009 fa34 	bl	800ba8c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	17da      	asrs	r2, r3, #31
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	61fa      	str	r2, [r7, #28]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	000b      	movs	r3, r1
 8002638:	2200      	movs	r2, #0
 800263a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800263e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002640:	2200      	movs	r2, #0
 8002642:	461c      	mov	r4, r3
 8002644:	4615      	mov	r5, r2
 8002646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800264a:	1911      	adds	r1, r2, r4
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	416b      	adcs	r3, r5
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002656:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800265a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	f04f 0400 	mov.w	r4, #0
 8002666:	f04f 0500 	mov.w	r5, #0
 800266a:	015d      	lsls	r5, r3, #5
 800266c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002670:	0154      	lsls	r4, r2, #5
 8002672:	4622      	mov	r2, r4
 8002674:	462b      	mov	r3, r5
 8002676:	ebb2 0800 	subs.w	r8, r2, r0
 800267a:	eb63 0901 	sbc.w	r9, r3, r1
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800268a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800268e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002692:	4690      	mov	r8, r2
 8002694:	4699      	mov	r9, r3
 8002696:	eb18 0a00 	adds.w	sl, r8, r0
 800269a:	eb49 0b01 	adc.w	fp, r9, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b2:	ebb2 040a 	subs.w	r4, r2, sl
 80026b6:	603c      	str	r4, [r7, #0]
 80026b8:	eb63 030b 	sbc.w	r3, r3, fp
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c2:	4623      	mov	r3, r4
 80026c4:	181b      	adds	r3, r3, r0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	462b      	mov	r3, r5
 80026ca:	eb41 0303 	adc.w	r3, r1, r3
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026d6:	f7ff ff3f 	bl	8002558 <UTILS_NanosecondsToTimespec>

    return 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	3738      	adds	r7, #56	@ 0x38
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_MspInit+0x50>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_MspInit+0x50>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <HAL_MspInit+0x50>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_MspInit+0x50>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	4a0b      	ldr	r2, [pc, #44]	@ (8002738 <HAL_MspInit+0x50>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002710:	6593      	str	r3, [r2, #88]	@ 0x58
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_MspInit+0x50>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	210f      	movs	r1, #15
 8002722:	f06f 0001 	mvn.w	r0, #1
 8002726:	f002 fbaf 	bl	8004e88 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800272a:	f004 f939 	bl	80069a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08c      	sub	sp, #48	@ 0x30
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800274c:	4b2c      	ldr	r3, [pc, #176]	@ (8002800 <HAL_InitTick+0xc4>)
 800274e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002750:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_InitTick+0xc4>)
 8002752:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002756:	6613      	str	r3, [r2, #96]	@ 0x60
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_InitTick+0xc4>)
 800275a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fe0e 	bl	8007390 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002774:	f004 fdf6 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8002778:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <HAL_InitTick+0xc8>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	3b01      	subs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002788:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <HAL_InitTick+0xcc>)
 800278a:	4a20      	ldr	r2, [pc, #128]	@ (800280c <HAL_InitTick+0xd0>)
 800278c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_InitTick+0xcc>)
 8002790:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002794:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002796:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <HAL_InitTick+0xcc>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_InitTick+0xcc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_InitTick+0xcc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80027a8:	4817      	ldr	r0, [pc, #92]	@ (8002808 <HAL_InitTick+0xcc>)
 80027aa:	f005 f8b7 	bl	800791c <HAL_TIM_Base_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80027b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11b      	bne.n	80027f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80027bc:	4812      	ldr	r0, [pc, #72]	@ (8002808 <HAL_InitTick+0xcc>)
 80027be:	f005 f90f 	bl	80079e0 <HAL_TIM_Base_Start_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80027c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d111      	bne.n	80027f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027d0:	2019      	movs	r0, #25
 80027d2:	f002 fb73 	bl	8004ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d808      	bhi.n	80027ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80027dc:	2200      	movs	r2, #0
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	2019      	movs	r0, #25
 80027e2:	f002 fb51 	bl	8004e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <HAL_InitTick+0xd4>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e002      	b.n	80027f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3730      	adds	r7, #48	@ 0x30
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	431bde83 	.word	0x431bde83
 8002808:	20004b60 	.word	0x20004b60
 800280c:	40012c00 	.word	0x40012c00
 8002810:	20000008 	.word	0x20000008

08002814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <NMI_Handler+0x4>

0800281c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <MemManage_Handler+0x4>

0800282c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <BusFault_Handler+0x4>

08002834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <UsageFault_Handler+0x4>

0800283c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Channel1_IRQHandler+0x10>)
 8002852:	f002 fd24 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000aa8 	.word	0x20000aa8

08002860 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <DMA1_Channel2_IRQHandler+0x10>)
 8002866:	f002 fd1a 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20004c48 	.word	0x20004c48

08002874 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <DMA1_Channel3_IRQHandler+0x10>)
 800287a:	f002 fd10 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20004ca8 	.word	0x20004ca8

08002888 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <ADC1_2_IRQHandler+0x10>)
 800288e:	f001 f803 	bl	8003898 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000a3c 	.word	0x20000a3c

0800289c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80028a2:	f005 f915 	bl	8007ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20004b60 	.word	0x20004b60

080028b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80028b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028b8:	f003 f8fa 	bl	8005ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80028c4:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <LPUART1_IRQHandler+0x10>)
 80028c6:	f005 fd27 	bl	8008318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20004bb4 	.word	0x20004bb4

080028d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return 1;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_kill>:

int _kill(int pid, int sig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028ee:	f019 fa95 	bl	801be1c <__errno>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2216      	movs	r2, #22
 80028f6:	601a      	str	r2, [r3, #0]
  return -1;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_exit>:

void _exit (int status)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800290c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ffe7 	bl	80028e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002916:	bf00      	nop
 8002918:	e7fd      	b.n	8002916 <_exit+0x12>

0800291a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00a      	b.n	8002942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800292c:	f3af 8000 	nop.w
 8002930:	4601      	mov	r1, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	60ba      	str	r2, [r7, #8]
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	dbf0      	blt.n	800292c <_read+0x12>
  }

  return len;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e009      	b.n	800297a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	60ba      	str	r2, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	dbf1      	blt.n	8002966 <_write+0x12>
  }
  return len;
 8002982:	687b      	ldr	r3, [r7, #4]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_close>:

int _close(int file)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b4:	605a      	str	r2, [r3, #4]
  return 0;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_isatty>:

int _isatty(int file)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029fc:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <_sbrk+0x5c>)
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <_sbrk+0x60>)
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <_sbrk+0x64>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <_sbrk+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d207      	bcs.n	8002a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a24:	f019 f9fa 	bl	801be1c <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a32:	e009      	b.n	8002a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <_sbrk+0x64>)
 8002a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20020000 	.word	0x20020000
 8002a54:	00000400 	.word	0x00000400
 8002a58:	20004bb0 	.word	0x20004bb0
 8002a5c:	2000bf90 	.word	0x2000bf90

08002a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <SystemInit+0x20>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <SystemInit+0x20>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002a8a:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <MX_LPUART1_UART_Init+0x8c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002a90:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <MX_LPUART1_UART_Init+0x90>)
 8002a92:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ac4:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002ac6:	f005 fa75 	bl	8007fb4 <HAL_UART_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002ad0:	f7ff fca0 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002ad8:	f006 ff85 	bl	80099e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002ae2:	f7ff fc97 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002aea:	f006 ffba 	bl	8009a62 <HAL_UARTEx_SetRxFifoThreshold>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002af4:	f7ff fc8e 	bl	8002414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	@ (8002b0c <MX_LPUART1_UART_Init+0x88>)
 8002afa:	f006 ff3b 	bl	8009974 <HAL_UARTEx_DisableFifoMode>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002b04:	f7ff fc86 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20004bb4 	.word	0x20004bb4
 8002b10:	40008000 	.word	0x40008000
 8002b14:	001e8480 	.word	0x001e8480

08002b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b09e      	sub	sp, #120	@ 0x78
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	2254      	movs	r2, #84	@ 0x54
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f019 f8db 	bl	801bcf4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a4e      	ldr	r2, [pc, #312]	@ (8002c7c <HAL_UART_MspInit+0x164>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f040 8094 	bne.w	8002c72 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fc92 	bl	8007480 <HAL_RCCEx_PeriphCLKConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b62:	f7ff fc57 	bl	8002414 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b66:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	4a45      	ldr	r2, [pc, #276]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	4a3f      	ldr	r2, [pc, #252]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <HAL_UART_MspInit+0x168>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002b96:	230c      	movs	r3, #12
 8002b98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb4:	f002 fcce 	bl	8005554 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bba:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <HAL_UART_MspInit+0x170>)
 8002bbc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bc0:	2222      	movs	r2, #34	@ 0x22
 8002bc2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bca:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bdc:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002be2:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002be4:	2220      	movs	r2, #32
 8002be6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002be8:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bea:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002bee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002bf0:	4824      	ldr	r0, [pc, #144]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002bf2:	f002 f971 	bl	8004ed8 <HAL_DMA_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002bfc:	f7ff fc0a 	bl	8002414 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002c08:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <HAL_UART_MspInit+0x16c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c10:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_UART_MspInit+0x178>)
 8002c12:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c16:	2223      	movs	r2, #35	@ 0x23
 8002c18:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c28:	2280      	movs	r2, #128	@ 0x80
 8002c2a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c2c:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c32:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c40:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002c44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002c46:	4811      	ldr	r0, [pc, #68]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c48:	f002 f946 	bl	8004ed8 <HAL_DMA_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8002c52:	f7ff fbdf 	bl	8002414 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c5a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <HAL_UART_MspInit+0x174>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2105      	movs	r1, #5
 8002c66:	205b      	movs	r0, #91	@ 0x5b
 8002c68:	f002 f90e 	bl	8004e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c6c:	205b      	movs	r0, #91	@ 0x5b
 8002c6e:	f002 f925 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002c72:	bf00      	nop
 8002c74:	3778      	adds	r7, #120	@ 0x78
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40008000 	.word	0x40008000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	20004c48 	.word	0x20004c48
 8002c88:	4002001c 	.word	0x4002001c
 8002c8c:	20004ca8 	.word	0x20004ca8
 8002c90:	40020030 	.word	0x40020030

08002c94 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ca2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ca4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ca8:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <cubemx_transport_open+0x28>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f005 fa52 	bl	8008154 <HAL_UART_Receive_DMA>
    return true;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20004d08 	.word	0x20004d08

08002cc0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002cce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f005 fa8b 	bl	80081ec <HAL_UART_DMAStop>
    return true;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002cf4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d11b      	bne.n	8002d38 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f005 f9a3 	bl	8008054 <HAL_UART_Transmit_DMA>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002d12:	e002      	b.n	8002d1a <cubemx_transport_write+0x3a>
            osDelay(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f007 fbed 	bl	800a4f4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <cubemx_transport_write+0x4a>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d1f4      	bne.n	8002d14 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <cubemx_transport_write+0x54>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	e002      	b.n	8002d3a <cubemx_transport_write+0x5a>
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002d38:	2300      	movs	r3, #0
    }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002d58:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5e:	b672      	cpsid	i
}
 8002d60:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002d70:	4a1b      	ldr	r2, [pc, #108]	@ (8002de0 <cubemx_transport_read+0x9c>)
 8002d72:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d74:	b662      	cpsie	i
}
 8002d76:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f007 fbb8 	bl	800a4f4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002d84:	4b17      	ldr	r3, [pc, #92]	@ (8002de4 <cubemx_transport_read+0xa0>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <cubemx_transport_read+0x9c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d103      	bne.n	8002d98 <cubemx_transport_read+0x54>
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbe2      	blt.n	8002d5e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002d9c:	e011      	b.n	8002dc2 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <cubemx_transport_read+0xa0>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	440b      	add	r3, r1
 8002da8:	490f      	ldr	r1, [pc, #60]	@ (8002de8 <cubemx_transport_read+0xa4>)
 8002daa:	5c8a      	ldrb	r2, [r1, r2]
 8002dac:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <cubemx_transport_read+0xa0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db8:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <cubemx_transport_read+0xa0>)
 8002dba:	6013      	str	r3, [r2, #0]
        wrote++;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <cubemx_transport_read+0xa0>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <cubemx_transport_read+0x9c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d003      	beq.n	8002dd6 <cubemx_transport_read+0x92>
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3e3      	bcc.n	8002d9e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000550c 	.word	0x2000550c
 8002de4:	20005508 	.word	0x20005508
 8002de8:	20004d08 	.word	0x20004d08

08002dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dec:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002df0:	f7ff fe36 	bl	8002a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df4:	480c      	ldr	r0, [pc, #48]	@ (8002e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002df6:	490d      	ldr	r1, [pc, #52]	@ (8002e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <LoopForever+0xe>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e38 <LoopForever+0x16>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e1a:	f019 f805 	bl	801be28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e1e:	f7ff fa81 	bl	8002324 <main>

08002e22 <LoopForever>:

LoopForever:
    b LoopForever
 8002e22:	e7fe      	b.n	8002e22 <LoopForever>
  ldr   r0, =_estack
 8002e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e2c:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8002e30:	0801ecb8 	.word	0x0801ecb8
  ldr r2, =_sbss
 8002e34:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8002e38:	2000bf8c 	.word	0x2000bf8c

08002e3c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e3c:	e7fe      	b.n	8002e3c <ADC3_IRQHandler>

08002e3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e48:	2003      	movs	r0, #3
 8002e4a:	f002 f812 	bl	8004e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e4e:	200f      	movs	r0, #15
 8002e50:	f7ff fc74 	bl	800273c <HAL_InitTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	71fb      	strb	r3, [r7, #7]
 8002e5e:	e001      	b.n	8002e64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e60:	f7ff fc42 	bl	80026e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e64:	79fb      	ldrb	r3, [r7, #7]

}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_IncTick+0x1c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a03      	ldr	r2, [pc, #12]	@ (8002e8c <HAL_IncTick+0x1c>)
 8002e80:	6013      	str	r3, [r2, #0]
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	20005510 	.word	0x20005510
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	@ (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20005510 	.word	0x20005510

08002eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3360      	adds	r3, #96	@ 0x60
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <LL_ADC_SetOffset+0x44>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	03fff000 	.word	0x03fff000

08002f5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3360      	adds	r3, #96	@ 0x60
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3360      	adds	r3, #96	@ 0x60
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3360      	adds	r3, #96	@ 0x60
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3360      	adds	r3, #96	@ 0x60
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	615a      	str	r2, [r3, #20]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3330      	adds	r3, #48	@ 0x30
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	211f      	movs	r1, #31
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 011f 	and.w	r1, r3, #31
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3314      	adds	r3, #20
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0e5b      	lsrs	r3, r3, #25
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	0d1b      	lsrs	r3, r3, #20
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2107      	movs	r1, #7
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0d1b      	lsrs	r3, r3, #20
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0318 	and.w	r3, r3, #24
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003170:	40d9      	lsrs	r1, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	400b      	ands	r3, r1
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	0007ffff 	.word	0x0007ffff

08003194 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 031f 	and.w	r3, r3, #31
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80031dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6093      	str	r3, [r2, #8]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003204:	d101      	bne.n	800320a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800322c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003254:	d101      	bne.n	800325a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a4:	f043 0202 	orr.w	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_IsEnabled+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_IsEnabled+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_IsDisableOngoing+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_IsDisableOngoing+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d101      	bne.n	8003344 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b08      	cmp	r3, #8
 8003364:	d101      	bne.n	800336a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e1a9      	b.n	80036e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fe61 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff19 	bl	80031f0 <LL_ADC_IsDeepPowerDownEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff feff 	bl	80031cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff34 	bl	8003240 <LL_ADC_IsInternalRegulatorEnabled>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ff18 	bl	8003218 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4b9c      	ldr	r3, [pc, #624]	@ (800365c <HAL_ADC_Init+0x2e4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	4a9c      	ldr	r2, [pc, #624]	@ (8003660 <HAL_ADC_Init+0x2e8>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033fc:	e002      	b.n	8003404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f9      	bne.n	80033fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff16 	bl	8003240 <LL_ADC_IsInternalRegulatorEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff76 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 8003440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8142 	bne.w	80036d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 813e 	bne.w	80036d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003460:	f043 0202 	orr.w	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff23 	bl	80032b8 <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d141      	bne.n	80034fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003480:	d004      	beq.n	800348c <HAL_ADC_Init+0x114>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a77      	ldr	r2, [pc, #476]	@ (8003664 <HAL_ADC_Init+0x2ec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10f      	bne.n	80034ac <HAL_ADC_Init+0x134>
 800348c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003490:	f7ff ff12 	bl	80032b8 <LL_ADC_IsEnabled>
 8003494:	4604      	mov	r4, r0
 8003496:	4873      	ldr	r0, [pc, #460]	@ (8003664 <HAL_ADC_Init+0x2ec>)
 8003498:	f7ff ff0e 	bl	80032b8 <LL_ADC_IsEnabled>
 800349c:	4603      	mov	r3, r0
 800349e:	4323      	orrs	r3, r4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e012      	b.n	80034d2 <HAL_ADC_Init+0x15a>
 80034ac:	486e      	ldr	r0, [pc, #440]	@ (8003668 <HAL_ADC_Init+0x2f0>)
 80034ae:	f7ff ff03 	bl	80032b8 <LL_ADC_IsEnabled>
 80034b2:	4604      	mov	r4, r0
 80034b4:	486d      	ldr	r0, [pc, #436]	@ (800366c <HAL_ADC_Init+0x2f4>)
 80034b6:	f7ff feff 	bl	80032b8 <LL_ADC_IsEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	431c      	orrs	r4, r3
 80034be:	486c      	ldr	r0, [pc, #432]	@ (8003670 <HAL_ADC_Init+0x2f8>)
 80034c0:	f7ff fefa 	bl	80032b8 <LL_ADC_IsEnabled>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4323      	orrs	r3, r4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034de:	d004      	beq.n	80034ea <HAL_ADC_Init+0x172>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003664 <HAL_ADC_Init+0x2ec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_Init+0x176>
 80034ea:	4a62      	ldr	r2, [pc, #392]	@ (8003674 <HAL_ADC_Init+0x2fc>)
 80034ec:	e000      	b.n	80034f0 <HAL_ADC_Init+0x178>
 80034ee:	4a62      	ldr	r2, [pc, #392]	@ (8003678 <HAL_ADC_Init+0x300>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f7ff fcd8 	bl	8002eac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7f5b      	ldrb	r3, [r3, #29]
 8003500:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003506:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800350c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003512:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800351a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003526:	2b01      	cmp	r3, #1
 8003528:	d106      	bne.n	8003538 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	045b      	lsls	r3, r3, #17
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	4b48      	ldr	r3, [pc, #288]	@ (800367c <HAL_ADC_Init+0x304>)
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	430b      	orrs	r3, r1
 8003566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fee5 	bl	8003352 <LL_ADC_INJ_IsConversionOngoing>
 8003588:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d17f      	bne.n	8003690 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d17c      	bne.n	8003690 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800359a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035b2:	f023 0302 	bic.w	r3, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	69b9      	ldr	r1, [r7, #24]
 80035bc:	430b      	orrs	r3, r1
 80035be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d017      	beq.n	80035f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6911      	ldr	r1, [r2, #16]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80035f6:	e013      	b.n	8003620 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003618:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800361c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003626:	2b01      	cmp	r3, #1
 8003628:	d12a      	bne.n	8003680 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800364c:	430a      	orrs	r2, r1
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	e019      	b.n	8003690 <HAL_ADC_Init+0x318>
 800365c:	20000004 	.word	0x20000004
 8003660:	053e2d63 	.word	0x053e2d63
 8003664:	50000100 	.word	0x50000100
 8003668:	50000400 	.word	0x50000400
 800366c:	50000500 	.word	0x50000500
 8003670:	50000600 	.word	0x50000600
 8003674:	50000300 	.word	0x50000300
 8003678:	50000700 	.word	0x50000700
 800367c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f023 010f 	bic.w	r1, r3, #15
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b0:	e007      	b.n	80036c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 020f 	bic.w	r2, r2, #15
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036d2:	e007      	b.n	80036e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	f043 0210 	orr.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	@ 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	bf00      	nop

080036f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003704:	d004      	beq.n	8003710 <HAL_ADC_Start_DMA+0x20>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_ADC_Start_DMA+0x184>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_ADC_Start_DMA+0x24>
 8003710:	4b59      	ldr	r3, [pc, #356]	@ (8003878 <HAL_ADC_Start_DMA+0x188>)
 8003712:	e000      	b.n	8003716 <HAL_ADC_Start_DMA+0x26>
 8003714:	4b59      	ldr	r3, [pc, #356]	@ (800387c <HAL_ADC_Start_DMA+0x18c>)
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fd3c 	bl	8003194 <LL_ADC_GetMultimode>
 800371c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fe02 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 809b 	bne.w	8003866 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_ADC_Start_DMA+0x4e>
 800373a:	2302      	movs	r3, #2
 800373c:	e096      	b.n	800386c <HAL_ADC_Start_DMA+0x17c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4d      	ldr	r2, [pc, #308]	@ (8003880 <HAL_ADC_Start_DMA+0x190>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d008      	beq.n	8003762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d002      	beq.n	8003762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b09      	cmp	r3, #9
 8003760:	d17a      	bne.n	8003858 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 ff60 	bl	8004628 <ADC_Enable>
 8003768:	4603      	mov	r3, r0
 800376a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d16d      	bne.n	800384e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3a      	ldr	r2, [pc, #232]	@ (8003874 <HAL_ADC_Start_DMA+0x184>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_ADC_Start_DMA+0xb4>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3b      	ldr	r2, [pc, #236]	@ (8003884 <HAL_ADC_Start_DMA+0x194>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d002      	beq.n	80037a0 <HAL_ADC_Start_DMA+0xb0>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e003      	b.n	80037a8 <HAL_ADC_Start_DMA+0xb8>
 80037a0:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_ADC_Start_DMA+0x198>)
 80037a2:	e001      	b.n	80037a8 <HAL_ADC_Start_DMA+0xb8>
 80037a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d002      	beq.n	80037b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d2:	f023 0206 	bic.w	r2, r3, #6
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80037da:	e002      	b.n	80037e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	4a29      	ldr	r2, [pc, #164]	@ (800388c <HAL_ADC_Start_DMA+0x19c>)
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ee:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_ADC_Start_DMA+0x1a0>)
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_ADC_Start_DMA+0x1a4>)
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	221c      	movs	r2, #28
 8003800:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0210 	orr.w	r2, r2, #16
 8003818:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3340      	adds	r3, #64	@ 0x40
 8003834:	4619      	mov	r1, r3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f001 fbf5 	bl	8005028 <HAL_DMA_Start_IT>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fd5c 	bl	8003304 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800384c:	e00d      	b.n	800386a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003856:	e008      	b.n	800386a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003864:	e001      	b.n	800386a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	50000100 	.word	0x50000100
 8003878:	50000300 	.word	0x50000300
 800387c:	50000700 	.word	0x50000700
 8003880:	50000600 	.word	0x50000600
 8003884:	50000500 	.word	0x50000500
 8003888:	50000400 	.word	0x50000400
 800388c:	08004813 	.word	0x08004813
 8003890:	080048eb 	.word	0x080048eb
 8003894:	08004907 	.word	0x08004907

08003898 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038bc:	d004      	beq.n	80038c8 <HAL_ADC_IRQHandler+0x30>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8e      	ldr	r2, [pc, #568]	@ (8003afc <HAL_ADC_IRQHandler+0x264>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_IRQHandler+0x34>
 80038c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003b00 <HAL_ADC_IRQHandler+0x268>)
 80038ca:	e000      	b.n	80038ce <HAL_ADC_IRQHandler+0x36>
 80038cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003b04 <HAL_ADC_IRQHandler+0x26c>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fc60 	bl	8003194 <LL_ADC_GetMultimode>
 80038d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <HAL_ADC_IRQHandler+0x78>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f001 f8f6 	bl	8004af4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_ADC_IRQHandler+0x8c>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8094 	beq.w	8003a58 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808e 	beq.w	8003a58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fb79 	bl	8003050 <LL_ADC_REG_IsTriggerSourceSWStart>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d072      	beq.n	8003a4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a64      	ldr	r2, [pc, #400]	@ (8003afc <HAL_ADC_IRQHandler+0x264>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_ADC_IRQHandler+0xea>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a65      	ldr	r2, [pc, #404]	@ (8003b08 <HAL_ADC_IRQHandler+0x270>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d002      	beq.n	800397e <HAL_ADC_IRQHandler+0xe6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e003      	b.n	8003986 <HAL_ADC_IRQHandler+0xee>
 800397e:	4b63      	ldr	r3, [pc, #396]	@ (8003b0c <HAL_ADC_IRQHandler+0x274>)
 8003980:	e001      	b.n	8003986 <HAL_ADC_IRQHandler+0xee>
 8003982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	4293      	cmp	r3, r2
 800398c:	d008      	beq.n	80039a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d002      	beq.n	80039a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b09      	cmp	r3, #9
 800399e:	d104      	bne.n	80039aa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	e014      	b.n	80039d4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a53      	ldr	r2, [pc, #332]	@ (8003afc <HAL_ADC_IRQHandler+0x264>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_ADC_IRQHandler+0x130>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a53      	ldr	r2, [pc, #332]	@ (8003b08 <HAL_ADC_IRQHandler+0x270>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d002      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x12c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e003      	b.n	80039cc <HAL_ADC_IRQHandler+0x134>
 80039c4:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_ADC_IRQHandler+0x274>)
 80039c6:	e001      	b.n	80039cc <HAL_ADC_IRQHandler+0x134>
 80039c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d135      	bne.n	8003a4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d12e      	bne.n	8003a4a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fc9b 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11a      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 020c 	bic.w	r2, r2, #12
 8003a0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d112      	bne.n	8003a4a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a30:	e00b      	b.n	8003a4a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f984 	bl	8003d58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	220c      	movs	r2, #12
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x1d4>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80b3 	beq.w	8003bde <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80ad 	beq.w	8003bde <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fb14 	bl	80030ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003aa6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff facf 	bl	8003050 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ab2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <HAL_ADC_IRQHandler+0x264>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x23a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a11      	ldr	r2, [pc, #68]	@ (8003b08 <HAL_ADC_IRQHandler+0x270>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d002      	beq.n	8003ace <HAL_ADC_IRQHandler+0x236>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	e003      	b.n	8003ad6 <HAL_ADC_IRQHandler+0x23e>
 8003ace:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <HAL_ADC_IRQHandler+0x274>)
 8003ad0:	e001      	b.n	8003ad6 <HAL_ADC_IRQHandler+0x23e>
 8003ad2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d008      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d002      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b07      	cmp	r3, #7
 8003aee:	d10f      	bne.n	8003b10 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	e01f      	b.n	8003b3a <HAL_ADC_IRQHandler+0x2a2>
 8003afa:	bf00      	nop
 8003afc:	50000100 	.word	0x50000100
 8003b00:	50000300 	.word	0x50000300
 8003b04:	50000700 	.word	0x50000700
 8003b08:	50000500 	.word	0x50000500
 8003b0c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a8b      	ldr	r2, [pc, #556]	@ (8003d44 <HAL_ADC_IRQHandler+0x4ac>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_ADC_IRQHandler+0x296>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a8a      	ldr	r2, [pc, #552]	@ (8003d48 <HAL_ADC_IRQHandler+0x4b0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d002      	beq.n	8003b2a <HAL_ADC_IRQHandler+0x292>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_IRQHandler+0x29a>
 8003b2a:	4b88      	ldr	r3, [pc, #544]	@ (8003d4c <HAL_ADC_IRQHandler+0x4b4>)
 8003b2c:	e001      	b.n	8003b32 <HAL_ADC_IRQHandler+0x29a>
 8003b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d047      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_ADC_IRQHandler+0x2c2>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03f      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d13a      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d133      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d12e      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fbeb 	bl	8003352 <LL_ADC_INJ_IsConversionOngoing>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11a      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d112      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bb6:	e00b      	b.n	8003bd0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	f043 0210 	orr.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 ff67 	bl	8004aa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2260      	movs	r2, #96	@ 0x60
 8003bdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_ADC_IRQHandler+0x374>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8be 	bl	8003d80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x3a4>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 ff4d 	bl	8004acc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x3d4>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 ff3f 	bl	8004ae0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d043      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x466>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03e      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8c:	e021      	b.n	8003cd2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x410>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a28      	ldr	r2, [pc, #160]	@ (8003d44 <HAL_ADC_IRQHandler+0x4ac>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_IRQHandler+0x414>
 8003ca8:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <HAL_ADC_IRQHandler+0x4b8>)
 8003caa:	e000      	b.n	8003cae <HAL_ADC_IRQHandler+0x416>
 8003cac:	4b29      	ldr	r3, [pc, #164]	@ (8003d54 <HAL_ADC_IRQHandler+0x4bc>)
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fa7e 	bl	80031b0 <LL_ADC_GetMultiDMATransfer>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbe:	e008      	b.n	8003cd2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce8:	f043 0202 	orr.w	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f84f 	bl	8003d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d018      	beq.n	8003d3a <HAL_ADC_IRQHandler+0x4a2>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 febf 	bl	8004ab8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d3a:	bf00      	nop
 8003d3c:	3728      	adds	r7, #40	@ 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	50000100 	.word	0x50000100
 8003d48:	50000500 	.word	0x50000500
 8003d4c:	50000400 	.word	0x50000400
 8003d50:	50000300 	.word	0x50000300
 8003d54:	50000700 	.word	0x50000700

08003d58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b0b6      	sub	sp, #216	@ 0xd8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d102      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x24>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	f000 bc13 	b.w	80045f2 <HAL_ADC_ConfigChannel+0x84a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff faa7 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f040 83f3 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f7ff f93f 	bl	8003076 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fa95 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 8003e02:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff faa1 	bl	8003352 <LL_ADC_INJ_IsConversionOngoing>
 8003e10:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 81d9 	bne.w	80041d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 81d4 	bne.w	80041d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e30:	d10f      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7ff f959 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f8ed 	bl	800302a <LL_ADC_SetSamplingTimeCommonConfig>
 8003e50:	e00e      	b.n	8003e70 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7ff f948 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f8dd 	bl	800302a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d022      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ea2:	f7ff f837 	bl	8002f14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7ff f883 	bl	8002fbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d102      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x126>
 8003ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ecc:	e000      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x128>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7ff f88f 	bl	8002ff4 <LL_ADC_SetOffsetSaturation>
 8003ed6:	e17b      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f83c 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x15c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f831 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	f003 021f 	and.w	r2, r3, #31
 8003f02:	e01e      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x19a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f826 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f32:	2320      	movs	r3, #32
 8003f34:	e004      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x1b2>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0e9b      	lsrs	r3, r3, #26
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	e018      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x1e4>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e004      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d106      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fff5 	bl	8002f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe ffd9 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x222>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe ffce 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	e01e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x260>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe ffc3 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003fe8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e004      	b.n	8004006 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x278>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	e018      	b.n	8004052 <HAL_ADC_ConfigChannel+0x2aa>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004034:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800403c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e004      	b.n	8004052 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004052:	429a      	cmp	r2, r3
 8004054:	d106      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe ff92 	bl	8002f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2102      	movs	r1, #2
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe ff76 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x2e8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe ff6b 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8004086:	4603      	mov	r3, r0
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 021f 	and.w	r2, r3, #31
 800408e:	e01e      	b.n	80040ce <HAL_ADC_ConfigChannel+0x326>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ff60 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e004      	b.n	80040cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x33e>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0e9b      	lsrs	r3, r3, #26
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	e016      	b.n	8004114 <HAL_ADC_ConfigChannel+0x36c>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80040f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80040fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004106:	2320      	movs	r3, #32
 8004108:	e004      	b.n	8004114 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800410a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe ff31 	bl	8002f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2103      	movs	r1, #3
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe ff15 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x3aa>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2103      	movs	r1, #3
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe ff0a 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	0e9b      	lsrs	r3, r3, #26
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	e017      	b.n	8004182 <HAL_ADC_ConfigChannel+0x3da>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2103      	movs	r1, #3
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe feff 	bl	8002f5c <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800416a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800416c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800416e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e003      	b.n	8004180 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_ADC_ConfigChannel+0x3f2>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0e9b      	lsrs	r3, r3, #26
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	e011      	b.n	80041be <HAL_ADC_ConfigChannel+0x416>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80041b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041be:	429a      	cmp	r2, r3
 80041c0:	d106      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	2103      	movs	r1, #3
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fedc 	bl	8002f88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff f86f 	bl	80032b8 <LL_ADC_IsEnabled>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 813d 	bne.w	800445c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fe ffac 	bl	800314c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4aa2      	ldr	r2, [pc, #648]	@ (8004484 <HAL_ADC_ConfigChannel+0x6dc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	f040 812e 	bne.w	800445c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x480>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0e9b      	lsrs	r3, r3, #26
 8004216:	3301      	adds	r3, #1
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2b09      	cmp	r3, #9
 800421e:	bf94      	ite	ls
 8004220:	2301      	movls	r3, #1
 8004222:	2300      	movhi	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e019      	b.n	800425c <HAL_ADC_ConfigChannel+0x4b4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004238:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800423a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004240:	2320      	movs	r3, #32
 8004242:	e003      	b.n	800424c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2b09      	cmp	r3, #9
 8004254:	bf94      	ite	ls
 8004256:	2301      	movls	r3, #1
 8004258:	2300      	movhi	r3, #0
 800425a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800425c:	2b00      	cmp	r3, #0
 800425e:	d079      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <HAL_ADC_ConfigChannel+0x4d4>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0e9b      	lsrs	r3, r3, #26
 8004272:	3301      	adds	r3, #1
 8004274:	069b      	lsls	r3, r3, #26
 8004276:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800427a:	e015      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x500>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800428a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800428c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004294:	2320      	movs	r3, #32
 8004296:	e003      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	069b      	lsls	r3, r3, #26
 80042a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x520>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	3301      	adds	r3, #1
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	e017      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x550>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80042d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80042da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e003      	b.n	80042ec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80042e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	ea42 0103 	orr.w	r1, r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_ADC_ConfigChannel+0x576>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	3301      	adds	r3, #1
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	051b      	lsls	r3, r3, #20
 800431c:	e018      	b.n	8004350 <HAL_ADC_ConfigChannel+0x5a8>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	fa93 f3a3 	rbit	r3, r3
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004336:	2320      	movs	r3, #32
 8004338:	e003      	b.n	8004342 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	fab3 f383 	clz	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3301      	adds	r3, #1
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004350:	430b      	orrs	r3, r1
 8004352:	e07e      	b.n	8004452 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x5c8>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	3301      	adds	r3, #1
 8004368:	069b      	lsls	r3, r3, #26
 800436a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800436e:	e015      	b.n	800439c <HAL_ADC_ConfigChannel+0x5f4>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	3301      	adds	r3, #1
 8004396:	069b      	lsls	r3, r3, #26
 8004398:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x614>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	e017      	b.n	80043ec <HAL_ADC_ConfigChannel+0x644>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	61fb      	str	r3, [r7, #28]
  return result;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80043d4:	2320      	movs	r3, #32
 80043d6:	e003      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	ea42 0103 	orr.w	r1, r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x670>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	3b1e      	subs	r3, #30
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004416:	e01b      	b.n	8004450 <HAL_ADC_ConfigChannel+0x6a8>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	613b      	str	r3, [r7, #16]
  return result;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004430:	2320      	movs	r3, #32
 8004432:	e003      	b.n	800443c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3301      	adds	r3, #1
 800443e:	f003 021f 	and.w	r2, r3, #31
 8004442:	4613      	mov	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4413      	add	r3, r2
 8004448:	3b1e      	subs	r3, #30
 800444a:	051b      	lsls	r3, r3, #20
 800444c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004450:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004456:	4619      	mov	r1, r3
 8004458:	f7fe fe4c 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <HAL_ADC_ConfigChannel+0x6e0>)
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80be 	beq.w	80045e6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004472:	d004      	beq.n	800447e <HAL_ADC_ConfigChannel+0x6d6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_ADC_ConfigChannel+0x6e4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10a      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x6ec>
 800447e:	4b04      	ldr	r3, [pc, #16]	@ (8004490 <HAL_ADC_ConfigChannel+0x6e8>)
 8004480:	e009      	b.n	8004496 <HAL_ADC_ConfigChannel+0x6ee>
 8004482:	bf00      	nop
 8004484:	407f0000 	.word	0x407f0000
 8004488:	80080000 	.word	0x80080000
 800448c:	50000100 	.word	0x50000100
 8004490:	50000300 	.word	0x50000300
 8004494:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <HAL_ADC_ConfigChannel+0x854>)
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fd2e 	bl	8002ef8 <LL_ADC_GetCommonPathInternalCh>
 800449c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <HAL_ADC_ConfigChannel+0x858>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x70c>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a55      	ldr	r2, [pc, #340]	@ (8004604 <HAL_ADC_ConfigChannel+0x85c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d13a      	bne.n	800452a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d134      	bne.n	800452a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c8:	d005      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x72e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004608 <HAL_ADC_ConfigChannel+0x860>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f040 8085 	bne.w	80045e0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044de:	d004      	beq.n	80044ea <HAL_ADC_ConfigChannel+0x742>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a49      	ldr	r2, [pc, #292]	@ (800460c <HAL_ADC_ConfigChannel+0x864>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x746>
 80044ea:	4a49      	ldr	r2, [pc, #292]	@ (8004610 <HAL_ADC_ConfigChannel+0x868>)
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x748>
 80044ee:	4a43      	ldr	r2, [pc, #268]	@ (80045fc <HAL_ADC_ConfigChannel+0x854>)
 80044f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7fe fce9 	bl	8002ed2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004500:	4b44      	ldr	r3, [pc, #272]	@ (8004614 <HAL_ADC_ConfigChannel+0x86c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	4a44      	ldr	r2, [pc, #272]	@ (8004618 <HAL_ADC_ConfigChannel+0x870>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800451a:	e002      	b.n	8004522 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3b01      	subs	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f9      	bne.n	800451c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004528:	e05a      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3b      	ldr	r2, [pc, #236]	@ (800461c <HAL_ADC_ConfigChannel+0x874>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d125      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11f      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a31      	ldr	r2, [pc, #196]	@ (800460c <HAL_ADC_ConfigChannel+0x864>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d104      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x7ac>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a34      	ldr	r2, [pc, #208]	@ (8004620 <HAL_ADC_ConfigChannel+0x878>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d047      	beq.n	80045e4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800455c:	d004      	beq.n	8004568 <HAL_ADC_ConfigChannel+0x7c0>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2a      	ldr	r2, [pc, #168]	@ (800460c <HAL_ADC_ConfigChannel+0x864>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x7c4>
 8004568:	4a29      	ldr	r2, [pc, #164]	@ (8004610 <HAL_ADC_ConfigChannel+0x868>)
 800456a:	e000      	b.n	800456e <HAL_ADC_ConfigChannel+0x7c6>
 800456c:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <HAL_ADC_ConfigChannel+0x854>)
 800456e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f7fe fcaa 	bl	8002ed2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800457e:	e031      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a27      	ldr	r2, [pc, #156]	@ (8004624 <HAL_ADC_ConfigChannel+0x87c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d12d      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800458a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d127      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <HAL_ADC_ConfigChannel+0x864>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d022      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a8:	d004      	beq.n	80045b4 <HAL_ADC_ConfigChannel+0x80c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <HAL_ADC_ConfigChannel+0x864>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x810>
 80045b4:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <HAL_ADC_ConfigChannel+0x868>)
 80045b6:	e000      	b.n	80045ba <HAL_ADC_ConfigChannel+0x812>
 80045b8:	4a10      	ldr	r2, [pc, #64]	@ (80045fc <HAL_ADC_ConfigChannel+0x854>)
 80045ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fe fc84 	bl	8002ed2 <LL_ADC_SetCommonPathInternalCh>
 80045ca:	e00c      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80045de:	e002      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	37d8      	adds	r7, #216	@ 0xd8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	50000700 	.word	0x50000700
 8004600:	c3210000 	.word	0xc3210000
 8004604:	90c00010 	.word	0x90c00010
 8004608:	50000600 	.word	0x50000600
 800460c:	50000100 	.word	0x50000100
 8004610:	50000300 	.word	0x50000300
 8004614:	20000004 	.word	0x20000004
 8004618:	053e2d63 	.word	0x053e2d63
 800461c:	c7520000 	.word	0xc7520000
 8004620:	50000500 	.word	0x50000500
 8004624:	cb840000 	.word	0xcb840000

08004628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fe3d 	bl	80032b8 <LL_ADC_IsEnabled>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d176      	bne.n	8004732 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	4b3c      	ldr	r3, [pc, #240]	@ (800473c <ADC_Enable+0x114>)
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e062      	b.n	8004734 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fdf8 	bl	8003268 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004680:	d004      	beq.n	800468c <ADC_Enable+0x64>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2e      	ldr	r2, [pc, #184]	@ (8004740 <ADC_Enable+0x118>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <ADC_Enable+0x68>
 800468c:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <ADC_Enable+0x11c>)
 800468e:	e000      	b.n	8004692 <ADC_Enable+0x6a>
 8004690:	4b2d      	ldr	r3, [pc, #180]	@ (8004748 <ADC_Enable+0x120>)
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fc30 	bl	8002ef8 <LL_ADC_GetCommonPathInternalCh>
 8004698:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800469a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d013      	beq.n	80046ca <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a2:	4b2a      	ldr	r3, [pc, #168]	@ (800474c <ADC_Enable+0x124>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <ADC_Enable+0x128>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046bc:	e002      	b.n	80046c4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f9      	bne.n	80046be <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046ca:	f7fe fbe3 	bl	8002e94 <HAL_GetTick>
 80046ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046d0:	e028      	b.n	8004724 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fdee 	bl	80032b8 <LL_ADC_IsEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fdbe 	bl	8003268 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046ec:	f7fe fbd2 	bl	8002e94 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d914      	bls.n	8004724 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d00d      	beq.n	8004724 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d1cf      	bne.n	80046d2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	8000003f 	.word	0x8000003f
 8004740:	50000100 	.word	0x50000100
 8004744:	50000300 	.word	0x50000300
 8004748:	50000700 	.word	0x50000700
 800474c:	20000004 	.word	0x20000004
 8004750:	053e2d63 	.word	0x053e2d63

08004754 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fdbc 	bl	80032de <LL_ADC_IsDisableOngoing>
 8004766:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fda3 	bl	80032b8 <LL_ADC_IsEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d047      	beq.n	8004808 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d144      	bne.n	8004808 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030d 	and.w	r3, r3, #13
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10c      	bne.n	80047a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fd7d 	bl	8003290 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2203      	movs	r2, #3
 800479c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800479e:	f7fe fb79 	bl	8002e94 <HAL_GetTick>
 80047a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047a4:	e029      	b.n	80047fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	f043 0210 	orr.w	r2, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e023      	b.n	800480a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047c2:	f7fe fb67 	bl	8002e94 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d914      	bls.n	80047fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e007      	b.n	800480a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1dc      	bne.n	80047c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004828:	2b00      	cmp	r3, #0
 800482a:	d14b      	bne.n	80048c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d021      	beq.n	800488a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fc00 	bl	8003050 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d032      	beq.n	80048bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d12b      	bne.n	80048bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11f      	bne.n	80048bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	f043 0201 	orr.w	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004888:	e018      	b.n	80048bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fa4b 	bl	8003d58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048c2:	e00e      	b.n	80048e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fa5f 	bl	8003d94 <HAL_ADC_ErrorCallback>
}
 80048d6:	e004      	b.n	80048e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fa37 	bl	8003d6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004918:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004924:	f043 0204 	orr.w	r2, r3, #4
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff fa31 	bl	8003d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <LL_ADC_IsEnabled>:
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <LL_ADC_IsEnabled+0x18>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_IsEnabled+0x1a>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_StartCalibration>:
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004972:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800497c:	4313      	orrs	r3, r2
 800497e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_ADC_IsCalibrationOnGoing>:
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049a6:	d101      	bne.n	80049ac <LL_ADC_IsCalibrationOnGoing+0x1a>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <LL_ADC_IsCalibrationOnGoing+0x1c>
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_REG_IsConversionOngoing>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d101      	bne.n	80049d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_ADCEx_Calibration_Start+0x1c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e04d      	b.n	8004a98 <HAL_ADCEx_Calibration_Start+0xb8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff fea5 	bl	8004754 <ADC_Disable>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d136      	bne.n	8004a82 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a1c:	f023 0302 	bic.w	r3, r3, #2
 8004a20:	f043 0202 	orr.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff96 	bl	8004960 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a34:	e014      	b.n	8004a60 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d90d      	bls.n	8004a60 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	f023 0312 	bic.w	r3, r3, #18
 8004a4c:	f043 0210 	orr.w	r2, r3, #16
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e01b      	b.n	8004a98 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff94 	bl	8004992 <LL_ADC_IsCalibrationOnGoing>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e2      	bne.n	8004a36 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	f023 0303 	bic.w	r3, r3, #3
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a80:	e005      	b.n	8004a8e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a86:	f043 0210 	orr.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	0004de01 	.word	0x0004de01

08004aa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b0a1      	sub	sp, #132	@ 0x84
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0e7      	b.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b32:	2300      	movs	r3, #0
 8004b34:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b3e:	d102      	bne.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b40:	4b6f      	ldr	r3, [pc, #444]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	e009      	b.n	8004b5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d102      	bne.n	8004b56 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b50:	4b6d      	ldr	r3, [pc, #436]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	e001      	b.n	8004b5a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0be      	b.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff1d 	bl	80049ba <LL_ADC_REG_IsConversionOngoing>
 8004b80:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff17 	bl	80049ba <LL_ADC_REG_IsConversionOngoing>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 80a0 	bne.w	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 809c 	bne.w	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ba4:	d004      	beq.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a55      	ldr	r2, [pc, #340]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bb0:	4b56      	ldr	r3, [pc, #344]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bb2:	e000      	b.n	8004bb6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bb4:	4b56      	ldr	r3, [pc, #344]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004bb6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d04b      	beq.n	8004c58 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bd2:	035b      	lsls	r3, r3, #13
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be4:	d004      	beq.n	8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a45      	ldr	r2, [pc, #276]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10f      	bne.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004bf0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bf4:	f7ff fea1 	bl	800493a <LL_ADC_IsEnabled>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4841      	ldr	r0, [pc, #260]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bfc:	f7ff fe9d 	bl	800493a <LL_ADC_IsEnabled>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4323      	orrs	r3, r4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e012      	b.n	8004c36 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c10:	483c      	ldr	r0, [pc, #240]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c12:	f7ff fe92 	bl	800493a <LL_ADC_IsEnabled>
 8004c16:	4604      	mov	r4, r0
 8004c18:	483b      	ldr	r0, [pc, #236]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c1a:	f7ff fe8e 	bl	800493a <LL_ADC_IsEnabled>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	431c      	orrs	r4, r3
 8004c22:	483c      	ldr	r0, [pc, #240]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c24:	f7ff fe89 	bl	800493a <LL_ADC_IsEnabled>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4323      	orrs	r3, r4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d056      	beq.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c42:	f023 030f 	bic.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	431a      	orrs	r2, r3
 8004c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c54:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c56:	e047      	b.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c62:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c6c:	d004      	beq.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10f      	bne.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c7c:	f7ff fe5d 	bl	800493a <LL_ADC_IsEnabled>
 8004c80:	4604      	mov	r4, r0
 8004c82:	481f      	ldr	r0, [pc, #124]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c84:	f7ff fe59 	bl	800493a <LL_ADC_IsEnabled>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4323      	orrs	r3, r4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e012      	b.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004c98:	481a      	ldr	r0, [pc, #104]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c9a:	f7ff fe4e 	bl	800493a <LL_ADC_IsEnabled>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4819      	ldr	r0, [pc, #100]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ca2:	f7ff fe4a 	bl	800493a <LL_ADC_IsEnabled>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	431c      	orrs	r4, r3
 8004caa:	481a      	ldr	r0, [pc, #104]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cac:	f7ff fe45 	bl	800493a <LL_ADC_IsEnabled>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4323      	orrs	r3, r4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cca:	f023 030f 	bic.w	r3, r3, #15
 8004cce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cd0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd2:	e009      	b.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ce6:	e000      	b.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cf2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3784      	adds	r7, #132	@ 0x84
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	50000100 	.word	0x50000100
 8004d04:	50000400 	.word	0x50000400
 8004d08:	50000500 	.word	0x50000500
 8004d0c:	50000300 	.word	0x50000300
 8004d10:	50000700 	.word	0x50000700
 8004d14:	50000600 	.word	0x50000600

08004d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4a:	4a04      	ldr	r2, [pc, #16]	@ (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	60d3      	str	r3, [r2, #12]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d64:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <__NVIC_GetPriorityGrouping+0x18>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 0307 	and.w	r3, r3, #7
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0b      	blt.n	8004da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	@ (8004db4 <__NVIC_EnableIRQ+0x38>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	@ (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	@ (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf28      	it	cs
 8004e2a:	2304      	movcs	r3, #4
 8004e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d902      	bls.n	8004e3c <NVIC_EncodePriority+0x30>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3b03      	subs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <NVIC_EncodePriority+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	4313      	orrs	r3, r2
         );
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ff4c 	bl	8004d18 <__NVIC_SetPriorityGrouping>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e96:	f7ff ff63 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8004e9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7ff ffb3 	bl	8004e0c <NVIC_EncodePriority>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff82 	bl	8004db8 <__NVIC_SetPriority>
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff56 	bl	8004d7c <__NVIC_EnableIRQ>
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e08d      	b.n	8005006 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b47      	ldr	r3, [pc, #284]	@ (8005010 <HAL_DMA_Init+0x138>)
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d80f      	bhi.n	8004f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b45      	ldr	r3, [pc, #276]	@ (8005014 <HAL_DMA_Init+0x13c>)
 8004efe:	4413      	add	r3, r2
 8004f00:	4a45      	ldr	r2, [pc, #276]	@ (8005018 <HAL_DMA_Init+0x140>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	009a      	lsls	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a42      	ldr	r2, [pc, #264]	@ (800501c <HAL_DMA_Init+0x144>)
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f14:	e00e      	b.n	8004f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <HAL_DMA_Init+0x148>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	4a3d      	ldr	r2, [pc, #244]	@ (8005018 <HAL_DMA_Init+0x140>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	009a      	lsls	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a3c      	ldr	r2, [pc, #240]	@ (8005024 <HAL_DMA_Init+0x14c>)
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa82 	bl	8005490 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f94:	d102      	bne.n	8004f9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fb0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_DMA_Init+0x104>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d80c      	bhi.n	8004fdc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 faa2 	bl	800550c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	e008      	b.n	8004fee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40020407 	.word	0x40020407
 8005014:	bffdfff8 	.word	0xbffdfff8
 8005018:	cccccccd 	.word	0xcccccccd
 800501c:	40020000 	.word	0x40020000
 8005020:	bffdfbf8 	.word	0xbffdfbf8
 8005024:	40020400 	.word	0x40020400

08005028 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_DMA_Start_IT+0x20>
 8005044:	2302      	movs	r3, #2
 8005046:	e066      	b.n	8005116 <HAL_DMA_Start_IT+0xee>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d155      	bne.n	8005108 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9c7 	bl	8005414 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 020e 	orr.w	r2, r2, #14
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e00f      	b.n	80050c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 020a 	orr.w	r2, r2, #10
 80050be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e005      	b.n	8005114 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005110:	2302      	movs	r3, #2
 8005112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d005      	beq.n	8005142 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e037      	b.n	80051b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 020e 	bic.w	r2, r2, #14
 8005150:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005160:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f003 021f 	and.w	r2, r3, #31
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f202 	lsl.w	r2, r1, r2
 8005184:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800518e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d00d      	beq.n	8005204 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e047      	b.n	8005294 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 020e 	bic.w	r2, r2, #14
 8005212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005250:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005268:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005272:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
    }
  }
  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2204      	movs	r2, #4
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d026      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d021      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f003 021f 	and.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2104      	movs	r1, #4
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d071      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005316:	e06c      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2202      	movs	r2, #2
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02e      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d029      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 020a 	bic.w	r2, r2, #10
 8005352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	2102      	movs	r1, #2
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d038      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005388:	e033      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2208      	movs	r2, #8
 8005394:	409a      	lsls	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d025      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 020e 	bic.w	r2, r2, #14
 80053b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
}
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800542a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	f003 021f 	and.w	r2, r3, #31
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	2101      	movs	r1, #1
 800544c:	fa01 f202 	lsl.w	r2, r1, r2
 8005450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b10      	cmp	r3, #16
 8005460:	d108      	bne.n	8005474 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005472:	e007      	b.n	8005484 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	60da      	str	r2, [r3, #12]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d802      	bhi.n	80054aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054a4:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e001      	b.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054aa:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	3b08      	subs	r3, #8
 80054ba:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c8:	089b      	lsrs	r3, r3, #2
 80054ca:	009a      	lsls	r2, r3, #2
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2201      	movs	r2, #1
 80054e4:	409a      	lsls	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40020407 	.word	0x40020407
 80054fc:	40020800 	.word	0x40020800
 8005500:	40020820 	.word	0x40020820
 8005504:	cccccccd 	.word	0xcccccccd
 8005508:	40020880 	.word	0x40020880

0800550c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a08      	ldr	r2, [pc, #32]	@ (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800552e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3b01      	subs	r3, #1
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	1000823f 	.word	0x1000823f
 8005550:	40020940 	.word	0x40020940

08005554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005562:	e15a      	b.n	800581a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 814c 	beq.w	8005814 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d005      	beq.n	8005594 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005590:	2b02      	cmp	r3, #2
 8005592:	d130      	bne.n	80055f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ca:	2201      	movs	r2, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4013      	ands	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 0201 	and.w	r2, r3, #1
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d017      	beq.n	8005632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	2203      	movs	r2, #3
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d123      	bne.n	8005686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3208      	adds	r2, #8
 8005646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	220f      	movs	r2, #15
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	08da      	lsrs	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3208      	adds	r2, #8
 8005680:	6939      	ldr	r1, [r7, #16]
 8005682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4013      	ands	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0203 	and.w	r2, r3, #3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80a6 	beq.w	8005814 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005838 <HAL_GPIO_Init+0x2e4>)
 80056ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005838 <HAL_GPIO_Init+0x2e4>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80056d4:	4b58      	ldr	r3, [pc, #352]	@ (8005838 <HAL_GPIO_Init+0x2e4>)
 80056d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e0:	4a56      	ldr	r2, [pc, #344]	@ (800583c <HAL_GPIO_Init+0x2e8>)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	3302      	adds	r3, #2
 80056e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	220f      	movs	r2, #15
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800570a:	d01f      	beq.n	800574c <HAL_GPIO_Init+0x1f8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a4c      	ldr	r2, [pc, #304]	@ (8005840 <HAL_GPIO_Init+0x2ec>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d019      	beq.n	8005748 <HAL_GPIO_Init+0x1f4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a4b      	ldr	r2, [pc, #300]	@ (8005844 <HAL_GPIO_Init+0x2f0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <HAL_GPIO_Init+0x1f0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a4a      	ldr	r2, [pc, #296]	@ (8005848 <HAL_GPIO_Init+0x2f4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00d      	beq.n	8005740 <HAL_GPIO_Init+0x1ec>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a49      	ldr	r2, [pc, #292]	@ (800584c <HAL_GPIO_Init+0x2f8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <HAL_GPIO_Init+0x1e8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a48      	ldr	r2, [pc, #288]	@ (8005850 <HAL_GPIO_Init+0x2fc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d101      	bne.n	8005738 <HAL_GPIO_Init+0x1e4>
 8005734:	2305      	movs	r3, #5
 8005736:	e00a      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 8005738:	2306      	movs	r3, #6
 800573a:	e008      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 800573c:	2304      	movs	r3, #4
 800573e:	e006      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 8005740:	2303      	movs	r3, #3
 8005742:	e004      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 8005744:	2302      	movs	r3, #2
 8005746:	e002      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_GPIO_Init+0x1fa>
 800574c:	2300      	movs	r3, #0
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	f002 0203 	and.w	r2, r2, #3
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	4093      	lsls	r3, r2
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800575e:	4937      	ldr	r1, [pc, #220]	@ (800583c <HAL_GPIO_Init+0x2e8>)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	3302      	adds	r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800576c:	4b39      	ldr	r3, [pc, #228]	@ (8005854 <HAL_GPIO_Init+0x300>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43db      	mvns	r3, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005790:	4a30      	ldr	r2, [pc, #192]	@ (8005854 <HAL_GPIO_Init+0x300>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005796:	4b2f      	ldr	r3, [pc, #188]	@ (8005854 <HAL_GPIO_Init+0x300>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057ba:	4a26      	ldr	r2, [pc, #152]	@ (8005854 <HAL_GPIO_Init+0x300>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057c0:	4b24      	ldr	r3, [pc, #144]	@ (8005854 <HAL_GPIO_Init+0x300>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4013      	ands	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005854 <HAL_GPIO_Init+0x300>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_GPIO_Init+0x300>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800580e:	4a11      	ldr	r2, [pc, #68]	@ (8005854 <HAL_GPIO_Init+0x300>)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3301      	adds	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	f47f ae9d 	bne.w	8005564 <HAL_GPIO_Init+0x10>
  }
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40021000 	.word	0x40021000
 800583c:	40010000 	.word	0x40010000
 8005840:	48000400 	.word	0x48000400
 8005844:	48000800 	.word	0x48000800
 8005848:	48000c00 	.word	0x48000c00
 800584c:	48001000 	.word	0x48001000
 8005850:	48001400 	.word	0x48001400
 8005854:	40010400 	.word	0x40010400

08005858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005866:	e0bd      	b.n	80059e4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005868:	2201      	movs	r2, #1
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80b0 	beq.w	80059de <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800587e:	4a60      	ldr	r2, [pc, #384]	@ (8005a00 <HAL_GPIO_DeInit+0x1a8>)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	220f      	movs	r2, #15
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4013      	ands	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058a6:	d01f      	beq.n	80058e8 <HAL_GPIO_DeInit+0x90>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a56      	ldr	r2, [pc, #344]	@ (8005a04 <HAL_GPIO_DeInit+0x1ac>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d019      	beq.n	80058e4 <HAL_GPIO_DeInit+0x8c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a55      	ldr	r2, [pc, #340]	@ (8005a08 <HAL_GPIO_DeInit+0x1b0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_GPIO_DeInit+0x88>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a54      	ldr	r2, [pc, #336]	@ (8005a0c <HAL_GPIO_DeInit+0x1b4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00d      	beq.n	80058dc <HAL_GPIO_DeInit+0x84>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a53      	ldr	r2, [pc, #332]	@ (8005a10 <HAL_GPIO_DeInit+0x1b8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <HAL_GPIO_DeInit+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a52      	ldr	r2, [pc, #328]	@ (8005a14 <HAL_GPIO_DeInit+0x1bc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_GPIO_DeInit+0x7c>
 80058d0:	2305      	movs	r3, #5
 80058d2:	e00a      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058d4:	2306      	movs	r3, #6
 80058d6:	e008      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058d8:	2304      	movs	r3, #4
 80058da:	e006      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058dc:	2303      	movs	r3, #3
 80058de:	e004      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e002      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_GPIO_DeInit+0x92>
 80058e8:	2300      	movs	r3, #0
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	f002 0203 	and.w	r2, r2, #3
 80058f0:	0092      	lsls	r2, r2, #2
 80058f2:	4093      	lsls	r3, r2
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d132      	bne.n	8005960 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80058fa:	4b47      	ldr	r3, [pc, #284]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	43db      	mvns	r3, r3
 8005902:	4945      	ldr	r1, [pc, #276]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 8005904:	4013      	ands	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005908:	4b43      	ldr	r3, [pc, #268]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	43db      	mvns	r3, r3
 8005910:	4941      	ldr	r1, [pc, #260]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 8005912:	4013      	ands	r3, r2
 8005914:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005916:	4b40      	ldr	r3, [pc, #256]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	43db      	mvns	r3, r3
 800591e:	493e      	ldr	r1, [pc, #248]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 8005920:	4013      	ands	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005924:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	43db      	mvns	r3, r3
 800592c:	493a      	ldr	r1, [pc, #232]	@ (8005a18 <HAL_GPIO_DeInit+0x1c0>)
 800592e:	4013      	ands	r3, r2
 8005930:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	220f      	movs	r2, #15
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005942:	4a2f      	ldr	r2, [pc, #188]	@ (8005a00 <HAL_GPIO_DeInit+0x1a8>)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	3302      	adds	r3, #2
 800594a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43da      	mvns	r2, r3
 8005952:	482b      	ldr	r0, [pc, #172]	@ (8005a00 <HAL_GPIO_DeInit+0x1a8>)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	089b      	lsrs	r3, r3, #2
 8005958:	400a      	ands	r2, r1
 800595a:	3302      	adds	r3, #2
 800595c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2103      	movs	r1, #3
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	08da      	lsrs	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3208      	adds	r2, #8
 800597c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	08d2      	lsrs	r2, r2, #3
 8005994:	4019      	ands	r1, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3208      	adds	r2, #8
 800599a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2103      	movs	r1, #3
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	401a      	ands	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	2101      	movs	r1, #1
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	fa01 f303 	lsl.w	r3, r1, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	2103      	movs	r1, #3
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	401a      	ands	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3301      	adds	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f47f af3b 	bne.w	8005868 <HAL_GPIO_DeInit+0x10>
  }
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	48000400 	.word	0x48000400
 8005a08:	48000800 	.word	0x48000800
 8005a0c:	48000c00 	.word	0x48000c00
 8005a10:	48001000 	.word	0x48001000
 8005a14:	48001400 	.word	0x48001400
 8005a18:	40010400 	.word	0x40010400

08005a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e001      	b.n	8005a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	807b      	strh	r3, [r7, #2]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a5c:	787b      	ldrb	r3, [r7, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a68:	e002      	b.n	8005a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4013      	ands	r3, r2
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	43d9      	mvns	r1, r3
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	619a      	str	r2, [r3, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005aba:	4b08      	ldr	r3, [pc, #32]	@ (8005adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d006      	beq.n	8005ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ac6:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fb fe76 	bl	80017c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40010400 	.word	0x40010400

08005ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e08d      	b.n	8005c0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fc fb70 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	@ 0x24
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e006      	b.n	8005b68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d108      	bne.n	8005b82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	e007      	b.n	8005b92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e021      	b.n	8005c6c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	@ 0x24
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fc fb2d 	bl	80022a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	817b      	strh	r3, [r7, #10]
 8005c86:	460b      	mov	r3, r1
 8005c88:	813b      	strh	r3, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	f040 80f9 	bne.w	8005e8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x34>
 8005ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0ed      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_I2C_Mem_Write+0x4e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e0e6      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cca:	f7fd f8e3 	bl	8002e94 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2319      	movs	r3, #25
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 facf 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0d1      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2221      	movs	r2, #33	@ 0x21
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d14:	88f8      	ldrh	r0, [r7, #6]
 8005d16:	893a      	ldrh	r2, [r7, #8]
 8005d18:	8979      	ldrh	r1, [r7, #10]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4603      	mov	r3, r0
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f9df 	bl	80060e8 <I2C_RequestMemoryWrite>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0a9      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2bff      	cmp	r3, #255	@ 0xff
 8005d44:	d90e      	bls.n	8005d64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	22ff      	movs	r2, #255	@ 0xff
 8005d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	8979      	ldrh	r1, [r7, #10]
 8005d54:	2300      	movs	r3, #0
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fc53 	bl	8006608 <I2C_TransferConfig>
 8005d62:	e00f      	b.n	8005d84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fc42 	bl	8006608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fad2 	bl	8006332 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e07b      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d034      	beq.n	8005e3c <HAL_I2C_Mem_Write+0x1c8>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d130      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	2200      	movs	r2, #0
 8005de2:	2180      	movs	r1, #128	@ 0x80
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fa4b 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e04d      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2bff      	cmp	r3, #255	@ 0xff
 8005dfc:	d90e      	bls.n	8005e1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	22ff      	movs	r2, #255	@ 0xff
 8005e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	8979      	ldrh	r1, [r7, #10]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fbf7 	bl	8006608 <I2C_TransferConfig>
 8005e1a:	e00f      	b.n	8005e3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	8979      	ldrh	r1, [r7, #10]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fbe6 	bl	8006608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d19e      	bne.n	8005d84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fab8 	bl	80063c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e01a      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <HAL_I2C_Mem_Write+0x224>)
 8005e6e:	400b      	ands	r3, r1
 8005e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e000      	b.n	8005e90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005e8e:	2302      	movs	r3, #2
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	fe00e800 	.word	0xfe00e800

08005e9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	817b      	strh	r3, [r7, #10]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	813b      	strh	r3, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	f040 80fd 	bne.w	80060be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_I2C_Mem_Read+0x34>
 8005eca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0f1      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_I2C_Mem_Read+0x4e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e0ea      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ef2:	f7fc ffcf 	bl	8002e94 <HAL_GetTick>
 8005ef6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	2319      	movs	r3, #25
 8005efe:	2201      	movs	r2, #1
 8005f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f9bb 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0d5      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2222      	movs	r2, #34	@ 0x22
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2240      	movs	r2, #64	@ 0x40
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f3c:	88f8      	ldrh	r0, [r7, #6]
 8005f3e:	893a      	ldrh	r2, [r7, #8]
 8005f40:	8979      	ldrh	r1, [r7, #10]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f91f 	bl	8006190 <I2C_RequestMemoryRead>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0ad      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2bff      	cmp	r3, #255	@ 0xff
 8005f6c:	d90e      	bls.n	8005f8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	22ff      	movs	r2, #255	@ 0xff
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	8979      	ldrh	r1, [r7, #10]
 8005f7c:	4b52      	ldr	r3, [pc, #328]	@ (80060c8 <HAL_I2C_Mem_Read+0x22c>)
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fb3f 	bl	8006608 <I2C_TransferConfig>
 8005f8a:	e00f      	b.n	8005fac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	8979      	ldrh	r1, [r7, #10]
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_I2C_Mem_Read+0x22c>)
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fb2e 	bl	8006608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2104      	movs	r1, #4
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f962 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e07c      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d034      	beq.n	800606c <HAL_I2C_Mem_Read+0x1d0>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d130      	bne.n	800606c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	2200      	movs	r2, #0
 8006012:	2180      	movs	r1, #128	@ 0x80
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f933 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e04d      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2bff      	cmp	r3, #255	@ 0xff
 800602c:	d90e      	bls.n	800604c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22ff      	movs	r2, #255	@ 0xff
 8006032:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006038:	b2da      	uxtb	r2, r3
 800603a:	8979      	ldrh	r1, [r7, #10]
 800603c:	2300      	movs	r3, #0
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fadf 	bl	8006608 <I2C_TransferConfig>
 800604a:	e00f      	b.n	800606c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	b2da      	uxtb	r2, r3
 800605c:	8979      	ldrh	r1, [r7, #10]
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 face 	bl	8006608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d19a      	bne.n	8005fac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f9a0 	bl	80063c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e01a      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2220      	movs	r2, #32
 8006090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <HAL_I2C_Mem_Read+0x230>)
 800609e:	400b      	ands	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	80002400 	.word	0x80002400
 80060cc:	fe00e800 	.word	0xfe00e800

080060d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	461a      	mov	r2, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	817b      	strh	r3, [r7, #10]
 80060fa:	460b      	mov	r3, r1
 80060fc:	813b      	strh	r3, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	8979      	ldrh	r1, [r7, #10]
 8006108:	4b20      	ldr	r3, [pc, #128]	@ (800618c <I2C_RequestMemoryWrite+0xa4>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fa79 	bl	8006608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f909 	bl	8006332 <I2C_WaitOnTXISFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02c      	b.n	8006184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d105      	bne.n	800613c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	629a      	str	r2, [r3, #40]	@ 0x28
 800613a:	e015      	b.n	8006168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	69b9      	ldr	r1, [r7, #24]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f8ef 	bl	8006332 <I2C_WaitOnTXISFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e012      	b.n	8006184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800615e:	893b      	ldrh	r3, [r7, #8]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	@ 0x80
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f884 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	80002000 	.word	0x80002000

08006190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	4b20      	ldr	r3, [pc, #128]	@ (8006234 <I2C_RequestMemoryRead+0xa4>)
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fa26 	bl	8006608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	69b9      	ldr	r1, [r7, #24]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f8b6 	bl	8006332 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e02c      	b.n	800622a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d105      	bne.n	80061e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061d6:	893b      	ldrh	r3, [r7, #8]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e0:	e015      	b.n	800620e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061e2:	893b      	ldrh	r3, [r7, #8]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	69b9      	ldr	r1, [r7, #24]
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f89c 	bl	8006332 <I2C_WaitOnTXISFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e012      	b.n	800622a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006204:	893b      	ldrh	r3, [r7, #8]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2200      	movs	r2, #0
 8006216:	2140      	movs	r1, #64	@ 0x40
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f831 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	80002000 	.word	0x80002000

08006238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d103      	bne.n	8006256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d007      	beq.n	8006274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	619a      	str	r2, [r3, #24]
  }
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006290:	e03b      	b.n	800630a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f8d6 	bl	8006448 <I2C_IsErrorOccurred>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e041      	b.n	800632a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ac:	d02d      	beq.n	800630a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ae:	f7fc fdf1 	bl	8002e94 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d302      	bcc.n	80062c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d122      	bne.n	800630a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4013      	ands	r3, r2
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d113      	bne.n	800630a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e00f      	b.n	800632a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d0b4      	beq.n	8006292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800633e:	e033      	b.n	80063a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f87f 	bl	8006448 <I2C_IsErrorOccurred>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e031      	b.n	80063b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800635a:	d025      	beq.n	80063a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635c:	f7fc fd9a 	bl	8002e94 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	d302      	bcc.n	8006372 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d11a      	bne.n	80063a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d013      	beq.n	80063a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e007      	b.n	80063b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d1c4      	bne.n	8006340 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063cc:	e02f      	b.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f838 	bl	8006448 <I2C_IsErrorOccurred>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e02d      	b.n	800643e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fc fd57 	bl	8002e94 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11a      	bne.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d013      	beq.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e007      	b.n	800643e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b20      	cmp	r3, #32
 800643a:	d1c8      	bne.n	80063ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	@ 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d068      	beq.n	8006546 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2210      	movs	r2, #16
 800647a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800647c:	e049      	b.n	8006512 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006484:	d045      	beq.n	8006512 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006486:	f7fc fd05 	bl	8002e94 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <I2C_IsErrorOccurred+0x54>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d13a      	bne.n	8006512 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064be:	d121      	bne.n	8006504 <I2C_IsErrorOccurred+0xbc>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c6:	d01d      	beq.n	8006504 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064c8:	7cfb      	ldrb	r3, [r7, #19]
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d01a      	beq.n	8006504 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064de:	f7fc fcd9 	bl	8002e94 <HAL_GetTick>
 80064e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e4:	e00e      	b.n	8006504 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064e6:	f7fc fcd5 	bl	8002e94 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b19      	cmp	r3, #25
 80064f2:	d907      	bls.n	8006504 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f043 0320 	orr.w	r3, r3, #32
 80064fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006502:	e006      	b.n	8006512 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d1e9      	bne.n	80064e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b20      	cmp	r3, #32
 800651e:	d003      	beq.n	8006528 <I2C_IsErrorOccurred+0xe0>
 8006520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0aa      	beq.n	800647e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2220      	movs	r2, #32
 8006536:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f043 0304 	orr.w	r3, r3, #4
 800653e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800658a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	f043 0302 	orr.w	r3, r3, #2
 80065a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80065b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01c      	beq.n	80065f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff fe3b 	bl	8006238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <I2C_IsErrorOccurred+0x1bc>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80065f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3728      	adds	r7, #40	@ 0x28
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	fe00e800 	.word	0xfe00e800

08006608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	817b      	strh	r3, [r7, #10]
 8006616:	4613      	mov	r3, r2
 8006618:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006620:	7a7b      	ldrb	r3, [r7, #9]
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006628:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4313      	orrs	r3, r2
 8006632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	0d5b      	lsrs	r3, r3, #21
 8006642:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006646:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <I2C_TransferConfig+0x60>)
 8006648:	430b      	orrs	r3, r1
 800664a:	43db      	mvns	r3, r3
 800664c:	ea02 0103 	and.w	r1, r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	03ff63ff 	.word	0x03ff63ff

0800666c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b20      	cmp	r3, #32
 8006680:	d138      	bne.n	80066f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800668c:	2302      	movs	r3, #2
 800668e:	e032      	b.n	80066f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	@ 0x24
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b20      	cmp	r3, #32
 8006716:	d139      	bne.n	800678c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006722:	2302      	movs	r3, #2
 8006724:	e033      	b.n	800678e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2224      	movs	r2, #36	@ 0x24
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e041      	b.n	8006830 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80067b4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f245 5255 	movw	r2, #21845	@ 0x5555
 80067be:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6852      	ldr	r2, [r2, #4]
 80067c8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6892      	ldr	r2, [r2, #8]
 80067d2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80067d4:	f7fc fb5e 	bl	8002e94 <HAL_GetTick>
 80067d8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80067da:	e00f      	b.n	80067fc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80067dc:	f7fc fb5a 	bl	8002e94 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b31      	cmp	r3, #49	@ 0x31
 80067e8:	d908      	bls.n	80067fc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e019      	b.n	8006830 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e8      	bne.n	80067dc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	429a      	cmp	r2, r3
 8006816:	d005      	beq.n	8006824 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68d2      	ldr	r2, [r2, #12]
 8006820:	611a      	str	r2, [r3, #16]
 8006822:	e004      	b.n	800682e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800682c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006848:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d141      	bne.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006866:	4b4b      	ldr	r3, [pc, #300]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006872:	d131      	bne.n	80068d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006874:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687a:	4a46      	ldr	r2, [pc, #280]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006884:	4b43      	ldr	r3, [pc, #268]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800688c:	4a41      	ldr	r2, [pc, #260]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006892:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006894:	4b40      	ldr	r3, [pc, #256]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2232      	movs	r2, #50	@ 0x32
 800689a:	fb02 f303 	mul.w	r3, r2, r3
 800689e:	4a3f      	ldr	r2, [pc, #252]	@ (800699c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068aa:	e002      	b.n	80068b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b2:	4b38      	ldr	r3, [pc, #224]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068be:	d102      	bne.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f2      	bne.n	80068ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068c6:	4b33      	ldr	r3, [pc, #204]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d2:	d158      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e057      	b.n	8006988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068de:	4a2d      	ldr	r2, [pc, #180]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80068e8:	e04d      	b.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f0:	d141      	bne.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068f2:	4b28      	ldr	r3, [pc, #160]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fe:	d131      	bne.n	8006964 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006900:	4b24      	ldr	r3, [pc, #144]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006906:	4a23      	ldr	r2, [pc, #140]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800690c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006918:	4a1e      	ldr	r2, [pc, #120]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800691e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006920:	4b1d      	ldr	r3, [pc, #116]	@ (8006998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2232      	movs	r2, #50	@ 0x32
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	0c9b      	lsrs	r3, r3, #18
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006936:	e002      	b.n	800693e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b01      	subs	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694a:	d102      	bne.n	8006952 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f2      	bne.n	8006938 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800695e:	d112      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e011      	b.n	8006988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006974:	e007      	b.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006976:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800697e:	4a05      	ldr	r2, [pc, #20]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006984:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40007000 	.word	0x40007000
 8006998:	20000004 	.word	0x20000004
 800699c:	431bde83 	.word	0x431bde83

080069a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4a04      	ldr	r2, [pc, #16]	@ (80069bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069ae:	6093      	str	r3, [r2, #8]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40007000 	.word	0x40007000

080069c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e2fe      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d075      	beq.n	8006aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069de:	4b97      	ldr	r3, [pc, #604]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e8:	4b94      	ldr	r3, [pc, #592]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d102      	bne.n	80069fe <HAL_RCC_OscConfig+0x3e>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d002      	beq.n	8006a04 <HAL_RCC_OscConfig+0x44>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d10b      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	4b8d      	ldr	r3, [pc, #564]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05b      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x108>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d157      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e2d9      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a24:	d106      	bne.n	8006a34 <HAL_RCC_OscConfig+0x74>
 8006a26:	4b85      	ldr	r3, [pc, #532]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a84      	ldr	r2, [pc, #528]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e01d      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x98>
 8006a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7e      	ldr	r2, [pc, #504]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00b      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a58:	4b78      	ldr	r3, [pc, #480]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a77      	ldr	r2, [pc, #476]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4b75      	ldr	r3, [pc, #468]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a74      	ldr	r2, [pc, #464]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d013      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fc fa0c 	bl	8002e94 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fc fa08 	bl	8002e94 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	@ 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e29e      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	4b6a      	ldr	r3, [pc, #424]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0xc0>
 8006a9e:	e014      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fc f9f8 	bl	8002e94 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa8:	f7fc f9f4 	bl	8002e94 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b64      	cmp	r3, #100	@ 0x64
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e28a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	4b60      	ldr	r3, [pc, #384]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0xe8>
 8006ac6:	e000      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d075      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad6:	4b59      	ldr	r3, [pc, #356]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
 8006ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae0:	4b56      	ldr	r3, [pc, #344]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	d102      	bne.n	8006af6 <HAL_RCC_OscConfig+0x136>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_OscConfig+0x13c>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d11f      	bne.n	8006b3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afc:	4b4f      	ldr	r3, [pc, #316]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x154>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e25d      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	4b49      	ldr	r3, [pc, #292]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	4946      	ldr	r1, [pc, #280]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b28:	4b45      	ldr	r3, [pc, #276]	@ (8006c40 <HAL_RCC_OscConfig+0x280>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fb fe05 	bl	800273c <HAL_InitTick>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d043      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e249      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d023      	beq.n	8006b8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b44:	4b3d      	ldr	r3, [pc, #244]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3c      	ldr	r2, [pc, #240]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fc f9a0 	bl	8002e94 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b58:	f7fc f99c 	bl	8002e94 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e232      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6a:	4b34      	ldr	r3, [pc, #208]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b76:	4b31      	ldr	r3, [pc, #196]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	492d      	ldr	r1, [pc, #180]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]
 8006b8a:	e01a      	b.n	8006bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fc f97c 	bl	8002e94 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fc f978 	bl	8002e94 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e20e      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb2:	4b22      	ldr	r3, [pc, #136]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x1e0>
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d041      	beq.n	8006c52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bd6:	4b19      	ldr	r3, [pc, #100]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bdc:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fc f955 	bl	8002e94 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fc f951 	bl	8002e94 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e1e7      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c00:	4b0e      	ldr	r3, [pc, #56]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <HAL_RCC_OscConfig+0x22e>
 8006c0e:	e020      	b.n	8006c52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c10:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c16:	4a09      	ldr	r2, [pc, #36]	@ (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c20:	f7fc f938 	bl	8002e94 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c26:	e00d      	b.n	8006c44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c28:	f7fc f934 	bl	8002e94 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d906      	bls.n	8006c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e1ca      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c44:	4b8c      	ldr	r3, [pc, #560]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1ea      	bne.n	8006c28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a6 	beq.w	8006dac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c60:	2300      	movs	r3, #0
 8006c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c64:	4b84      	ldr	r3, [pc, #528]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCC_OscConfig+0x2b4>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x2b6>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c86:	4b7c      	ldr	r3, [pc, #496]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c92:	2301      	movs	r3, #1
 8006c94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c96:	4b79      	ldr	r3, [pc, #484]	@ (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d118      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ca2:	4b76      	ldr	r3, [pc, #472]	@ (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a75      	ldr	r2, [pc, #468]	@ (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cae:	f7fc f8f1 	bl	8002e94 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb6:	f7fc f8ed 	bl	8002e94 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e183      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d108      	bne.n	8006cee <HAL_RCC_OscConfig+0x32e>
 8006cdc:	4b66      	ldr	r3, [pc, #408]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce2:	4a65      	ldr	r2, [pc, #404]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cec:	e024      	b.n	8006d38 <HAL_RCC_OscConfig+0x378>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d110      	bne.n	8006d18 <HAL_RCC_OscConfig+0x358>
 8006cf6:	4b60      	ldr	r3, [pc, #384]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f043 0304 	orr.w	r3, r3, #4
 8006d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d06:	4b5c      	ldr	r3, [pc, #368]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d16:	e00f      	b.n	8006d38 <HAL_RCC_OscConfig+0x378>
 8006d18:	4b57      	ldr	r3, [pc, #348]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1e:	4a56      	ldr	r2, [pc, #344]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d28:	4b53      	ldr	r3, [pc, #332]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2e:	4a52      	ldr	r2, [pc, #328]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d016      	beq.n	8006d6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fc f8a8 	bl	8002e94 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d46:	e00a      	b.n	8006d5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d48:	f7fc f8a4 	bl	8002e94 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e138      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d5e:	4b46      	ldr	r3, [pc, #280]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ed      	beq.n	8006d48 <HAL_RCC_OscConfig+0x388>
 8006d6c:	e015      	b.n	8006d9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fc f891 	bl	8002e94 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d74:	e00a      	b.n	8006d8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d76:	f7fc f88d 	bl	8002e94 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e121      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1ed      	bne.n	8006d76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d105      	bne.n	8006dac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da0:	4b35      	ldr	r3, [pc, #212]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da4:	4a34      	ldr	r2, [pc, #208]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03c      	beq.n	8006e32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01c      	beq.n	8006dfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fc f860 	bl	8002e94 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dd8:	f7fc f85c 	bl	8002e94 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e0f2      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dea:	4b23      	ldr	r3, [pc, #140]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0ef      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x418>
 8006df8:	e01b      	b.n	8006e32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e00:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0a:	f7fc f843 	bl	8002e94 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e12:	f7fc f83f 	bl	8002e94 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e0d5      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e24:	4b14      	ldr	r3, [pc, #80]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ef      	bne.n	8006e12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80c9 	beq.w	8006fce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	f000 8083 	beq.w	8006f50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d15e      	bne.n	8006f10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e52:	4b09      	ldr	r3, [pc, #36]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a08      	ldr	r2, [pc, #32]	@ (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fc f819 	bl	8002e94 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e64:	e00c      	b.n	8006e80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fc f815 	bl	8002e94 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d905      	bls.n	8006e80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e0ab      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e80:	4b55      	ldr	r3, [pc, #340]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ec      	bne.n	8006e66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8c:	4b52      	ldr	r3, [pc, #328]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	4b52      	ldr	r3, [pc, #328]	@ (8006fdc <HAL_RCC_OscConfig+0x61c>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6a11      	ldr	r1, [r2, #32]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eae:	0852      	lsrs	r2, r2, #1
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	0552      	lsls	r2, r2, #21
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0652      	lsls	r2, r2, #25
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ec6:	06d2      	lsls	r2, r2, #27
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	4943      	ldr	r1, [pc, #268]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b41      	ldr	r3, [pc, #260]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a40      	ldr	r2, [pc, #256]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006edc:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ee6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fb ffd4 	bl	8002e94 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fb ffd0 	bl	8002e94 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e066      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	4b35      	ldr	r3, [pc, #212]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x530>
 8006f0e:	e05e      	b.n	8006fce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f10:	4b31      	ldr	r3, [pc, #196]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a30      	ldr	r2, [pc, #192]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fb ffba 	bl	8002e94 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f24:	f7fb ffb6 	bl	8002e94 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e04c      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f36:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f42:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	4924      	ldr	r1, [pc, #144]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f48:	4b25      	ldr	r3, [pc, #148]	@ (8006fe0 <HAL_RCC_OscConfig+0x620>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	60cb      	str	r3, [r1, #12]
 8006f4e:	e03e      	b.n	8006fce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e039      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <HAL_RCC_OscConfig+0x618>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0203 	and.w	r2, r3, #3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d12c      	bne.n	8006fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d123      	bne.n	8006fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11b      	bne.n	8006fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d113      	bne.n	8006fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d001      	beq.n	8006fce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	019f800c 	.word	0x019f800c
 8006fe0:	feeefffc 	.word	0xfeeefffc

08006fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e11e      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ffc:	4b91      	ldr	r3, [pc, #580]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d910      	bls.n	800702c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700a:	4b8e      	ldr	r3, [pc, #568]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f023 020f 	bic.w	r2, r3, #15
 8007012:	498c      	ldr	r1, [pc, #560]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800701a:	4b8a      	ldr	r3, [pc, #552]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e106      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d073      	beq.n	8007120 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b03      	cmp	r3, #3
 800703e:	d129      	bne.n	8007094 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007040:	4b81      	ldr	r3, [pc, #516]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0f4      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007050:	f000 f9d0 	bl	80073f4 <RCC_GetSysClockFreqFromPLLSource>
 8007054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4a7c      	ldr	r2, [pc, #496]	@ (800724c <HAL_RCC_ClockConfig+0x268>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d93f      	bls.n	80070de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800705e:	4b7a      	ldr	r3, [pc, #488]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007072:	2b00      	cmp	r3, #0
 8007074:	d033      	beq.n	80070de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800707a:	2b00      	cmp	r3, #0
 800707c:	d12f      	bne.n	80070de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800707e:	4b72      	ldr	r3, [pc, #456]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007086:	4a70      	ldr	r2, [pc, #448]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e024      	b.n	80070de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d107      	bne.n	80070ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800709c:	4b6a      	ldr	r3, [pc, #424]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0c6      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ac:	4b66      	ldr	r3, [pc, #408]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0be      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070bc:	f000 f8ce 	bl	800725c <HAL_RCC_GetSysClockFreq>
 80070c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4a61      	ldr	r2, [pc, #388]	@ (800724c <HAL_RCC_ClockConfig+0x268>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d909      	bls.n	80070de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070d2:	4a5d      	ldr	r2, [pc, #372]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80070d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070de:	4b5a      	ldr	r3, [pc, #360]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f023 0203 	bic.w	r2, r3, #3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4957      	ldr	r1, [pc, #348]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f0:	f7fb fed0 	bl	8002e94 <HAL_GetTick>
 80070f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f6:	e00a      	b.n	800710e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f8:	f7fb fecc 	bl	8002e94 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e095      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710e:	4b4e      	ldr	r3, [pc, #312]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 020c 	and.w	r2, r3, #12
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	429a      	cmp	r2, r3
 800711e:	d1eb      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d023      	beq.n	8007174 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007138:	4b43      	ldr	r3, [pc, #268]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	4a42      	ldr	r2, [pc, #264]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800713e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007142:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007150:	4b3d      	ldr	r3, [pc, #244]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007158:	4a3b      	ldr	r2, [pc, #236]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800715a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800715e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007160:	4b39      	ldr	r3, [pc, #228]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4936      	ldr	r1, [pc, #216]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
 8007172:	e008      	b.n	8007186 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d105      	bne.n	8007186 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800717a:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	4a32      	ldr	r2, [pc, #200]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007184:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007186:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d21d      	bcs.n	80071d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007194:	4b2b      	ldr	r3, [pc, #172]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f023 020f 	bic.w	r2, r3, #15
 800719c:	4929      	ldr	r1, [pc, #164]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071a4:	f7fb fe76 	bl	8002e94 <HAL_GetTick>
 80071a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071aa:	e00a      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ac:	f7fb fe72 	bl	8002e94 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e03b      	b.n	800723a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c2:	4b20      	ldr	r3, [pc, #128]	@ (8007244 <HAL_RCC_ClockConfig+0x260>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d1ed      	bne.n	80071ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4917      	ldr	r1, [pc, #92]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071fa:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	490f      	ldr	r1, [pc, #60]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 800720a:	4313      	orrs	r3, r2
 800720c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800720e:	f000 f825 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8007212:	4602      	mov	r2, r0
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <HAL_RCC_ClockConfig+0x264>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	490c      	ldr	r1, [pc, #48]	@ (8007250 <HAL_RCC_ClockConfig+0x26c>)
 8007220:	5ccb      	ldrb	r3, [r1, r3]
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	4a0a      	ldr	r2, [pc, #40]	@ (8007254 <HAL_RCC_ClockConfig+0x270>)
 800722c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800722e:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <HAL_RCC_ClockConfig+0x274>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f7fb fa82 	bl	800273c <HAL_InitTick>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	40022000 	.word	0x40022000
 8007248:	40021000 	.word	0x40021000
 800724c:	04c4b400 	.word	0x04c4b400
 8007250:	0801d37c 	.word	0x0801d37c
 8007254:	20000004 	.word	0x20000004
 8007258:	20000008 	.word	0x20000008

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007262:	4b2c      	ldr	r3, [pc, #176]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
 800726a:	2b04      	cmp	r3, #4
 800726c:	d102      	bne.n	8007274 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800726e:	4b2a      	ldr	r3, [pc, #168]	@ (8007318 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	e047      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007274:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 030c 	and.w	r3, r3, #12
 800727c:	2b08      	cmp	r3, #8
 800727e:	d102      	bne.n	8007286 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007280:	4b26      	ldr	r3, [pc, #152]	@ (800731c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	e03e      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007286:	4b23      	ldr	r3, [pc, #140]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d136      	bne.n	8007300 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007292:	4b20      	ldr	r3, [pc, #128]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800729c:	4b1d      	ldr	r3, [pc, #116]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	3301      	adds	r3, #1
 80072a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d10c      	bne.n	80072ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072b0:	4a1a      	ldr	r2, [pc, #104]	@ (800731c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	4a16      	ldr	r2, [pc, #88]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072ba:	68d2      	ldr	r2, [r2, #12]
 80072bc:	0a12      	lsrs	r2, r2, #8
 80072be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	617b      	str	r3, [r7, #20]
      break;
 80072c8:	e00c      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ca:	4a13      	ldr	r2, [pc, #76]	@ (8007318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	4a10      	ldr	r2, [pc, #64]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d4:	68d2      	ldr	r2, [r2, #12]
 80072d6:	0a12      	lsrs	r2, r2, #8
 80072d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
      break;
 80072e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	0e5b      	lsrs	r3, r3, #25
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e001      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007304:	693b      	ldr	r3, [r7, #16]
}
 8007306:	4618      	mov	r0, r3
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40021000 	.word	0x40021000
 8007318:	00f42400 	.word	0x00f42400
 800731c:	016e3600 	.word	0x016e3600

08007320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007324:	4b03      	ldr	r3, [pc, #12]	@ (8007334 <HAL_RCC_GetHCLKFreq+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000004 	.word	0x20000004

08007338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800733c:	f7ff fff0 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b06      	ldr	r3, [pc, #24]	@ (800735c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4904      	ldr	r1, [pc, #16]	@ (8007360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40021000 	.word	0x40021000
 8007360:	0801d38c 	.word	0x0801d38c

08007364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007368:	f7ff ffda 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0adb      	lsrs	r3, r3, #11
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4904      	ldr	r1, [pc, #16]	@ (800738c <HAL_RCC_GetPCLK2Freq+0x28>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40021000 	.word	0x40021000
 800738c:	0801d38c 	.word	0x0801d38c

08007390 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	220f      	movs	r2, #15
 800739e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80073a0:	4b12      	ldr	r3, [pc, #72]	@ (80073ec <HAL_RCC_GetClockConfig+0x5c>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 0203 	and.w	r2, r3, #3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <HAL_RCC_GetClockConfig+0x5c>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80073b8:	4b0c      	ldr	r3, [pc, #48]	@ (80073ec <HAL_RCC_GetClockConfig+0x5c>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80073c4:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <HAL_RCC_GetClockConfig+0x5c>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80073d2:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <HAL_RCC_GetClockConfig+0x60>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 020f 	and.w	r2, r3, #15
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	601a      	str	r2, [r3, #0]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000
 80073f0:	40022000 	.word	0x40022000

080073f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007404:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b03      	cmp	r3, #3
 8007416:	d10c      	bne.n	8007432 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007418:	4a17      	ldr	r2, [pc, #92]	@ (8007478 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	4a14      	ldr	r2, [pc, #80]	@ (8007474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007422:	68d2      	ldr	r2, [r2, #12]
 8007424:	0a12      	lsrs	r2, r2, #8
 8007426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	617b      	str	r3, [r7, #20]
    break;
 8007430:	e00c      	b.n	800744c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007432:	4a12      	ldr	r2, [pc, #72]	@ (800747c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	4a0e      	ldr	r2, [pc, #56]	@ (8007474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800743c:	68d2      	ldr	r2, [r2, #12]
 800743e:	0a12      	lsrs	r2, r2, #8
 8007440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
    break;
 800744a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800744c:	4b09      	ldr	r3, [pc, #36]	@ (8007474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	3301      	adds	r3, #1
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007466:	687b      	ldr	r3, [r7, #4]
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40021000 	.word	0x40021000
 8007478:	016e3600 	.word	0x016e3600
 800747c:	00f42400 	.word	0x00f42400

08007480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007488:	2300      	movs	r3, #0
 800748a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800748c:	2300      	movs	r3, #0
 800748e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 8098 	beq.w	80075ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749e:	2300      	movs	r3, #0
 80074a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a2:	4b43      	ldr	r3, [pc, #268]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10d      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ae:	4b40      	ldr	r3, [pc, #256]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b2:	4a3f      	ldr	r2, [pc, #252]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ba:	4b3d      	ldr	r3, [pc, #244]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c6:	2301      	movs	r3, #1
 80074c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ca:	4b3a      	ldr	r3, [pc, #232]	@ (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a39      	ldr	r2, [pc, #228]	@ (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074d6:	f7fb fcdd 	bl	8002e94 <HAL_GetTick>
 80074da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074dc:	e009      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074de:	f7fb fcd9 	bl	8002e94 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d902      	bls.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	74fb      	strb	r3, [r7, #19]
        break;
 80074f0:	e005      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074f2:	4b30      	ldr	r3, [pc, #192]	@ (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ef      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074fe:	7cfb      	ldrb	r3, [r7, #19]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d159      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007504:	4b2a      	ldr	r3, [pc, #168]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800750e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01e      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	429a      	cmp	r2, r3
 800751e:	d019      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007520:	4b23      	ldr	r3, [pc, #140]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800752a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800752c:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007532:	4a1f      	ldr	r2, [pc, #124]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800753c:	4b1c      	ldr	r3, [pc, #112]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007542:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800754c:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d016      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755e:	f7fb fc99 	bl	8002e94 <HAL_GetTick>
 8007562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007564:	e00b      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fb fc95 	bl	8002e94 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d902      	bls.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	74fb      	strb	r3, [r7, #19]
            break;
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800757e:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0ec      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800758c:	7cfb      	ldrb	r3, [r7, #19]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a0:	4903      	ldr	r1, [pc, #12]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80075a8:	e008      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075aa:	7cfb      	ldrb	r3, [r7, #19]
 80075ac:	74bb      	strb	r3, [r7, #18]
 80075ae:	e005      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075bc:	7c7b      	ldrb	r3, [r7, #17]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d105      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c6:	4aa6      	ldr	r2, [pc, #664]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075da:	4ba1      	ldr	r3, [pc, #644]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f023 0203 	bic.w	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	499d      	ldr	r1, [pc, #628]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075fc:	4b98      	ldr	r3, [pc, #608]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007602:	f023 020c 	bic.w	r2, r3, #12
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	4995      	ldr	r1, [pc, #596]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800761e:	4b90      	ldr	r3, [pc, #576]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	498c      	ldr	r1, [pc, #560]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007640:	4b87      	ldr	r3, [pc, #540]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	4984      	ldr	r1, [pc, #528]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007662:	4b7f      	ldr	r3, [pc, #508]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007668:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	497b      	ldr	r1, [pc, #492]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007684:	4b76      	ldr	r3, [pc, #472]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	4973      	ldr	r1, [pc, #460]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	496a      	ldr	r1, [pc, #424]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076c8:	4b65      	ldr	r3, [pc, #404]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	4962      	ldr	r1, [pc, #392]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	4959      	ldr	r1, [pc, #356]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800770c:	4b54      	ldr	r3, [pc, #336]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007712:	f023 0203 	bic.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	4951      	ldr	r1, [pc, #324]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800772e:	4b4c      	ldr	r3, [pc, #304]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4948      	ldr	r1, [pc, #288]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800774c:	2b00      	cmp	r3, #0
 800774e:	d015      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007750:	4b43      	ldr	r3, [pc, #268]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	4940      	ldr	r1, [pc, #256]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800776e:	d105      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007770:	4b3b      	ldr	r3, [pc, #236]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4a3a      	ldr	r2, [pc, #232]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800777a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007784:	2b00      	cmp	r3, #0
 8007786:	d015      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007788:	4b35      	ldr	r3, [pc, #212]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007796:	4932      	ldr	r1, [pc, #200]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007798:	4313      	orrs	r3, r2
 800779a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077a6:	d105      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d015      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077c0:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	4924      	ldr	r1, [pc, #144]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077de:	d105      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d015      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077f8:	4b19      	ldr	r3, [pc, #100]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007806:	4916      	ldr	r1, [pc, #88]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007808:	4313      	orrs	r3, r2
 800780a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007816:	d105      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007818:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4a10      	ldr	r2, [pc, #64]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007822:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d019      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007830:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	4908      	ldr	r1, [pc, #32]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007840:	4313      	orrs	r3, r2
 8007842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800784e:	d109      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007850:	4b03      	ldr	r3, [pc, #12]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	4a02      	ldr	r2, [pc, #8]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800785a:	60d3      	str	r3, [r2, #12]
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800785e:	bf00      	nop
 8007860:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d015      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007870:	4b29      	ldr	r3, [pc, #164]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007876:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787e:	4926      	ldr	r1, [pc, #152]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007880:	4313      	orrs	r3, r2
 8007882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800788e:	d105      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007890:	4b21      	ldr	r3, [pc, #132]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	4a20      	ldr	r2, [pc, #128]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800789a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d015      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80078a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b6:	4918      	ldr	r1, [pc, #96]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c6:	d105      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078c8:	4b13      	ldr	r3, [pc, #76]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4a12      	ldr	r2, [pc, #72]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d015      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	490a      	ldr	r1, [pc, #40]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078fe:	d105      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4a04      	ldr	r2, [pc, #16]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800790a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800790c:	7cbb      	ldrb	r3, [r7, #18]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40021000 	.word	0x40021000

0800791c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e049      	b.n	80079c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f841 	bl	80079ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 fa30 	bl	8007dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d001      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e054      	b.n	8007aa2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a22:	d01d      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	@ (8007ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	@ (8007ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <HAL_TIM_Base_Start_IT+0xdc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d115      	bne.n	8007a8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <HAL_TIM_Base_Start_IT+0xec>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d015      	beq.n	8007a9e <HAL_TIM_Base_Start_IT+0xbe>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a78:	d011      	beq.n	8007a9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8a:	e008      	b.n	8007a9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e000      	b.n	8007aa0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40015000 	.word	0x40015000
 8007acc:	00010007 	.word	0x00010007

08007ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d020      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01b      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0202 	mvn.w	r2, #2
 8007b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f931 	bl	8007d82 <HAL_TIM_IC_CaptureCallback>
 8007b20:	e005      	b.n	8007b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f923 	bl	8007d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f934 	bl	8007d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d020      	beq.n	8007b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01b      	beq.n	8007b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0204 	mvn.w	r2, #4
 8007b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f90b 	bl	8007d82 <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8fd 	bl	8007d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f90e 	bl	8007d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0308 	and.w	r3, r3, #8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d020      	beq.n	8007bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01b      	beq.n	8007bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0208 	mvn.w	r2, #8
 8007b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f8e5 	bl	8007d82 <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8d7 	bl	8007d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8e8 	bl	8007d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01b      	beq.n	8007c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0210 	mvn.w	r2, #16
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2208      	movs	r2, #8
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8bf 	bl	8007d82 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8b1 	bl	8007d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f8c2 	bl	8007d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00c      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0201 	mvn.w	r2, #1
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fa fbda 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d104      	bne.n	8007c50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00c      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f969 	bl	8007f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f961 	bl	8007f50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f87c 	bl	8007daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f06f 0220 	mvn.w	r2, #32
 8007cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f929 	bl	8007f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f935 	bl	8007f64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f92d 	bl	8007f78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00c      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f925 	bl	8007f8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00c      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f91d 	bl	8007fa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8007f04 <TIM_Base_SetConfig+0x144>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d017      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dde:	d013      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a49      	ldr	r2, [pc, #292]	@ (8007f08 <TIM_Base_SetConfig+0x148>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00f      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a48      	ldr	r2, [pc, #288]	@ (8007f0c <TIM_Base_SetConfig+0x14c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a47      	ldr	r2, [pc, #284]	@ (8007f10 <TIM_Base_SetConfig+0x150>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a46      	ldr	r2, [pc, #280]	@ (8007f14 <TIM_Base_SetConfig+0x154>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_Base_SetConfig+0x48>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a45      	ldr	r2, [pc, #276]	@ (8007f18 <TIM_Base_SetConfig+0x158>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d108      	bne.n	8007e1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a39      	ldr	r2, [pc, #228]	@ (8007f04 <TIM_Base_SetConfig+0x144>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d023      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e28:	d01f      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a36      	ldr	r2, [pc, #216]	@ (8007f08 <TIM_Base_SetConfig+0x148>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01b      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a35      	ldr	r2, [pc, #212]	@ (8007f0c <TIM_Base_SetConfig+0x14c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d017      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a34      	ldr	r2, [pc, #208]	@ (8007f10 <TIM_Base_SetConfig+0x150>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a33      	ldr	r2, [pc, #204]	@ (8007f14 <TIM_Base_SetConfig+0x154>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00f      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a33      	ldr	r2, [pc, #204]	@ (8007f1c <TIM_Base_SetConfig+0x15c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00b      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a32      	ldr	r2, [pc, #200]	@ (8007f20 <TIM_Base_SetConfig+0x160>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d007      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a31      	ldr	r2, [pc, #196]	@ (8007f24 <TIM_Base_SetConfig+0x164>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_Base_SetConfig+0xaa>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2c      	ldr	r2, [pc, #176]	@ (8007f18 <TIM_Base_SetConfig+0x158>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	@ (8007f04 <TIM_Base_SetConfig+0x144>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d013      	beq.n	8007ed0 <TIM_Base_SetConfig+0x110>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8007f14 <TIM_Base_SetConfig+0x154>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00f      	beq.n	8007ed0 <TIM_Base_SetConfig+0x110>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f1c <TIM_Base_SetConfig+0x15c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00b      	beq.n	8007ed0 <TIM_Base_SetConfig+0x110>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a19      	ldr	r2, [pc, #100]	@ (8007f20 <TIM_Base_SetConfig+0x160>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d007      	beq.n	8007ed0 <TIM_Base_SetConfig+0x110>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <TIM_Base_SetConfig+0x164>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_Base_SetConfig+0x110>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a13      	ldr	r2, [pc, #76]	@ (8007f18 <TIM_Base_SetConfig+0x158>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d103      	bne.n	8007ed8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d105      	bne.n	8007ef6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f023 0201 	bic.w	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	611a      	str	r2, [r3, #16]
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40012c00 	.word	0x40012c00
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	40013400 	.word	0x40013400
 8007f18:	40015000 	.word	0x40015000
 8007f1c:	40014000 	.word	0x40014000
 8007f20:	40014400 	.word	0x40014400
 8007f24:	40014800 	.word	0x40014800

08007f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e042      	b.n	800804c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fa fd9d 	bl	8002b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2224      	movs	r2, #36	@ 0x24
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f806 	bl	8009010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd07 	bl	8008a18 <UART_SetConfig>
 800800a:	4603      	mov	r3, r0
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e01b      	b.n	800804c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f885 	bl	8009154 <UART_CheckIdleState>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08a      	sub	sp, #40	@ 0x28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008068:	2b20      	cmp	r3, #32
 800806a:	d167      	bne.n	800813c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <HAL_UART_Transmit_DMA+0x24>
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e060      	b.n	800813e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	88fa      	ldrh	r2, [r7, #6]
 800808e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2221      	movs	r2, #33	@ 0x21
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d028      	beq.n	80080fc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ae:	4a26      	ldr	r2, [pc, #152]	@ (8008148 <HAL_UART_Transmit_DMA+0xf4>)
 80080b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080b6:	4a25      	ldr	r2, [pc, #148]	@ (800814c <HAL_UART_Transmit_DMA+0xf8>)
 80080b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080be:	4a24      	ldr	r2, [pc, #144]	@ (8008150 <HAL_UART_Transmit_DMA+0xfc>)
 80080c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080c6:	2200      	movs	r2, #0
 80080c8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d2:	4619      	mov	r1, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3328      	adds	r3, #40	@ 0x28
 80080da:	461a      	mov	r2, r3
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	f7fc ffa3 	bl	8005028 <HAL_DMA_Start_IT>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d009      	beq.n	80080fc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2210      	movs	r2, #16
 80080ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e020      	b.n	800813e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2240      	movs	r2, #64	@ 0x40
 8008102:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	613b      	str	r3, [r7, #16]
   return(result);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008124:	623a      	str	r2, [r7, #32]
 8008126:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	61bb      	str	r3, [r7, #24]
   return(result);
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	e000      	b.n	800813e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800813c:	2302      	movs	r3, #2
  }
}
 800813e:	4618      	mov	r0, r3
 8008140:	3728      	adds	r7, #40	@ 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	0800961f 	.word	0x0800961f
 800814c:	080096b9 	.word	0x080096b9
 8008150:	0800983f 	.word	0x0800983f

08008154 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	@ 0x28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008168:	2b20      	cmp	r3, #32
 800816a:	d137      	bne.n	80081dc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_UART_Receive_DMA+0x24>
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e030      	b.n	80081de <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a18      	ldr	r2, [pc, #96]	@ (80081e8 <HAL_UART_Receive_DMA+0x94>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d01f      	beq.n	80081cc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d018      	beq.n	80081cc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	613b      	str	r3, [r7, #16]
   return(result);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	69f9      	ldr	r1, [r7, #28]
 80081be:	6a3a      	ldr	r2, [r7, #32]
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e6      	bne.n	800819a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f001 f8d6 	bl	8009384 <UART_Start_Receive_DMA>
 80081d8:	4603      	mov	r3, r0
 80081da:	e000      	b.n	80081de <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081dc:	2302      	movs	r3, #2
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3728      	adds	r7, #40	@ 0x28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40008000 	.word	0x40008000

080081ec <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b090      	sub	sp, #64	@ 0x40
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820e:	2b80      	cmp	r3, #128	@ 0x80
 8008210:	d139      	bne.n	8008286 <HAL_UART_DMAStop+0x9a>
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	2b21      	cmp	r3, #33	@ 0x21
 8008216:	d136      	bne.n	8008286 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3308      	adds	r3, #8
 800821e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	61fb      	str	r3, [r7, #28]
   return(result);
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800823a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800823e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e5      	bne.n	8008218 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d015      	beq.n	8008280 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008258:	4618      	mov	r0, r3
 800825a:	f7fc ff60 	bl	800511e <HAL_DMA_Abort>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00d      	beq.n	8008280 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd f8c7 	bl	80053fc <HAL_DMA_GetError>
 800826e:	4603      	mov	r3, r0
 8008270:	2b20      	cmp	r3, #32
 8008272:	d105      	bne.n	8008280 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2210      	movs	r2, #16
 8008278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e047      	b.n	8008310 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f925 	bl	80094d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008290:	2b40      	cmp	r3, #64	@ 0x40
 8008292:	d13c      	bne.n	800830e <HAL_UART_DMAStop+0x122>
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b22      	cmp	r3, #34	@ 0x22
 8008298:	d139      	bne.n	800830e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ba:	61ba      	str	r2, [r7, #24]
 80082bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6979      	ldr	r1, [r7, #20]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	613b      	str	r3, [r7, #16]
   return(result);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e5      	bne.n	800829a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d017      	beq.n	8008308 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fc ff1d 	bl	800511e <HAL_DMA_Abort>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd f883 	bl	80053fc <HAL_DMA_GetError>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d105      	bne.n	8008308 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2210      	movs	r2, #16
 8008300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e003      	b.n	8008310 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f922 	bl	8009552 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3740      	adds	r7, #64	@ 0x40
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b0ba      	sub	sp, #232	@ 0xe8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800833e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008342:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008346:	4013      	ands	r3, r2
 8008348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800834c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11b      	bne.n	800838c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d015      	beq.n	800838c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d105      	bne.n	8008378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800836c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8300 	beq.w	8008982 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
      }
      return;
 800838a:	e2fa      	b.n	8008982 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800838c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8123 	beq.w	80085dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800839a:	4b8d      	ldr	r3, [pc, #564]	@ (80085d0 <HAL_UART_IRQHandler+0x2b8>)
 800839c:	4013      	ands	r3, r2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80083a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80083a6:	4b8b      	ldr	r3, [pc, #556]	@ (80085d4 <HAL_UART_IRQHandler+0x2bc>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8116 	beq.w	80085dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0xc8>
 80083bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2201      	movs	r2, #1
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	f043 0201 	orr.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d011      	beq.n	8008410 <HAL_UART_IRQHandler+0xf8>
 80083ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2202      	movs	r2, #2
 80083fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008406:	f043 0204 	orr.w	r2, r3, #4
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d011      	beq.n	8008440 <HAL_UART_IRQHandler+0x128>
 800841c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2204      	movs	r2, #4
 800842e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008436:	f043 0202 	orr.w	r2, r3, #2
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d017      	beq.n	800847c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800845c:	4b5c      	ldr	r3, [pc, #368]	@ (80085d0 <HAL_UART_IRQHandler+0x2b8>)
 800845e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2208      	movs	r2, #8
 800846a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008472:	f043 0208 	orr.w	r2, r3, #8
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800847c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008484:	2b00      	cmp	r3, #0
 8008486:	d012      	beq.n	80084ae <HAL_UART_IRQHandler+0x196>
 8008488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800848c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800849c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8266 	beq.w	8008986 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d013      	beq.n	80084ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008502:	2b40      	cmp	r3, #64	@ 0x40
 8008504:	d005      	beq.n	8008512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800850a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800850e:	2b00      	cmp	r3, #0
 8008510:	d054      	beq.n	80085bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f001 f81d 	bl	8009552 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008522:	2b40      	cmp	r3, #64	@ 0x40
 8008524:	d146      	bne.n	80085b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800853c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800855e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800856a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1d9      	bne.n	8008526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008582:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <HAL_UART_IRQHandler+0x2c0>)
 8008584:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800858c:	4618      	mov	r0, r3
 800858e:	f7fc fe1f 	bl	80051d0 <HAL_DMA_Abort_IT>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d019      	beq.n	80085cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80085a6:	4610      	mov	r0, r2
 80085a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085aa:	e00f      	b.n	80085cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa1d 	bl	80089ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	e00b      	b.n	80085cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa19 	bl	80089ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ba:	e007      	b.n	80085cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fa15 	bl	80089ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80085ca:	e1dc      	b.n	8008986 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085cc:	bf00      	nop
    return;
 80085ce:	e1da      	b.n	8008986 <HAL_UART_IRQHandler+0x66e>
 80085d0:	10000001 	.word	0x10000001
 80085d4:	04000120 	.word	0x04000120
 80085d8:	080098bf 	.word	0x080098bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	f040 8170 	bne.w	80088c6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8169 	beq.w	80088c6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8162 	beq.w	80088c6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2210      	movs	r2, #16
 8008608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b40      	cmp	r3, #64	@ 0x40
 8008616:	f040 80d8 	bne.w	80087ca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80af 	beq.w	8008790 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800863c:	429a      	cmp	r2, r3
 800863e:	f080 80a7 	bcs.w	8008790 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 8087 	bne.w	800876e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800868a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800868e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1da      	bne.n	8008660 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e1      	bne.n	80086aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800870a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800870c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e3      	bne.n	80086e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800873a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800873c:	f023 0310 	bic.w	r3, r3, #16
 8008740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800874e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800875c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e4      	bne.n	800872c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008768:	4618      	mov	r0, r3
 800876a:	f7fc fcd8 	bl	800511e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2202      	movs	r2, #2
 8008772:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008780:	b29b      	uxth	r3, r3
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	b29b      	uxth	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f939 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800878e:	e0fc      	b.n	800898a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800879a:	429a      	cmp	r2, r3
 800879c:	f040 80f5 	bne.w	800898a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	f040 80eb 	bne.w	800898a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f91c 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
      return;
 80087c8:	e0df      	b.n	800898a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 80d1 	beq.w	800898e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80087ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80cc 	beq.w	800898e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800880a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008818:	647b      	str	r3, [r7, #68]	@ 0x44
 800881a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800881e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e4      	bne.n	80087f6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	623b      	str	r3, [r7, #32]
   return(result);
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008854:	633a      	str	r2, [r7, #48]	@ 0x30
 8008856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800885a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e1      	bne.n	800882c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	60fb      	str	r3, [r7, #12]
   return(result);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 0310 	bic.w	r3, r3, #16
 8008890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800889e:	61fb      	str	r3, [r7, #28]
 80088a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	69b9      	ldr	r1, [r7, #24]
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	617b      	str	r3, [r7, #20]
   return(result);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e4      	bne.n	800887c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f89e 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088c4:	e063      	b.n	800898e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00e      	beq.n	80088f0 <HAL_UART_IRQHandler+0x5d8>
 80088d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f825 	bl	8009938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ee:	e051      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d014      	beq.n	8008926 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008904:	2b00      	cmp	r3, #0
 8008906:	d105      	bne.n	8008914 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800890c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008918:	2b00      	cmp	r3, #0
 800891a:	d03a      	beq.n	8008992 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
    }
    return;
 8008924:	e035      	b.n	8008992 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800892a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <HAL_UART_IRQHandler+0x62e>
 8008932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 ffcf 	bl	80098e2 <UART_EndTransmit_IT>
    return;
 8008944:	e026      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800894a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <HAL_UART_IRQHandler+0x64e>
 8008952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008956:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fffe 	bl	8009960 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008964:	e016      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800896a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d010      	beq.n	8008994 <HAL_UART_IRQHandler+0x67c>
 8008972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008976:	2b00      	cmp	r3, #0
 8008978:	da0c      	bge.n	8008994 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 ffe6 	bl	800994c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008980:	e008      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
      return;
 8008982:	bf00      	nop
 8008984:	e006      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
    return;
 8008986:	bf00      	nop
 8008988:	e004      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
      return;
 800898a:	bf00      	nop
 800898c:	e002      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
      return;
 800898e:	bf00      	nop
 8008990:	e000      	b.n	8008994 <HAL_UART_IRQHandler+0x67c>
    return;
 8008992:	bf00      	nop
  }
}
 8008994:	37e8      	adds	r7, #232	@ 0xe8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop

0800899c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a1c:	b08c      	sub	sp, #48	@ 0x30
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	4baa      	ldr	r3, [pc, #680]	@ (8008cf0 <UART_SetConfig+0x2d8>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a9f      	ldr	r2, [pc, #636]	@ (8008cf4 <UART_SetConfig+0x2dc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a80:	4313      	orrs	r3, r2
 8008a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa2:	f023 010f 	bic.w	r1, r3, #15
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a90      	ldr	r2, [pc, #576]	@ (8008cf8 <UART_SetConfig+0x2e0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d125      	bne.n	8008b08 <UART_SetConfig+0xf0>
 8008abc:	4b8f      	ldr	r3, [pc, #572]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d81a      	bhi.n	8008b00 <UART_SetConfig+0xe8>
 8008aca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad0 <UART_SetConfig+0xb8>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008ae1 	.word	0x08008ae1
 8008ad4:	08008af1 	.word	0x08008af1
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008af9 	.word	0x08008af9
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae6:	e116      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aee:	e112      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af6:	e10e      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afe:	e10a      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b06:	e106      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a7c      	ldr	r2, [pc, #496]	@ (8008d00 <UART_SetConfig+0x2e8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d138      	bne.n	8008b84 <UART_SetConfig+0x16c>
 8008b12:	4b7a      	ldr	r3, [pc, #488]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b18:	f003 030c 	and.w	r3, r3, #12
 8008b1c:	2b0c      	cmp	r3, #12
 8008b1e:	d82d      	bhi.n	8008b7c <UART_SetConfig+0x164>
 8008b20:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <UART_SetConfig+0x110>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b5d 	.word	0x08008b5d
 8008b2c:	08008b7d 	.word	0x08008b7d
 8008b30:	08008b7d 	.word	0x08008b7d
 8008b34:	08008b7d 	.word	0x08008b7d
 8008b38:	08008b6d 	.word	0x08008b6d
 8008b3c:	08008b7d 	.word	0x08008b7d
 8008b40:	08008b7d 	.word	0x08008b7d
 8008b44:	08008b7d 	.word	0x08008b7d
 8008b48:	08008b65 	.word	0x08008b65
 8008b4c:	08008b7d 	.word	0x08008b7d
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b62:	e0d8      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b64:	2302      	movs	r3, #2
 8008b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6a:	e0d4      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b72:	e0d0      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b74:	2308      	movs	r3, #8
 8008b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7a:	e0cc      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b82:	e0c8      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a5e      	ldr	r2, [pc, #376]	@ (8008d04 <UART_SetConfig+0x2ec>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d125      	bne.n	8008bda <UART_SetConfig+0x1c2>
 8008b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b98:	2b30      	cmp	r3, #48	@ 0x30
 8008b9a:	d016      	beq.n	8008bca <UART_SetConfig+0x1b2>
 8008b9c:	2b30      	cmp	r3, #48	@ 0x30
 8008b9e:	d818      	bhi.n	8008bd2 <UART_SetConfig+0x1ba>
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d00a      	beq.n	8008bba <UART_SetConfig+0x1a2>
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d814      	bhi.n	8008bd2 <UART_SetConfig+0x1ba>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <UART_SetConfig+0x19a>
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d008      	beq.n	8008bc2 <UART_SetConfig+0x1aa>
 8008bb0:	e00f      	b.n	8008bd2 <UART_SetConfig+0x1ba>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb8:	e0ad      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc0:	e0a9      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc8:	e0a5      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd0:	e0a1      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008bd2:	2310      	movs	r3, #16
 8008bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd8:	e09d      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a4a      	ldr	r2, [pc, #296]	@ (8008d08 <UART_SetConfig+0x2f0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d125      	bne.n	8008c30 <UART_SetConfig+0x218>
 8008be4:	4b45      	ldr	r3, [pc, #276]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bf0:	d016      	beq.n	8008c20 <UART_SetConfig+0x208>
 8008bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bf4:	d818      	bhi.n	8008c28 <UART_SetConfig+0x210>
 8008bf6:	2b80      	cmp	r3, #128	@ 0x80
 8008bf8:	d00a      	beq.n	8008c10 <UART_SetConfig+0x1f8>
 8008bfa:	2b80      	cmp	r3, #128	@ 0x80
 8008bfc:	d814      	bhi.n	8008c28 <UART_SetConfig+0x210>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <UART_SetConfig+0x1f0>
 8008c02:	2b40      	cmp	r3, #64	@ 0x40
 8008c04:	d008      	beq.n	8008c18 <UART_SetConfig+0x200>
 8008c06:	e00f      	b.n	8008c28 <UART_SetConfig+0x210>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0e:	e082      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c10:	2302      	movs	r3, #2
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c16:	e07e      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1e:	e07a      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c26:	e076      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2e:	e072      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a35      	ldr	r2, [pc, #212]	@ (8008d0c <UART_SetConfig+0x2f4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d12a      	bne.n	8008c90 <UART_SetConfig+0x278>
 8008c3a:	4b30      	ldr	r3, [pc, #192]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c48:	d01a      	beq.n	8008c80 <UART_SetConfig+0x268>
 8008c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c4e:	d81b      	bhi.n	8008c88 <UART_SetConfig+0x270>
 8008c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c54:	d00c      	beq.n	8008c70 <UART_SetConfig+0x258>
 8008c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c5a:	d815      	bhi.n	8008c88 <UART_SetConfig+0x270>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <UART_SetConfig+0x250>
 8008c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c64:	d008      	beq.n	8008c78 <UART_SetConfig+0x260>
 8008c66:	e00f      	b.n	8008c88 <UART_SetConfig+0x270>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c6e:	e052      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c70:	2302      	movs	r3, #2
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c76:	e04e      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c7e:	e04a      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c86:	e046      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c8e:	e042      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a17      	ldr	r2, [pc, #92]	@ (8008cf4 <UART_SetConfig+0x2dc>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d13a      	bne.n	8008d10 <UART_SetConfig+0x2f8>
 8008c9a:	4b18      	ldr	r3, [pc, #96]	@ (8008cfc <UART_SetConfig+0x2e4>)
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ca8:	d01a      	beq.n	8008ce0 <UART_SetConfig+0x2c8>
 8008caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cae:	d81b      	bhi.n	8008ce8 <UART_SetConfig+0x2d0>
 8008cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cb4:	d00c      	beq.n	8008cd0 <UART_SetConfig+0x2b8>
 8008cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cba:	d815      	bhi.n	8008ce8 <UART_SetConfig+0x2d0>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <UART_SetConfig+0x2b0>
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc4:	d008      	beq.n	8008cd8 <UART_SetConfig+0x2c0>
 8008cc6:	e00f      	b.n	8008ce8 <UART_SetConfig+0x2d0>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cce:	e022      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cd6:	e01e      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cde:	e01a      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce6:	e016      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cee:	e012      	b.n	8008d16 <UART_SetConfig+0x2fe>
 8008cf0:	cfff69f3 	.word	0xcfff69f3
 8008cf4:	40008000 	.word	0x40008000
 8008cf8:	40013800 	.word	0x40013800
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	40004400 	.word	0x40004400
 8008d04:	40004800 	.word	0x40004800
 8008d08:	40004c00 	.word	0x40004c00
 8008d0c:	40005000 	.word	0x40005000
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4aae      	ldr	r2, [pc, #696]	@ (8008fd4 <UART_SetConfig+0x5bc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	f040 8097 	bne.w	8008e50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d823      	bhi.n	8008d72 <UART_SetConfig+0x35a>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <UART_SetConfig+0x318>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d55 	.word	0x08008d55
 8008d34:	08008d73 	.word	0x08008d73
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d73 	.word	0x08008d73
 8008d40:	08008d63 	.word	0x08008d63
 8008d44:	08008d73 	.word	0x08008d73
 8008d48:	08008d73 	.word	0x08008d73
 8008d4c:	08008d73 	.word	0x08008d73
 8008d50:	08008d6b 	.word	0x08008d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d54:	f7fe faf0 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8008d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d5a:	e010      	b.n	8008d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8008fd8 <UART_SetConfig+0x5c0>)
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d60:	e00d      	b.n	8008d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d62:	f7fe fa7b 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8008d66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d68:	e009      	b.n	8008d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d70:	e005      	b.n	8008d7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8130 	beq.w	8008fe6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8a:	4a94      	ldr	r2, [pc, #592]	@ (8008fdc <UART_SetConfig+0x5c4>)
 8008d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d305      	bcc.n	8008db6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d903      	bls.n	8008dbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008dbc:	e113      	b.n	8008fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	60fa      	str	r2, [r7, #12]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dca:	4a84      	ldr	r2, [pc, #528]	@ (8008fdc <UART_SetConfig+0x5c4>)
 8008dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008de0:	f7f7 ff42 	bl	8000c68 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	f04f 0300 	mov.w	r3, #0
 8008df4:	020b      	lsls	r3, r1, #8
 8008df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dfa:	0202      	lsls	r2, r0, #8
 8008dfc:	6979      	ldr	r1, [r7, #20]
 8008dfe:	6849      	ldr	r1, [r1, #4]
 8008e00:	0849      	lsrs	r1, r1, #1
 8008e02:	2000      	movs	r0, #0
 8008e04:	460c      	mov	r4, r1
 8008e06:	4605      	mov	r5, r0
 8008e08:	eb12 0804 	adds.w	r8, r2, r4
 8008e0c:	eb43 0905 	adc.w	r9, r3, r5
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	469a      	mov	sl, r3
 8008e18:	4693      	mov	fp, r2
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 ff21 	bl	8000c68 <__aeabi_uldivmod>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e34:	d308      	bcc.n	8008e48 <UART_SetConfig+0x430>
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3c:	d204      	bcs.n	8008e48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6a3a      	ldr	r2, [r7, #32]
 8008e44:	60da      	str	r2, [r3, #12]
 8008e46:	e0ce      	b.n	8008fe6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e4e:	e0ca      	b.n	8008fe6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e58:	d166      	bne.n	8008f28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	d827      	bhi.n	8008eb2 <UART_SetConfig+0x49a>
 8008e62:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <UART_SetConfig+0x450>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e95 	.word	0x08008e95
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	08008eb3 	.word	0x08008eb3
 8008e78:	08008ea3 	.word	0x08008ea3
 8008e7c:	08008eb3 	.word	0x08008eb3
 8008e80:	08008eb3 	.word	0x08008eb3
 8008e84:	08008eb3 	.word	0x08008eb3
 8008e88:	08008eab 	.word	0x08008eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e8c:	f7fe fa54 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8008e90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e92:	e014      	b.n	8008ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e94:	f7fe fa66 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8008e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e9a:	e010      	b.n	8008ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008fd8 <UART_SetConfig+0x5c0>)
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ea0:	e00d      	b.n	8008ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea2:	f7fe f9db 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ea8:	e009      	b.n	8008ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb0:	e005      	b.n	8008ebe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8090 	beq.w	8008fe6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	4a44      	ldr	r2, [pc, #272]	@ (8008fdc <UART_SetConfig+0x5c4>)
 8008ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed8:	005a      	lsls	r2, r3, #1
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	441a      	add	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d916      	bls.n	8008f20 <UART_SetConfig+0x508>
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef8:	d212      	bcs.n	8008f20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f023 030f 	bic.w	r3, r3, #15
 8008f02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	085b      	lsrs	r3, r3, #1
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	8bfb      	ldrh	r3, [r7, #30]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	8bfa      	ldrh	r2, [r7, #30]
 8008f1c:	60da      	str	r2, [r3, #12]
 8008f1e:	e062      	b.n	8008fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f26:	e05e      	b.n	8008fe6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d828      	bhi.n	8008f82 <UART_SetConfig+0x56a>
 8008f30:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0x520>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	08008f83 	.word	0x08008f83
 8008f48:	08008f73 	.word	0x08008f73
 8008f4c:	08008f83 	.word	0x08008f83
 8008f50:	08008f83 	.word	0x08008f83
 8008f54:	08008f83 	.word	0x08008f83
 8008f58:	08008f7b 	.word	0x08008f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f5c:	f7fe f9ec 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8008f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f62:	e014      	b.n	8008f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f64:	f7fe f9fe 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8008f68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f6a:	e010      	b.n	8008f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd8 <UART_SetConfig+0x5c0>)
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f70:	e00d      	b.n	8008f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f72:	f7fe f973 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8008f76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f78:	e009      	b.n	8008f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f80:	e005      	b.n	8008f8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d028      	beq.n	8008fe6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f98:	4a10      	ldr	r2, [pc, #64]	@ (8008fdc <UART_SetConfig+0x5c4>)
 8008f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	441a      	add	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d910      	bls.n	8008fe0 <UART_SetConfig+0x5c8>
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc4:	d20c      	bcs.n	8008fe0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60da      	str	r2, [r3, #12]
 8008fd0:	e009      	b.n	8008fe6 <UART_SetConfig+0x5ce>
 8008fd2:	bf00      	nop
 8008fd4:	40008000 	.word	0x40008000
 8008fd8:	00f42400 	.word	0x00f42400
 8008fdc:	0801d394 	.word	0x0801d394
      }
      else
      {
        ret = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009002:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009006:	4618      	mov	r0, r3
 8009008:	3730      	adds	r7, #48	@ 0x30
 800900a:	46bd      	mov	sp, r7
 800900c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01a      	beq.n	8009126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800910e:	d10a      	bne.n	8009126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	605a      	str	r2, [r3, #4]
  }
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b098      	sub	sp, #96	@ 0x60
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009164:	f7f9 fe96 	bl	8002e94 <HAL_GetTick>
 8009168:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d12f      	bne.n	80091d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009178:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009180:	2200      	movs	r2, #0
 8009182:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f88e 	bl	80092a8 <UART_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d022      	beq.n	80091d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e6      	bne.n	8009192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e063      	b.n	80092a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d149      	bne.n	800927a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ee:	2200      	movs	r2, #0
 80091f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f857 	bl	80092a8 <UART_WaitOnFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d03c      	beq.n	800927a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	623b      	str	r3, [r7, #32]
   return(result);
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009220:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800922c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e6      	bne.n	8009200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	60fb      	str	r3, [r7, #12]
   return(result);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f023 0301 	bic.w	r3, r3, #1
 8009248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009252:	61fa      	str	r2, [r7, #28]
 8009254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	617b      	str	r3, [r7, #20]
   return(result);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e5      	bne.n	8009232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e012      	b.n	80092a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3758      	adds	r7, #88	@ 0x58
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092b8:	e04f      	b.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092c0:	d04b      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c2:	f7f9 fde7 	bl	8002e94 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d302      	bcc.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e04e      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d037      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b80      	cmp	r3, #128	@ 0x80
 80092ee:	d034      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b40      	cmp	r3, #64	@ 0x40
 80092f4:	d031      	beq.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b08      	cmp	r3, #8
 8009302:	d110      	bne.n	8009326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2208      	movs	r2, #8
 800930a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f920 	bl	8009552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2208      	movs	r2, #8
 8009316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e029      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009334:	d111      	bne.n	800935a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800933e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f906 	bl	8009552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2220      	movs	r2, #32
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e00f      	b.n	800937a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4013      	ands	r3, r2
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	bf0c      	ite	eq
 800936a:	2301      	moveq	r3, #1
 800936c:	2300      	movne	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	429a      	cmp	r2, r3
 8009376:	d0a0      	beq.n	80092ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b096      	sub	sp, #88	@ 0x58
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	88fa      	ldrh	r2, [r7, #6]
 800939c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2222      	movs	r2, #34	@ 0x22
 80093ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d02d      	beq.n	8009416 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093c0:	4a40      	ldr	r2, [pc, #256]	@ (80094c4 <UART_Start_Receive_DMA+0x140>)
 80093c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093ca:	4a3f      	ldr	r2, [pc, #252]	@ (80094c8 <UART_Start_Receive_DMA+0x144>)
 80093cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d4:	4a3d      	ldr	r2, [pc, #244]	@ (80094cc <UART_Start_Receive_DMA+0x148>)
 80093d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093de:	2200      	movs	r2, #0
 80093e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3324      	adds	r3, #36	@ 0x24
 80093ee:	4619      	mov	r1, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f4:	461a      	mov	r2, r3
 80093f6:	88fb      	ldrh	r3, [r7, #6]
 80093f8:	f7fb fe16 	bl	8005028 <HAL_DMA_Start_IT>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2210      	movs	r2, #16
 8009406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e051      	b.n	80094ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d018      	beq.n	8009450 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009432:	657b      	str	r3, [r7, #84]	@ 0x54
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800943c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800944a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	653b      	str	r3, [r7, #80]	@ 0x50
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009470:	637a      	str	r2, [r7, #52]	@ 0x34
 8009472:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e5      	bne.n	8009450 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800949a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3308      	adds	r3, #8
 80094a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094a4:	623a      	str	r2, [r7, #32]
 80094a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	6a3a      	ldr	r2, [r7, #32]
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e5      	bne.n	8009484 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3758      	adds	r7, #88	@ 0x58
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	080096d5 	.word	0x080096d5
 80094c8:	08009801 	.word	0x08009801
 80094cc:	0800983f 	.word	0x0800983f

080094d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b08f      	sub	sp, #60	@ 0x3c
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	60bb      	str	r3, [r7, #8]
   return(result);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009520:	633b      	str	r3, [r7, #48]	@ 0x30
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952a:	61ba      	str	r2, [r7, #24]
 800952c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6979      	ldr	r1, [r7, #20]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	613b      	str	r3, [r7, #16]
   return(result);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e5      	bne.n	800950a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009546:	bf00      	nop
 8009548:	373c      	adds	r7, #60	@ 0x3c
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009552:	b480      	push	{r7}
 8009554:	b095      	sub	sp, #84	@ 0x54
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800956e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009578:	643b      	str	r3, [r7, #64]	@ 0x40
 800957a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800957e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e6      	bne.n	800955a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	61fb      	str	r3, [r7, #28]
   return(result);
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3308      	adds	r3, #8
 80095ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e3      	bne.n	800958c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d118      	bne.n	80095fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f023 0310 	bic.w	r3, r3, #16
 80095e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ea:	61bb      	str	r3, [r7, #24]
 80095ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	613b      	str	r3, [r7, #16]
   return(result);
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e6      	bne.n	80095cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009612:	bf00      	nop
 8009614:	3754      	adds	r7, #84	@ 0x54
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b090      	sub	sp, #64	@ 0x40
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d137      	bne.n	80096aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800963a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963c:	2200      	movs	r2, #0
 800963e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	623b      	str	r3, [r7, #32]
   return(result);
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800965a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009662:	633a      	str	r2, [r7, #48]	@ 0x30
 8009664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e5      	bne.n	8009642 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60fb      	str	r3, [r7, #12]
   return(result);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
 800968c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009694:	61fb      	str	r3, [r7, #28]
 8009696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	617b      	str	r3, [r7, #20]
   return(result);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096a8:	e002      	b.n	80096b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80096ac:	f7ff f976 	bl	800899c <HAL_UART_TxCpltCallback>
}
 80096b0:	bf00      	nop
 80096b2:	3740      	adds	r7, #64	@ 0x40
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff f972 	bl	80089b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b09c      	sub	sp, #112	@ 0x70
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d171      	bne.n	80097d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80096f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800970c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800970e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009716:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009718:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800971c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e6      	bne.n	80096f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3308      	adds	r3, #8
 8009730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800973a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973c:	f023 0301 	bic.w	r3, r3, #1
 8009740:	667b      	str	r3, [r7, #100]	@ 0x64
 8009742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3308      	adds	r3, #8
 8009748:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800974a:	647a      	str	r2, [r7, #68]	@ 0x44
 800974c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e5      	bne.n	800972a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	623b      	str	r3, [r7, #32]
   return(result);
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009774:	663b      	str	r3, [r7, #96]	@ 0x60
 8009776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800977e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800979a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800979c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d118      	bne.n	80097d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0310 	bic.w	r3, r3, #16
 80097b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097c0:	61fb      	str	r3, [r7, #28]
 80097c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	69b9      	ldr	r1, [r7, #24]
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	617b      	str	r3, [r7, #20]
   return(result);
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e6      	bne.n	80097a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097d6:	2200      	movs	r2, #0
 80097d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d107      	bne.n	80097f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097e8:	4619      	mov	r1, r3
 80097ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097ec:	f7ff f908 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097f0:	e002      	b.n	80097f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80097f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097f4:	f7ff f8e6 	bl	80089c4 <HAL_UART_RxCpltCallback>
}
 80097f8:	bf00      	nop
 80097fa:	3770      	adds	r7, #112	@ 0x70
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d109      	bne.n	8009830 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	b29b      	uxth	r3, r3
 8009826:	4619      	mov	r1, r3
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff f8e9 	bl	8008a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800982e:	e002      	b.n	8009836 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff f8d1 	bl	80089d8 <HAL_UART_RxHalfCpltCallback>
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009852:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800985a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009866:	2b80      	cmp	r3, #128	@ 0x80
 8009868:	d109      	bne.n	800987e <UART_DMAError+0x40>
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b21      	cmp	r3, #33	@ 0x21
 800986e:	d106      	bne.n	800987e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2200      	movs	r2, #0
 8009874:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009878:	6978      	ldr	r0, [r7, #20]
 800987a:	f7ff fe29 	bl	80094d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009888:	2b40      	cmp	r3, #64	@ 0x40
 800988a:	d109      	bne.n	80098a0 <UART_DMAError+0x62>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b22      	cmp	r3, #34	@ 0x22
 8009890:	d106      	bne.n	80098a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2200      	movs	r2, #0
 8009896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800989a:	6978      	ldr	r0, [r7, #20]
 800989c:	f7ff fe59 	bl	8009552 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a6:	f043 0210 	orr.w	r2, r3, #16
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b0:	6978      	ldr	r0, [r7, #20]
 80098b2:	f7ff f89b 	bl	80089ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b6:	bf00      	nop
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff f889 	bl	80089ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b088      	sub	sp, #32
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	61bb      	str	r3, [r7, #24]
 800990a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	613b      	str	r3, [r7, #16]
   return(result);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2220      	movs	r2, #32
 8009920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff f836 	bl	800899c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009930:	bf00      	nop
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009982:	2b01      	cmp	r3, #1
 8009984:	d101      	bne.n	800998a <HAL_UARTEx_DisableFifoMode+0x16>
 8009986:	2302      	movs	r3, #2
 8009988:	e027      	b.n	80099da <HAL_UARTEx_DisableFifoMode+0x66>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2224      	movs	r2, #36	@ 0x24
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e02d      	b.n	8009a5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2224      	movs	r2, #36	@ 0x24
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0201 	bic.w	r2, r2, #1
 8009a24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f850 	bl	8009ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e02d      	b.n	8009ad6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2224      	movs	r2, #36	@ 0x24
 8009a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0201 	bic.w	r2, r2, #1
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f812 	bl	8009ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d108      	bne.n	8009b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b00:	e031      	b.n	8009b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b02:	2308      	movs	r3, #8
 8009b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b06:	2308      	movs	r3, #8
 8009b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	0e5b      	lsrs	r3, r3, #25
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0307 	and.w	r3, r3, #7
 8009b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	0f5b      	lsrs	r3, r3, #29
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	7b3a      	ldrb	r2, [r7, #12]
 8009b2e:	4911      	ldr	r1, [pc, #68]	@ (8009b74 <UARTEx_SetNbDataToProcess+0x94>)
 8009b30:	5c8a      	ldrb	r2, [r1, r2]
 8009b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b36:	7b3a      	ldrb	r2, [r7, #12]
 8009b38:	490f      	ldr	r1, [pc, #60]	@ (8009b78 <UARTEx_SetNbDataToProcess+0x98>)
 8009b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	7b7a      	ldrb	r2, [r7, #13]
 8009b4c:	4909      	ldr	r1, [pc, #36]	@ (8009b74 <UARTEx_SetNbDataToProcess+0x94>)
 8009b4e:	5c8a      	ldrb	r2, [r1, r2]
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b54:	7b7a      	ldrb	r2, [r7, #13]
 8009b56:	4908      	ldr	r1, [pc, #32]	@ (8009b78 <UARTEx_SetNbDataToProcess+0x98>)
 8009b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	0801d3ac 	.word	0x0801d3ac
 8009b78:	0801d3b4 	.word	0x0801d3b4

08009b7c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af04      	add	r7, sp, #16
 8009b82:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8009b84:	2364      	movs	r3, #100	@ 0x64
 8009b86:	9302      	str	r3, [sp, #8]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	f107 030f 	add.w	r3, r7, #15
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2301      	movs	r3, #1
 8009b94:	2275      	movs	r2, #117	@ 0x75
 8009b96:	21d0      	movs	r1, #208	@ 0xd0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7fc f97f 	bl	8005e9c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	2b68      	cmp	r3, #104	@ 0x68
 8009ba2:	d13d      	bne.n	8009c20 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8009ba8:	2364      	movs	r3, #100	@ 0x64
 8009baa:	9302      	str	r3, [sp, #8]
 8009bac:	2301      	movs	r3, #1
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f107 030e 	add.w	r3, r7, #14
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	226b      	movs	r2, #107	@ 0x6b
 8009bba:	21d0      	movs	r1, #208	@ 0xd0
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fc f859 	bl	8005c74 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8009bc2:	2307      	movs	r3, #7
 8009bc4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8009bc6:	2364      	movs	r3, #100	@ 0x64
 8009bc8:	9302      	str	r3, [sp, #8]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f107 030e 	add.w	r3, r7, #14
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	2219      	movs	r2, #25
 8009bd8:	21d0      	movs	r1, #208	@ 0xd0
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fc f84a 	bl	8005c74 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8009be4:	2364      	movs	r3, #100	@ 0x64
 8009be6:	9302      	str	r3, [sp, #8]
 8009be8:	2301      	movs	r3, #1
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	f107 030e 	add.w	r3, r7, #14
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	221c      	movs	r2, #28
 8009bf6:	21d0      	movs	r1, #208	@ 0xd0
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7fc f83b 	bl	8005c74 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8009c02:	2364      	movs	r3, #100	@ 0x64
 8009c04:	9302      	str	r3, [sp, #8]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	f107 030e 	add.w	r3, r7, #14
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	2301      	movs	r3, #1
 8009c12:	221b      	movs	r2, #27
 8009c14:	21d0      	movs	r1, #208	@ 0xd0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7fc f82c 	bl	8005c74 <HAL_I2C_Mem_Write>
        return 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e000      	b.n	8009c22 <MPU6050_Init+0xa6>
    }
    return 1;
 8009c20:	2301      	movs	r3, #1
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	0000      	movs	r0, r0
 8009c2c:	0000      	movs	r0, r0
	...

08009c30 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8009c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c34:	b094      	sub	sp, #80	@ 0x50
 8009c36:	af04      	add	r7, sp, #16
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8009c3c:	2364      	movs	r3, #100	@ 0x64
 8009c3e:	9302      	str	r3, [sp, #8]
 8009c40:	230e      	movs	r3, #14
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	223b      	movs	r2, #59	@ 0x3b
 8009c4e:	21d0      	movs	r1, #208	@ 0xd0
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7fc f923 	bl	8005e9c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8009c56:	7a3b      	ldrb	r3, [r7, #8]
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	b21a      	sxth	r2, r3
 8009c5c:	7a7b      	ldrb	r3, [r7, #9]
 8009c5e:	b21b      	sxth	r3, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8009c68:	7abb      	ldrb	r3, [r7, #10]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	b21a      	sxth	r2, r3
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	b21b      	sxth	r3, r3
 8009c72:	4313      	orrs	r3, r2
 8009c74:	b21a      	sxth	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8009c7a:	7b3b      	ldrb	r3, [r7, #12]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	b21a      	sxth	r2, r3
 8009c80:	7b7b      	ldrb	r3, [r7, #13]
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	021b      	lsls	r3, r3, #8
 8009c90:	b21a      	sxth	r2, r3
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	b21b      	sxth	r3, r3
 8009c96:	4313      	orrs	r3, r2
 8009c98:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8009c9a:	7c3b      	ldrb	r3, [r7, #16]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	b21a      	sxth	r2, r3
 8009ca0:	7c7b      	ldrb	r3, [r7, #17]
 8009ca2:	b21b      	sxth	r3, r3
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	b21a      	sxth	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8009cac:	7cbb      	ldrb	r3, [r7, #18]
 8009cae:	021b      	lsls	r3, r3, #8
 8009cb0:	b21a      	sxth	r2, r3
 8009cb2:	7cfb      	ldrb	r3, [r7, #19]
 8009cb4:	b21b      	sxth	r3, r3
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	b21a      	sxth	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8009cbe:	7d3b      	ldrb	r3, [r7, #20]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	7d7b      	ldrb	r3, [r7, #21]
 8009cc6:	b21b      	sxth	r3, r3
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	b21a      	sxth	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f6 fc5c 	bl	8000594 <__aeabi_i2d>
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	4bbd      	ldr	r3, [pc, #756]	@ (8009fd8 <MPU6050_Read_All+0x3a8>)
 8009ce2:	f7f6 fdeb 	bl	80008bc <__aeabi_ddiv>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f6 fc4c 	bl	8000594 <__aeabi_i2d>
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	4bb5      	ldr	r3, [pc, #724]	@ (8009fd8 <MPU6050_Read_All+0x3a8>)
 8009d02:	f7f6 fddb 	bl	80008bc <__aeabi_ddiv>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f6 fc3c 	bl	8000594 <__aeabi_i2d>
 8009d1c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009fc0 <MPU6050_Read_All+0x390>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fdcb 	bl	80008bc <__aeabi_ddiv>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8009d30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d3c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8009fdc <MPU6050_Read_All+0x3ac>
 8009d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d44:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8009fe0 <MPU6050_Read_All+0x3b0>
 8009d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f6 fc1b 	bl	8000594 <__aeabi_i2d>
 8009d5e:	a39a      	add	r3, pc, #616	@ (adr r3, 8009fc8 <MPU6050_Read_All+0x398>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fdaa 	bl	80008bc <__aeabi_ddiv>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f6 fc0b 	bl	8000594 <__aeabi_i2d>
 8009d7e:	a392      	add	r3, pc, #584	@ (adr r3, 8009fc8 <MPU6050_Read_All+0x398>)
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f7f6 fd9a 	bl	80008bc <__aeabi_ddiv>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7f6 fbfb 	bl	8000594 <__aeabi_i2d>
 8009d9e:	a38a      	add	r3, pc, #552	@ (adr r3, 8009fc8 <MPU6050_Read_All+0x398>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fd8a 	bl	80008bc <__aeabi_ddiv>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8009db2:	f7f9 f86f 	bl	8002e94 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	4b8a      	ldr	r3, [pc, #552]	@ (8009fe4 <MPU6050_Read_All+0x3b4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f6 fbd8 	bl	8000574 <__aeabi_ui2d>
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	4b87      	ldr	r3, [pc, #540]	@ (8009fe8 <MPU6050_Read_All+0x3b8>)
 8009dca:	f7f6 fd77 	bl	80008bc <__aeabi_ddiv>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8009dd6:	f7f9 f85d 	bl	8002e94 <HAL_GetTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4a81      	ldr	r2, [pc, #516]	@ (8009fe4 <MPU6050_Read_All+0x3b4>)
 8009dde:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de6:	461a      	mov	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dee:	fb03 f202 	mul.w	r2, r3, r2
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009e00:	fb01 f303 	mul.w	r3, r1, r3
 8009e04:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f6 fbc4 	bl	8000594 <__aeabi_i2d>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	ec43 2b10 	vmov	d0, r2, r3
 8009e14:	f012 fe7a 	bl	801cb0c <sqrt>
 8009e18:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e28:	f7f6 fe86 	bl	8000b38 <__aeabi_dcmpeq>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d11f      	bne.n	8009e72 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f6 fbab 	bl	8000594 <__aeabi_i2d>
 8009e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e42:	f7f6 fd3b 	bl	80008bc <__aeabi_ddiv>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	ec43 2b17 	vmov	d7, r2, r3
 8009e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8009e52:	eef0 0a67 	vmov.f32	s1, s15
 8009e56:	f012 fe87 	bl	801cb68 <atan>
 8009e5a:	ec51 0b10 	vmov	r0, r1, d0
 8009e5e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009fd0 <MPU6050_Read_All+0x3a0>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 fc00 	bl	8000668 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8009e70:	e005      	b.n	8009e7e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	f04f 0300 	mov.w	r3, #0
 8009e7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e84:	425b      	negs	r3, r3
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fb84 	bl	8000594 <__aeabi_i2d>
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	468b      	mov	fp, r1
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f6 fb7c 	bl	8000594 <__aeabi_i2d>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	ec43 2b11 	vmov	d1, r2, r3
 8009ea4:	ec4b ab10 	vmov	d0, sl, fp
 8009ea8:	f012 fe2e 	bl	801cb08 <atan2>
 8009eac:	ec51 0b10 	vmov	r0, r1, d0
 8009eb0:	a347      	add	r3, pc, #284	@ (adr r3, 8009fd0 <MPU6050_Read_All+0x3a0>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fbd7 	bl	8000668 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	4b49      	ldr	r3, [pc, #292]	@ (8009fec <MPU6050_Read_All+0x3bc>)
 8009ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ecc:	f7f6 fe3e 	bl	8000b4c <__aeabi_dcmplt>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <MPU6050_Read_All+0x2bc>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	4b43      	ldr	r3, [pc, #268]	@ (8009ff0 <MPU6050_Read_All+0x3c0>)
 8009ee2:	f7f6 fe51 	bl	8000b88 <__aeabi_dcmpgt>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d114      	bne.n	8009f16 <MPU6050_Read_All+0x2e6>
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ff0 <MPU6050_Read_All+0x3c0>)
 8009ef2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ef6:	f7f6 fe47 	bl	8000b88 <__aeabi_dcmpgt>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d015      	beq.n	8009f2c <MPU6050_Read_All+0x2fc>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	4b38      	ldr	r3, [pc, #224]	@ (8009fec <MPU6050_Read_All+0x3bc>)
 8009f0c:	f7f6 fe1e 	bl	8000b4c <__aeabi_dcmplt>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8009f16:	4937      	ldr	r1, [pc, #220]	@ (8009ff4 <MPU6050_Read_All+0x3c4>)
 8009f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f26:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8009f2a:	e014      	b.n	8009f56 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8009f32:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8009f36:	eeb0 1a47 	vmov.f32	s2, s14
 8009f3a:	eef0 1a67 	vmov.f32	s3, s15
 8009f3e:	ed97 0b06 	vldr	d0, [r7, #24]
 8009f42:	482c      	ldr	r0, [pc, #176]	@ (8009ff4 <MPU6050_Read_All+0x3c4>)
 8009f44:	f000 f85a 	bl	8009ffc <Kalman_getAngle>
 8009f48:	eeb0 7a40 	vmov.f32	s14, s0
 8009f4c:	eef0 7a60 	vmov.f32	s15, s1
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009f5c:	4690      	mov	r8, r2
 8009f5e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	4b22      	ldr	r3, [pc, #136]	@ (8009ff0 <MPU6050_Read_All+0x3c0>)
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7f6 fe0c 	bl	8000b88 <__aeabi_dcmpgt>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8009f8e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8009f92:	eeb0 1a47 	vmov.f32	s2, s14
 8009f96:	eef0 1a67 	vmov.f32	s3, s15
 8009f9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8009f9e:	4816      	ldr	r0, [pc, #88]	@ (8009ff8 <MPU6050_Read_All+0x3c8>)
 8009fa0:	f000 f82c 	bl	8009ffc <Kalman_getAngle>
 8009fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8009fa8:	eef0 7a60 	vmov.f32	s15, s1
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8009fb2:	bf00      	nop
 8009fb4:	3740      	adds	r7, #64	@ 0x40
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	40cc2900 	.word	0x40cc2900
 8009fc8:	00000000 	.word	0x00000000
 8009fcc:	40606000 	.word	0x40606000
 8009fd0:	1a63c1f8 	.word	0x1a63c1f8
 8009fd4:	404ca5dc 	.word	0x404ca5dc
 8009fd8:	40d00000 	.word	0x40d00000
 8009fdc:	43aa0000 	.word	0x43aa0000
 8009fe0:	42121eb8 	.word	0x42121eb8
 8009fe4:	20005514 	.word	0x20005514
 8009fe8:	408f4000 	.word	0x408f4000
 8009fec:	c0568000 	.word	0xc0568000
 8009ff0:	40568000 	.word	0x40568000
 8009ff4:	20000058 	.word	0x20000058
 8009ff8:	20000010 	.word	0x20000010

08009ffc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8009ffc:	b5b0      	push	{r4, r5, r7, lr}
 8009ffe:	b096      	sub	sp, #88	@ 0x58
 800a000:	af00      	add	r7, sp, #0
 800a002:	61f8      	str	r0, [r7, #28]
 800a004:	ed87 0b04 	vstr	d0, [r7, #16]
 800a008:	ed87 1b02 	vstr	d1, [r7, #8]
 800a00c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a01a:	f7f6 f96d 	bl	80002f8 <__aeabi_dsub>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a02c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a030:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a034:	f7f6 fb18 	bl	8000668 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 f95c 	bl	80002fc <__adddf3>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a05e:	f7f6 fb03 	bl	8000668 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4610      	mov	r0, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a070:	f7f6 f942 	bl	80002f8 <__aeabi_dsub>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4610      	mov	r0, r2
 800a07a:	4619      	mov	r1, r3
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a082:	f7f6 f939 	bl	80002f8 <__aeabi_dsub>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4610      	mov	r0, r2
 800a08c:	4619      	mov	r1, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 f932 	bl	80002fc <__adddf3>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4610      	mov	r0, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0a4:	f7f6 fae0 	bl	8000668 <__aeabi_dmul>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f7f6 f924 	bl	80002fc <__adddf3>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ce:	f7f6 facb 	bl	8000668 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f90d 	bl	80002f8 <__aeabi_dsub>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	69f9      	ldr	r1, [r7, #28]
 800a0e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f8:	f7f6 fab6 	bl	8000668 <__aeabi_dmul>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4620      	mov	r0, r4
 800a102:	4629      	mov	r1, r5
 800a104:	f7f6 f8f8 	bl	80002f8 <__aeabi_dsub>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	69f9      	ldr	r1, [r7, #28]
 800a10e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a122:	f7f6 faa1 	bl	8000668 <__aeabi_dmul>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 f8e5 	bl	80002fc <__adddf3>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	69f9      	ldr	r1, [r7, #28]
 800a138:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a148:	f7f6 f8d8 	bl	80002fc <__adddf3>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a15a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a15e:	f7f6 fbad 	bl	80008bc <__aeabi_ddiv>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800a170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a174:	f7f6 fba2 	bl	80008bc <__aeabi_ddiv>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a18a:	f7f6 f8b5 	bl	80002f8 <__aeabi_dsub>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a19c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a1a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a1a4:	f7f6 fa60 	bl	8000668 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f8a4 	bl	80002fc <__adddf3>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	69f9      	ldr	r1, [r7, #28]
 800a1ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a1c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a1c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a1cc:	f7f6 fa4c 	bl	8000668 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f890 	bl	80002fc <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	69f9      	ldr	r1, [r7, #28]
 800a1e2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a1ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a1f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a200:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a208:	f7f6 fa2e 	bl	8000668 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4620      	mov	r0, r4
 800a212:	4629      	mov	r1, r5
 800a214:	f7f6 f870 	bl	80002f8 <__aeabi_dsub>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	69f9      	ldr	r1, [r7, #28]
 800a21e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800a228:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a22c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a230:	f7f6 fa1a 	bl	8000668 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4620      	mov	r0, r4
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f6 f85c 	bl	80002f8 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	69f9      	ldr	r1, [r7, #28]
 800a246:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800a250:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a258:	f7f6 fa06 	bl	8000668 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f848 	bl	80002f8 <__aeabi_dsub>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	69f9      	ldr	r1, [r7, #28]
 800a26e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800a278:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a27c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a280:	f7f6 f9f2 	bl	8000668 <__aeabi_dmul>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4620      	mov	r0, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f6 f834 	bl	80002f8 <__aeabi_dsub>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a2a0:	ec43 2b17 	vmov	d7, r2, r3
};
 800a2a4:	eeb0 0a47 	vmov.f32	s0, s14
 800a2a8:	eef0 0a67 	vmov.f32	s1, s15
 800a2ac:	3758      	adds	r7, #88	@ 0x58
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a2b4 <__NVIC_SetPriority>:
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	db0a      	blt.n	800a2de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	490c      	ldr	r1, [pc, #48]	@ (800a300 <__NVIC_SetPriority+0x4c>)
 800a2ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2d2:	0112      	lsls	r2, r2, #4
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	440b      	add	r3, r1
 800a2d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a2dc:	e00a      	b.n	800a2f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	4908      	ldr	r1, [pc, #32]	@ (800a304 <__NVIC_SetPriority+0x50>)
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	0112      	lsls	r2, r2, #4
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	761a      	strb	r2, [r3, #24]
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	e000e100 	.word	0xe000e100
 800a304:	e000ed00 	.word	0xe000ed00

0800a308 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a30c:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <SysTick_Handler+0x1c>)
 800a30e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a310:	f001 fd40 	bl	800bd94 <xTaskGetSchedulerState>
 800a314:	4603      	mov	r3, r0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d001      	beq.n	800a31e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a31a:	f002 fb35 	bl	800c988 <xPortSysTickHandler>
  }
}
 800a31e:	bf00      	nop
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	e000e010 	.word	0xe000e010

0800a328 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a32c:	2100      	movs	r1, #0
 800a32e:	f06f 0004 	mvn.w	r0, #4
 800a332:	f7ff ffbf 	bl	800a2b4 <__NVIC_SetPriority>
#endif
}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a342:	f3ef 8305 	mrs	r3, IPSR
 800a346:	603b      	str	r3, [r7, #0]
  return(result);
 800a348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a34e:	f06f 0305 	mvn.w	r3, #5
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	e00c      	b.n	800a370 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a356:	4b0a      	ldr	r3, [pc, #40]	@ (800a380 <osKernelInitialize+0x44>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d105      	bne.n	800a36a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a35e:	4b08      	ldr	r3, [pc, #32]	@ (800a380 <osKernelInitialize+0x44>)
 800a360:	2201      	movs	r2, #1
 800a362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a364:	2300      	movs	r3, #0
 800a366:	607b      	str	r3, [r7, #4]
 800a368:	e002      	b.n	800a370 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a36a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a36e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a370:	687b      	ldr	r3, [r7, #4]
}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20005518 	.word	0x20005518

0800a384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a38a:	f3ef 8305 	mrs	r3, IPSR
 800a38e:	603b      	str	r3, [r7, #0]
  return(result);
 800a390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a396:	f06f 0305 	mvn.w	r3, #5
 800a39a:	607b      	str	r3, [r7, #4]
 800a39c:	e010      	b.n	800a3c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a39e:	4b0b      	ldr	r3, [pc, #44]	@ (800a3cc <osKernelStart+0x48>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d109      	bne.n	800a3ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3a6:	f7ff ffbf 	bl	800a328 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3aa:	4b08      	ldr	r3, [pc, #32]	@ (800a3cc <osKernelStart+0x48>)
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3b0:	f001 f87a 	bl	800b4a8 <vTaskStartScheduler>
      stat = osOK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	607b      	str	r3, [r7, #4]
 800a3b8:	e002      	b.n	800a3c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3c0:	687b      	ldr	r3, [r7, #4]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20005518 	.word	0x20005518

0800a3d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08e      	sub	sp, #56	@ 0x38
 800a3d4:	af04      	add	r7, sp, #16
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3e0:	f3ef 8305 	mrs	r3, IPSR
 800a3e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a3e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d17e      	bne.n	800a4ea <osThreadNew+0x11a>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d07b      	beq.n	800a4ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a3f2:	2380      	movs	r3, #128	@ 0x80
 800a3f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a3f6:	2318      	movs	r3, #24
 800a3f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a3fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a402:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d045      	beq.n	800a496 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <osThreadNew+0x48>
        name = attr->name;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d008      	beq.n	800a43e <osThreadNew+0x6e>
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	2b38      	cmp	r3, #56	@ 0x38
 800a430:	d805      	bhi.n	800a43e <osThreadNew+0x6e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <osThreadNew+0x72>
        return (NULL);
 800a43e:	2300      	movs	r3, #0
 800a440:	e054      	b.n	800a4ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	089b      	lsrs	r3, r3, #2
 800a450:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <osThreadNew+0xa8>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a460:	d90a      	bls.n	800a478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <osThreadNew+0xa8>
        mem = 1;
 800a472:	2301      	movs	r3, #1
 800a474:	61bb      	str	r3, [r7, #24]
 800a476:	e010      	b.n	800a49a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10c      	bne.n	800a49a <osThreadNew+0xca>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d108      	bne.n	800a49a <osThreadNew+0xca>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <osThreadNew+0xca>
          mem = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	61bb      	str	r3, [r7, #24]
 800a494:	e001      	b.n	800a49a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d110      	bne.n	800a4c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4a8:	9202      	str	r2, [sp, #8]
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6a3a      	ldr	r2, [r7, #32]
 800a4b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fe1a 	bl	800b0f0 <xTaskCreateStatic>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	e013      	b.n	800a4ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d110      	bne.n	800a4ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	f107 0310 	add.w	r3, r7, #16
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fe68 	bl	800b1b0 <xTaskCreate>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d001      	beq.n	800a4ea <osThreadNew+0x11a>
            hTask = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a4ea:	693b      	ldr	r3, [r7, #16]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3728      	adds	r7, #40	@ 0x28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4fc:	f3ef 8305 	mrs	r3, IPSR
 800a500:	60bb      	str	r3, [r7, #8]
  return(result);
 800a502:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <osDelay+0x1c>
    stat = osErrorISR;
 800a508:	f06f 0305 	mvn.w	r3, #5
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e007      	b.n	800a520 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 ff8e 	bl	800b43c <vTaskDelay>
    }
  }

  return (stat);
 800a520:	68fb      	ldr	r3, [r7, #12]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4a07      	ldr	r2, [pc, #28]	@ (800a558 <vApplicationGetIdleTaskMemory+0x2c>)
 800a53c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	4a06      	ldr	r2, [pc, #24]	@ (800a55c <vApplicationGetIdleTaskMemory+0x30>)
 800a542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2280      	movs	r2, #128	@ 0x80
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2000551c 	.word	0x2000551c
 800a55c:	20005578 	.word	0x20005578

0800a560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a07      	ldr	r2, [pc, #28]	@ (800a58c <vApplicationGetTimerTaskMemory+0x2c>)
 800a570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4a06      	ldr	r2, [pc, #24]	@ (800a590 <vApplicationGetTimerTaskMemory+0x30>)
 800a576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a57e:	601a      	str	r2, [r3, #0]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20005778 	.word	0x20005778
 800a590:	200057d4 	.word	0x200057d4

0800a594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f103 0208 	add.w	r2, r3, #8
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f103 0208 	add.w	r2, r3, #8
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f103 0208 	add.w	r2, r3, #8
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a64c:	d103      	bne.n	800a656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e00c      	b.n	800a670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3308      	adds	r3, #8
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	e002      	b.n	800a664 <vListInsert+0x2e>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d2f6      	bcs.n	800a65e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	601a      	str	r2, [r3, #0]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6892      	ldr	r2, [r2, #8]
 800a6be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6852      	ldr	r2, [r2, #4]
 800a6c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d103      	bne.n	800a6dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	1e5a      	subs	r2, r3, #1
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10b      	bne.n	800a728 <xQueueGenericReset+0x2c>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60bb      	str	r3, [r7, #8]
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	e7fd      	b.n	800a724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a728:	f002 f89e 	bl	800c868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a734:	68f9      	ldr	r1, [r7, #12]
 800a736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	441a      	add	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a758:	3b01      	subs	r3, #1
 800a75a:	68f9      	ldr	r1, [r7, #12]
 800a75c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a75e:	fb01 f303 	mul.w	r3, r1, r3
 800a762:	441a      	add	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	22ff      	movs	r2, #255	@ 0xff
 800a76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	22ff      	movs	r2, #255	@ 0xff
 800a774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d114      	bne.n	800a7a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01a      	beq.n	800a7bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3310      	adds	r3, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f001 f91a 	bl	800b9c4 <xTaskRemoveFromEventList>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d012      	beq.n	800a7bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a796:	4b0d      	ldr	r3, [pc, #52]	@ (800a7cc <xQueueGenericReset+0xd0>)
 800a798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	e009      	b.n	800a7bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff fef1 	bl	800a594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3324      	adds	r3, #36	@ 0x24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff feec 	bl	800a594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7bc:	f002 f886 	bl	800c8cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7c0:	2301      	movs	r3, #1
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	@ 0x38
 800a7d4:	af02      	add	r7, sp, #8
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
 800a7fa:	e7fd      	b.n	800a7f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop
 800a818:	e7fd      	b.n	800a816 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <xQueueGenericCreateStatic+0x56>
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <xQueueGenericCreateStatic+0x5a>
 800a826:	2301      	movs	r3, #1
 800a828:	e000      	b.n	800a82c <xQueueGenericCreateStatic+0x5c>
 800a82a:	2300      	movs	r3, #0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10b      	bne.n	800a848 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	623b      	str	r3, [r7, #32]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <xQueueGenericCreateStatic+0x84>
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <xQueueGenericCreateStatic+0x88>
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <xQueueGenericCreateStatic+0x8a>
 800a858:	2300      	movs	r3, #0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10b      	bne.n	800a876 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	61fb      	str	r3, [r7, #28]
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	e7fd      	b.n	800a872 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a876:	2350      	movs	r3, #80	@ 0x50
 800a878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b50      	cmp	r3, #80	@ 0x50
 800a87e:	d00b      	beq.n	800a898 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	61bb      	str	r3, [r7, #24]
}
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	e7fd      	b.n	800a894 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a898:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00d      	beq.n	800a8c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 f805 	bl	800a8ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3730      	adds	r7, #48	@ 0x30
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
 800a8d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d103      	bne.n	800a8e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	e002      	b.n	800a8ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	69b8      	ldr	r0, [r7, #24]
 800a8fc:	f7ff fefe 	bl	800a6fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	78fa      	ldrb	r2, [r7, #3]
 800a904:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08e      	sub	sp, #56	@ 0x38
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a91e:	2300      	movs	r3, #0
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10b      	bne.n	800a944 <xQueueGenericSend+0x34>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a93e:	bf00      	nop
 800a940:	bf00      	nop
 800a942:	e7fd      	b.n	800a940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <xQueueGenericSend+0x42>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <xQueueGenericSend+0x46>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueGenericSend+0x48>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <xQueueGenericSend+0x64>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a96e:	bf00      	nop
 800a970:	bf00      	nop
 800a972:	e7fd      	b.n	800a970 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d103      	bne.n	800a982 <xQueueGenericSend+0x72>
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <xQueueGenericSend+0x76>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <xQueueGenericSend+0x78>
 800a986:	2300      	movs	r3, #0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <xQueueGenericSend+0x94>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	623b      	str	r3, [r7, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9a4:	f001 f9f6 	bl	800bd94 <xTaskGetSchedulerState>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <xQueueGenericSend+0xa4>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <xQueueGenericSend+0xa8>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e000      	b.n	800a9ba <xQueueGenericSend+0xaa>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10b      	bne.n	800a9d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	61fb      	str	r3, [r7, #28]
}
 800a9d0:	bf00      	nop
 800a9d2:	bf00      	nop
 800a9d4:	e7fd      	b.n	800a9d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9d6:	f001 ff47 	bl	800c868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d302      	bcc.n	800a9ec <xQueueGenericSend+0xdc>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d129      	bne.n	800aa40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9f2:	f000 fa0f 	bl	800ae14 <prvCopyDataToQueue>
 800a9f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d010      	beq.n	800aa22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	3324      	adds	r3, #36	@ 0x24
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 ffdd 	bl	800b9c4 <xTaskRemoveFromEventList>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d013      	beq.n	800aa38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa10:	4b3f      	ldr	r3, [pc, #252]	@ (800ab10 <xQueueGenericSend+0x200>)
 800aa12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	e00a      	b.n	800aa38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa28:	4b39      	ldr	r3, [pc, #228]	@ (800ab10 <xQueueGenericSend+0x200>)
 800aa2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa38:	f001 ff48 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e063      	b.n	800ab08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d103      	bne.n	800aa4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa46:	f001 ff41 	bl	800c8cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e05c      	b.n	800ab08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d106      	bne.n	800aa62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa54:	f107 0314 	add.w	r3, r7, #20
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f001 f83f 	bl	800badc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa62:	f001 ff33 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa66:	f000 fd87 	bl	800b578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa6a:	f001 fefd 	bl	800c868 <vPortEnterCritical>
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa74:	b25b      	sxtb	r3, r3
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa7a:	d103      	bne.n	800aa84 <xQueueGenericSend+0x174>
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa90:	d103      	bne.n	800aa9a <xQueueGenericSend+0x18a>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa9a:	f001 ff17 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa9e:	1d3a      	adds	r2, r7, #4
 800aaa0:	f107 0314 	add.w	r3, r7, #20
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 f82e 	bl	800bb08 <xTaskCheckForTimeOut>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d124      	bne.n	800aafc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aab2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aab4:	f000 faa6 	bl	800b004 <prvIsQueueFull>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d018      	beq.n	800aaf0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac0:	3310      	adds	r3, #16
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 ff2a 	bl	800b920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aacc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aace:	f000 fa31 	bl	800af34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aad2:	f000 fd5f 	bl	800b594 <xTaskResumeAll>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f47f af7c 	bne.w	800a9d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aade:	4b0c      	ldr	r3, [pc, #48]	@ (800ab10 <xQueueGenericSend+0x200>)
 800aae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	e772      	b.n	800a9d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aaf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaf2:	f000 fa1f 	bl	800af34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaf6:	f000 fd4d 	bl	800b594 <xTaskResumeAll>
 800aafa:	e76c      	b.n	800a9d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aafc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aafe:	f000 fa19 	bl	800af34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab02:	f000 fd47 	bl	800b594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3738      	adds	r7, #56	@ 0x38
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	e000ed04 	.word	0xe000ed04

0800ab14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b090      	sub	sp, #64	@ 0x40
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10b      	bne.n	800ab44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	e7fd      	b.n	800ab40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d103      	bne.n	800ab52 <xQueueGenericSendFromISR+0x3e>
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <xQueueGenericSendFromISR+0x42>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <xQueueGenericSendFromISR+0x44>
 800ab56:	2300      	movs	r3, #0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10b      	bne.n	800ab74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab6e:	bf00      	nop
 800ab70:	bf00      	nop
 800ab72:	e7fd      	b.n	800ab70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d103      	bne.n	800ab82 <xQueueGenericSendFromISR+0x6e>
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d101      	bne.n	800ab86 <xQueueGenericSendFromISR+0x72>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <xQueueGenericSendFromISR+0x74>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10b      	bne.n	800aba4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	623b      	str	r3, [r7, #32]
}
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	e7fd      	b.n	800aba0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aba4:	f001 ff40 	bl	800ca28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aba8:	f3ef 8211 	mrs	r2, BASEPRI
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	61fa      	str	r2, [r7, #28]
 800abbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abcc:	429a      	cmp	r2, r3
 800abce:	d302      	bcc.n	800abd6 <xQueueGenericSendFromISR+0xc2>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d12f      	bne.n	800ac36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800abec:	f000 f912 	bl	800ae14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abf8:	d112      	bne.n	800ac20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d016      	beq.n	800ac30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac04:	3324      	adds	r3, #36	@ 0x24
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fedc 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00e      	beq.n	800ac30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	e007      	b.n	800ac30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac24:	3301      	adds	r3, #1
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	b25a      	sxtb	r2, r3
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac30:	2301      	movs	r3, #1
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ac34:	e001      	b.n	800ac3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3740      	adds	r7, #64	@ 0x40
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08c      	sub	sp, #48	@ 0x30
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <xQueueReceive+0x32>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	623b      	str	r3, [r7, #32]
}
 800ac7c:	bf00      	nop
 800ac7e:	bf00      	nop
 800ac80:	e7fd      	b.n	800ac7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d103      	bne.n	800ac90 <xQueueReceive+0x40>
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <xQueueReceive+0x44>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <xQueueReceive+0x46>
 800ac94:	2300      	movs	r3, #0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10b      	bne.n	800acb2 <xQueueReceive+0x62>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	61fb      	str	r3, [r7, #28]
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	e7fd      	b.n	800acae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acb2:	f001 f86f 	bl	800bd94 <xTaskGetSchedulerState>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <xQueueReceive+0x72>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <xQueueReceive+0x76>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <xQueueReceive+0x78>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <xQueueReceive+0x94>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61bb      	str	r3, [r7, #24]
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ace4:	f001 fdc0 	bl	800c868 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01f      	beq.n	800ad34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acf8:	f000 f8f6 	bl	800aee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	1e5a      	subs	r2, r3, #1
 800ad00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00f      	beq.n	800ad2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0e:	3310      	adds	r3, #16
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fe57 	bl	800b9c4 <xTaskRemoveFromEventList>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad1c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae10 <xQueueReceive+0x1c0>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad2c:	f001 fdce 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e069      	b.n	800ae08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad3a:	f001 fdc7 	bl	800c8cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e062      	b.n	800ae08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fec5 	bl	800badc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad52:	2301      	movs	r3, #1
 800ad54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad56:	f001 fdb9 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad5a:	f000 fc0d 	bl	800b578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad5e:	f001 fd83 	bl	800c868 <vPortEnterCritical>
 800ad62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad68:	b25b      	sxtb	r3, r3
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad6e:	d103      	bne.n	800ad78 <xQueueReceive+0x128>
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad84:	d103      	bne.n	800ad8e <xQueueReceive+0x13e>
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad8e:	f001 fd9d 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad92:	1d3a      	adds	r2, r7, #4
 800ad94:	f107 0310 	add.w	r3, r7, #16
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 feb4 	bl	800bb08 <xTaskCheckForTimeOut>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d123      	bne.n	800adee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ada6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada8:	f000 f916 	bl	800afd8 <prvIsQueueEmpty>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d017      	beq.n	800ade2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb4:	3324      	adds	r3, #36	@ 0x24
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fdb0 	bl	800b920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc2:	f000 f8b7 	bl	800af34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adc6:	f000 fbe5 	bl	800b594 <xTaskResumeAll>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d189      	bne.n	800ace4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800add0:	4b0f      	ldr	r3, [pc, #60]	@ (800ae10 <xQueueReceive+0x1c0>)
 800add2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	e780      	b.n	800ace4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ade2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade4:	f000 f8a6 	bl	800af34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ade8:	f000 fbd4 	bl	800b594 <xTaskResumeAll>
 800adec:	e77a      	b.n	800ace4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf0:	f000 f8a0 	bl	800af34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adf4:	f000 fbce 	bl	800b594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adfa:	f000 f8ed 	bl	800afd8 <prvIsQueueEmpty>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f43f af6f 	beq.w	800ace4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3730      	adds	r7, #48	@ 0x30
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	e000ed04 	.word	0xe000ed04

0800ae14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10d      	bne.n	800ae4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d14d      	bne.n	800aed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 ffc6 	bl	800bdd0 <xTaskPriorityDisinherit>
 800ae44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	609a      	str	r2, [r3, #8]
 800ae4c:	e043      	b.n	800aed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d119      	bne.n	800ae88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6858      	ldr	r0, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	f011 f811 	bl	801be86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6c:	441a      	add	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d32b      	bcc.n	800aed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	605a      	str	r2, [r3, #4]
 800ae86:	e026      	b.n	800aed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68d8      	ldr	r0, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	461a      	mov	r2, r3
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	f010 fff7 	bl	801be86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea0:	425b      	negs	r3, r3
 800aea2:	441a      	add	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d207      	bcs.n	800aec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	425b      	negs	r3, r3
 800aebe:	441a      	add	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d105      	bne.n	800aed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af02:	441a      	add	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	d303      	bcc.n	800af1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68d9      	ldr	r1, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af24:	461a      	mov	r2, r3
 800af26:	6838      	ldr	r0, [r7, #0]
 800af28:	f010 ffad 	bl	801be86 <memcpy>
	}
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af3c:	f001 fc94 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af48:	e011      	b.n	800af6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d012      	beq.n	800af78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3324      	adds	r3, #36	@ 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fd34 	bl	800b9c4 <xTaskRemoveFromEventList>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af62:	f000 fe35 	bl	800bbd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	3b01      	subs	r3, #1
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dce9      	bgt.n	800af4a <prvUnlockQueue+0x16>
 800af76:	e000      	b.n	800af7a <prvUnlockQueue+0x46>
					break;
 800af78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	22ff      	movs	r2, #255	@ 0xff
 800af7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800af82:	f001 fca3 	bl	800c8cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af86:	f001 fc6f 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af92:	e011      	b.n	800afb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d012      	beq.n	800afc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3310      	adds	r3, #16
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fd0f 	bl	800b9c4 <xTaskRemoveFromEventList>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afac:	f000 fe10 	bl	800bbd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dce9      	bgt.n	800af94 <prvUnlockQueue+0x60>
 800afc0:	e000      	b.n	800afc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	22ff      	movs	r2, #255	@ 0xff
 800afc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800afcc:	f001 fc7e 	bl	800c8cc <vPortExitCritical>
}
 800afd0:	bf00      	nop
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afe0:	f001 fc42 	bl	800c868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e001      	b.n	800aff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aff6:	f001 fc69 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800affa:	68fb      	ldr	r3, [r7, #12]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b00c:	f001 fc2c 	bl	800c868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b018:	429a      	cmp	r2, r3
 800b01a:	d102      	bne.n	800b022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e001      	b.n	800b026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b026:	f001 fc51 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	e014      	b.n	800b06e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b044:	4a0f      	ldr	r2, [pc, #60]	@ (800b084 <vQueueAddToRegistry+0x50>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10b      	bne.n	800b068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b050:	490c      	ldr	r1, [pc, #48]	@ (800b084 <vQueueAddToRegistry+0x50>)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b05a:	4a0a      	ldr	r2, [pc, #40]	@ (800b084 <vQueueAddToRegistry+0x50>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b066:	e006      	b.n	800b076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3301      	adds	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b07      	cmp	r3, #7
 800b072:	d9e7      	bls.n	800b044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20005bd4 	.word	0x20005bd4

0800b088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b098:	f001 fbe6 	bl	800c868 <vPortEnterCritical>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0a2:	b25b      	sxtb	r3, r3
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0a8:	d103      	bne.n	800b0b2 <vQueueWaitForMessageRestricted+0x2a>
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0b8:	b25b      	sxtb	r3, r3
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0be:	d103      	bne.n	800b0c8 <vQueueWaitForMessageRestricted+0x40>
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0c8:	f001 fc00 	bl	800c8cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	3324      	adds	r3, #36	@ 0x24
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fc45 	bl	800b96c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0e2:	6978      	ldr	r0, [r7, #20]
 800b0e4:	f7ff ff26 	bl	800af34 <prvUnlockQueue>
	}
 800b0e8:	bf00      	nop
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08e      	sub	sp, #56	@ 0x38
 800b0f4:	af04      	add	r7, sp, #16
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	623b      	str	r3, [r7, #32]
}
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	e7fd      	b.n	800b118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10b      	bne.n	800b13a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	61fb      	str	r3, [r7, #28]
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	e7fd      	b.n	800b136 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b13a:	235c      	movs	r3, #92	@ 0x5c
 800b13c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b5c      	cmp	r3, #92	@ 0x5c
 800b142:	d00b      	beq.n	800b15c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	61bb      	str	r3, [r7, #24]
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b15c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01e      	beq.n	800b1a2 <xTaskCreateStatic+0xb2>
 800b164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01b      	beq.n	800b1a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b172:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	2202      	movs	r2, #2
 800b178:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b17c:	2300      	movs	r3, #0
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	9302      	str	r3, [sp, #8]
 800b184:	f107 0314 	add.w	r3, r7, #20
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 f850 	bl	800b23a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b19a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b19c:	f000 f8de 	bl	800b35c <prvAddNewTaskToReadyList>
 800b1a0:	e001      	b.n	800b1a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1a6:	697b      	ldr	r3, [r7, #20]
	}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3728      	adds	r7, #40	@ 0x28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08c      	sub	sp, #48	@ 0x30
 800b1b4:	af04      	add	r7, sp, #16
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1c0:	88fb      	ldrh	r3, [r7, #6]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 fc71 	bl	800caac <pvPortMalloc>
 800b1ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00e      	beq.n	800b1f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1d2:	205c      	movs	r0, #92	@ 0x5c
 800b1d4:	f001 fc6a 	bl	800caac <pvPortMalloc>
 800b1d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1e6:	e005      	b.n	800b1f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1e8:	6978      	ldr	r0, [r7, #20]
 800b1ea:	f001 fd2d 	bl	800cc48 <vPortFree>
 800b1ee:	e001      	b.n	800b1f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d017      	beq.n	800b22a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b202:	88fa      	ldrh	r2, [r7, #6]
 800b204:	2300      	movs	r3, #0
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	9302      	str	r3, [sp, #8]
 800b20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f80e 	bl	800b23a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b21e:	69f8      	ldr	r0, [r7, #28]
 800b220:	f000 f89c 	bl	800b35c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b224:	2301      	movs	r3, #1
 800b226:	61bb      	str	r3, [r7, #24]
 800b228:	e002      	b.n	800b230 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b22a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b22e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b230:	69bb      	ldr	r3, [r7, #24]
	}
 800b232:	4618      	mov	r0, r3
 800b234:	3720      	adds	r7, #32
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b088      	sub	sp, #32
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	461a      	mov	r2, r3
 800b252:	21a5      	movs	r1, #165	@ 0xa5
 800b254:	f010 fd4e 	bl	801bcf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b262:	3b01      	subs	r3, #1
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	f023 0307 	bic.w	r3, r3, #7
 800b270:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	f003 0307 	and.w	r3, r3, #7
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	617b      	str	r3, [r7, #20]
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	e7fd      	b.n	800b290 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01f      	beq.n	800b2da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b29a:	2300      	movs	r3, #0
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	e012      	b.n	800b2c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	7819      	ldrb	r1, [r3, #0]
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	3334      	adds	r3, #52	@ 0x34
 800b2b0:	460a      	mov	r2, r1
 800b2b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b0f      	cmp	r3, #15
 800b2ca:	d9e9      	bls.n	800b2a0 <prvInitialiseNewTask+0x66>
 800b2cc:	e000      	b.n	800b2d0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b2ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b2d8:	e003      	b.n	800b2e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e4:	2b37      	cmp	r3, #55	@ 0x37
 800b2e6:	d901      	bls.n	800b2ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2e8:	2337      	movs	r3, #55	@ 0x37
 800b2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	3304      	adds	r3, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff f966 	bl	800a5d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	3318      	adds	r3, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff f961 	bl	800a5d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b326:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32a:	2200      	movs	r2, #0
 800b32c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	68f9      	ldr	r1, [r7, #12]
 800b33a:	69b8      	ldr	r0, [r7, #24]
 800b33c:	f001 f966 	bl	800c60c <pxPortInitialiseStack>
 800b340:	4602      	mov	r2, r0
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b352:	bf00      	nop
 800b354:	3720      	adds	r7, #32
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b364:	f001 fa80 	bl	800c868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b368:	4b2d      	ldr	r3, [pc, #180]	@ (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a2c      	ldr	r2, [pc, #176]	@ (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b372:	4b2c      	ldr	r3, [pc, #176]	@ (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d109      	bne.n	800b38e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b37a:	4a2a      	ldr	r2, [pc, #168]	@ (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b380:	4b27      	ldr	r3, [pc, #156]	@ (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d110      	bne.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b388:	f000 fc46 	bl	800bc18 <prvInitialiseTaskLists>
 800b38c:	e00d      	b.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b38e:	4b26      	ldr	r3, [pc, #152]	@ (800b428 <prvAddNewTaskToReadyList+0xcc>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b396:	4b23      	ldr	r3, [pc, #140]	@ (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d802      	bhi.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3aa:	4b20      	ldr	r3, [pc, #128]	@ (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	4a1e      	ldr	r2, [pc, #120]	@ (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b430 <prvAddNewTaskToReadyList+0xd4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d903      	bls.n	800b3d0 <prvAddNewTaskToReadyList+0x74>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3cc:	4a18      	ldr	r2, [pc, #96]	@ (800b430 <prvAddNewTaskToReadyList+0xd4>)
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4a15      	ldr	r2, [pc, #84]	@ (800b434 <prvAddNewTaskToReadyList+0xd8>)
 800b3de:	441a      	add	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	f7ff f901 	bl	800a5ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3ec:	f001 fa6e 	bl	800c8cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800b428 <prvAddNewTaskToReadyList+0xcc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00e      	beq.n	800b416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	429a      	cmp	r2, r3
 800b404:	d207      	bcs.n	800b416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b406:	4b0c      	ldr	r3, [pc, #48]	@ (800b438 <prvAddNewTaskToReadyList+0xdc>)
 800b408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	200060e8 	.word	0x200060e8
 800b424:	20005c14 	.word	0x20005c14
 800b428:	200060f4 	.word	0x200060f4
 800b42c:	20006104 	.word	0x20006104
 800b430:	200060f0 	.word	0x200060f0
 800b434:	20005c18 	.word	0x20005c18
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b444:	2300      	movs	r3, #0
 800b446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d018      	beq.n	800b480 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b44e:	4b14      	ldr	r3, [pc, #80]	@ (800b4a0 <vTaskDelay+0x64>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00b      	beq.n	800b46e <vTaskDelay+0x32>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	60bb      	str	r3, [r7, #8]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b46e:	f000 f883 	bl	800b578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b472:	2100      	movs	r1, #0
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fd1b 	bl	800beb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b47a:	f000 f88b 	bl	800b594 <xTaskResumeAll>
 800b47e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b486:	4b07      	ldr	r3, [pc, #28]	@ (800b4a4 <vTaskDelay+0x68>)
 800b488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20006110 	.word	0x20006110
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	@ 0x28
 800b4ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	1d39      	adds	r1, r7, #4
 800b4ba:	f107 0308 	add.w	r3, r7, #8
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff f834 	bl	800a52c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	9202      	str	r2, [sp, #8]
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	460a      	mov	r2, r1
 800b4d6:	4922      	ldr	r1, [pc, #136]	@ (800b560 <vTaskStartScheduler+0xb8>)
 800b4d8:	4822      	ldr	r0, [pc, #136]	@ (800b564 <vTaskStartScheduler+0xbc>)
 800b4da:	f7ff fe09 	bl	800b0f0 <xTaskCreateStatic>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4a21      	ldr	r2, [pc, #132]	@ (800b568 <vTaskStartScheduler+0xc0>)
 800b4e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4e4:	4b20      	ldr	r3, [pc, #128]	@ (800b568 <vTaskStartScheduler+0xc0>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	e001      	b.n	800b4f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d102      	bne.n	800b502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4fc:	f000 fd2c 	bl	800bf58 <xTimerCreateTimerTask>
 800b500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d116      	bne.n	800b536 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	613b      	str	r3, [r7, #16]
}
 800b51a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b51c:	4b13      	ldr	r3, [pc, #76]	@ (800b56c <vTaskStartScheduler+0xc4>)
 800b51e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b522:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b524:	4b12      	ldr	r3, [pc, #72]	@ (800b570 <vTaskStartScheduler+0xc8>)
 800b526:	2201      	movs	r2, #1
 800b528:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b52a:	4b12      	ldr	r3, [pc, #72]	@ (800b574 <vTaskStartScheduler+0xcc>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b530:	f001 f8f6 	bl	800c720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b534:	e00f      	b.n	800b556 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b53c:	d10b      	bne.n	800b556 <vTaskStartScheduler+0xae>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	60fb      	str	r3, [r7, #12]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <vTaskStartScheduler+0xaa>
}
 800b556:	bf00      	nop
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	0801d320 	.word	0x0801d320
 800b564:	0800bbe9 	.word	0x0800bbe9
 800b568:	2000610c 	.word	0x2000610c
 800b56c:	20006108 	.word	0x20006108
 800b570:	200060f4 	.word	0x200060f4
 800b574:	200060ec 	.word	0x200060ec

0800b578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b57c:	4b04      	ldr	r3, [pc, #16]	@ (800b590 <vTaskSuspendAll+0x18>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	4a03      	ldr	r2, [pc, #12]	@ (800b590 <vTaskSuspendAll+0x18>)
 800b584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b586:	bf00      	nop
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	20006110 	.word	0x20006110

0800b594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5a2:	4b42      	ldr	r3, [pc, #264]	@ (800b6ac <xTaskResumeAll+0x118>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10b      	bne.n	800b5c2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	603b      	str	r3, [r7, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	e7fd      	b.n	800b5be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5c2:	f001 f951 	bl	800c868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5c6:	4b39      	ldr	r3, [pc, #228]	@ (800b6ac <xTaskResumeAll+0x118>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	4a37      	ldr	r2, [pc, #220]	@ (800b6ac <xTaskResumeAll+0x118>)
 800b5ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d0:	4b36      	ldr	r3, [pc, #216]	@ (800b6ac <xTaskResumeAll+0x118>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d162      	bne.n	800b69e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5d8:	4b35      	ldr	r3, [pc, #212]	@ (800b6b0 <xTaskResumeAll+0x11c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d05e      	beq.n	800b69e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e0:	e02f      	b.n	800b642 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e2:	4b34      	ldr	r3, [pc, #208]	@ (800b6b4 <xTaskResumeAll+0x120>)
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff f85a 	bl	800a6a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff f855 	bl	800a6a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b602:	4b2d      	ldr	r3, [pc, #180]	@ (800b6b8 <xTaskResumeAll+0x124>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d903      	bls.n	800b612 <xTaskResumeAll+0x7e>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6b8 <xTaskResumeAll+0x124>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4a27      	ldr	r2, [pc, #156]	@ (800b6bc <xTaskResumeAll+0x128>)
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fe ffe0 	bl	800a5ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b632:	4b23      	ldr	r3, [pc, #140]	@ (800b6c0 <xTaskResumeAll+0x12c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d302      	bcc.n	800b642 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b63c:	4b21      	ldr	r3, [pc, #132]	@ (800b6c4 <xTaskResumeAll+0x130>)
 800b63e:	2201      	movs	r2, #1
 800b640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b642:	4b1c      	ldr	r3, [pc, #112]	@ (800b6b4 <xTaskResumeAll+0x120>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1cb      	bne.n	800b5e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b650:	f000 fb80 	bl	800bd54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b654:	4b1c      	ldr	r3, [pc, #112]	@ (800b6c8 <xTaskResumeAll+0x134>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d010      	beq.n	800b682 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b660:	f000 f846 	bl	800b6f0 <xTaskIncrementTick>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b66a:	4b16      	ldr	r3, [pc, #88]	@ (800b6c4 <xTaskResumeAll+0x130>)
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3b01      	subs	r3, #1
 800b674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f1      	bne.n	800b660 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b67c:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <xTaskResumeAll+0x134>)
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b682:	4b10      	ldr	r3, [pc, #64]	@ (800b6c4 <xTaskResumeAll+0x130>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d009      	beq.n	800b69e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b68a:	2301      	movs	r3, #1
 800b68c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b68e:	4b0f      	ldr	r3, [pc, #60]	@ (800b6cc <xTaskResumeAll+0x138>)
 800b690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b69e:	f001 f915 	bl	800c8cc <vPortExitCritical>

	return xAlreadyYielded;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20006110 	.word	0x20006110
 800b6b0:	200060e8 	.word	0x200060e8
 800b6b4:	200060a8 	.word	0x200060a8
 800b6b8:	200060f0 	.word	0x200060f0
 800b6bc:	20005c18 	.word	0x20005c18
 800b6c0:	20005c14 	.word	0x20005c14
 800b6c4:	200060fc 	.word	0x200060fc
 800b6c8:	200060f8 	.word	0x200060f8
 800b6cc:	e000ed04 	.word	0xe000ed04

0800b6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6d6:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <xTaskGetTickCount+0x1c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6dc:	687b      	ldr	r3, [r7, #4]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	200060ec 	.word	0x200060ec

0800b6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b838 <xTaskIncrementTick+0x148>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f040 8090 	bne.w	800b824 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b704:	4b4d      	ldr	r3, [pc, #308]	@ (800b83c <xTaskIncrementTick+0x14c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b70c:	4a4b      	ldr	r2, [pc, #300]	@ (800b83c <xTaskIncrementTick+0x14c>)
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d121      	bne.n	800b75c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b718:	4b49      	ldr	r3, [pc, #292]	@ (800b840 <xTaskIncrementTick+0x150>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00b      	beq.n	800b73a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	603b      	str	r3, [r7, #0]
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	e7fd      	b.n	800b736 <xTaskIncrementTick+0x46>
 800b73a:	4b41      	ldr	r3, [pc, #260]	@ (800b840 <xTaskIncrementTick+0x150>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	4b40      	ldr	r3, [pc, #256]	@ (800b844 <xTaskIncrementTick+0x154>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a3e      	ldr	r2, [pc, #248]	@ (800b840 <xTaskIncrementTick+0x150>)
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	4a3e      	ldr	r2, [pc, #248]	@ (800b844 <xTaskIncrementTick+0x154>)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	4b3e      	ldr	r3, [pc, #248]	@ (800b848 <xTaskIncrementTick+0x158>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a3c      	ldr	r2, [pc, #240]	@ (800b848 <xTaskIncrementTick+0x158>)
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f000 fafc 	bl	800bd54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b75c:	4b3b      	ldr	r3, [pc, #236]	@ (800b84c <xTaskIncrementTick+0x15c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	429a      	cmp	r2, r3
 800b764:	d349      	bcc.n	800b7fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b766:	4b36      	ldr	r3, [pc, #216]	@ (800b840 <xTaskIncrementTick+0x150>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b770:	4b36      	ldr	r3, [pc, #216]	@ (800b84c <xTaskIncrementTick+0x15c>)
 800b772:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b776:	601a      	str	r2, [r3, #0]
					break;
 800b778:	e03f      	b.n	800b7fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b77a:	4b31      	ldr	r3, [pc, #196]	@ (800b840 <xTaskIncrementTick+0x150>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d203      	bcs.n	800b79a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b792:	4a2e      	ldr	r2, [pc, #184]	@ (800b84c <xTaskIncrementTick+0x15c>)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b798:	e02f      	b.n	800b7fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe ff82 	bl	800a6a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d004      	beq.n	800b7b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3318      	adds	r3, #24
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe ff79 	bl	800a6a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ba:	4b25      	ldr	r3, [pc, #148]	@ (800b850 <xTaskIncrementTick+0x160>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d903      	bls.n	800b7ca <xTaskIncrementTick+0xda>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c6:	4a22      	ldr	r2, [pc, #136]	@ (800b850 <xTaskIncrementTick+0x160>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b854 <xTaskIncrementTick+0x164>)
 800b7d8:	441a      	add	r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7fe ff04 	bl	800a5ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b858 <xTaskIncrementTick+0x168>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d3b8      	bcc.n	800b766 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7f8:	e7b5      	b.n	800b766 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7fa:	4b17      	ldr	r3, [pc, #92]	@ (800b858 <xTaskIncrementTick+0x168>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b800:	4914      	ldr	r1, [pc, #80]	@ (800b854 <xTaskIncrementTick+0x164>)
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d901      	bls.n	800b816 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b812:	2301      	movs	r3, #1
 800b814:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b816:	4b11      	ldr	r3, [pc, #68]	@ (800b85c <xTaskIncrementTick+0x16c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b81e:	2301      	movs	r3, #1
 800b820:	617b      	str	r3, [r7, #20]
 800b822:	e004      	b.n	800b82e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b824:	4b0e      	ldr	r3, [pc, #56]	@ (800b860 <xTaskIncrementTick+0x170>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	4a0d      	ldr	r2, [pc, #52]	@ (800b860 <xTaskIncrementTick+0x170>)
 800b82c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b82e:	697b      	ldr	r3, [r7, #20]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20006110 	.word	0x20006110
 800b83c:	200060ec 	.word	0x200060ec
 800b840:	200060a0 	.word	0x200060a0
 800b844:	200060a4 	.word	0x200060a4
 800b848:	20006100 	.word	0x20006100
 800b84c:	20006108 	.word	0x20006108
 800b850:	200060f0 	.word	0x200060f0
 800b854:	20005c18 	.word	0x20005c18
 800b858:	20005c14 	.word	0x20005c14
 800b85c:	200060fc 	.word	0x200060fc
 800b860:	200060f8 	.word	0x200060f8

0800b864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b86a:	4b28      	ldr	r3, [pc, #160]	@ (800b90c <vTaskSwitchContext+0xa8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b872:	4b27      	ldr	r3, [pc, #156]	@ (800b910 <vTaskSwitchContext+0xac>)
 800b874:	2201      	movs	r2, #1
 800b876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b878:	e042      	b.n	800b900 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b87a:	4b25      	ldr	r3, [pc, #148]	@ (800b910 <vTaskSwitchContext+0xac>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b880:	4b24      	ldr	r3, [pc, #144]	@ (800b914 <vTaskSwitchContext+0xb0>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e011      	b.n	800b8ac <vTaskSwitchContext+0x48>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	607b      	str	r3, [r7, #4]
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	e7fd      	b.n	800b8a2 <vTaskSwitchContext+0x3e>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	491a      	ldr	r1, [pc, #104]	@ (800b918 <vTaskSwitchContext+0xb4>)
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	440b      	add	r3, r1
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0e3      	beq.n	800b888 <vTaskSwitchContext+0x24>
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4a13      	ldr	r2, [pc, #76]	@ (800b918 <vTaskSwitchContext+0xb4>)
 800b8cc:	4413      	add	r3, r2
 800b8ce:	60bb      	str	r3, [r7, #8]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	605a      	str	r2, [r3, #4]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d104      	bne.n	800b8f0 <vTaskSwitchContext+0x8c>
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	605a      	str	r2, [r3, #4]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4a09      	ldr	r2, [pc, #36]	@ (800b91c <vTaskSwitchContext+0xb8>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	4a06      	ldr	r2, [pc, #24]	@ (800b914 <vTaskSwitchContext+0xb0>)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6013      	str	r3, [r2, #0]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	20006110 	.word	0x20006110
 800b910:	200060fc 	.word	0x200060fc
 800b914:	200060f0 	.word	0x200060f0
 800b918:	20005c18 	.word	0x20005c18
 800b91c:	20005c14 	.word	0x20005c14

0800b920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10b      	bne.n	800b948 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	60fb      	str	r3, [r7, #12]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b948:	4b07      	ldr	r3, [pc, #28]	@ (800b968 <vTaskPlaceOnEventList+0x48>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3318      	adds	r3, #24
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7fe fe70 	bl	800a636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b956:	2101      	movs	r1, #1
 800b958:	6838      	ldr	r0, [r7, #0]
 800b95a:	f000 faa9 	bl	800beb0 <prvAddCurrentTaskToDelayedList>
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20005c14 	.word	0x20005c14

0800b96c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10b      	bne.n	800b996 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	bf00      	nop
 800b994:	e7fd      	b.n	800b992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b996:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4619      	mov	r1, r3
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fe fe25 	bl	800a5ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b9aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	68b8      	ldr	r0, [r7, #8]
 800b9b4:	f000 fa7c 	bl	800beb0 <prvAddCurrentTaskToDelayedList>
	}
 800b9b8:	bf00      	nop
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20005c14 	.word	0x20005c14

0800b9c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10b      	bne.n	800b9f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60fb      	str	r3, [r7, #12]
}
 800b9ec:	bf00      	nop
 800b9ee:	bf00      	nop
 800b9f0:	e7fd      	b.n	800b9ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3318      	adds	r3, #24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe fe56 	bl	800a6a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fc:	4b1d      	ldr	r3, [pc, #116]	@ (800ba74 <xTaskRemoveFromEventList+0xb0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d11d      	bne.n	800ba40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe fe4d 	bl	800a6a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba12:	4b19      	ldr	r3, [pc, #100]	@ (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d903      	bls.n	800ba22 <xTaskRemoveFromEventList+0x5e>
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4a16      	ldr	r2, [pc, #88]	@ (800ba78 <xTaskRemoveFromEventList+0xb4>)
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a13      	ldr	r2, [pc, #76]	@ (800ba7c <xTaskRemoveFromEventList+0xb8>)
 800ba30:	441a      	add	r2, r3
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fe fdd8 	bl	800a5ee <vListInsertEnd>
 800ba3e:	e005      	b.n	800ba4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	3318      	adds	r3, #24
 800ba44:	4619      	mov	r1, r3
 800ba46:	480e      	ldr	r0, [pc, #56]	@ (800ba80 <xTaskRemoveFromEventList+0xbc>)
 800ba48:	f7fe fdd1 	bl	800a5ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba50:	4b0c      	ldr	r3, [pc, #48]	@ (800ba84 <xTaskRemoveFromEventList+0xc0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d905      	bls.n	800ba66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba88 <xTaskRemoveFromEventList+0xc4>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e001      	b.n	800ba6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba6a:	697b      	ldr	r3, [r7, #20]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20006110 	.word	0x20006110
 800ba78:	200060f0 	.word	0x200060f0
 800ba7c:	20005c18 	.word	0x20005c18
 800ba80:	200060a8 	.word	0x200060a8
 800ba84:	20005c14 	.word	0x20005c14
 800ba88:	200060fc 	.word	0x200060fc

0800ba8c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60fb      	str	r3, [r7, #12]
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	e7fd      	b.n	800baae <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800bab2:	f000 fed9 	bl	800c868 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bab6:	4b07      	ldr	r3, [pc, #28]	@ (800bad4 <vTaskSetTimeOutState+0x48>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800babe:	4b06      	ldr	r3, [pc, #24]	@ (800bad8 <vTaskSetTimeOutState+0x4c>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bac6:	f000 ff01 	bl	800c8cc <vPortExitCritical>
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20006100 	.word	0x20006100
 800bad8:	200060ec 	.word	0x200060ec

0800badc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <vTaskInternalSetTimeOutState+0x24>)
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baec:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <vTaskInternalSetTimeOutState+0x28>)
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	605a      	str	r2, [r3, #4]
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	20006100 	.word	0x20006100
 800bb04:	200060ec 	.word	0x200060ec

0800bb08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10b      	bne.n	800bb30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	613b      	str	r3, [r7, #16]
}
 800bb2a:	bf00      	nop
 800bb2c:	bf00      	nop
 800bb2e:	e7fd      	b.n	800bb2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	60fb      	str	r3, [r7, #12]
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	e7fd      	b.n	800bb4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb4e:	f000 fe8b 	bl	800c868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb52:	4b1d      	ldr	r3, [pc, #116]	@ (800bbc8 <xTaskCheckForTimeOut+0xc0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb6a:	d102      	bne.n	800bb72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e023      	b.n	800bbba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	4b15      	ldr	r3, [pc, #84]	@ (800bbcc <xTaskCheckForTimeOut+0xc4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d007      	beq.n	800bb8e <xTaskCheckForTimeOut+0x86>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d302      	bcc.n	800bb8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	e015      	b.n	800bbba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d20b      	bcs.n	800bbb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff ff99 	bl	800badc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	e004      	b.n	800bbba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbba:	f000 fe87 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3720      	adds	r7, #32
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	200060ec 	.word	0x200060ec
 800bbcc:	20006100 	.word	0x20006100

0800bbd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbd4:	4b03      	ldr	r3, [pc, #12]	@ (800bbe4 <vTaskMissedYield+0x14>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
}
 800bbda:	bf00      	nop
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	200060fc 	.word	0x200060fc

0800bbe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbf0:	f000 f852 	bl	800bc98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbf4:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <prvIdleTask+0x28>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d9f9      	bls.n	800bbf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbfc:	4b05      	ldr	r3, [pc, #20]	@ (800bc14 <prvIdleTask+0x2c>)
 800bbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc0c:	e7f0      	b.n	800bbf0 <prvIdleTask+0x8>
 800bc0e:	bf00      	nop
 800bc10:	20005c18 	.word	0x20005c18
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc1e:	2300      	movs	r3, #0
 800bc20:	607b      	str	r3, [r7, #4]
 800bc22:	e00c      	b.n	800bc3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4a12      	ldr	r2, [pc, #72]	@ (800bc78 <prvInitialiseTaskLists+0x60>)
 800bc30:	4413      	add	r3, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe fcae 	bl	800a594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	607b      	str	r3, [r7, #4]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b37      	cmp	r3, #55	@ 0x37
 800bc42:	d9ef      	bls.n	800bc24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc44:	480d      	ldr	r0, [pc, #52]	@ (800bc7c <prvInitialiseTaskLists+0x64>)
 800bc46:	f7fe fca5 	bl	800a594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc4a:	480d      	ldr	r0, [pc, #52]	@ (800bc80 <prvInitialiseTaskLists+0x68>)
 800bc4c:	f7fe fca2 	bl	800a594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc50:	480c      	ldr	r0, [pc, #48]	@ (800bc84 <prvInitialiseTaskLists+0x6c>)
 800bc52:	f7fe fc9f 	bl	800a594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc56:	480c      	ldr	r0, [pc, #48]	@ (800bc88 <prvInitialiseTaskLists+0x70>)
 800bc58:	f7fe fc9c 	bl	800a594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc5c:	480b      	ldr	r0, [pc, #44]	@ (800bc8c <prvInitialiseTaskLists+0x74>)
 800bc5e:	f7fe fc99 	bl	800a594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc62:	4b0b      	ldr	r3, [pc, #44]	@ (800bc90 <prvInitialiseTaskLists+0x78>)
 800bc64:	4a05      	ldr	r2, [pc, #20]	@ (800bc7c <prvInitialiseTaskLists+0x64>)
 800bc66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	@ (800bc94 <prvInitialiseTaskLists+0x7c>)
 800bc6a:	4a05      	ldr	r2, [pc, #20]	@ (800bc80 <prvInitialiseTaskLists+0x68>)
 800bc6c:	601a      	str	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20005c18 	.word	0x20005c18
 800bc7c:	20006078 	.word	0x20006078
 800bc80:	2000608c 	.word	0x2000608c
 800bc84:	200060a8 	.word	0x200060a8
 800bc88:	200060bc 	.word	0x200060bc
 800bc8c:	200060d4 	.word	0x200060d4
 800bc90:	200060a0 	.word	0x200060a0
 800bc94:	200060a4 	.word	0x200060a4

0800bc98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc9e:	e019      	b.n	800bcd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bca0:	f000 fde2 	bl	800c868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca4:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <prvCheckTasksWaitingTermination+0x50>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe fcf9 	bl	800a6a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcec <prvCheckTasksWaitingTermination+0x54>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bcec <prvCheckTasksWaitingTermination+0x54>)
 800bcbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf0 <prvCheckTasksWaitingTermination+0x58>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf0 <prvCheckTasksWaitingTermination+0x58>)
 800bcc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcca:	f000 fdff 	bl	800c8cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f810 	bl	800bcf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcd4:	4b06      	ldr	r3, [pc, #24]	@ (800bcf0 <prvCheckTasksWaitingTermination+0x58>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e1      	bne.n	800bca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200060bc 	.word	0x200060bc
 800bcec:	200060e8 	.word	0x200060e8
 800bcf0:	200060d0 	.word	0x200060d0

0800bcf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d108      	bne.n	800bd18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 ff9c 	bl	800cc48 <vPortFree>
				vPortFree( pxTCB );
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 ff99 	bl	800cc48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd16:	e019      	b.n	800bd4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d103      	bne.n	800bd2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 ff90 	bl	800cc48 <vPortFree>
	}
 800bd28:	e010      	b.n	800bd4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d00b      	beq.n	800bd4c <prvDeleteTCB+0x58>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	60fb      	str	r3, [r7, #12]
}
 800bd46:	bf00      	nop
 800bd48:	bf00      	nop
 800bd4a:	e7fd      	b.n	800bd48 <prvDeleteTCB+0x54>
	}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd5a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd8c <prvResetNextTaskUnblockTime+0x38>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d104      	bne.n	800bd6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd64:	4b0a      	ldr	r3, [pc, #40]	@ (800bd90 <prvResetNextTaskUnblockTime+0x3c>)
 800bd66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd6c:	e008      	b.n	800bd80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6e:	4b07      	ldr	r3, [pc, #28]	@ (800bd8c <prvResetNextTaskUnblockTime+0x38>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4a04      	ldr	r2, [pc, #16]	@ (800bd90 <prvResetNextTaskUnblockTime+0x3c>)
 800bd7e:	6013      	str	r3, [r2, #0]
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	200060a0 	.word	0x200060a0
 800bd90:	20006108 	.word	0x20006108

0800bd94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc8 <xTaskGetSchedulerState+0x34>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d102      	bne.n	800bda8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bda2:	2301      	movs	r3, #1
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	e008      	b.n	800bdba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda8:	4b08      	ldr	r3, [pc, #32]	@ (800bdcc <xTaskGetSchedulerState+0x38>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	607b      	str	r3, [r7, #4]
 800bdb4:	e001      	b.n	800bdba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdba:	687b      	ldr	r3, [r7, #4]
	}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	200060f4 	.word	0x200060f4
 800bdcc:	20006110 	.word	0x20006110

0800bdd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d058      	beq.n	800be98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bde6:	4b2f      	ldr	r3, [pc, #188]	@ (800bea4 <xTaskPriorityDisinherit+0xd4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d00b      	beq.n	800be08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	60fb      	str	r3, [r7, #12]
}
 800be02:	bf00      	nop
 800be04:	bf00      	nop
 800be06:	e7fd      	b.n	800be04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10b      	bne.n	800be28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	60bb      	str	r3, [r7, #8]
}
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	e7fd      	b.n	800be24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d02c      	beq.n	800be98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be42:	2b00      	cmp	r3, #0
 800be44:	d128      	bne.n	800be98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	3304      	adds	r3, #4
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fe fc2c 	bl	800a6a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be68:	4b0f      	ldr	r3, [pc, #60]	@ (800bea8 <xTaskPriorityDisinherit+0xd8>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d903      	bls.n	800be78 <xTaskPriorityDisinherit+0xa8>
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	4a0c      	ldr	r2, [pc, #48]	@ (800bea8 <xTaskPriorityDisinherit+0xd8>)
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4a09      	ldr	r2, [pc, #36]	@ (800beac <xTaskPriorityDisinherit+0xdc>)
 800be86:	441a      	add	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f7fe fbad 	bl	800a5ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be94:	2301      	movs	r3, #1
 800be96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	20005c14 	.word	0x20005c14
 800bea8:	200060f0 	.word	0x200060f0
 800beac:	20005c18 	.word	0x20005c18

0800beb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800beba:	4b21      	ldr	r3, [pc, #132]	@ (800bf40 <prvAddCurrentTaskToDelayedList+0x90>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bec0:	4b20      	ldr	r3, [pc, #128]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fbee 	bl	800a6a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bed2:	d10a      	bne.n	800beea <prvAddCurrentTaskToDelayedList+0x3a>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d007      	beq.n	800beea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beda:	4b1a      	ldr	r3, [pc, #104]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x94>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3304      	adds	r3, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4819      	ldr	r0, [pc, #100]	@ (800bf48 <prvAddCurrentTaskToDelayedList+0x98>)
 800bee4:	f7fe fb83 	bl	800a5ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bee8:	e026      	b.n	800bf38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bef2:	4b14      	ldr	r3, [pc, #80]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x94>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d209      	bcs.n	800bf16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf02:	4b12      	ldr	r3, [pc, #72]	@ (800bf4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b0f      	ldr	r3, [pc, #60]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7fe fb91 	bl	800a636 <vListInsert>
}
 800bf14:	e010      	b.n	800bf38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf16:	4b0e      	ldr	r3, [pc, #56]	@ (800bf50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf44 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	4619      	mov	r1, r3
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fe fb87 	bl	800a636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf28:	4b0a      	ldr	r3, [pc, #40]	@ (800bf54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d202      	bcs.n	800bf38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf32:	4a08      	ldr	r2, [pc, #32]	@ (800bf54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	6013      	str	r3, [r2, #0]
}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200060ec 	.word	0x200060ec
 800bf44:	20005c14 	.word	0x20005c14
 800bf48:	200060d4 	.word	0x200060d4
 800bf4c:	200060a4 	.word	0x200060a4
 800bf50:	200060a0 	.word	0x200060a0
 800bf54:	20006108 	.word	0x20006108

0800bf58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	@ 0x28
 800bf5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf62:	f000 fb13 	bl	800c58c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf66:	4b1d      	ldr	r3, [pc, #116]	@ (800bfdc <xTimerCreateTimerTask+0x84>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d021      	beq.n	800bfb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf76:	1d3a      	adds	r2, r7, #4
 800bf78:	f107 0108 	add.w	r1, r7, #8
 800bf7c:	f107 030c 	add.w	r3, r7, #12
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fe faed 	bl	800a560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	9202      	str	r2, [sp, #8]
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	2302      	movs	r3, #2
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	2300      	movs	r3, #0
 800bf96:	460a      	mov	r2, r1
 800bf98:	4911      	ldr	r1, [pc, #68]	@ (800bfe0 <xTimerCreateTimerTask+0x88>)
 800bf9a:	4812      	ldr	r0, [pc, #72]	@ (800bfe4 <xTimerCreateTimerTask+0x8c>)
 800bf9c:	f7ff f8a8 	bl	800b0f0 <xTaskCreateStatic>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	4a11      	ldr	r2, [pc, #68]	@ (800bfe8 <xTimerCreateTimerTask+0x90>)
 800bfa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfa6:	4b10      	ldr	r3, [pc, #64]	@ (800bfe8 <xTimerCreateTimerTask+0x90>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10b      	bne.n	800bfd0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	613b      	str	r3, [r7, #16]
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	e7fd      	b.n	800bfcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfd0:	697b      	ldr	r3, [r7, #20]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20006144 	.word	0x20006144
 800bfe0:	0801d328 	.word	0x0801d328
 800bfe4:	0800c125 	.word	0x0800c125
 800bfe8:	20006148 	.word	0x20006148

0800bfec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	@ 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10b      	bne.n	800c01c <xTimerGenericCommand+0x30>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	623b      	str	r3, [r7, #32]
}
 800c016:	bf00      	nop
 800c018:	bf00      	nop
 800c01a:	e7fd      	b.n	800c018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c01c:	4b19      	ldr	r3, [pc, #100]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d02a      	beq.n	800c07a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b05      	cmp	r3, #5
 800c034:	dc18      	bgt.n	800c068 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c036:	f7ff fead 	bl	800bd94 <xTaskGetSchedulerState>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d109      	bne.n	800c054 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c040:	4b10      	ldr	r3, [pc, #64]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c042:	6818      	ldr	r0, [r3, #0]
 800c044:	f107 0110 	add.w	r1, r7, #16
 800c048:	2300      	movs	r3, #0
 800c04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04c:	f7fe fc60 	bl	800a910 <xQueueGenericSend>
 800c050:	6278      	str	r0, [r7, #36]	@ 0x24
 800c052:	e012      	b.n	800c07a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c054:	4b0b      	ldr	r3, [pc, #44]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	f107 0110 	add.w	r1, r7, #16
 800c05c:	2300      	movs	r3, #0
 800c05e:	2200      	movs	r2, #0
 800c060:	f7fe fc56 	bl	800a910 <xQueueGenericSend>
 800c064:	6278      	str	r0, [r7, #36]	@ 0x24
 800c066:	e008      	b.n	800c07a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c068:	4b06      	ldr	r3, [pc, #24]	@ (800c084 <xTimerGenericCommand+0x98>)
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	f107 0110 	add.w	r1, r7, #16
 800c070:	2300      	movs	r3, #0
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	f7fe fd4e 	bl	800ab14 <xQueueGenericSendFromISR>
 800c078:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3728      	adds	r7, #40	@ 0x28
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	20006144 	.word	0x20006144

0800c088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af02      	add	r7, sp, #8
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c092:	4b23      	ldr	r3, [pc, #140]	@ (800c120 <prvProcessExpiredTimer+0x98>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe fb01 	bl	800a6a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d023      	beq.n	800c0fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	699a      	ldr	r2, [r3, #24]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	18d1      	adds	r1, r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	6978      	ldr	r0, [r7, #20]
 800c0c2:	f000 f8d5 	bl	800c270 <prvInsertTimerInActiveList>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d020      	beq.n	800c10e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6978      	ldr	r0, [r7, #20]
 800c0d8:	f7ff ff88 	bl	800bfec <xTimerGenericCommand>
 800c0dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d114      	bne.n	800c10e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	60fb      	str	r3, [r7, #12]
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	e7fd      	b.n	800c0f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	6978      	ldr	r0, [r7, #20]
 800c114:	4798      	blx	r3
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	2000613c 	.word	0x2000613c

0800c124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f859 	bl	800c1e8 <prvGetNextExpireTime>
 800c136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4619      	mov	r1, r3
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f805 	bl	800c14c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c142:	f000 f8d7 	bl	800c2f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c146:	bf00      	nop
 800c148:	e7f0      	b.n	800c12c <prvTimerTask+0x8>
	...

0800c14c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c156:	f7ff fa0f 	bl	800b578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 f866 	bl	800c230 <prvSampleTimeNow>
 800c164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d130      	bne.n	800c1ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <prvProcessTimerOrBlockTask+0x3c>
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	429a      	cmp	r2, r3
 800c178:	d806      	bhi.n	800c188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c17a:	f7ff fa0b 	bl	800b594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff ff81 	bl	800c088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c186:	e024      	b.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c18e:	4b13      	ldr	r3, [pc, #76]	@ (800c1dc <prvProcessTimerOrBlockTask+0x90>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <prvProcessTimerOrBlockTask+0x50>
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <prvProcessTimerOrBlockTask+0x52>
 800c19c:	2300      	movs	r3, #0
 800c19e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e0 <prvProcessTimerOrBlockTask+0x94>)
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f7fe ff6b 	bl	800b088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1b2:	f7ff f9ef 	bl	800b594 <xTaskResumeAll>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1bc:	4b09      	ldr	r3, [pc, #36]	@ (800c1e4 <prvProcessTimerOrBlockTask+0x98>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	f3bf 8f6f 	isb	sy
}
 800c1cc:	e001      	b.n	800c1d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1ce:	f7ff f9e1 	bl	800b594 <xTaskResumeAll>
}
 800c1d2:	bf00      	nop
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20006140 	.word	0x20006140
 800c1e0:	20006144 	.word	0x20006144
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <prvGetNextExpireTime+0x44>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <prvGetNextExpireTime+0x16>
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	e000      	b.n	800c200 <prvGetNextExpireTime+0x18>
 800c1fe:	2200      	movs	r2, #0
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d105      	bne.n	800c218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c20c:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <prvGetNextExpireTime+0x44>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e001      	b.n	800c21c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c21c:	68fb      	ldr	r3, [r7, #12]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	2000613c 	.word	0x2000613c

0800c230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c238:	f7ff fa4a 	bl	800b6d0 <xTaskGetTickCount>
 800c23c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c23e:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <prvSampleTimeNow+0x3c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	429a      	cmp	r2, r3
 800c246:	d205      	bcs.n	800c254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c248:	f000 f93a 	bl	800c4c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e002      	b.n	800c25a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c25a:	4a04      	ldr	r2, [pc, #16]	@ (800c26c <prvSampleTimeNow+0x3c>)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c260:	68fb      	ldr	r3, [r7, #12]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	2000614c 	.word	0x2000614c

0800c270 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	429a      	cmp	r2, r3
 800c294:	d812      	bhi.n	800c2bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	1ad2      	subs	r2, r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d302      	bcc.n	800c2aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	e01b      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2aa:	4b10      	ldr	r3, [pc, #64]	@ (800c2ec <prvInsertTimerInActiveList+0x7c>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	f7fe f9be 	bl	800a636 <vListInsert>
 800c2ba:	e012      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d206      	bcs.n	800c2d2 <prvInsertTimerInActiveList+0x62>
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d302      	bcc.n	800c2d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e007      	b.n	800c2e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2d2:	4b07      	ldr	r3, [pc, #28]	@ (800c2f0 <prvInsertTimerInActiveList+0x80>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fe f9aa 	bl	800a636 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2e2:	697b      	ldr	r3, [r7, #20]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20006140 	.word	0x20006140
 800c2f0:	2000613c 	.word	0x2000613c

0800c2f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	@ 0x38
 800c2f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2fa:	e0ce      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	da19      	bge.n	800c336 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c302:	1d3b      	adds	r3, r7, #4
 800c304:	3304      	adds	r3, #4
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10b      	bne.n	800c326 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	61fb      	str	r3, [r7, #28]
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	e7fd      	b.n	800c322 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c32c:	6850      	ldr	r0, [r2, #4]
 800c32e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c330:	6892      	ldr	r2, [r2, #8]
 800c332:	4611      	mov	r1, r2
 800c334:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f2c0 80ae 	blt.w	800c49a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d004      	beq.n	800c354 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34c:	3304      	adds	r3, #4
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe f9aa 	bl	800a6a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c354:	463b      	mov	r3, r7
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff ff6a 	bl	800c230 <prvSampleTimeNow>
 800c35c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b09      	cmp	r3, #9
 800c362:	f200 8097 	bhi.w	800c494 <prvProcessReceivedCommands+0x1a0>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <prvProcessReceivedCommands+0x78>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c395 	.word	0x0800c395
 800c370:	0800c395 	.word	0x0800c395
 800c374:	0800c395 	.word	0x0800c395
 800c378:	0800c40b 	.word	0x0800c40b
 800c37c:	0800c41f 	.word	0x0800c41f
 800c380:	0800c46b 	.word	0x0800c46b
 800c384:	0800c395 	.word	0x0800c395
 800c388:	0800c395 	.word	0x0800c395
 800c38c:	0800c40b 	.word	0x0800c40b
 800c390:	0800c41f 	.word	0x0800c41f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c39a:	f043 0301 	orr.w	r3, r3, #1
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	18d1      	adds	r1, r2, r3
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3b4:	f7ff ff5c 	bl	800c270 <prvInsertTimerInActiveList>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d06c      	beq.n	800c498 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d061      	beq.n	800c498 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	441a      	add	r2, r3
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3e6:	f7ff fe01 	bl	800bfec <xTimerGenericCommand>
 800c3ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d152      	bne.n	800c498 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	61bb      	str	r3, [r7, #24]
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	e7fd      	b.n	800c406 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c410:	f023 0301 	bic.w	r3, r3, #1
 800c414:	b2da      	uxtb	r2, r3
 800c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c418:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c41c:	e03d      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c424:	f043 0301 	orr.w	r3, r3, #1
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c434:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10b      	bne.n	800c456 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	617b      	str	r3, [r7, #20]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c458:	699a      	ldr	r2, [r3, #24]
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	18d1      	adds	r1, r2, r3
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c464:	f7ff ff04 	bl	800c270 <prvInsertTimerInActiveList>
					break;
 800c468:	e017      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d103      	bne.n	800c480 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c47a:	f000 fbe5 	bl	800cc48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c47e:	e00c      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c486:	f023 0301 	bic.w	r3, r3, #1
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c492:	e002      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c494:	bf00      	nop
 800c496:	e000      	b.n	800c49a <prvProcessReceivedCommands+0x1a6>
					break;
 800c498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c49a:	4b08      	ldr	r3, [pc, #32]	@ (800c4bc <prvProcessReceivedCommands+0x1c8>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	1d39      	adds	r1, r7, #4
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe fbd4 	bl	800ac50 <xQueueReceive>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f47f af26 	bne.w	800c2fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3730      	adds	r7, #48	@ 0x30
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20006144 	.word	0x20006144

0800c4c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4c6:	e049      	b.n	800c55c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4c8:	4b2e      	ldr	r3, [pc, #184]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d2:	4b2c      	ldr	r3, [pc, #176]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fe f8e1 	bl	800a6a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d02f      	beq.n	800c55c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4413      	add	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d90e      	bls.n	800c52c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c51a:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3304      	adds	r3, #4
 800c522:	4619      	mov	r1, r3
 800c524:	4610      	mov	r0, r2
 800c526:	f7fe f886 	bl	800a636 <vListInsert>
 800c52a:	e017      	b.n	800c55c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c52c:	2300      	movs	r3, #0
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	2100      	movs	r1, #0
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff fd58 	bl	800bfec <xTimerGenericCommand>
 800c53c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	603b      	str	r3, [r7, #0]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c55c:	4b09      	ldr	r3, [pc, #36]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1b0      	bne.n	800c4c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c566:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c56c:	4b06      	ldr	r3, [pc, #24]	@ (800c588 <prvSwitchTimerLists+0xc8>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a04      	ldr	r2, [pc, #16]	@ (800c584 <prvSwitchTimerLists+0xc4>)
 800c572:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c574:	4a04      	ldr	r2, [pc, #16]	@ (800c588 <prvSwitchTimerLists+0xc8>)
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	6013      	str	r3, [r2, #0]
}
 800c57a:	bf00      	nop
 800c57c:	3718      	adds	r7, #24
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	2000613c 	.word	0x2000613c
 800c588:	20006140 	.word	0x20006140

0800c58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c592:	f000 f969 	bl	800c868 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c596:	4b15      	ldr	r3, [pc, #84]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d120      	bne.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c59e:	4814      	ldr	r0, [pc, #80]	@ (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5a0:	f7fd fff8 	bl	800a594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5a4:	4813      	ldr	r0, [pc, #76]	@ (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5a6:	f7fd fff5 	bl	800a594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5aa:	4b13      	ldr	r3, [pc, #76]	@ (800c5f8 <prvCheckForValidListAndQueue+0x6c>)
 800c5ac:	4a10      	ldr	r2, [pc, #64]	@ (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b0:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <prvCheckForValidListAndQueue+0x70>)
 800c5b2:	4a10      	ldr	r2, [pc, #64]	@ (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	4b11      	ldr	r3, [pc, #68]	@ (800c600 <prvCheckForValidListAndQueue+0x74>)
 800c5bc:	4a11      	ldr	r2, [pc, #68]	@ (800c604 <prvCheckForValidListAndQueue+0x78>)
 800c5be:	2110      	movs	r1, #16
 800c5c0:	200a      	movs	r0, #10
 800c5c2:	f7fe f905 	bl	800a7d0 <xQueueGenericCreateStatic>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4a08      	ldr	r2, [pc, #32]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5d4:	4b05      	ldr	r3, [pc, #20]	@ (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	490b      	ldr	r1, [pc, #44]	@ (800c608 <prvCheckForValidListAndQueue+0x7c>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe fd2a 	bl	800b034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e0:	f000 f974 	bl	800c8cc <vPortExitCritical>
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20006144 	.word	0x20006144
 800c5f0:	20006114 	.word	0x20006114
 800c5f4:	20006128 	.word	0x20006128
 800c5f8:	2000613c 	.word	0x2000613c
 800c5fc:	20006140 	.word	0x20006140
 800c600:	200061f0 	.word	0x200061f0
 800c604:	20006150 	.word	0x20006150
 800c608:	0801d330 	.word	0x0801d330

0800c60c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3b04      	subs	r3, #4
 800c61c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b04      	subs	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f023 0201 	bic.w	r2, r3, #1
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3b04      	subs	r3, #4
 800c63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c63c:	4a0c      	ldr	r2, [pc, #48]	@ (800c670 <pxPortInitialiseStack+0x64>)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3b14      	subs	r3, #20
 800c646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b04      	subs	r3, #4
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f06f 0202 	mvn.w	r2, #2
 800c65a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	3b20      	subs	r3, #32
 800c660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	0800c675 	.word	0x0800c675

0800c674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c67e:	4b13      	ldr	r3, [pc, #76]	@ (800c6cc <prvTaskExitError+0x58>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c686:	d00b      	beq.n	800c6a0 <prvTaskExitError+0x2c>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	bf00      	nop
 800c69e:	e7fd      	b.n	800c69c <prvTaskExitError+0x28>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60bb      	str	r3, [r7, #8]
}
 800c6b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6b4:	bf00      	nop
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d0fc      	beq.n	800c6b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	200000a0 	.word	0x200000a0

0800c6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6d0:	4b07      	ldr	r3, [pc, #28]	@ (800c6f0 <pxCurrentTCBConst2>)
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	6808      	ldr	r0, [r1, #0]
 800c6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	f380 8809 	msr	PSP, r0
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8811 	msr	BASEPRI, r0
 800c6ea:	4770      	bx	lr
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst2>:
 800c6f0:	20005c14 	.word	0x20005c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6f8:	4808      	ldr	r0, [pc, #32]	@ (800c71c <prvPortStartFirstTask+0x24>)
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f380 8808 	msr	MSP, r0
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8814 	msr	CONTROL, r0
 800c70a:	b662      	cpsie	i
 800c70c:	b661      	cpsie	f
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	df00      	svc	0
 800c718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c71a:	bf00      	nop
 800c71c:	e000ed08 	.word	0xe000ed08

0800c720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c726:	4b47      	ldr	r3, [pc, #284]	@ (800c844 <xPortStartScheduler+0x124>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a47      	ldr	r2, [pc, #284]	@ (800c848 <xPortStartScheduler+0x128>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10b      	bne.n	800c748 <xPortStartScheduler+0x28>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c748:	4b3e      	ldr	r3, [pc, #248]	@ (800c844 <xPortStartScheduler+0x124>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a3f      	ldr	r2, [pc, #252]	@ (800c84c <xPortStartScheduler+0x12c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d10b      	bne.n	800c76a <xPortStartScheduler+0x4a>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60fb      	str	r3, [r7, #12]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c76a:	4b39      	ldr	r3, [pc, #228]	@ (800c850 <xPortStartScheduler+0x130>)
 800c76c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	22ff      	movs	r2, #255	@ 0xff
 800c77a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	b2db      	uxtb	r3, r3
 800c782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	4b31      	ldr	r3, [pc, #196]	@ (800c854 <xPortStartScheduler+0x134>)
 800c790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c792:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <xPortStartScheduler+0x138>)
 800c794:	2207      	movs	r2, #7
 800c796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c798:	e009      	b.n	800c7ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c79a:	4b2f      	ldr	r3, [pc, #188]	@ (800c858 <xPortStartScheduler+0x138>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7a4:	78fb      	ldrb	r3, [r7, #3]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b80      	cmp	r3, #128	@ 0x80
 800c7b8:	d0ef      	beq.n	800c79a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ba:	4b27      	ldr	r3, [pc, #156]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1c3 0307 	rsb	r3, r3, #7
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	d00b      	beq.n	800c7de <xPortStartScheduler+0xbe>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7de:	4b1e      	ldr	r3, [pc, #120]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7f0:	4a19      	ldr	r2, [pc, #100]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7fc:	4b17      	ldr	r3, [pc, #92]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a16      	ldr	r2, [pc, #88]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c808:	4b14      	ldr	r3, [pc, #80]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c814:	f000 f8da 	bl	800c9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c818:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <xPortStartScheduler+0x140>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c81e:	f000 f8f9 	bl	800ca14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c822:	4b10      	ldr	r3, [pc, #64]	@ (800c864 <xPortStartScheduler+0x144>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a0f      	ldr	r2, [pc, #60]	@ (800c864 <xPortStartScheduler+0x144>)
 800c828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c82e:	f7ff ff63 	bl	800c6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c832:	f7ff f817 	bl	800b864 <vTaskSwitchContext>
	prvTaskExitError();
 800c836:	f7ff ff1d 	bl	800c674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed00 	.word	0xe000ed00
 800c848:	410fc271 	.word	0x410fc271
 800c84c:	410fc270 	.word	0x410fc270
 800c850:	e000e400 	.word	0xe000e400
 800c854:	20006240 	.word	0x20006240
 800c858:	20006244 	.word	0x20006244
 800c85c:	e000ed20 	.word	0xe000ed20
 800c860:	200000a0 	.word	0x200000a0
 800c864:	e000ef34 	.word	0xe000ef34

0800c868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c882:	4b10      	ldr	r3, [pc, #64]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3301      	adds	r3, #1
 800c888:	4a0e      	ldr	r2, [pc, #56]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c88c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d110      	bne.n	800c8b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c894:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c8 <vPortEnterCritical+0x60>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	603b      	str	r3, [r7, #0]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <vPortEnterCritical+0x4a>
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	200000a0 	.word	0x200000a0
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8d2:	4b12      	ldr	r3, [pc, #72]	@ (800c91c <vPortExitCritical+0x50>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10b      	bne.n	800c8f2 <vPortExitCritical+0x26>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	607b      	str	r3, [r7, #4]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c91c <vPortExitCritical+0x50>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	4a08      	ldr	r2, [pc, #32]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <vPortExitCritical+0x44>
 800c904:	2300      	movs	r3, #0
 800c906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f383 8811 	msr	BASEPRI, r3
}
 800c90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	200000a0 	.word	0x200000a0

0800c920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c920:	f3ef 8009 	mrs	r0, PSP
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <pxCurrentTCBConst>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f01e 0f10 	tst.w	lr, #16
 800c930:	bf08      	it	eq
 800c932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c944:	f380 8811 	msr	BASEPRI, r0
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f7fe ff88 	bl	800b864 <vTaskSwitchContext>
 800c954:	f04f 0000 	mov.w	r0, #0
 800c958:	f380 8811 	msr	BASEPRI, r0
 800c95c:	bc09      	pop	{r0, r3}
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	6808      	ldr	r0, [r1, #0]
 800c962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c966:	f01e 0f10 	tst.w	lr, #16
 800c96a:	bf08      	it	eq
 800c96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c970:	f380 8809 	msr	PSP, r0
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w

0800c980 <pxCurrentTCBConst>:
 800c980:	20005c14 	.word	0x20005c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9a2:	f7fe fea5 	bl	800b6f0 <xTaskIncrementTick>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	@ (800c9c8 <xPortSysTickHandler+0x40>)
 800c9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
}
 800c9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <vPortSetupTimerInterrupt+0x38>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <vPortSetupTimerInterrupt+0x3c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800ca0c <vPortSetupTimerInterrupt+0x40>)
 800c9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e6:	099b      	lsrs	r3, r3, #6
 800c9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ca10 <vPortSetupTimerInterrupt+0x44>)
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	e000e010 	.word	0xe000e010
 800ca04:	e000e018 	.word	0xe000e018
 800ca08:	20000004 	.word	0x20000004
 800ca0c:	10624dd3 	.word	0x10624dd3
 800ca10:	e000e014 	.word	0xe000e014

0800ca14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca24 <vPortEnableVFP+0x10>
 800ca18:	6801      	ldr	r1, [r0, #0]
 800ca1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca1e:	6001      	str	r1, [r0, #0]
 800ca20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca22:	bf00      	nop
 800ca24:	e000ed88 	.word	0xe000ed88

0800ca28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca2e:	f3ef 8305 	mrs	r3, IPSR
 800ca32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d915      	bls.n	800ca66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca3a:	4a18      	ldr	r2, [pc, #96]	@ (800ca9c <vPortValidateInterruptPriority+0x74>)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca44:	4b16      	ldr	r3, [pc, #88]	@ (800caa0 <vPortValidateInterruptPriority+0x78>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	7afa      	ldrb	r2, [r7, #11]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d20b      	bcs.n	800ca66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
 800ca62:	bf00      	nop
 800ca64:	e7fd      	b.n	800ca62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca66:	4b0f      	ldr	r3, [pc, #60]	@ (800caa4 <vPortValidateInterruptPriority+0x7c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca6e:	4b0e      	ldr	r3, [pc, #56]	@ (800caa8 <vPortValidateInterruptPriority+0x80>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d90b      	bls.n	800ca8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	603b      	str	r3, [r7, #0]
}
 800ca88:	bf00      	nop
 800ca8a:	bf00      	nop
 800ca8c:	e7fd      	b.n	800ca8a <vPortValidateInterruptPriority+0x62>
	}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	e000e3f0 	.word	0xe000e3f0
 800caa0:	20006240 	.word	0x20006240
 800caa4:	e000ed0c 	.word	0xe000ed0c
 800caa8:	20006244 	.word	0x20006244

0800caac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b08a      	sub	sp, #40	@ 0x28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cab4:	2300      	movs	r3, #0
 800cab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cab8:	f7fe fd5e 	bl	800b578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cabc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc30 <pvPortMalloc+0x184>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cac4:	f000 f924 	bl	800cd10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cac8:	4b5a      	ldr	r3, [pc, #360]	@ (800cc34 <pvPortMalloc+0x188>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4013      	ands	r3, r2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f040 8095 	bne.w	800cc00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01e      	beq.n	800cb1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cadc:	2208      	movs	r2, #8
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4413      	add	r3, r2
 800cae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b00      	cmp	r3, #0
 800caec:	d015      	beq.n	800cb1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f023 0307 	bic.w	r3, r3, #7
 800caf4:	3308      	adds	r3, #8
 800caf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f003 0307 	and.w	r3, r3, #7
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <pvPortMalloc+0x6e>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	617b      	str	r3, [r7, #20]
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	e7fd      	b.n	800cb16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d06f      	beq.n	800cc00 <pvPortMalloc+0x154>
 800cb20:	4b45      	ldr	r3, [pc, #276]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d86a      	bhi.n	800cc00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb2a:	4b44      	ldr	r3, [pc, #272]	@ (800cc3c <pvPortMalloc+0x190>)
 800cb2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb2e:	4b43      	ldr	r3, [pc, #268]	@ (800cc3c <pvPortMalloc+0x190>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb34:	e004      	b.n	800cb40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d903      	bls.n	800cb52 <pvPortMalloc+0xa6>
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1f1      	bne.n	800cb36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb52:	4b37      	ldr	r3, [pc, #220]	@ (800cc30 <pvPortMalloc+0x184>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d051      	beq.n	800cc00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2208      	movs	r2, #8
 800cb62:	4413      	add	r3, r2
 800cb64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	1ad2      	subs	r2, r2, r3
 800cb76:	2308      	movs	r3, #8
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d920      	bls.n	800cbc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <pvPortMalloc+0xfc>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	613b      	str	r3, [r7, #16]
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	e7fd      	b.n	800cba4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	1ad2      	subs	r2, r2, r3
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbba:	69b8      	ldr	r0, [r7, #24]
 800cbbc:	f000 f90a 	bl	800cdd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbc0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	4a1b      	ldr	r2, [pc, #108]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbce:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc40 <pvPortMalloc+0x194>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d203      	bcs.n	800cbe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbda:	4b17      	ldr	r3, [pc, #92]	@ (800cc38 <pvPortMalloc+0x18c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a18      	ldr	r2, [pc, #96]	@ (800cc40 <pvPortMalloc+0x194>)
 800cbe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	4b13      	ldr	r3, [pc, #76]	@ (800cc34 <pvPortMalloc+0x188>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	431a      	orrs	r2, r3
 800cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <pvPortMalloc+0x198>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	4a11      	ldr	r2, [pc, #68]	@ (800cc44 <pvPortMalloc+0x198>)
 800cbfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc00:	f7fe fcc8 	bl	800b594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <pvPortMalloc+0x17a>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	60fb      	str	r3, [r7, #12]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <pvPortMalloc+0x176>
	return pvReturn;
 800cc26:	69fb      	ldr	r3, [r7, #28]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3728      	adds	r7, #40	@ 0x28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20006e50 	.word	0x20006e50
 800cc34:	20006e64 	.word	0x20006e64
 800cc38:	20006e54 	.word	0x20006e54
 800cc3c:	20006e48 	.word	0x20006e48
 800cc40:	20006e58 	.word	0x20006e58
 800cc44:	20006e5c 	.word	0x20006e5c

0800cc48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d04f      	beq.n	800ccfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc5a:	2308      	movs	r3, #8
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4413      	add	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	4b25      	ldr	r3, [pc, #148]	@ (800cd04 <vPortFree+0xbc>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4013      	ands	r3, r2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10b      	bne.n	800cc8e <vPortFree+0x46>
	__asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	60fb      	str	r3, [r7, #12]
}
 800cc88:	bf00      	nop
 800cc8a:	bf00      	nop
 800cc8c:	e7fd      	b.n	800cc8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <vPortFree+0x66>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	60bb      	str	r3, [r7, #8]
}
 800cca8:	bf00      	nop
 800ccaa:	bf00      	nop
 800ccac:	e7fd      	b.n	800ccaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	4b14      	ldr	r3, [pc, #80]	@ (800cd04 <vPortFree+0xbc>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01e      	beq.n	800ccfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d11a      	bne.n	800ccfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd04 <vPortFree+0xbc>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	43db      	mvns	r3, r3
 800ccce:	401a      	ands	r2, r3
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccd4:	f7fe fc50 	bl	800b578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	@ (800cd08 <vPortFree+0xc0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4413      	add	r3, r2
 800cce2:	4a09      	ldr	r2, [pc, #36]	@ (800cd08 <vPortFree+0xc0>)
 800cce4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cce6:	6938      	ldr	r0, [r7, #16]
 800cce8:	f000 f874 	bl	800cdd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccec:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <vPortFree+0xc4>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	4a06      	ldr	r2, [pc, #24]	@ (800cd0c <vPortFree+0xc4>)
 800ccf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccf6:	f7fe fc4d 	bl	800b594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccfa:	bf00      	nop
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20006e64 	.word	0x20006e64
 800cd08:	20006e54 	.word	0x20006e54
 800cd0c:	20006e60 	.word	0x20006e60

0800cd10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cd1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd1c:	4b27      	ldr	r3, [pc, #156]	@ (800cdbc <prvHeapInit+0xac>)
 800cd1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00c      	beq.n	800cd44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3307      	adds	r3, #7
 800cd2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f023 0307 	bic.w	r3, r3, #7
 800cd36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdbc <prvHeapInit+0xac>)
 800cd40:	4413      	add	r3, r2
 800cd42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd48:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc0 <prvHeapInit+0xb0>)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc0 <prvHeapInit+0xb0>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	1a9b      	subs	r3, r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f023 0307 	bic.w	r3, r3, #7
 800cd6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a15      	ldr	r2, [pc, #84]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd72:	4b14      	ldr	r3, [pc, #80]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2200      	movs	r2, #0
 800cd78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd7a:	4b12      	ldr	r3, [pc, #72]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	1ad2      	subs	r2, r2, r3
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd90:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc4 <prvHeapInit+0xb4>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cdc8 <prvHeapInit+0xb8>)
 800cd9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	4a09      	ldr	r2, [pc, #36]	@ (800cdcc <prvHeapInit+0xbc>)
 800cda6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cda8:	4b09      	ldr	r3, [pc, #36]	@ (800cdd0 <prvHeapInit+0xc0>)
 800cdaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdae:	601a      	str	r2, [r3, #0]
}
 800cdb0:	bf00      	nop
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	20006248 	.word	0x20006248
 800cdc0:	20006e48 	.word	0x20006e48
 800cdc4:	20006e50 	.word	0x20006e50
 800cdc8:	20006e58 	.word	0x20006e58
 800cdcc:	20006e54 	.word	0x20006e54
 800cdd0:	20006e64 	.word	0x20006e64

0800cdd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cddc:	4b28      	ldr	r3, [pc, #160]	@ (800ce80 <prvInsertBlockIntoFreeList+0xac>)
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	e002      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x14>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d8f7      	bhi.n	800cde2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d108      	bne.n	800ce16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	685a      	ldr	r2, [r3, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	441a      	add	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d118      	bne.n	800ce5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b15      	ldr	r3, [pc, #84]	@ (800ce84 <prvInsertBlockIntoFreeList+0xb0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d00d      	beq.n	800ce52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	441a      	add	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	e008      	b.n	800ce64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce52:	4b0c      	ldr	r3, [pc, #48]	@ (800ce84 <prvInsertBlockIntoFreeList+0xb0>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	e003      	b.n	800ce64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d002      	beq.n	800ce72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	20006e48 	.word	0x20006e48
 800ce84:	20006e50 	.word	0x20006e50

0800ce88 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ce88:	4b04      	ldr	r3, [pc, #16]	@ (800ce9c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	b10a      	cbz	r2, 800ce92 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ce8e:	4803      	ldr	r0, [pc, #12]	@ (800ce9c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ce90:	4770      	bx	lr
 800ce92:	4a03      	ldr	r2, [pc, #12]	@ (800cea0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ce94:	4801      	ldr	r0, [pc, #4]	@ (800ce9c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ce96:	6812      	ldr	r2, [r2, #0]
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	4770      	bx	lr
 800ce9c:	200000ac 	.word	0x200000ac
 800cea0:	200003b4 	.word	0x200003b4

0800cea4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cea4:	4a02      	ldr	r2, [pc, #8]	@ (800ceb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800cea6:	4b03      	ldr	r3, [pc, #12]	@ (800ceb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800cea8:	6812      	ldr	r2, [r2, #0]
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	200003b4 	.word	0x200003b4
 800ceb4:	200000ac 	.word	0x200000ac

0800ceb8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ceb8:	f004 bf8c 	b.w	8011dd4 <geometry_msgs__msg__Twist__init>

0800cebc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800cebc:	f004 bfae 	b.w	8011e1c <geometry_msgs__msg__Twist__fini>

0800cec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cec0:	b510      	push	{r4, lr}
 800cec2:	f000 f819 	bl	800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cec6:	4c07      	ldr	r4, [pc, #28]	@ (800cee4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800cec8:	60e0      	str	r0, [r4, #12]
 800ceca:	f000 f815 	bl	800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cece:	4b06      	ldr	r3, [pc, #24]	@ (800cee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ced0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	b10a      	cbz	r2, 800ceda <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ced6:	4804      	ldr	r0, [pc, #16]	@ (800cee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ced8:	bd10      	pop	{r4, pc}
 800ceda:	4a04      	ldr	r2, [pc, #16]	@ (800ceec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800cedc:	4802      	ldr	r0, [pc, #8]	@ (800cee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cede:	6812      	ldr	r2, [r2, #0]
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	bd10      	pop	{r4, pc}
 800cee4:	200000b8 	.word	0x200000b8
 800cee8:	20000130 	.word	0x20000130
 800ceec:	200003b8 	.word	0x200003b8

0800cef0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800cef0:	f004 bfa0 	b.w	8011e34 <geometry_msgs__msg__Vector3__init>

0800cef4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800cef4:	f004 bfa2 	b.w	8011e3c <geometry_msgs__msg__Vector3__fini>

0800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cef8:	4b04      	ldr	r3, [pc, #16]	@ (800cf0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	b10a      	cbz	r2, 800cf02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800cefe:	4803      	ldr	r0, [pc, #12]	@ (800cf0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cf00:	4770      	bx	lr
 800cf02:	4a03      	ldr	r2, [pc, #12]	@ (800cf10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800cf04:	4801      	ldr	r0, [pc, #4]	@ (800cf0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cf06:	6812      	ldr	r2, [r2, #0]
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	4770      	bx	lr
 800cf0c:	200001f0 	.word	0x200001f0
 800cf10:	200003b8 	.word	0x200003b8

0800cf14 <get_serialized_size_geometry_msgs__msg__Twist>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	4604      	mov	r4, r0
 800cf18:	b148      	cbz	r0, 800cf2e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	f000 f860 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cf20:	4606      	mov	r6, r0
 800cf22:	1829      	adds	r1, r5, r0
 800cf24:	f104 0018 	add.w	r0, r4, #24
 800cf28:	f000 f85a 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cf2c:	4430      	add	r0, r6
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}

0800cf30 <_Twist__cdr_deserialize>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	b189      	cbz	r1, 800cf5a <_Twist__cdr_deserialize+0x2a>
 800cf36:	4605      	mov	r5, r0
 800cf38:	f000 f8de 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cf3c:	6843      	ldr	r3, [r0, #4]
 800cf3e:	4621      	mov	r1, r4
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	4628      	mov	r0, r5
 800cf44:	4798      	blx	r3
 800cf46:	f000 f8d7 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cf4a:	6843      	ldr	r3, [r0, #4]
 800cf4c:	f104 0118 	add.w	r1, r4, #24
 800cf50:	4628      	mov	r0, r5
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf58:	4718      	bx	r3
 800cf5a:	4608      	mov	r0, r1
 800cf5c:	bd70      	pop	{r4, r5, r6, pc}
 800cf5e:	bf00      	nop

0800cf60 <_Twist__cdr_serialize>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	9101      	str	r1, [sp, #4]
 800cf66:	b190      	cbz	r0, 800cf8e <_Twist__cdr_serialize+0x2e>
 800cf68:	4604      	mov	r4, r0
 800cf6a:	f000 f8c5 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cf6e:	6843      	ldr	r3, [r0, #4]
 800cf70:	9901      	ldr	r1, [sp, #4]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	4620      	mov	r0, r4
 800cf76:	4798      	blx	r3
 800cf78:	f000 f8be 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cf7c:	6843      	ldr	r3, [r0, #4]
 800cf7e:	9901      	ldr	r1, [sp, #4]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f104 0018 	add.w	r0, r4, #24
 800cf86:	b002      	add	sp, #8
 800cf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf8c:	4718      	bx	r3
 800cf8e:	b002      	add	sp, #8
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	bf00      	nop

0800cf94 <_Twist__get_serialized_size>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4604      	mov	r4, r0
 800cf98:	b148      	cbz	r0, 800cfae <_Twist__get_serialized_size+0x1a>
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	f000 f820 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	f104 0018 	add.w	r0, r4, #24
 800cfa8:	f000 f81a 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cfac:	4428      	add	r0, r5
 800cfae:	bd38      	pop	{r3, r4, r5, pc}

0800cfb0 <_Twist__max_serialized_size>:
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f10d 0007 	add.w	r0, sp, #7
 800cfbc:	f88d 3007 	strb.w	r3, [sp, #7]
 800cfc0:	f000 f87e 	bl	800d0c0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	f10d 0007 	add.w	r0, sp, #7
 800cfcc:	f000 f878 	bl	800d0c0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cfd0:	4420      	add	r0, r4
 800cfd2:	b002      	add	sp, #8
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop

0800cfd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cfd8:	4800      	ldr	r0, [pc, #0]	@ (800cfdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800cfda:	4770      	bx	lr
 800cfdc:	200001fc 	.word	0x200001fc

0800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800cfe0:	b1b8      	cbz	r0, 800d012 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800cfe2:	b538      	push	{r3, r4, r5, lr}
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	2108      	movs	r1, #8
 800cfea:	f001 fcb1 	bl	800e950 <ucdr_alignment>
 800cfee:	f105 0308 	add.w	r3, r5, #8
 800cff2:	181c      	adds	r4, r3, r0
 800cff4:	2108      	movs	r1, #8
 800cff6:	4620      	mov	r0, r4
 800cff8:	f001 fcaa 	bl	800e950 <ucdr_alignment>
 800cffc:	3008      	adds	r0, #8
 800cffe:	4404      	add	r4, r0
 800d000:	2108      	movs	r1, #8
 800d002:	4620      	mov	r0, r4
 800d004:	f001 fca4 	bl	800e950 <ucdr_alignment>
 800d008:	f1c5 0508 	rsb	r5, r5, #8
 800d00c:	4428      	add	r0, r5
 800d00e:	4420      	add	r0, r4
 800d010:	bd38      	pop	{r3, r4, r5, pc}
 800d012:	4770      	bx	lr

0800d014 <_Vector3__cdr_deserialize>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	460c      	mov	r4, r1
 800d018:	b171      	cbz	r1, 800d038 <_Vector3__cdr_deserialize+0x24>
 800d01a:	4605      	mov	r5, r0
 800d01c:	f001 faac 	bl	800e578 <ucdr_deserialize_double>
 800d020:	f104 0108 	add.w	r1, r4, #8
 800d024:	4628      	mov	r0, r5
 800d026:	f001 faa7 	bl	800e578 <ucdr_deserialize_double>
 800d02a:	f104 0110 	add.w	r1, r4, #16
 800d02e:	4628      	mov	r0, r5
 800d030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d034:	f001 baa0 	b.w	800e578 <ucdr_deserialize_double>
 800d038:	4608      	mov	r0, r1
 800d03a:	bd38      	pop	{r3, r4, r5, pc}

0800d03c <_Vector3__cdr_serialize>:
 800d03c:	b198      	cbz	r0, 800d066 <_Vector3__cdr_serialize+0x2a>
 800d03e:	b538      	push	{r3, r4, r5, lr}
 800d040:	ed90 0b00 	vldr	d0, [r0]
 800d044:	460d      	mov	r5, r1
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	f001 f8f3 	bl	800e234 <ucdr_serialize_double>
 800d04e:	ed94 0b02 	vldr	d0, [r4, #8]
 800d052:	4628      	mov	r0, r5
 800d054:	f001 f8ee 	bl	800e234 <ucdr_serialize_double>
 800d058:	ed94 0b04 	vldr	d0, [r4, #16]
 800d05c:	4628      	mov	r0, r5
 800d05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d062:	f001 b8e7 	b.w	800e234 <ucdr_serialize_double>
 800d066:	4770      	bx	lr

0800d068 <_Vector3__get_serialized_size>:
 800d068:	b198      	cbz	r0, 800d092 <_Vector3__get_serialized_size+0x2a>
 800d06a:	b510      	push	{r4, lr}
 800d06c:	2108      	movs	r1, #8
 800d06e:	2000      	movs	r0, #0
 800d070:	f001 fc6e 	bl	800e950 <ucdr_alignment>
 800d074:	f100 0408 	add.w	r4, r0, #8
 800d078:	2108      	movs	r1, #8
 800d07a:	4620      	mov	r0, r4
 800d07c:	f001 fc68 	bl	800e950 <ucdr_alignment>
 800d080:	3008      	adds	r0, #8
 800d082:	4404      	add	r4, r0
 800d084:	2108      	movs	r1, #8
 800d086:	4620      	mov	r0, r4
 800d088:	f001 fc62 	bl	800e950 <ucdr_alignment>
 800d08c:	3008      	adds	r0, #8
 800d08e:	4420      	add	r0, r4
 800d090:	bd10      	pop	{r4, pc}
 800d092:	4770      	bx	lr

0800d094 <_Vector3__max_serialized_size>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	2108      	movs	r1, #8
 800d098:	2000      	movs	r0, #0
 800d09a:	f001 fc59 	bl	800e950 <ucdr_alignment>
 800d09e:	f100 0508 	add.w	r5, r0, #8
 800d0a2:	2108      	movs	r1, #8
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f001 fc53 	bl	800e950 <ucdr_alignment>
 800d0aa:	f100 0408 	add.w	r4, r0, #8
 800d0ae:	442c      	add	r4, r5
 800d0b0:	2108      	movs	r1, #8
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f001 fc4c 	bl	800e950 <ucdr_alignment>
 800d0b8:	3008      	adds	r0, #8
 800d0ba:	4420      	add	r0, r4
 800d0bc:	bd38      	pop	{r3, r4, r5, pc}
 800d0be:	bf00      	nop

0800d0c0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	7003      	strb	r3, [r0, #0]
 800d0c8:	2108      	movs	r1, #8
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f001 fc40 	bl	800e950 <ucdr_alignment>
 800d0d0:	f104 0508 	add.w	r5, r4, #8
 800d0d4:	1946      	adds	r6, r0, r5
 800d0d6:	2108      	movs	r1, #8
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f001 fc39 	bl	800e950 <ucdr_alignment>
 800d0de:	f100 0508 	add.w	r5, r0, #8
 800d0e2:	4435      	add	r5, r6
 800d0e4:	2108      	movs	r1, #8
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f001 fc32 	bl	800e950 <ucdr_alignment>
 800d0ec:	f1c4 0408 	rsb	r4, r4, #8
 800d0f0:	4420      	add	r0, r4
 800d0f2:	4428      	add	r0, r5
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	bf00      	nop

0800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d0f8:	4800      	ldr	r0, [pc, #0]	@ (800d0fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d0fa:	4770      	bx	lr
 800d0fc:	20000224 	.word	0x20000224

0800d100 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800d100:	4b04      	ldr	r3, [pc, #16]	@ (800d114 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	b10a      	cbz	r2, 800d10a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800d106:	4803      	ldr	r0, [pc, #12]	@ (800d114 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800d108:	4770      	bx	lr
 800d10a:	4a03      	ldr	r2, [pc, #12]	@ (800d118 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800d10c:	4801      	ldr	r0, [pc, #4]	@ (800d114 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	4770      	bx	lr
 800d114:	20000254 	.word	0x20000254
 800d118:	200003b4 	.word	0x200003b4

0800d11c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800d11c:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800d11e:	4805      	ldr	r0, [pc, #20]	@ (800d134 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800d120:	4905      	ldr	r1, [pc, #20]	@ (800d138 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800d122:	4a06      	ldr	r2, [pc, #24]	@ (800d13c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6003      	str	r3, [r0, #0]
 800d128:	600b      	str	r3, [r1, #0]
 800d12a:	6013      	str	r3, [r2, #0]
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	200003b4 	.word	0x200003b4
 800d134:	20000270 	.word	0x20000270
 800d138:	2000027c 	.word	0x2000027c
 800d13c:	20000254 	.word	0x20000254

0800d140 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800d140:	f004 bf48 	b.w	8011fd4 <imu_interfaces__srv__ImuCalibration_Request__init>

0800d144 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800d144:	f004 bf58 	b.w	8011ff8 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800d148 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800d148:	f004 bf5a 	b.w	8012000 <imu_interfaces__srv__ImuCalibration_Response__init>

0800d14c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800d14c:	f004 bf5c 	b.w	8012008 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800d150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800d150:	b508      	push	{r3, lr}
 800d152:	f004 fae1 	bl	8011718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800d156:	4b06      	ldr	r3, [pc, #24]	@ (800d170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800d158:	4906      	ldr	r1, [pc, #24]	@ (800d174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	60c8      	str	r0, [r1, #12]
 800d15e:	b10a      	cbz	r2, 800d164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800d160:	4803      	ldr	r0, [pc, #12]	@ (800d170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800d162:	bd08      	pop	{r3, pc}
 800d164:	4a04      	ldr	r2, [pc, #16]	@ (800d178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800d166:	4802      	ldr	r0, [pc, #8]	@ (800d170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800d168:	6812      	ldr	r2, [r2, #0]
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	bd08      	pop	{r3, pc}
 800d16e:	bf00      	nop
 800d170:	200002c4 	.word	0x200002c4
 800d174:	20000288 	.word	0x20000288
 800d178:	200003b8 	.word	0x200003b8

0800d17c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800d17c:	4b04      	ldr	r3, [pc, #16]	@ (800d190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	b10a      	cbz	r2, 800d186 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800d182:	4803      	ldr	r0, [pc, #12]	@ (800d190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800d184:	4770      	bx	lr
 800d186:	4a03      	ldr	r2, [pc, #12]	@ (800d194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800d188:	4801      	ldr	r0, [pc, #4]	@ (800d190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800d18a:	6812      	ldr	r2, [r2, #0]
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	4770      	bx	lr
 800d190:	2000030c 	.word	0x2000030c
 800d194:	200003b8 	.word	0x200003b8

0800d198 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800d198:	4b16      	ldr	r3, [pc, #88]	@ (800d1f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	b510      	push	{r4, lr}
 800d19e:	b132      	cbz	r2, 800d1ae <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800d1a0:	685c      	ldr	r4, [r3, #4]
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	b153      	cbz	r3, 800d1bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800d1a6:	68e3      	ldr	r3, [r4, #12]
 800d1a8:	b1a3      	cbz	r3, 800d1d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800d1aa:	4812      	ldr	r0, [pc, #72]	@ (800d1f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	4a12      	ldr	r2, [pc, #72]	@ (800d1f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800d1b0:	685c      	ldr	r4, [r3, #4]
 800d1b2:	6812      	ldr	r2, [r2, #0]
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	68a3      	ldr	r3, [r4, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1f4      	bne.n	800d1a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800d1bc:	f004 faac 	bl	8011718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800d1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d1fc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800d1c2:	490f      	ldr	r1, [pc, #60]	@ (800d200 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	60c8      	str	r0, [r1, #12]
 800d1c8:	b17a      	cbz	r2, 800d1ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	60a3      	str	r3, [r4, #8]
 800d1ce:	68e3      	ldr	r3, [r4, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1ea      	bne.n	800d1aa <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800d1d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d204 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	b11a      	cbz	r2, 800d1e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	4805      	ldr	r0, [pc, #20]	@ (800d1f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800d1de:	60e3      	str	r3, [r4, #12]
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	4a05      	ldr	r2, [pc, #20]	@ (800d1f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	e7f7      	b.n	800d1da <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800d1ea:	4a03      	ldr	r2, [pc, #12]	@ (800d1f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	e7eb      	b.n	800d1ca <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800d1f2:	bf00      	nop
 800d1f4:	20000328 	.word	0x20000328
 800d1f8:	200003b8 	.word	0x200003b8
 800d1fc:	200002c4 	.word	0x200002c4
 800d200:	20000288 	.word	0x20000288
 800d204:	2000030c 	.word	0x2000030c

0800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800d208:	4800      	ldr	r0, [pc, #0]	@ (800d20c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800d20a:	4770      	bx	lr
 800d20c:	20000350 	.word	0x20000350

0800d210 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800d210:	4800      	ldr	r0, [pc, #0]	@ (800d214 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800d212:	4770      	bx	lr
 800d214:	2000035c 	.word	0x2000035c

0800d218 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800d218:	b108      	cbz	r0, 800d21e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800d21a:	f004 bacf 	b.w	80117bc <get_serialized_size_sensor_msgs__msg__Imu>
 800d21e:	4770      	bx	lr

0800d220 <_ImuCalibration_Request__max_serialized_size>:
 800d220:	b500      	push	{lr}
 800d222:	b083      	sub	sp, #12
 800d224:	2301      	movs	r3, #1
 800d226:	2100      	movs	r1, #0
 800d228:	f10d 0007 	add.w	r0, sp, #7
 800d22c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d230:	f004 fb42 	bl	80118b8 <max_serialized_size_sensor_msgs__msg__Imu>
 800d234:	b003      	add	sp, #12
 800d236:	f85d fb04 	ldr.w	pc, [sp], #4
 800d23a:	bf00      	nop

0800d23c <_ImuCalibration_Response__max_serialized_size>:
 800d23c:	b508      	push	{r3, lr}
 800d23e:	2101      	movs	r1, #1
 800d240:	2000      	movs	r0, #0
 800d242:	f001 fb85 	bl	800e950 <ucdr_alignment>
 800d246:	3001      	adds	r0, #1
 800d248:	bd08      	pop	{r3, pc}
 800d24a:	bf00      	nop

0800d24c <_ImuCalibration_Response__cdr_deserialize>:
 800d24c:	b109      	cbz	r1, 800d252 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800d24e:	f000 b881 	b.w	800d354 <ucdr_deserialize_bool>
 800d252:	4608      	mov	r0, r1
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop

0800d258 <_ImuCalibration_Request__get_serialized_size>:
 800d258:	b110      	cbz	r0, 800d260 <_ImuCalibration_Request__get_serialized_size+0x8>
 800d25a:	2100      	movs	r1, #0
 800d25c:	f004 baae 	b.w	80117bc <get_serialized_size_sensor_msgs__msg__Imu>
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop

0800d264 <_ImuCalibration_Request__cdr_deserialize>:
 800d264:	b570      	push	{r4, r5, r6, lr}
 800d266:	460c      	mov	r4, r1
 800d268:	b149      	cbz	r1, 800d27e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800d26a:	4605      	mov	r5, r0
 800d26c:	f004 fb5e 	bl	801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800d270:	6843      	ldr	r3, [r0, #4]
 800d272:	4621      	mov	r1, r4
 800d274:	4628      	mov	r0, r5
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d27c:	4718      	bx	r3
 800d27e:	4608      	mov	r0, r1
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	bf00      	nop

0800d284 <_ImuCalibration_Request__cdr_serialize>:
 800d284:	b158      	cbz	r0, 800d29e <_ImuCalibration_Request__cdr_serialize+0x1a>
 800d286:	b570      	push	{r4, r5, r6, lr}
 800d288:	460d      	mov	r5, r1
 800d28a:	4604      	mov	r4, r0
 800d28c:	f004 fb4e 	bl	801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800d290:	6843      	ldr	r3, [r0, #4]
 800d292:	4629      	mov	r1, r5
 800d294:	4620      	mov	r0, r4
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d29c:	4718      	bx	r3
 800d29e:	4770      	bx	lr

0800d2a0 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800d2a0:	b138      	cbz	r0, 800d2b2 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800d2a2:	b508      	push	{r3, lr}
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	2101      	movs	r1, #1
 800d2aa:	f001 fb51 	bl	800e950 <ucdr_alignment>
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	bd08      	pop	{r3, pc}
 800d2b2:	4770      	bx	lr

0800d2b4 <_ImuCalibration_Response__cdr_serialize>:
 800d2b4:	460a      	mov	r2, r1
 800d2b6:	b118      	cbz	r0, 800d2c0 <_ImuCalibration_Response__cdr_serialize+0xc>
 800d2b8:	7801      	ldrb	r1, [r0, #0]
 800d2ba:	4610      	mov	r0, r2
 800d2bc:	f000 b834 	b.w	800d328 <ucdr_serialize_bool>
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop

0800d2c4 <_ImuCalibration_Response__get_serialized_size>:
 800d2c4:	b130      	cbz	r0, 800d2d4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800d2c6:	b508      	push	{r3, lr}
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f001 fb40 	bl	800e950 <ucdr_alignment>
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	bd08      	pop	{r3, pc}
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop

0800d2d8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800d2d8:	4800      	ldr	r0, [pc, #0]	@ (800d2dc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800d2da:	4770      	bx	lr
 800d2dc:	20000344 	.word	0x20000344

0800d2e0 <micro_ros_string_utilities_init>:
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	b086      	sub	sp, #24
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	a801      	add	r0, sp, #4
 800d2ec:	f002 fd74 	bl	800fdd8 <rcutils_get_default_allocator>
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	f7f2 ff9f 	bl	8000234 <strlen>
 800d2f6:	f100 0801 	add.w	r8, r0, #1
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	9905      	ldr	r1, [sp, #20]
 800d2fe:	4605      	mov	r5, r0
 800d300:	4640      	mov	r0, r8
 800d302:	4798      	blx	r3
 800d304:	4642      	mov	r2, r8
 800d306:	4606      	mov	r6, r0
 800d308:	2100      	movs	r1, #0
 800d30a:	f00e fcf3 	bl	801bcf4 <memset>
 800d30e:	462a      	mov	r2, r5
 800d310:	4639      	mov	r1, r7
 800d312:	4630      	mov	r0, r6
 800d314:	f00e fdb7 	bl	801be86 <memcpy>
 800d318:	4620      	mov	r0, r4
 800d31a:	e9c4 6500 	strd	r6, r5, [r4]
 800d31e:	f8c4 8008 	str.w	r8, [r4, #8]
 800d322:	b006      	add	sp, #24
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d328 <ucdr_serialize_bool>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	460d      	mov	r5, r1
 800d32c:	2101      	movs	r1, #1
 800d32e:	4604      	mov	r4, r0
 800d330:	f001 fac2 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d334:	b148      	cbz	r0, 800d34a <ucdr_serialize_bool+0x22>
 800d336:	68a3      	ldr	r3, [r4, #8]
 800d338:	701d      	strb	r5, [r3, #0]
 800d33a:	68a2      	ldr	r2, [r4, #8]
 800d33c:	6923      	ldr	r3, [r4, #16]
 800d33e:	2101      	movs	r1, #1
 800d340:	440a      	add	r2, r1
 800d342:	440b      	add	r3, r1
 800d344:	60a2      	str	r2, [r4, #8]
 800d346:	6123      	str	r3, [r4, #16]
 800d348:	7561      	strb	r1, [r4, #21]
 800d34a:	7da0      	ldrb	r0, [r4, #22]
 800d34c:	f080 0001 	eor.w	r0, r0, #1
 800d350:	bd38      	pop	{r3, r4, r5, pc}
 800d352:	bf00      	nop

0800d354 <ucdr_deserialize_bool>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	460d      	mov	r5, r1
 800d358:	2101      	movs	r1, #1
 800d35a:	4604      	mov	r4, r0
 800d35c:	f001 faac 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d360:	b160      	cbz	r0, 800d37c <ucdr_deserialize_bool+0x28>
 800d362:	68a2      	ldr	r2, [r4, #8]
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d36a:	3900      	subs	r1, #0
 800d36c:	bf18      	it	ne
 800d36e:	2101      	movne	r1, #1
 800d370:	7029      	strb	r1, [r5, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	2101      	movs	r1, #1
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	6123      	str	r3, [r4, #16]
 800d37a:	7561      	strb	r1, [r4, #21]
 800d37c:	7da0      	ldrb	r0, [r4, #22]
 800d37e:	f080 0001 	eor.w	r0, r0, #1
 800d382:	bd38      	pop	{r3, r4, r5, pc}

0800d384 <ucdr_serialize_uint8_t>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	460d      	mov	r5, r1
 800d388:	2101      	movs	r1, #1
 800d38a:	4604      	mov	r4, r0
 800d38c:	f001 fa94 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d390:	b148      	cbz	r0, 800d3a6 <ucdr_serialize_uint8_t+0x22>
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	701d      	strb	r5, [r3, #0]
 800d396:	68a2      	ldr	r2, [r4, #8]
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	2101      	movs	r1, #1
 800d39c:	440a      	add	r2, r1
 800d39e:	440b      	add	r3, r1
 800d3a0:	60a2      	str	r2, [r4, #8]
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	7561      	strb	r1, [r4, #21]
 800d3a6:	7da0      	ldrb	r0, [r4, #22]
 800d3a8:	f080 0001 	eor.w	r0, r0, #1
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	bf00      	nop

0800d3b0 <ucdr_deserialize_uint8_t>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	460d      	mov	r5, r1
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	f001 fa7e 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d3bc:	b150      	cbz	r0, 800d3d4 <ucdr_deserialize_uint8_t+0x24>
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	702b      	strb	r3, [r5, #0]
 800d3c4:	68a2      	ldr	r2, [r4, #8]
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	440a      	add	r2, r1
 800d3cc:	440b      	add	r3, r1
 800d3ce:	60a2      	str	r2, [r4, #8]
 800d3d0:	6123      	str	r3, [r4, #16]
 800d3d2:	7561      	strb	r1, [r4, #21]
 800d3d4:	7da0      	ldrb	r0, [r4, #22]
 800d3d6:	f080 0001 	eor.w	r0, r0, #1
 800d3da:	bd38      	pop	{r3, r4, r5, pc}

0800d3dc <ucdr_serialize_uint16_t>:
 800d3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e0:	b082      	sub	sp, #8
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	2102      	movs	r1, #2
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3ec:	f001 fab8 	bl	800e960 <ucdr_buffer_alignment>
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	7d67      	ldrb	r7, [r4, #21]
 800d3f6:	f001 faf7 	bl	800e9e8 <ucdr_advance_buffer>
 800d3fa:	2102      	movs	r1, #2
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f001 fa4f 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d402:	bb78      	cbnz	r0, 800d464 <ucdr_serialize_uint16_t+0x88>
 800d404:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d408:	42ab      	cmp	r3, r5
 800d40a:	d926      	bls.n	800d45a <ucdr_serialize_uint16_t+0x7e>
 800d40c:	1b5e      	subs	r6, r3, r5
 800d40e:	60a3      	str	r3, [r4, #8]
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	f1c6 0802 	rsb	r8, r6, #2
 800d416:	4433      	add	r3, r6
 800d418:	6123      	str	r3, [r4, #16]
 800d41a:	4641      	mov	r1, r8
 800d41c:	4620      	mov	r0, r4
 800d41e:	f001 fa4b 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d422:	2800      	cmp	r0, #0
 800d424:	d03b      	beq.n	800d49e <ucdr_serialize_uint16_t+0xc2>
 800d426:	7d23      	ldrb	r3, [r4, #20]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d04a      	beq.n	800d4c2 <ucdr_serialize_uint16_t+0xe6>
 800d42c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d430:	702b      	strb	r3, [r5, #0]
 800d432:	2e00      	cmp	r6, #0
 800d434:	d040      	beq.n	800d4b8 <ucdr_serialize_uint16_t+0xdc>
 800d436:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d43a:	706b      	strb	r3, [r5, #1]
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	68a2      	ldr	r2, [r4, #8]
 800d440:	7da0      	ldrb	r0, [r4, #22]
 800d442:	3302      	adds	r3, #2
 800d444:	1b9e      	subs	r6, r3, r6
 800d446:	4442      	add	r2, r8
 800d448:	2302      	movs	r3, #2
 800d44a:	f080 0001 	eor.w	r0, r0, #1
 800d44e:	60a2      	str	r2, [r4, #8]
 800d450:	6126      	str	r6, [r4, #16]
 800d452:	7563      	strb	r3, [r4, #21]
 800d454:	b002      	add	sp, #8
 800d456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45a:	2102      	movs	r1, #2
 800d45c:	4620      	mov	r0, r4
 800d45e:	f001 fa2b 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d462:	b190      	cbz	r0, 800d48a <ucdr_serialize_uint16_t+0xae>
 800d464:	7d23      	ldrb	r3, [r4, #20]
 800d466:	2b01      	cmp	r3, #1
 800d468:	68a3      	ldr	r3, [r4, #8]
 800d46a:	d014      	beq.n	800d496 <ucdr_serialize_uint16_t+0xba>
 800d46c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d478:	705a      	strb	r2, [r3, #1]
 800d47a:	68a2      	ldr	r2, [r4, #8]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	3202      	adds	r2, #2
 800d480:	3302      	adds	r3, #2
 800d482:	2102      	movs	r1, #2
 800d484:	60a2      	str	r2, [r4, #8]
 800d486:	6123      	str	r3, [r4, #16]
 800d488:	7561      	strb	r1, [r4, #21]
 800d48a:	7da0      	ldrb	r0, [r4, #22]
 800d48c:	f080 0001 	eor.w	r0, r0, #1
 800d490:	b002      	add	sp, #8
 800d492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d496:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d49a:	801a      	strh	r2, [r3, #0]
 800d49c:	e7ed      	b.n	800d47a <ucdr_serialize_uint16_t+0x9e>
 800d49e:	68a2      	ldr	r2, [r4, #8]
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	7da0      	ldrb	r0, [r4, #22]
 800d4a4:	7567      	strb	r7, [r4, #21]
 800d4a6:	1b92      	subs	r2, r2, r6
 800d4a8:	1b9b      	subs	r3, r3, r6
 800d4aa:	f080 0001 	eor.w	r0, r0, #1
 800d4ae:	60a2      	str	r2, [r4, #8]
 800d4b0:	6123      	str	r3, [r4, #16]
 800d4b2:	b002      	add	sp, #8
 800d4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b8:	68a3      	ldr	r3, [r4, #8]
 800d4ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	e7bc      	b.n	800d43c <ucdr_serialize_uint16_t+0x60>
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f10d 0506 	add.w	r5, sp, #6
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	f00e fcdb 	bl	801be86 <memcpy>
 800d4d0:	68a0      	ldr	r0, [r4, #8]
 800d4d2:	4642      	mov	r2, r8
 800d4d4:	19a9      	adds	r1, r5, r6
 800d4d6:	f00e fcd6 	bl	801be86 <memcpy>
 800d4da:	e7af      	b.n	800d43c <ucdr_serialize_uint16_t+0x60>

0800d4dc <ucdr_serialize_endian_uint16_t>:
 800d4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4e0:	b083      	sub	sp, #12
 800d4e2:	460d      	mov	r5, r1
 800d4e4:	2102      	movs	r1, #2
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d4ec:	f001 fa38 	bl	800e960 <ucdr_buffer_alignment>
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4f8:	f001 fa76 	bl	800e9e8 <ucdr_advance_buffer>
 800d4fc:	2102      	movs	r1, #2
 800d4fe:	4620      	mov	r0, r4
 800d500:	f001 f9ce 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d504:	bb70      	cbnz	r0, 800d564 <ucdr_serialize_endian_uint16_t+0x88>
 800d506:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d50a:	42be      	cmp	r6, r7
 800d50c:	d925      	bls.n	800d55a <ucdr_serialize_endian_uint16_t+0x7e>
 800d50e:	6923      	ldr	r3, [r4, #16]
 800d510:	60a6      	str	r6, [r4, #8]
 800d512:	1bf6      	subs	r6, r6, r7
 800d514:	4433      	add	r3, r6
 800d516:	f1c6 0902 	rsb	r9, r6, #2
 800d51a:	6123      	str	r3, [r4, #16]
 800d51c:	4649      	mov	r1, r9
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 f9ca 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d524:	2800      	cmp	r0, #0
 800d526:	d039      	beq.n	800d59c <ucdr_serialize_endian_uint16_t+0xc0>
 800d528:	2d01      	cmp	r5, #1
 800d52a:	d04a      	beq.n	800d5c2 <ucdr_serialize_endian_uint16_t+0xe6>
 800d52c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d530:	703b      	strb	r3, [r7, #0]
 800d532:	2e00      	cmp	r6, #0
 800d534:	d040      	beq.n	800d5b8 <ucdr_serialize_endian_uint16_t+0xdc>
 800d536:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d53a:	707b      	strb	r3, [r7, #1]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	68a2      	ldr	r2, [r4, #8]
 800d540:	7da0      	ldrb	r0, [r4, #22]
 800d542:	3302      	adds	r3, #2
 800d544:	444a      	add	r2, r9
 800d546:	1b9b      	subs	r3, r3, r6
 800d548:	2102      	movs	r1, #2
 800d54a:	f080 0001 	eor.w	r0, r0, #1
 800d54e:	60a2      	str	r2, [r4, #8]
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	7561      	strb	r1, [r4, #21]
 800d554:	b003      	add	sp, #12
 800d556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55a:	2102      	movs	r1, #2
 800d55c:	4620      	mov	r0, r4
 800d55e:	f001 f9ab 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d562:	b188      	cbz	r0, 800d588 <ucdr_serialize_endian_uint16_t+0xac>
 800d564:	2d01      	cmp	r5, #1
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	d014      	beq.n	800d594 <ucdr_serialize_endian_uint16_t+0xb8>
 800d56a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d576:	705a      	strb	r2, [r3, #1]
 800d578:	68a2      	ldr	r2, [r4, #8]
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	3202      	adds	r2, #2
 800d57e:	3302      	adds	r3, #2
 800d580:	2102      	movs	r1, #2
 800d582:	60a2      	str	r2, [r4, #8]
 800d584:	6123      	str	r3, [r4, #16]
 800d586:	7561      	strb	r1, [r4, #21]
 800d588:	7da0      	ldrb	r0, [r4, #22]
 800d58a:	f080 0001 	eor.w	r0, r0, #1
 800d58e:	b003      	add	sp, #12
 800d590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d598:	801a      	strh	r2, [r3, #0]
 800d59a:	e7ed      	b.n	800d578 <ucdr_serialize_endian_uint16_t+0x9c>
 800d59c:	68a2      	ldr	r2, [r4, #8]
 800d59e:	6923      	ldr	r3, [r4, #16]
 800d5a0:	7da0      	ldrb	r0, [r4, #22]
 800d5a2:	f884 8015 	strb.w	r8, [r4, #21]
 800d5a6:	1b92      	subs	r2, r2, r6
 800d5a8:	1b9b      	subs	r3, r3, r6
 800d5aa:	f080 0001 	eor.w	r0, r0, #1
 800d5ae:	60a2      	str	r2, [r4, #8]
 800d5b0:	6123      	str	r3, [r4, #16]
 800d5b2:	b003      	add	sp, #12
 800d5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5b8:	68a3      	ldr	r3, [r4, #8]
 800d5ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5be:	701a      	strb	r2, [r3, #0]
 800d5c0:	e7bc      	b.n	800d53c <ucdr_serialize_endian_uint16_t+0x60>
 800d5c2:	f10d 0506 	add.w	r5, sp, #6
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	f00e fc5b 	bl	801be86 <memcpy>
 800d5d0:	68a0      	ldr	r0, [r4, #8]
 800d5d2:	464a      	mov	r2, r9
 800d5d4:	19a9      	adds	r1, r5, r6
 800d5d6:	f00e fc56 	bl	801be86 <memcpy>
 800d5da:	e7af      	b.n	800d53c <ucdr_serialize_endian_uint16_t+0x60>

0800d5dc <ucdr_deserialize_uint16_t>:
 800d5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	2102      	movs	r1, #2
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	f001 f9bb 	bl	800e960 <ucdr_buffer_alignment>
 800d5ea:	4601      	mov	r1, r0
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5f2:	f001 f9f9 	bl	800e9e8 <ucdr_advance_buffer>
 800d5f6:	2102      	movs	r1, #2
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 f951 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d5fe:	bb60      	cbnz	r0, 800d65a <ucdr_deserialize_uint16_t+0x7e>
 800d600:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d604:	42be      	cmp	r6, r7
 800d606:	d923      	bls.n	800d650 <ucdr_deserialize_uint16_t+0x74>
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	60a6      	str	r6, [r4, #8]
 800d60c:	1bf6      	subs	r6, r6, r7
 800d60e:	4433      	add	r3, r6
 800d610:	f1c6 0902 	rsb	r9, r6, #2
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	4649      	mov	r1, r9
 800d618:	4620      	mov	r0, r4
 800d61a:	f001 f94d 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d034      	beq.n	800d68c <ucdr_deserialize_uint16_t+0xb0>
 800d622:	7d23      	ldrb	r3, [r4, #20]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d042      	beq.n	800d6ae <ucdr_deserialize_uint16_t+0xd2>
 800d628:	787b      	ldrb	r3, [r7, #1]
 800d62a:	702b      	strb	r3, [r5, #0]
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	d03a      	beq.n	800d6a6 <ucdr_deserialize_uint16_t+0xca>
 800d630:	783b      	ldrb	r3, [r7, #0]
 800d632:	706b      	strb	r3, [r5, #1]
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	68a2      	ldr	r2, [r4, #8]
 800d638:	7da0      	ldrb	r0, [r4, #22]
 800d63a:	2102      	movs	r1, #2
 800d63c:	3302      	adds	r3, #2
 800d63e:	444a      	add	r2, r9
 800d640:	1b9b      	subs	r3, r3, r6
 800d642:	7561      	strb	r1, [r4, #21]
 800d644:	60a2      	str	r2, [r4, #8]
 800d646:	6123      	str	r3, [r4, #16]
 800d648:	f080 0001 	eor.w	r0, r0, #1
 800d64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d650:	2102      	movs	r1, #2
 800d652:	4620      	mov	r0, r4
 800d654:	f001 f930 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d658:	b180      	cbz	r0, 800d67c <ucdr_deserialize_uint16_t+0xa0>
 800d65a:	7d23      	ldrb	r3, [r4, #20]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	d011      	beq.n	800d686 <ucdr_deserialize_uint16_t+0xaa>
 800d662:	785b      	ldrb	r3, [r3, #1]
 800d664:	702b      	strb	r3, [r5, #0]
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	706b      	strb	r3, [r5, #1]
 800d66c:	68a2      	ldr	r2, [r4, #8]
 800d66e:	6923      	ldr	r3, [r4, #16]
 800d670:	3202      	adds	r2, #2
 800d672:	3302      	adds	r3, #2
 800d674:	2102      	movs	r1, #2
 800d676:	60a2      	str	r2, [r4, #8]
 800d678:	6123      	str	r3, [r4, #16]
 800d67a:	7561      	strb	r1, [r4, #21]
 800d67c:	7da0      	ldrb	r0, [r4, #22]
 800d67e:	f080 0001 	eor.w	r0, r0, #1
 800d682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	802b      	strh	r3, [r5, #0]
 800d68a:	e7ef      	b.n	800d66c <ucdr_deserialize_uint16_t+0x90>
 800d68c:	68a2      	ldr	r2, [r4, #8]
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	7da0      	ldrb	r0, [r4, #22]
 800d692:	f884 8015 	strb.w	r8, [r4, #21]
 800d696:	1b92      	subs	r2, r2, r6
 800d698:	1b9b      	subs	r3, r3, r6
 800d69a:	60a2      	str	r2, [r4, #8]
 800d69c:	6123      	str	r3, [r4, #16]
 800d69e:	f080 0001 	eor.w	r0, r0, #1
 800d6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6a6:	68a3      	ldr	r3, [r4, #8]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	706b      	strb	r3, [r5, #1]
 800d6ac:	e7c2      	b.n	800d634 <ucdr_deserialize_uint16_t+0x58>
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	4632      	mov	r2, r6
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f00e fbe7 	bl	801be86 <memcpy>
 800d6b8:	68a1      	ldr	r1, [r4, #8]
 800d6ba:	464a      	mov	r2, r9
 800d6bc:	19a8      	adds	r0, r5, r6
 800d6be:	f00e fbe2 	bl	801be86 <memcpy>
 800d6c2:	e7b7      	b.n	800d634 <ucdr_deserialize_uint16_t+0x58>

0800d6c4 <ucdr_deserialize_endian_uint16_t>:
 800d6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	460e      	mov	r6, r1
 800d6ca:	2102      	movs	r1, #2
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	4615      	mov	r5, r2
 800d6d0:	f001 f946 	bl	800e960 <ucdr_buffer_alignment>
 800d6d4:	4601      	mov	r1, r0
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d6dc:	f001 f984 	bl	800e9e8 <ucdr_advance_buffer>
 800d6e0:	2102      	movs	r1, #2
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f001 f8dc 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d6e8:	bb70      	cbnz	r0, 800d748 <ucdr_deserialize_endian_uint16_t+0x84>
 800d6ea:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d6ee:	4547      	cmp	r7, r8
 800d6f0:	d925      	bls.n	800d73e <ucdr_deserialize_endian_uint16_t+0x7a>
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	60a7      	str	r7, [r4, #8]
 800d6f6:	eba7 0708 	sub.w	r7, r7, r8
 800d6fa:	443b      	add	r3, r7
 800d6fc:	f1c7 0a02 	rsb	sl, r7, #2
 800d700:	6123      	str	r3, [r4, #16]
 800d702:	4651      	mov	r1, sl
 800d704:	4620      	mov	r0, r4
 800d706:	f001 f8d7 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d034      	beq.n	800d778 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d70e:	2e01      	cmp	r6, #1
 800d710:	d043      	beq.n	800d79a <ucdr_deserialize_endian_uint16_t+0xd6>
 800d712:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d716:	702b      	strb	r3, [r5, #0]
 800d718:	2f00      	cmp	r7, #0
 800d71a:	d03a      	beq.n	800d792 <ucdr_deserialize_endian_uint16_t+0xce>
 800d71c:	f898 3000 	ldrb.w	r3, [r8]
 800d720:	706b      	strb	r3, [r5, #1]
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	68a2      	ldr	r2, [r4, #8]
 800d726:	7da0      	ldrb	r0, [r4, #22]
 800d728:	2102      	movs	r1, #2
 800d72a:	3302      	adds	r3, #2
 800d72c:	4452      	add	r2, sl
 800d72e:	1bdb      	subs	r3, r3, r7
 800d730:	7561      	strb	r1, [r4, #21]
 800d732:	60a2      	str	r2, [r4, #8]
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	f080 0001 	eor.w	r0, r0, #1
 800d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73e:	2102      	movs	r1, #2
 800d740:	4620      	mov	r0, r4
 800d742:	f001 f8b9 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d746:	b178      	cbz	r0, 800d768 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d748:	2e01      	cmp	r6, #1
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	d011      	beq.n	800d772 <ucdr_deserialize_endian_uint16_t+0xae>
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	702b      	strb	r3, [r5, #0]
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	706b      	strb	r3, [r5, #1]
 800d758:	68a2      	ldr	r2, [r4, #8]
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	3202      	adds	r2, #2
 800d75e:	3302      	adds	r3, #2
 800d760:	2102      	movs	r1, #2
 800d762:	60a2      	str	r2, [r4, #8]
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	7561      	strb	r1, [r4, #21]
 800d768:	7da0      	ldrb	r0, [r4, #22]
 800d76a:	f080 0001 	eor.w	r0, r0, #1
 800d76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	802b      	strh	r3, [r5, #0]
 800d776:	e7ef      	b.n	800d758 <ucdr_deserialize_endian_uint16_t+0x94>
 800d778:	68a2      	ldr	r2, [r4, #8]
 800d77a:	6923      	ldr	r3, [r4, #16]
 800d77c:	7da0      	ldrb	r0, [r4, #22]
 800d77e:	f884 9015 	strb.w	r9, [r4, #21]
 800d782:	1bd2      	subs	r2, r2, r7
 800d784:	1bdb      	subs	r3, r3, r7
 800d786:	60a2      	str	r2, [r4, #8]
 800d788:	6123      	str	r3, [r4, #16]
 800d78a:	f080 0001 	eor.w	r0, r0, #1
 800d78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	706b      	strb	r3, [r5, #1]
 800d798:	e7c3      	b.n	800d722 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d79a:	4641      	mov	r1, r8
 800d79c:	463a      	mov	r2, r7
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f00e fb71 	bl	801be86 <memcpy>
 800d7a4:	68a1      	ldr	r1, [r4, #8]
 800d7a6:	4652      	mov	r2, sl
 800d7a8:	19e8      	adds	r0, r5, r7
 800d7aa:	f00e fb6c 	bl	801be86 <memcpy>
 800d7ae:	e7b8      	b.n	800d722 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d7b0 <ucdr_serialize_uint32_t>:
 800d7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	9101      	str	r1, [sp, #4]
 800d7ba:	2104      	movs	r1, #4
 800d7bc:	f001 f8d0 	bl	800e960 <ucdr_buffer_alignment>
 800d7c0:	4601      	mov	r1, r0
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	7d67      	ldrb	r7, [r4, #21]
 800d7c6:	f001 f90f 	bl	800e9e8 <ucdr_advance_buffer>
 800d7ca:	2104      	movs	r1, #4
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f001 f867 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d139      	bne.n	800d84a <ucdr_serialize_uint32_t+0x9a>
 800d7d6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7da:	42ab      	cmp	r3, r5
 800d7dc:	d930      	bls.n	800d840 <ucdr_serialize_uint32_t+0x90>
 800d7de:	1b5e      	subs	r6, r3, r5
 800d7e0:	60a3      	str	r3, [r4, #8]
 800d7e2:	6923      	ldr	r3, [r4, #16]
 800d7e4:	f1c6 0804 	rsb	r8, r6, #4
 800d7e8:	4433      	add	r3, r6
 800d7ea:	6123      	str	r3, [r4, #16]
 800d7ec:	4641      	mov	r1, r8
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f001 f862 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d04c      	beq.n	800d892 <ucdr_serialize_uint32_t+0xe2>
 800d7f8:	7d23      	ldrb	r3, [r4, #20]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d063      	beq.n	800d8c6 <ucdr_serialize_uint32_t+0x116>
 800d7fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d802:	702b      	strb	r3, [r5, #0]
 800d804:	2e00      	cmp	r6, #0
 800d806:	d051      	beq.n	800d8ac <ucdr_serialize_uint32_t+0xfc>
 800d808:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d80c:	706b      	strb	r3, [r5, #1]
 800d80e:	2e01      	cmp	r6, #1
 800d810:	d050      	beq.n	800d8b4 <ucdr_serialize_uint32_t+0x104>
 800d812:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d816:	70ab      	strb	r3, [r5, #2]
 800d818:	2e02      	cmp	r6, #2
 800d81a:	d04f      	beq.n	800d8bc <ucdr_serialize_uint32_t+0x10c>
 800d81c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d820:	70eb      	strb	r3, [r5, #3]
 800d822:	6923      	ldr	r3, [r4, #16]
 800d824:	68a2      	ldr	r2, [r4, #8]
 800d826:	7da0      	ldrb	r0, [r4, #22]
 800d828:	3304      	adds	r3, #4
 800d82a:	1b9e      	subs	r6, r3, r6
 800d82c:	4442      	add	r2, r8
 800d82e:	2304      	movs	r3, #4
 800d830:	f080 0001 	eor.w	r0, r0, #1
 800d834:	60a2      	str	r2, [r4, #8]
 800d836:	6126      	str	r6, [r4, #16]
 800d838:	7563      	strb	r3, [r4, #21]
 800d83a:	b002      	add	sp, #8
 800d83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d840:	2104      	movs	r1, #4
 800d842:	4620      	mov	r0, r4
 800d844:	f001 f838 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d848:	b1d0      	cbz	r0, 800d880 <ucdr_serialize_uint32_t+0xd0>
 800d84a:	7d23      	ldrb	r3, [r4, #20]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	68a3      	ldr	r3, [r4, #8]
 800d850:	d01c      	beq.n	800d88c <ucdr_serialize_uint32_t+0xdc>
 800d852:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	68a3      	ldr	r3, [r4, #8]
 800d85a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d85e:	705a      	strb	r2, [r3, #1]
 800d860:	68a3      	ldr	r3, [r4, #8]
 800d862:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d866:	709a      	strb	r2, [r3, #2]
 800d868:	68a3      	ldr	r3, [r4, #8]
 800d86a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d86e:	70da      	strb	r2, [r3, #3]
 800d870:	68a2      	ldr	r2, [r4, #8]
 800d872:	6923      	ldr	r3, [r4, #16]
 800d874:	3204      	adds	r2, #4
 800d876:	3304      	adds	r3, #4
 800d878:	2104      	movs	r1, #4
 800d87a:	60a2      	str	r2, [r4, #8]
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	7561      	strb	r1, [r4, #21]
 800d880:	7da0      	ldrb	r0, [r4, #22]
 800d882:	f080 0001 	eor.w	r0, r0, #1
 800d886:	b002      	add	sp, #8
 800d888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d88c:	9a01      	ldr	r2, [sp, #4]
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	e7ee      	b.n	800d870 <ucdr_serialize_uint32_t+0xc0>
 800d892:	68a2      	ldr	r2, [r4, #8]
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	7da0      	ldrb	r0, [r4, #22]
 800d898:	7567      	strb	r7, [r4, #21]
 800d89a:	1b92      	subs	r2, r2, r6
 800d89c:	1b9b      	subs	r3, r3, r6
 800d89e:	f080 0001 	eor.w	r0, r0, #1
 800d8a2:	60a2      	str	r2, [r4, #8]
 800d8a4:	6123      	str	r3, [r4, #16]
 800d8a6:	b002      	add	sp, #8
 800d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ac:	68a3      	ldr	r3, [r4, #8]
 800d8ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	68a3      	ldr	r3, [r4, #8]
 800d8b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	68a3      	ldr	r3, [r4, #8]
 800d8be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	e7ad      	b.n	800d822 <ucdr_serialize_uint32_t+0x72>
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	ad01      	add	r5, sp, #4
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	4632      	mov	r2, r6
 800d8ce:	f00e fada 	bl	801be86 <memcpy>
 800d8d2:	68a0      	ldr	r0, [r4, #8]
 800d8d4:	4642      	mov	r2, r8
 800d8d6:	19a9      	adds	r1, r5, r6
 800d8d8:	f00e fad5 	bl	801be86 <memcpy>
 800d8dc:	e7a1      	b.n	800d822 <ucdr_serialize_uint32_t+0x72>
 800d8de:	bf00      	nop

0800d8e0 <ucdr_serialize_endian_uint32_t>:
 800d8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e4:	b083      	sub	sp, #12
 800d8e6:	460d      	mov	r5, r1
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	9201      	str	r2, [sp, #4]
 800d8ee:	f001 f837 	bl	800e960 <ucdr_buffer_alignment>
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d8fa:	f001 f875 	bl	800e9e8 <ucdr_advance_buffer>
 800d8fe:	2104      	movs	r1, #4
 800d900:	4620      	mov	r0, r4
 800d902:	f000 ffcd 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800d906:	2800      	cmp	r0, #0
 800d908:	d138      	bne.n	800d97c <ucdr_serialize_endian_uint32_t+0x9c>
 800d90a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d90e:	42b7      	cmp	r7, r6
 800d910:	d92f      	bls.n	800d972 <ucdr_serialize_endian_uint32_t+0x92>
 800d912:	6923      	ldr	r3, [r4, #16]
 800d914:	60a7      	str	r7, [r4, #8]
 800d916:	1bbf      	subs	r7, r7, r6
 800d918:	443b      	add	r3, r7
 800d91a:	f1c7 0904 	rsb	r9, r7, #4
 800d91e:	6123      	str	r3, [r4, #16]
 800d920:	4649      	mov	r1, r9
 800d922:	4620      	mov	r0, r4
 800d924:	f000 ffc8 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d04a      	beq.n	800d9c2 <ucdr_serialize_endian_uint32_t+0xe2>
 800d92c:	2d01      	cmp	r5, #1
 800d92e:	d063      	beq.n	800d9f8 <ucdr_serialize_endian_uint32_t+0x118>
 800d930:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d934:	7033      	strb	r3, [r6, #0]
 800d936:	2f00      	cmp	r7, #0
 800d938:	d051      	beq.n	800d9de <ucdr_serialize_endian_uint32_t+0xfe>
 800d93a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d93e:	7073      	strb	r3, [r6, #1]
 800d940:	2f01      	cmp	r7, #1
 800d942:	d050      	beq.n	800d9e6 <ucdr_serialize_endian_uint32_t+0x106>
 800d944:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d948:	70b3      	strb	r3, [r6, #2]
 800d94a:	2f02      	cmp	r7, #2
 800d94c:	d04f      	beq.n	800d9ee <ucdr_serialize_endian_uint32_t+0x10e>
 800d94e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d952:	70f3      	strb	r3, [r6, #3]
 800d954:	6923      	ldr	r3, [r4, #16]
 800d956:	68a2      	ldr	r2, [r4, #8]
 800d958:	7da0      	ldrb	r0, [r4, #22]
 800d95a:	3304      	adds	r3, #4
 800d95c:	444a      	add	r2, r9
 800d95e:	1bdb      	subs	r3, r3, r7
 800d960:	2104      	movs	r1, #4
 800d962:	f080 0001 	eor.w	r0, r0, #1
 800d966:	60a2      	str	r2, [r4, #8]
 800d968:	6123      	str	r3, [r4, #16]
 800d96a:	7561      	strb	r1, [r4, #21]
 800d96c:	b003      	add	sp, #12
 800d96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d972:	2104      	movs	r1, #4
 800d974:	4620      	mov	r0, r4
 800d976:	f000 ff9f 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800d97a:	b1c8      	cbz	r0, 800d9b0 <ucdr_serialize_endian_uint32_t+0xd0>
 800d97c:	2d01      	cmp	r5, #1
 800d97e:	68a3      	ldr	r3, [r4, #8]
 800d980:	d01c      	beq.n	800d9bc <ucdr_serialize_endian_uint32_t+0xdc>
 800d982:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d986:	701a      	strb	r2, [r3, #0]
 800d988:	68a3      	ldr	r3, [r4, #8]
 800d98a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d98e:	705a      	strb	r2, [r3, #1]
 800d990:	68a3      	ldr	r3, [r4, #8]
 800d992:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d996:	709a      	strb	r2, [r3, #2]
 800d998:	68a3      	ldr	r3, [r4, #8]
 800d99a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d99e:	70da      	strb	r2, [r3, #3]
 800d9a0:	68a2      	ldr	r2, [r4, #8]
 800d9a2:	6923      	ldr	r3, [r4, #16]
 800d9a4:	3204      	adds	r2, #4
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	2104      	movs	r1, #4
 800d9aa:	60a2      	str	r2, [r4, #8]
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	7561      	strb	r1, [r4, #21]
 800d9b0:	7da0      	ldrb	r0, [r4, #22]
 800d9b2:	f080 0001 	eor.w	r0, r0, #1
 800d9b6:	b003      	add	sp, #12
 800d9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9bc:	9a01      	ldr	r2, [sp, #4]
 800d9be:	601a      	str	r2, [r3, #0]
 800d9c0:	e7ee      	b.n	800d9a0 <ucdr_serialize_endian_uint32_t+0xc0>
 800d9c2:	68a2      	ldr	r2, [r4, #8]
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	7da0      	ldrb	r0, [r4, #22]
 800d9c8:	f884 8015 	strb.w	r8, [r4, #21]
 800d9cc:	1bd2      	subs	r2, r2, r7
 800d9ce:	1bdb      	subs	r3, r3, r7
 800d9d0:	f080 0001 	eor.w	r0, r0, #1
 800d9d4:	60a2      	str	r2, [r4, #8]
 800d9d6:	6123      	str	r3, [r4, #16]
 800d9d8:	b003      	add	sp, #12
 800d9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9de:	68a3      	ldr	r3, [r4, #8]
 800d9e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	68a3      	ldr	r3, [r4, #8]
 800d9e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	68a3      	ldr	r3, [r4, #8]
 800d9f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	e7ad      	b.n	800d954 <ucdr_serialize_endian_uint32_t+0x74>
 800d9f8:	ad01      	add	r5, sp, #4
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4630      	mov	r0, r6
 800da00:	f00e fa41 	bl	801be86 <memcpy>
 800da04:	68a0      	ldr	r0, [r4, #8]
 800da06:	464a      	mov	r2, r9
 800da08:	19e9      	adds	r1, r5, r7
 800da0a:	f00e fa3c 	bl	801be86 <memcpy>
 800da0e:	e7a1      	b.n	800d954 <ucdr_serialize_endian_uint32_t+0x74>

0800da10 <ucdr_deserialize_uint32_t>:
 800da10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da14:	460d      	mov	r5, r1
 800da16:	2104      	movs	r1, #4
 800da18:	4604      	mov	r4, r0
 800da1a:	f000 ffa1 	bl	800e960 <ucdr_buffer_alignment>
 800da1e:	4601      	mov	r1, r0
 800da20:	4620      	mov	r0, r4
 800da22:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da26:	f000 ffdf 	bl	800e9e8 <ucdr_advance_buffer>
 800da2a:	2104      	movs	r1, #4
 800da2c:	4620      	mov	r0, r4
 800da2e:	f000 ff37 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800da32:	2800      	cmp	r0, #0
 800da34:	d138      	bne.n	800daa8 <ucdr_deserialize_uint32_t+0x98>
 800da36:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800da3a:	42b7      	cmp	r7, r6
 800da3c:	d92f      	bls.n	800da9e <ucdr_deserialize_uint32_t+0x8e>
 800da3e:	6923      	ldr	r3, [r4, #16]
 800da40:	60a7      	str	r7, [r4, #8]
 800da42:	1bbf      	subs	r7, r7, r6
 800da44:	443b      	add	r3, r7
 800da46:	f1c7 0904 	rsb	r9, r7, #4
 800da4a:	6123      	str	r3, [r4, #16]
 800da4c:	4649      	mov	r1, r9
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 ff32 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800da54:	2800      	cmp	r0, #0
 800da56:	d046      	beq.n	800dae6 <ucdr_deserialize_uint32_t+0xd6>
 800da58:	7d23      	ldrb	r3, [r4, #20]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d05c      	beq.n	800db18 <ucdr_deserialize_uint32_t+0x108>
 800da5e:	78f3      	ldrb	r3, [r6, #3]
 800da60:	702b      	strb	r3, [r5, #0]
 800da62:	2f00      	cmp	r7, #0
 800da64:	d04c      	beq.n	800db00 <ucdr_deserialize_uint32_t+0xf0>
 800da66:	78b3      	ldrb	r3, [r6, #2]
 800da68:	706b      	strb	r3, [r5, #1]
 800da6a:	2f01      	cmp	r7, #1
 800da6c:	f105 0302 	add.w	r3, r5, #2
 800da70:	d04a      	beq.n	800db08 <ucdr_deserialize_uint32_t+0xf8>
 800da72:	7873      	ldrb	r3, [r6, #1]
 800da74:	70ab      	strb	r3, [r5, #2]
 800da76:	2f02      	cmp	r7, #2
 800da78:	f105 0303 	add.w	r3, r5, #3
 800da7c:	d048      	beq.n	800db10 <ucdr_deserialize_uint32_t+0x100>
 800da7e:	7833      	ldrb	r3, [r6, #0]
 800da80:	70eb      	strb	r3, [r5, #3]
 800da82:	6923      	ldr	r3, [r4, #16]
 800da84:	68a2      	ldr	r2, [r4, #8]
 800da86:	7da0      	ldrb	r0, [r4, #22]
 800da88:	2104      	movs	r1, #4
 800da8a:	3304      	adds	r3, #4
 800da8c:	444a      	add	r2, r9
 800da8e:	1bdb      	subs	r3, r3, r7
 800da90:	7561      	strb	r1, [r4, #21]
 800da92:	60a2      	str	r2, [r4, #8]
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	f080 0001 	eor.w	r0, r0, #1
 800da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9e:	2104      	movs	r1, #4
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 ff09 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800daa6:	b1b0      	cbz	r0, 800dad6 <ucdr_deserialize_uint32_t+0xc6>
 800daa8:	7d23      	ldrb	r3, [r4, #20]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	d017      	beq.n	800dae0 <ucdr_deserialize_uint32_t+0xd0>
 800dab0:	78db      	ldrb	r3, [r3, #3]
 800dab2:	702b      	strb	r3, [r5, #0]
 800dab4:	68a3      	ldr	r3, [r4, #8]
 800dab6:	789b      	ldrb	r3, [r3, #2]
 800dab8:	706b      	strb	r3, [r5, #1]
 800daba:	68a3      	ldr	r3, [r4, #8]
 800dabc:	785b      	ldrb	r3, [r3, #1]
 800dabe:	70ab      	strb	r3, [r5, #2]
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	70eb      	strb	r3, [r5, #3]
 800dac6:	68a2      	ldr	r2, [r4, #8]
 800dac8:	6923      	ldr	r3, [r4, #16]
 800daca:	3204      	adds	r2, #4
 800dacc:	3304      	adds	r3, #4
 800dace:	2104      	movs	r1, #4
 800dad0:	60a2      	str	r2, [r4, #8]
 800dad2:	6123      	str	r3, [r4, #16]
 800dad4:	7561      	strb	r1, [r4, #21]
 800dad6:	7da0      	ldrb	r0, [r4, #22]
 800dad8:	f080 0001 	eor.w	r0, r0, #1
 800dadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	e7ef      	b.n	800dac6 <ucdr_deserialize_uint32_t+0xb6>
 800dae6:	68a2      	ldr	r2, [r4, #8]
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	7da0      	ldrb	r0, [r4, #22]
 800daec:	f884 8015 	strb.w	r8, [r4, #21]
 800daf0:	1bd2      	subs	r2, r2, r7
 800daf2:	1bdb      	subs	r3, r3, r7
 800daf4:	60a2      	str	r2, [r4, #8]
 800daf6:	6123      	str	r3, [r4, #16]
 800daf8:	f080 0001 	eor.w	r0, r0, #1
 800dafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db00:	68a3      	ldr	r3, [r4, #8]
 800db02:	789b      	ldrb	r3, [r3, #2]
 800db04:	706b      	strb	r3, [r5, #1]
 800db06:	1cab      	adds	r3, r5, #2
 800db08:	68a2      	ldr	r2, [r4, #8]
 800db0a:	7852      	ldrb	r2, [r2, #1]
 800db0c:	f803 2b01 	strb.w	r2, [r3], #1
 800db10:	68a2      	ldr	r2, [r4, #8]
 800db12:	7812      	ldrb	r2, [r2, #0]
 800db14:	701a      	strb	r2, [r3, #0]
 800db16:	e7b4      	b.n	800da82 <ucdr_deserialize_uint32_t+0x72>
 800db18:	4631      	mov	r1, r6
 800db1a:	463a      	mov	r2, r7
 800db1c:	4628      	mov	r0, r5
 800db1e:	f00e f9b2 	bl	801be86 <memcpy>
 800db22:	68a1      	ldr	r1, [r4, #8]
 800db24:	464a      	mov	r2, r9
 800db26:	19e8      	adds	r0, r5, r7
 800db28:	f00e f9ad 	bl	801be86 <memcpy>
 800db2c:	e7a9      	b.n	800da82 <ucdr_deserialize_uint32_t+0x72>
 800db2e:	bf00      	nop

0800db30 <ucdr_deserialize_endian_uint32_t>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	460e      	mov	r6, r1
 800db36:	2104      	movs	r1, #4
 800db38:	4604      	mov	r4, r0
 800db3a:	4615      	mov	r5, r2
 800db3c:	f000 ff10 	bl	800e960 <ucdr_buffer_alignment>
 800db40:	4601      	mov	r1, r0
 800db42:	4620      	mov	r0, r4
 800db44:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db48:	f000 ff4e 	bl	800e9e8 <ucdr_advance_buffer>
 800db4c:	2104      	movs	r1, #4
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fea6 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800db54:	2800      	cmp	r0, #0
 800db56:	d13c      	bne.n	800dbd2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800db58:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800db5c:	42bb      	cmp	r3, r7
 800db5e:	d933      	bls.n	800dbc8 <ucdr_deserialize_endian_uint32_t+0x98>
 800db60:	eba3 0807 	sub.w	r8, r3, r7
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	6923      	ldr	r3, [r4, #16]
 800db68:	f1c8 0a04 	rsb	sl, r8, #4
 800db6c:	4443      	add	r3, r8
 800db6e:	6123      	str	r3, [r4, #16]
 800db70:	4651      	mov	r1, sl
 800db72:	4620      	mov	r0, r4
 800db74:	f000 fea0 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d048      	beq.n	800dc0e <ucdr_deserialize_endian_uint32_t+0xde>
 800db7c:	2e01      	cmp	r6, #1
 800db7e:	d061      	beq.n	800dc44 <ucdr_deserialize_endian_uint32_t+0x114>
 800db80:	78fb      	ldrb	r3, [r7, #3]
 800db82:	702b      	strb	r3, [r5, #0]
 800db84:	f1b8 0f00 	cmp.w	r8, #0
 800db88:	d050      	beq.n	800dc2c <ucdr_deserialize_endian_uint32_t+0xfc>
 800db8a:	78bb      	ldrb	r3, [r7, #2]
 800db8c:	706b      	strb	r3, [r5, #1]
 800db8e:	f1b8 0f01 	cmp.w	r8, #1
 800db92:	f105 0302 	add.w	r3, r5, #2
 800db96:	d04d      	beq.n	800dc34 <ucdr_deserialize_endian_uint32_t+0x104>
 800db98:	787b      	ldrb	r3, [r7, #1]
 800db9a:	70ab      	strb	r3, [r5, #2]
 800db9c:	f1b8 0f02 	cmp.w	r8, #2
 800dba0:	f105 0303 	add.w	r3, r5, #3
 800dba4:	d04a      	beq.n	800dc3c <ucdr_deserialize_endian_uint32_t+0x10c>
 800dba6:	783b      	ldrb	r3, [r7, #0]
 800dba8:	70eb      	strb	r3, [r5, #3]
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	68a2      	ldr	r2, [r4, #8]
 800dbae:	7da0      	ldrb	r0, [r4, #22]
 800dbb0:	2104      	movs	r1, #4
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	4452      	add	r2, sl
 800dbb6:	eba3 0308 	sub.w	r3, r3, r8
 800dbba:	7561      	strb	r1, [r4, #21]
 800dbbc:	60a2      	str	r2, [r4, #8]
 800dbbe:	6123      	str	r3, [r4, #16]
 800dbc0:	f080 0001 	eor.w	r0, r0, #1
 800dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc8:	2104      	movs	r1, #4
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 fe74 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800dbd0:	b1a8      	cbz	r0, 800dbfe <ucdr_deserialize_endian_uint32_t+0xce>
 800dbd2:	2e01      	cmp	r6, #1
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	d017      	beq.n	800dc08 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dbd8:	78db      	ldrb	r3, [r3, #3]
 800dbda:	702b      	strb	r3, [r5, #0]
 800dbdc:	68a3      	ldr	r3, [r4, #8]
 800dbde:	789b      	ldrb	r3, [r3, #2]
 800dbe0:	706b      	strb	r3, [r5, #1]
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	785b      	ldrb	r3, [r3, #1]
 800dbe6:	70ab      	strb	r3, [r5, #2]
 800dbe8:	68a3      	ldr	r3, [r4, #8]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	70eb      	strb	r3, [r5, #3]
 800dbee:	68a2      	ldr	r2, [r4, #8]
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	3204      	adds	r2, #4
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	2104      	movs	r1, #4
 800dbf8:	60a2      	str	r2, [r4, #8]
 800dbfa:	6123      	str	r3, [r4, #16]
 800dbfc:	7561      	strb	r1, [r4, #21]
 800dbfe:	7da0      	ldrb	r0, [r4, #22]
 800dc00:	f080 0001 	eor.w	r0, r0, #1
 800dc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	e7ef      	b.n	800dbee <ucdr_deserialize_endian_uint32_t+0xbe>
 800dc0e:	68a2      	ldr	r2, [r4, #8]
 800dc10:	6923      	ldr	r3, [r4, #16]
 800dc12:	7da0      	ldrb	r0, [r4, #22]
 800dc14:	f884 9015 	strb.w	r9, [r4, #21]
 800dc18:	eba2 0208 	sub.w	r2, r2, r8
 800dc1c:	eba3 0308 	sub.w	r3, r3, r8
 800dc20:	60a2      	str	r2, [r4, #8]
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	f080 0001 	eor.w	r0, r0, #1
 800dc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2c:	68a3      	ldr	r3, [r4, #8]
 800dc2e:	789b      	ldrb	r3, [r3, #2]
 800dc30:	706b      	strb	r3, [r5, #1]
 800dc32:	1cab      	adds	r3, r5, #2
 800dc34:	68a2      	ldr	r2, [r4, #8]
 800dc36:	7852      	ldrb	r2, [r2, #1]
 800dc38:	f803 2b01 	strb.w	r2, [r3], #1
 800dc3c:	68a2      	ldr	r2, [r4, #8]
 800dc3e:	7812      	ldrb	r2, [r2, #0]
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	e7b2      	b.n	800dbaa <ucdr_deserialize_endian_uint32_t+0x7a>
 800dc44:	4639      	mov	r1, r7
 800dc46:	4642      	mov	r2, r8
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f00e f91c 	bl	801be86 <memcpy>
 800dc4e:	68a1      	ldr	r1, [r4, #8]
 800dc50:	4652      	mov	r2, sl
 800dc52:	eb05 0008 	add.w	r0, r5, r8
 800dc56:	f00e f916 	bl	801be86 <memcpy>
 800dc5a:	e7a6      	b.n	800dbaa <ucdr_deserialize_endian_uint32_t+0x7a>

0800dc5c <ucdr_serialize_uint64_t>:
 800dc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc60:	2108      	movs	r1, #8
 800dc62:	b082      	sub	sp, #8
 800dc64:	4604      	mov	r4, r0
 800dc66:	e9cd 2300 	strd	r2, r3, [sp]
 800dc6a:	f000 fe79 	bl	800e960 <ucdr_buffer_alignment>
 800dc6e:	4601      	mov	r1, r0
 800dc70:	4620      	mov	r0, r4
 800dc72:	7d67      	ldrb	r7, [r4, #21]
 800dc74:	f000 feb8 	bl	800e9e8 <ucdr_advance_buffer>
 800dc78:	2108      	movs	r1, #8
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 fe10 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d14e      	bne.n	800dd22 <ucdr_serialize_uint64_t+0xc6>
 800dc84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc88:	42ab      	cmp	r3, r5
 800dc8a:	d945      	bls.n	800dd18 <ucdr_serialize_uint64_t+0xbc>
 800dc8c:	1b5e      	subs	r6, r3, r5
 800dc8e:	60a3      	str	r3, [r4, #8]
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	f1c6 0808 	rsb	r8, r6, #8
 800dc96:	4433      	add	r3, r6
 800dc98:	6123      	str	r3, [r4, #16]
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f000 fe0b 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d074      	beq.n	800dd90 <ucdr_serialize_uint64_t+0x134>
 800dca6:	7d23      	ldrb	r3, [r4, #20]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	f000 809b 	beq.w	800dde4 <ucdr_serialize_uint64_t+0x188>
 800dcae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcb2:	702b      	strb	r3, [r5, #0]
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	d078      	beq.n	800ddaa <ucdr_serialize_uint64_t+0x14e>
 800dcb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcbc:	706b      	strb	r3, [r5, #1]
 800dcbe:	2e01      	cmp	r6, #1
 800dcc0:	d077      	beq.n	800ddb2 <ucdr_serialize_uint64_t+0x156>
 800dcc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcc6:	70ab      	strb	r3, [r5, #2]
 800dcc8:	2e02      	cmp	r6, #2
 800dcca:	d076      	beq.n	800ddba <ucdr_serialize_uint64_t+0x15e>
 800dccc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcd0:	70eb      	strb	r3, [r5, #3]
 800dcd2:	2e03      	cmp	r6, #3
 800dcd4:	d075      	beq.n	800ddc2 <ucdr_serialize_uint64_t+0x166>
 800dcd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dcda:	712b      	strb	r3, [r5, #4]
 800dcdc:	2e04      	cmp	r6, #4
 800dcde:	d074      	beq.n	800ddca <ucdr_serialize_uint64_t+0x16e>
 800dce0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dce4:	716b      	strb	r3, [r5, #5]
 800dce6:	2e05      	cmp	r6, #5
 800dce8:	d073      	beq.n	800ddd2 <ucdr_serialize_uint64_t+0x176>
 800dcea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dcee:	71ab      	strb	r3, [r5, #6]
 800dcf0:	2e06      	cmp	r6, #6
 800dcf2:	d072      	beq.n	800ddda <ucdr_serialize_uint64_t+0x17e>
 800dcf4:	f89d 3000 	ldrb.w	r3, [sp]
 800dcf8:	71eb      	strb	r3, [r5, #7]
 800dcfa:	6923      	ldr	r3, [r4, #16]
 800dcfc:	68a2      	ldr	r2, [r4, #8]
 800dcfe:	7da0      	ldrb	r0, [r4, #22]
 800dd00:	3308      	adds	r3, #8
 800dd02:	1b9e      	subs	r6, r3, r6
 800dd04:	4442      	add	r2, r8
 800dd06:	2308      	movs	r3, #8
 800dd08:	f080 0001 	eor.w	r0, r0, #1
 800dd0c:	60a2      	str	r2, [r4, #8]
 800dd0e:	6126      	str	r6, [r4, #16]
 800dd10:	7563      	strb	r3, [r4, #21]
 800dd12:	b002      	add	sp, #8
 800dd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd18:	2108      	movs	r1, #8
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 fdcc 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800dd20:	b350      	cbz	r0, 800dd78 <ucdr_serialize_uint64_t+0x11c>
 800dd22:	7d23      	ldrb	r3, [r4, #20]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d02d      	beq.n	800dd84 <ucdr_serialize_uint64_t+0x128>
 800dd28:	68a3      	ldr	r3, [r4, #8]
 800dd2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	68a3      	ldr	r3, [r4, #8]
 800dd32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd36:	705a      	strb	r2, [r3, #1]
 800dd38:	68a3      	ldr	r3, [r4, #8]
 800dd3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd3e:	709a      	strb	r2, [r3, #2]
 800dd40:	68a3      	ldr	r3, [r4, #8]
 800dd42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd46:	70da      	strb	r2, [r3, #3]
 800dd48:	68a3      	ldr	r3, [r4, #8]
 800dd4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd4e:	711a      	strb	r2, [r3, #4]
 800dd50:	68a3      	ldr	r3, [r4, #8]
 800dd52:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd56:	715a      	strb	r2, [r3, #5]
 800dd58:	68a3      	ldr	r3, [r4, #8]
 800dd5a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dd5e:	719a      	strb	r2, [r3, #6]
 800dd60:	68a3      	ldr	r3, [r4, #8]
 800dd62:	f89d 2000 	ldrb.w	r2, [sp]
 800dd66:	71da      	strb	r2, [r3, #7]
 800dd68:	68a2      	ldr	r2, [r4, #8]
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	3208      	adds	r2, #8
 800dd6e:	3308      	adds	r3, #8
 800dd70:	2108      	movs	r1, #8
 800dd72:	60a2      	str	r2, [r4, #8]
 800dd74:	6123      	str	r3, [r4, #16]
 800dd76:	7561      	strb	r1, [r4, #21]
 800dd78:	7da0      	ldrb	r0, [r4, #22]
 800dd7a:	f080 0001 	eor.w	r0, r0, #1
 800dd7e:	b002      	add	sp, #8
 800dd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd84:	466b      	mov	r3, sp
 800dd86:	cb03      	ldmia	r3!, {r0, r1}
 800dd88:	68a3      	ldr	r3, [r4, #8]
 800dd8a:	6018      	str	r0, [r3, #0]
 800dd8c:	6059      	str	r1, [r3, #4]
 800dd8e:	e7eb      	b.n	800dd68 <ucdr_serialize_uint64_t+0x10c>
 800dd90:	68a2      	ldr	r2, [r4, #8]
 800dd92:	6923      	ldr	r3, [r4, #16]
 800dd94:	7da0      	ldrb	r0, [r4, #22]
 800dd96:	7567      	strb	r7, [r4, #21]
 800dd98:	1b92      	subs	r2, r2, r6
 800dd9a:	1b9b      	subs	r3, r3, r6
 800dd9c:	f080 0001 	eor.w	r0, r0, #1
 800dda0:	60a2      	str	r2, [r4, #8]
 800dda2:	6123      	str	r3, [r4, #16]
 800dda4:	b002      	add	sp, #8
 800dda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	68a3      	ldr	r3, [r4, #8]
 800ddb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	68a3      	ldr	r3, [r4, #8]
 800ddbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	68a3      	ldr	r3, [r4, #8]
 800ddc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	68a3      	ldr	r3, [r4, #8]
 800ddcc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ddd8:	701a      	strb	r2, [r3, #0]
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	f89d 2000 	ldrb.w	r2, [sp]
 800dde0:	701a      	strb	r2, [r3, #0]
 800dde2:	e78a      	b.n	800dcfa <ucdr_serialize_uint64_t+0x9e>
 800dde4:	4628      	mov	r0, r5
 800dde6:	466d      	mov	r5, sp
 800dde8:	4629      	mov	r1, r5
 800ddea:	4632      	mov	r2, r6
 800ddec:	f00e f84b 	bl	801be86 <memcpy>
 800ddf0:	68a0      	ldr	r0, [r4, #8]
 800ddf2:	4642      	mov	r2, r8
 800ddf4:	19a9      	adds	r1, r5, r6
 800ddf6:	f00e f846 	bl	801be86 <memcpy>
 800ddfa:	e77e      	b.n	800dcfa <ucdr_serialize_uint64_t+0x9e>

0800ddfc <ucdr_serialize_int16_t>:
 800ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de00:	b082      	sub	sp, #8
 800de02:	460b      	mov	r3, r1
 800de04:	2102      	movs	r1, #2
 800de06:	4604      	mov	r4, r0
 800de08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800de0c:	f000 fda8 	bl	800e960 <ucdr_buffer_alignment>
 800de10:	4601      	mov	r1, r0
 800de12:	4620      	mov	r0, r4
 800de14:	7d67      	ldrb	r7, [r4, #21]
 800de16:	f000 fde7 	bl	800e9e8 <ucdr_advance_buffer>
 800de1a:	2102      	movs	r1, #2
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fd3f 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800de22:	bb78      	cbnz	r0, 800de84 <ucdr_serialize_int16_t+0x88>
 800de24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de28:	42ab      	cmp	r3, r5
 800de2a:	d926      	bls.n	800de7a <ucdr_serialize_int16_t+0x7e>
 800de2c:	1b5e      	subs	r6, r3, r5
 800de2e:	60a3      	str	r3, [r4, #8]
 800de30:	6923      	ldr	r3, [r4, #16]
 800de32:	f1c6 0802 	rsb	r8, r6, #2
 800de36:	4433      	add	r3, r6
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	4641      	mov	r1, r8
 800de3c:	4620      	mov	r0, r4
 800de3e:	f000 fd3b 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800de42:	2800      	cmp	r0, #0
 800de44:	d03b      	beq.n	800debe <ucdr_serialize_int16_t+0xc2>
 800de46:	7d23      	ldrb	r3, [r4, #20]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d04a      	beq.n	800dee2 <ucdr_serialize_int16_t+0xe6>
 800de4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de50:	702b      	strb	r3, [r5, #0]
 800de52:	2e00      	cmp	r6, #0
 800de54:	d040      	beq.n	800ded8 <ucdr_serialize_int16_t+0xdc>
 800de56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de5a:	706b      	strb	r3, [r5, #1]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	68a2      	ldr	r2, [r4, #8]
 800de60:	7da0      	ldrb	r0, [r4, #22]
 800de62:	3302      	adds	r3, #2
 800de64:	1b9e      	subs	r6, r3, r6
 800de66:	4442      	add	r2, r8
 800de68:	2302      	movs	r3, #2
 800de6a:	f080 0001 	eor.w	r0, r0, #1
 800de6e:	60a2      	str	r2, [r4, #8]
 800de70:	6126      	str	r6, [r4, #16]
 800de72:	7563      	strb	r3, [r4, #21]
 800de74:	b002      	add	sp, #8
 800de76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7a:	2102      	movs	r1, #2
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fd1b 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800de82:	b190      	cbz	r0, 800deaa <ucdr_serialize_int16_t+0xae>
 800de84:	7d23      	ldrb	r3, [r4, #20]
 800de86:	2b01      	cmp	r3, #1
 800de88:	68a3      	ldr	r3, [r4, #8]
 800de8a:	d014      	beq.n	800deb6 <ucdr_serialize_int16_t+0xba>
 800de8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800de90:	701a      	strb	r2, [r3, #0]
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de98:	705a      	strb	r2, [r3, #1]
 800de9a:	68a2      	ldr	r2, [r4, #8]
 800de9c:	6923      	ldr	r3, [r4, #16]
 800de9e:	3202      	adds	r2, #2
 800dea0:	3302      	adds	r3, #2
 800dea2:	2102      	movs	r1, #2
 800dea4:	60a2      	str	r2, [r4, #8]
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	7561      	strb	r1, [r4, #21]
 800deaa:	7da0      	ldrb	r0, [r4, #22]
 800deac:	f080 0001 	eor.w	r0, r0, #1
 800deb0:	b002      	add	sp, #8
 800deb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	e7ed      	b.n	800de9a <ucdr_serialize_int16_t+0x9e>
 800debe:	68a2      	ldr	r2, [r4, #8]
 800dec0:	6923      	ldr	r3, [r4, #16]
 800dec2:	7da0      	ldrb	r0, [r4, #22]
 800dec4:	7567      	strb	r7, [r4, #21]
 800dec6:	1b92      	subs	r2, r2, r6
 800dec8:	1b9b      	subs	r3, r3, r6
 800deca:	f080 0001 	eor.w	r0, r0, #1
 800dece:	60a2      	str	r2, [r4, #8]
 800ded0:	6123      	str	r3, [r4, #16]
 800ded2:	b002      	add	sp, #8
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	68a3      	ldr	r3, [r4, #8]
 800deda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	e7bc      	b.n	800de5c <ucdr_serialize_int16_t+0x60>
 800dee2:	4628      	mov	r0, r5
 800dee4:	f10d 0506 	add.w	r5, sp, #6
 800dee8:	4629      	mov	r1, r5
 800deea:	4632      	mov	r2, r6
 800deec:	f00d ffcb 	bl	801be86 <memcpy>
 800def0:	68a0      	ldr	r0, [r4, #8]
 800def2:	4642      	mov	r2, r8
 800def4:	19a9      	adds	r1, r5, r6
 800def6:	f00d ffc6 	bl	801be86 <memcpy>
 800defa:	e7af      	b.n	800de5c <ucdr_serialize_int16_t+0x60>

0800defc <ucdr_deserialize_int16_t>:
 800defc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df00:	460d      	mov	r5, r1
 800df02:	2102      	movs	r1, #2
 800df04:	4604      	mov	r4, r0
 800df06:	f000 fd2b 	bl	800e960 <ucdr_buffer_alignment>
 800df0a:	4601      	mov	r1, r0
 800df0c:	4620      	mov	r0, r4
 800df0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df12:	f000 fd69 	bl	800e9e8 <ucdr_advance_buffer>
 800df16:	2102      	movs	r1, #2
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fcc1 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800df1e:	bb60      	cbnz	r0, 800df7a <ucdr_deserialize_int16_t+0x7e>
 800df20:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800df24:	42be      	cmp	r6, r7
 800df26:	d923      	bls.n	800df70 <ucdr_deserialize_int16_t+0x74>
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	60a6      	str	r6, [r4, #8]
 800df2c:	1bf6      	subs	r6, r6, r7
 800df2e:	4433      	add	r3, r6
 800df30:	f1c6 0902 	rsb	r9, r6, #2
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	4649      	mov	r1, r9
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 fcbd 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d034      	beq.n	800dfac <ucdr_deserialize_int16_t+0xb0>
 800df42:	7d23      	ldrb	r3, [r4, #20]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d042      	beq.n	800dfce <ucdr_deserialize_int16_t+0xd2>
 800df48:	787b      	ldrb	r3, [r7, #1]
 800df4a:	702b      	strb	r3, [r5, #0]
 800df4c:	2e00      	cmp	r6, #0
 800df4e:	d03a      	beq.n	800dfc6 <ucdr_deserialize_int16_t+0xca>
 800df50:	783b      	ldrb	r3, [r7, #0]
 800df52:	706b      	strb	r3, [r5, #1]
 800df54:	6923      	ldr	r3, [r4, #16]
 800df56:	68a2      	ldr	r2, [r4, #8]
 800df58:	7da0      	ldrb	r0, [r4, #22]
 800df5a:	2102      	movs	r1, #2
 800df5c:	3302      	adds	r3, #2
 800df5e:	444a      	add	r2, r9
 800df60:	1b9b      	subs	r3, r3, r6
 800df62:	7561      	strb	r1, [r4, #21]
 800df64:	60a2      	str	r2, [r4, #8]
 800df66:	6123      	str	r3, [r4, #16]
 800df68:	f080 0001 	eor.w	r0, r0, #1
 800df6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df70:	2102      	movs	r1, #2
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fca0 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800df78:	b180      	cbz	r0, 800df9c <ucdr_deserialize_int16_t+0xa0>
 800df7a:	7d23      	ldrb	r3, [r4, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	68a3      	ldr	r3, [r4, #8]
 800df80:	d011      	beq.n	800dfa6 <ucdr_deserialize_int16_t+0xaa>
 800df82:	785b      	ldrb	r3, [r3, #1]
 800df84:	702b      	strb	r3, [r5, #0]
 800df86:	68a3      	ldr	r3, [r4, #8]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	706b      	strb	r3, [r5, #1]
 800df8c:	68a2      	ldr	r2, [r4, #8]
 800df8e:	6923      	ldr	r3, [r4, #16]
 800df90:	3202      	adds	r2, #2
 800df92:	3302      	adds	r3, #2
 800df94:	2102      	movs	r1, #2
 800df96:	60a2      	str	r2, [r4, #8]
 800df98:	6123      	str	r3, [r4, #16]
 800df9a:	7561      	strb	r1, [r4, #21]
 800df9c:	7da0      	ldrb	r0, [r4, #22]
 800df9e:	f080 0001 	eor.w	r0, r0, #1
 800dfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	802b      	strh	r3, [r5, #0]
 800dfaa:	e7ef      	b.n	800df8c <ucdr_deserialize_int16_t+0x90>
 800dfac:	68a2      	ldr	r2, [r4, #8]
 800dfae:	6923      	ldr	r3, [r4, #16]
 800dfb0:	7da0      	ldrb	r0, [r4, #22]
 800dfb2:	f884 8015 	strb.w	r8, [r4, #21]
 800dfb6:	1b92      	subs	r2, r2, r6
 800dfb8:	1b9b      	subs	r3, r3, r6
 800dfba:	60a2      	str	r2, [r4, #8]
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	f080 0001 	eor.w	r0, r0, #1
 800dfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc6:	68a3      	ldr	r3, [r4, #8]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	706b      	strb	r3, [r5, #1]
 800dfcc:	e7c2      	b.n	800df54 <ucdr_deserialize_int16_t+0x58>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f00d ff57 	bl	801be86 <memcpy>
 800dfd8:	68a1      	ldr	r1, [r4, #8]
 800dfda:	464a      	mov	r2, r9
 800dfdc:	19a8      	adds	r0, r5, r6
 800dfde:	f00d ff52 	bl	801be86 <memcpy>
 800dfe2:	e7b7      	b.n	800df54 <ucdr_deserialize_int16_t+0x58>

0800dfe4 <ucdr_serialize_int32_t>:
 800dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	4604      	mov	r4, r0
 800dfec:	9101      	str	r1, [sp, #4]
 800dfee:	2104      	movs	r1, #4
 800dff0:	f000 fcb6 	bl	800e960 <ucdr_buffer_alignment>
 800dff4:	4601      	mov	r1, r0
 800dff6:	4620      	mov	r0, r4
 800dff8:	7d67      	ldrb	r7, [r4, #21]
 800dffa:	f000 fcf5 	bl	800e9e8 <ucdr_advance_buffer>
 800dffe:	2104      	movs	r1, #4
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fc4d 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e006:	2800      	cmp	r0, #0
 800e008:	d139      	bne.n	800e07e <ucdr_serialize_int32_t+0x9a>
 800e00a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e00e:	42ab      	cmp	r3, r5
 800e010:	d930      	bls.n	800e074 <ucdr_serialize_int32_t+0x90>
 800e012:	1b5e      	subs	r6, r3, r5
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	f1c6 0804 	rsb	r8, r6, #4
 800e01c:	4433      	add	r3, r6
 800e01e:	6123      	str	r3, [r4, #16]
 800e020:	4641      	mov	r1, r8
 800e022:	4620      	mov	r0, r4
 800e024:	f000 fc48 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d04c      	beq.n	800e0c6 <ucdr_serialize_int32_t+0xe2>
 800e02c:	7d23      	ldrb	r3, [r4, #20]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d063      	beq.n	800e0fa <ucdr_serialize_int32_t+0x116>
 800e032:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e036:	702b      	strb	r3, [r5, #0]
 800e038:	2e00      	cmp	r6, #0
 800e03a:	d051      	beq.n	800e0e0 <ucdr_serialize_int32_t+0xfc>
 800e03c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e040:	706b      	strb	r3, [r5, #1]
 800e042:	2e01      	cmp	r6, #1
 800e044:	d050      	beq.n	800e0e8 <ucdr_serialize_int32_t+0x104>
 800e046:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e04a:	70ab      	strb	r3, [r5, #2]
 800e04c:	2e02      	cmp	r6, #2
 800e04e:	d04f      	beq.n	800e0f0 <ucdr_serialize_int32_t+0x10c>
 800e050:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e054:	70eb      	strb	r3, [r5, #3]
 800e056:	6923      	ldr	r3, [r4, #16]
 800e058:	68a2      	ldr	r2, [r4, #8]
 800e05a:	7da0      	ldrb	r0, [r4, #22]
 800e05c:	3304      	adds	r3, #4
 800e05e:	1b9e      	subs	r6, r3, r6
 800e060:	4442      	add	r2, r8
 800e062:	2304      	movs	r3, #4
 800e064:	f080 0001 	eor.w	r0, r0, #1
 800e068:	60a2      	str	r2, [r4, #8]
 800e06a:	6126      	str	r6, [r4, #16]
 800e06c:	7563      	strb	r3, [r4, #21]
 800e06e:	b002      	add	sp, #8
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	2104      	movs	r1, #4
 800e076:	4620      	mov	r0, r4
 800e078:	f000 fc1e 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e07c:	b1d0      	cbz	r0, 800e0b4 <ucdr_serialize_int32_t+0xd0>
 800e07e:	7d23      	ldrb	r3, [r4, #20]
 800e080:	2b01      	cmp	r3, #1
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	d01c      	beq.n	800e0c0 <ucdr_serialize_int32_t+0xdc>
 800e086:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e08a:	701a      	strb	r2, [r3, #0]
 800e08c:	68a3      	ldr	r3, [r4, #8]
 800e08e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e092:	705a      	strb	r2, [r3, #1]
 800e094:	68a3      	ldr	r3, [r4, #8]
 800e096:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e09a:	709a      	strb	r2, [r3, #2]
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0a2:	70da      	strb	r2, [r3, #3]
 800e0a4:	68a2      	ldr	r2, [r4, #8]
 800e0a6:	6923      	ldr	r3, [r4, #16]
 800e0a8:	3204      	adds	r2, #4
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	2104      	movs	r1, #4
 800e0ae:	60a2      	str	r2, [r4, #8]
 800e0b0:	6123      	str	r3, [r4, #16]
 800e0b2:	7561      	strb	r1, [r4, #21]
 800e0b4:	7da0      	ldrb	r0, [r4, #22]
 800e0b6:	f080 0001 	eor.w	r0, r0, #1
 800e0ba:	b002      	add	sp, #8
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	9a01      	ldr	r2, [sp, #4]
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	e7ee      	b.n	800e0a4 <ucdr_serialize_int32_t+0xc0>
 800e0c6:	68a2      	ldr	r2, [r4, #8]
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	7da0      	ldrb	r0, [r4, #22]
 800e0cc:	7567      	strb	r7, [r4, #21]
 800e0ce:	1b92      	subs	r2, r2, r6
 800e0d0:	1b9b      	subs	r3, r3, r6
 800e0d2:	f080 0001 	eor.w	r0, r0, #1
 800e0d6:	60a2      	str	r2, [r4, #8]
 800e0d8:	6123      	str	r3, [r4, #16]
 800e0da:	b002      	add	sp, #8
 800e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e0:	68a3      	ldr	r3, [r4, #8]
 800e0e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0e6:	701a      	strb	r2, [r3, #0]
 800e0e8:	68a3      	ldr	r3, [r4, #8]
 800e0ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0ee:	701a      	strb	r2, [r3, #0]
 800e0f0:	68a3      	ldr	r3, [r4, #8]
 800e0f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	e7ad      	b.n	800e056 <ucdr_serialize_int32_t+0x72>
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	ad01      	add	r5, sp, #4
 800e0fe:	4629      	mov	r1, r5
 800e100:	4632      	mov	r2, r6
 800e102:	f00d fec0 	bl	801be86 <memcpy>
 800e106:	68a0      	ldr	r0, [r4, #8]
 800e108:	4642      	mov	r2, r8
 800e10a:	19a9      	adds	r1, r5, r6
 800e10c:	f00d febb 	bl	801be86 <memcpy>
 800e110:	e7a1      	b.n	800e056 <ucdr_serialize_int32_t+0x72>
 800e112:	bf00      	nop

0800e114 <ucdr_deserialize_int32_t>:
 800e114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e118:	460d      	mov	r5, r1
 800e11a:	2104      	movs	r1, #4
 800e11c:	4604      	mov	r4, r0
 800e11e:	f000 fc1f 	bl	800e960 <ucdr_buffer_alignment>
 800e122:	4601      	mov	r1, r0
 800e124:	4620      	mov	r0, r4
 800e126:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e12a:	f000 fc5d 	bl	800e9e8 <ucdr_advance_buffer>
 800e12e:	2104      	movs	r1, #4
 800e130:	4620      	mov	r0, r4
 800e132:	f000 fbb5 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e136:	2800      	cmp	r0, #0
 800e138:	d138      	bne.n	800e1ac <ucdr_deserialize_int32_t+0x98>
 800e13a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e13e:	42b7      	cmp	r7, r6
 800e140:	d92f      	bls.n	800e1a2 <ucdr_deserialize_int32_t+0x8e>
 800e142:	6923      	ldr	r3, [r4, #16]
 800e144:	60a7      	str	r7, [r4, #8]
 800e146:	1bbf      	subs	r7, r7, r6
 800e148:	443b      	add	r3, r7
 800e14a:	f1c7 0904 	rsb	r9, r7, #4
 800e14e:	6123      	str	r3, [r4, #16]
 800e150:	4649      	mov	r1, r9
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fbb0 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d046      	beq.n	800e1ea <ucdr_deserialize_int32_t+0xd6>
 800e15c:	7d23      	ldrb	r3, [r4, #20]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d05c      	beq.n	800e21c <ucdr_deserialize_int32_t+0x108>
 800e162:	78f3      	ldrb	r3, [r6, #3]
 800e164:	702b      	strb	r3, [r5, #0]
 800e166:	2f00      	cmp	r7, #0
 800e168:	d04c      	beq.n	800e204 <ucdr_deserialize_int32_t+0xf0>
 800e16a:	78b3      	ldrb	r3, [r6, #2]
 800e16c:	706b      	strb	r3, [r5, #1]
 800e16e:	2f01      	cmp	r7, #1
 800e170:	f105 0302 	add.w	r3, r5, #2
 800e174:	d04a      	beq.n	800e20c <ucdr_deserialize_int32_t+0xf8>
 800e176:	7873      	ldrb	r3, [r6, #1]
 800e178:	70ab      	strb	r3, [r5, #2]
 800e17a:	2f02      	cmp	r7, #2
 800e17c:	f105 0303 	add.w	r3, r5, #3
 800e180:	d048      	beq.n	800e214 <ucdr_deserialize_int32_t+0x100>
 800e182:	7833      	ldrb	r3, [r6, #0]
 800e184:	70eb      	strb	r3, [r5, #3]
 800e186:	6923      	ldr	r3, [r4, #16]
 800e188:	68a2      	ldr	r2, [r4, #8]
 800e18a:	7da0      	ldrb	r0, [r4, #22]
 800e18c:	2104      	movs	r1, #4
 800e18e:	3304      	adds	r3, #4
 800e190:	444a      	add	r2, r9
 800e192:	1bdb      	subs	r3, r3, r7
 800e194:	7561      	strb	r1, [r4, #21]
 800e196:	60a2      	str	r2, [r4, #8]
 800e198:	6123      	str	r3, [r4, #16]
 800e19a:	f080 0001 	eor.w	r0, r0, #1
 800e19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a2:	2104      	movs	r1, #4
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 fb87 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e1aa:	b1b0      	cbz	r0, 800e1da <ucdr_deserialize_int32_t+0xc6>
 800e1ac:	7d23      	ldrb	r3, [r4, #20]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	68a3      	ldr	r3, [r4, #8]
 800e1b2:	d017      	beq.n	800e1e4 <ucdr_deserialize_int32_t+0xd0>
 800e1b4:	78db      	ldrb	r3, [r3, #3]
 800e1b6:	702b      	strb	r3, [r5, #0]
 800e1b8:	68a3      	ldr	r3, [r4, #8]
 800e1ba:	789b      	ldrb	r3, [r3, #2]
 800e1bc:	706b      	strb	r3, [r5, #1]
 800e1be:	68a3      	ldr	r3, [r4, #8]
 800e1c0:	785b      	ldrb	r3, [r3, #1]
 800e1c2:	70ab      	strb	r3, [r5, #2]
 800e1c4:	68a3      	ldr	r3, [r4, #8]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	70eb      	strb	r3, [r5, #3]
 800e1ca:	68a2      	ldr	r2, [r4, #8]
 800e1cc:	6923      	ldr	r3, [r4, #16]
 800e1ce:	3204      	adds	r2, #4
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	2104      	movs	r1, #4
 800e1d4:	60a2      	str	r2, [r4, #8]
 800e1d6:	6123      	str	r3, [r4, #16]
 800e1d8:	7561      	strb	r1, [r4, #21]
 800e1da:	7da0      	ldrb	r0, [r4, #22]
 800e1dc:	f080 0001 	eor.w	r0, r0, #1
 800e1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	602b      	str	r3, [r5, #0]
 800e1e8:	e7ef      	b.n	800e1ca <ucdr_deserialize_int32_t+0xb6>
 800e1ea:	68a2      	ldr	r2, [r4, #8]
 800e1ec:	6923      	ldr	r3, [r4, #16]
 800e1ee:	7da0      	ldrb	r0, [r4, #22]
 800e1f0:	f884 8015 	strb.w	r8, [r4, #21]
 800e1f4:	1bd2      	subs	r2, r2, r7
 800e1f6:	1bdb      	subs	r3, r3, r7
 800e1f8:	60a2      	str	r2, [r4, #8]
 800e1fa:	6123      	str	r3, [r4, #16]
 800e1fc:	f080 0001 	eor.w	r0, r0, #1
 800e200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e204:	68a3      	ldr	r3, [r4, #8]
 800e206:	789b      	ldrb	r3, [r3, #2]
 800e208:	706b      	strb	r3, [r5, #1]
 800e20a:	1cab      	adds	r3, r5, #2
 800e20c:	68a2      	ldr	r2, [r4, #8]
 800e20e:	7852      	ldrb	r2, [r2, #1]
 800e210:	f803 2b01 	strb.w	r2, [r3], #1
 800e214:	68a2      	ldr	r2, [r4, #8]
 800e216:	7812      	ldrb	r2, [r2, #0]
 800e218:	701a      	strb	r2, [r3, #0]
 800e21a:	e7b4      	b.n	800e186 <ucdr_deserialize_int32_t+0x72>
 800e21c:	4631      	mov	r1, r6
 800e21e:	463a      	mov	r2, r7
 800e220:	4628      	mov	r0, r5
 800e222:	f00d fe30 	bl	801be86 <memcpy>
 800e226:	68a1      	ldr	r1, [r4, #8]
 800e228:	464a      	mov	r2, r9
 800e22a:	19e8      	adds	r0, r5, r7
 800e22c:	f00d fe2b 	bl	801be86 <memcpy>
 800e230:	e7a9      	b.n	800e186 <ucdr_deserialize_int32_t+0x72>
 800e232:	bf00      	nop

0800e234 <ucdr_serialize_double>:
 800e234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e238:	2108      	movs	r1, #8
 800e23a:	b082      	sub	sp, #8
 800e23c:	4604      	mov	r4, r0
 800e23e:	ed8d 0b00 	vstr	d0, [sp]
 800e242:	f000 fb8d 	bl	800e960 <ucdr_buffer_alignment>
 800e246:	4601      	mov	r1, r0
 800e248:	4620      	mov	r0, r4
 800e24a:	7d67      	ldrb	r7, [r4, #21]
 800e24c:	f000 fbcc 	bl	800e9e8 <ucdr_advance_buffer>
 800e250:	2108      	movs	r1, #8
 800e252:	4620      	mov	r0, r4
 800e254:	f000 fb24 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d14e      	bne.n	800e2fa <ucdr_serialize_double+0xc6>
 800e25c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e260:	42ab      	cmp	r3, r5
 800e262:	d945      	bls.n	800e2f0 <ucdr_serialize_double+0xbc>
 800e264:	1b5e      	subs	r6, r3, r5
 800e266:	60a3      	str	r3, [r4, #8]
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	f1c6 0808 	rsb	r8, r6, #8
 800e26e:	4433      	add	r3, r6
 800e270:	6123      	str	r3, [r4, #16]
 800e272:	4641      	mov	r1, r8
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fb1f 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d074      	beq.n	800e368 <ucdr_serialize_double+0x134>
 800e27e:	7d23      	ldrb	r3, [r4, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	f000 809b 	beq.w	800e3bc <ucdr_serialize_double+0x188>
 800e286:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e28a:	702b      	strb	r3, [r5, #0]
 800e28c:	2e00      	cmp	r6, #0
 800e28e:	d078      	beq.n	800e382 <ucdr_serialize_double+0x14e>
 800e290:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e294:	706b      	strb	r3, [r5, #1]
 800e296:	2e01      	cmp	r6, #1
 800e298:	d077      	beq.n	800e38a <ucdr_serialize_double+0x156>
 800e29a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e29e:	70ab      	strb	r3, [r5, #2]
 800e2a0:	2e02      	cmp	r6, #2
 800e2a2:	d076      	beq.n	800e392 <ucdr_serialize_double+0x15e>
 800e2a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e2a8:	70eb      	strb	r3, [r5, #3]
 800e2aa:	2e03      	cmp	r6, #3
 800e2ac:	d075      	beq.n	800e39a <ucdr_serialize_double+0x166>
 800e2ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e2b2:	712b      	strb	r3, [r5, #4]
 800e2b4:	2e04      	cmp	r6, #4
 800e2b6:	d074      	beq.n	800e3a2 <ucdr_serialize_double+0x16e>
 800e2b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e2bc:	716b      	strb	r3, [r5, #5]
 800e2be:	2e05      	cmp	r6, #5
 800e2c0:	d073      	beq.n	800e3aa <ucdr_serialize_double+0x176>
 800e2c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e2c6:	71ab      	strb	r3, [r5, #6]
 800e2c8:	2e06      	cmp	r6, #6
 800e2ca:	d072      	beq.n	800e3b2 <ucdr_serialize_double+0x17e>
 800e2cc:	f89d 3000 	ldrb.w	r3, [sp]
 800e2d0:	71eb      	strb	r3, [r5, #7]
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	68a2      	ldr	r2, [r4, #8]
 800e2d6:	7da0      	ldrb	r0, [r4, #22]
 800e2d8:	3308      	adds	r3, #8
 800e2da:	1b9e      	subs	r6, r3, r6
 800e2dc:	4442      	add	r2, r8
 800e2de:	2308      	movs	r3, #8
 800e2e0:	f080 0001 	eor.w	r0, r0, #1
 800e2e4:	60a2      	str	r2, [r4, #8]
 800e2e6:	6126      	str	r6, [r4, #16]
 800e2e8:	7563      	strb	r3, [r4, #21]
 800e2ea:	b002      	add	sp, #8
 800e2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f0:	2108      	movs	r1, #8
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 fae0 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e2f8:	b350      	cbz	r0, 800e350 <ucdr_serialize_double+0x11c>
 800e2fa:	7d23      	ldrb	r3, [r4, #20]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d02d      	beq.n	800e35c <ucdr_serialize_double+0x128>
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e306:	701a      	strb	r2, [r3, #0]
 800e308:	68a3      	ldr	r3, [r4, #8]
 800e30a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e30e:	705a      	strb	r2, [r3, #1]
 800e310:	68a3      	ldr	r3, [r4, #8]
 800e312:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e316:	709a      	strb	r2, [r3, #2]
 800e318:	68a3      	ldr	r3, [r4, #8]
 800e31a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e31e:	70da      	strb	r2, [r3, #3]
 800e320:	68a3      	ldr	r3, [r4, #8]
 800e322:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e326:	711a      	strb	r2, [r3, #4]
 800e328:	68a3      	ldr	r3, [r4, #8]
 800e32a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e32e:	715a      	strb	r2, [r3, #5]
 800e330:	68a3      	ldr	r3, [r4, #8]
 800e332:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e336:	719a      	strb	r2, [r3, #6]
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	f89d 2000 	ldrb.w	r2, [sp]
 800e33e:	71da      	strb	r2, [r3, #7]
 800e340:	68a2      	ldr	r2, [r4, #8]
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	3208      	adds	r2, #8
 800e346:	3308      	adds	r3, #8
 800e348:	2108      	movs	r1, #8
 800e34a:	60a2      	str	r2, [r4, #8]
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	7561      	strb	r1, [r4, #21]
 800e350:	7da0      	ldrb	r0, [r4, #22]
 800e352:	f080 0001 	eor.w	r0, r0, #1
 800e356:	b002      	add	sp, #8
 800e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35c:	466b      	mov	r3, sp
 800e35e:	cb03      	ldmia	r3!, {r0, r1}
 800e360:	68a3      	ldr	r3, [r4, #8]
 800e362:	6018      	str	r0, [r3, #0]
 800e364:	6059      	str	r1, [r3, #4]
 800e366:	e7eb      	b.n	800e340 <ucdr_serialize_double+0x10c>
 800e368:	68a2      	ldr	r2, [r4, #8]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	7da0      	ldrb	r0, [r4, #22]
 800e36e:	7567      	strb	r7, [r4, #21]
 800e370:	1b92      	subs	r2, r2, r6
 800e372:	1b9b      	subs	r3, r3, r6
 800e374:	f080 0001 	eor.w	r0, r0, #1
 800e378:	60a2      	str	r2, [r4, #8]
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	b002      	add	sp, #8
 800e37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e382:	68a3      	ldr	r3, [r4, #8]
 800e384:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e388:	701a      	strb	r2, [r3, #0]
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e390:	701a      	strb	r2, [r3, #0]
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e3a0:	701a      	strb	r2, [r3, #0]
 800e3a2:	68a3      	ldr	r3, [r4, #8]
 800e3a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	68a3      	ldr	r3, [r4, #8]
 800e3ac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e3b0:	701a      	strb	r2, [r3, #0]
 800e3b2:	68a3      	ldr	r3, [r4, #8]
 800e3b4:	f89d 2000 	ldrb.w	r2, [sp]
 800e3b8:	701a      	strb	r2, [r3, #0]
 800e3ba:	e78a      	b.n	800e2d2 <ucdr_serialize_double+0x9e>
 800e3bc:	4628      	mov	r0, r5
 800e3be:	466d      	mov	r5, sp
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4632      	mov	r2, r6
 800e3c4:	f00d fd5f 	bl	801be86 <memcpy>
 800e3c8:	68a0      	ldr	r0, [r4, #8]
 800e3ca:	4642      	mov	r2, r8
 800e3cc:	19a9      	adds	r1, r5, r6
 800e3ce:	f00d fd5a 	bl	801be86 <memcpy>
 800e3d2:	e77e      	b.n	800e2d2 <ucdr_serialize_double+0x9e>

0800e3d4 <ucdr_serialize_endian_double>:
 800e3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3d8:	460e      	mov	r6, r1
 800e3da:	b083      	sub	sp, #12
 800e3dc:	2108      	movs	r1, #8
 800e3de:	4604      	mov	r4, r0
 800e3e0:	ed8d 0b00 	vstr	d0, [sp]
 800e3e4:	f000 fabc 	bl	800e960 <ucdr_buffer_alignment>
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e3f0:	f000 fafa 	bl	800e9e8 <ucdr_advance_buffer>
 800e3f4:	2108      	movs	r1, #8
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f000 fa52 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d14d      	bne.n	800e49c <ucdr_serialize_endian_double+0xc8>
 800e400:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e404:	42bd      	cmp	r5, r7
 800e406:	d944      	bls.n	800e492 <ucdr_serialize_endian_double+0xbe>
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	60a5      	str	r5, [r4, #8]
 800e40c:	1bed      	subs	r5, r5, r7
 800e40e:	442b      	add	r3, r5
 800e410:	f1c5 0908 	rsb	r9, r5, #8
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	4649      	mov	r1, r9
 800e418:	4620      	mov	r0, r4
 800e41a:	f000 fa4d 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d072      	beq.n	800e508 <ucdr_serialize_endian_double+0x134>
 800e422:	2e01      	cmp	r6, #1
 800e424:	f000 809b 	beq.w	800e55e <ucdr_serialize_endian_double+0x18a>
 800e428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e42c:	703b      	strb	r3, [r7, #0]
 800e42e:	2d00      	cmp	r5, #0
 800e430:	d078      	beq.n	800e524 <ucdr_serialize_endian_double+0x150>
 800e432:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e436:	707b      	strb	r3, [r7, #1]
 800e438:	2d01      	cmp	r5, #1
 800e43a:	d077      	beq.n	800e52c <ucdr_serialize_endian_double+0x158>
 800e43c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e440:	70bb      	strb	r3, [r7, #2]
 800e442:	2d02      	cmp	r5, #2
 800e444:	d076      	beq.n	800e534 <ucdr_serialize_endian_double+0x160>
 800e446:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e44a:	70fb      	strb	r3, [r7, #3]
 800e44c:	2d03      	cmp	r5, #3
 800e44e:	d075      	beq.n	800e53c <ucdr_serialize_endian_double+0x168>
 800e450:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e454:	713b      	strb	r3, [r7, #4]
 800e456:	2d04      	cmp	r5, #4
 800e458:	d074      	beq.n	800e544 <ucdr_serialize_endian_double+0x170>
 800e45a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e45e:	717b      	strb	r3, [r7, #5]
 800e460:	2d05      	cmp	r5, #5
 800e462:	d073      	beq.n	800e54c <ucdr_serialize_endian_double+0x178>
 800e464:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e468:	71bb      	strb	r3, [r7, #6]
 800e46a:	2d06      	cmp	r5, #6
 800e46c:	d072      	beq.n	800e554 <ucdr_serialize_endian_double+0x180>
 800e46e:	f89d 3000 	ldrb.w	r3, [sp]
 800e472:	71fb      	strb	r3, [r7, #7]
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	68a2      	ldr	r2, [r4, #8]
 800e478:	7da0      	ldrb	r0, [r4, #22]
 800e47a:	3308      	adds	r3, #8
 800e47c:	1b5d      	subs	r5, r3, r5
 800e47e:	444a      	add	r2, r9
 800e480:	2308      	movs	r3, #8
 800e482:	f080 0001 	eor.w	r0, r0, #1
 800e486:	60a2      	str	r2, [r4, #8]
 800e488:	6125      	str	r5, [r4, #16]
 800e48a:	7563      	strb	r3, [r4, #21]
 800e48c:	b003      	add	sp, #12
 800e48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e492:	2108      	movs	r1, #8
 800e494:	4620      	mov	r0, r4
 800e496:	f000 fa0f 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e49a:	b348      	cbz	r0, 800e4f0 <ucdr_serialize_endian_double+0x11c>
 800e49c:	2e01      	cmp	r6, #1
 800e49e:	d02d      	beq.n	800e4fc <ucdr_serialize_endian_double+0x128>
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e4a6:	701a      	strb	r2, [r3, #0]
 800e4a8:	68a3      	ldr	r3, [r4, #8]
 800e4aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4ae:	705a      	strb	r2, [r3, #1]
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e4b6:	709a      	strb	r2, [r3, #2]
 800e4b8:	68a3      	ldr	r3, [r4, #8]
 800e4ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4be:	70da      	strb	r2, [r3, #3]
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e4c6:	711a      	strb	r2, [r3, #4]
 800e4c8:	68a3      	ldr	r3, [r4, #8]
 800e4ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e4ce:	715a      	strb	r2, [r3, #5]
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e4d6:	719a      	strb	r2, [r3, #6]
 800e4d8:	68a3      	ldr	r3, [r4, #8]
 800e4da:	f89d 2000 	ldrb.w	r2, [sp]
 800e4de:	71da      	strb	r2, [r3, #7]
 800e4e0:	68a2      	ldr	r2, [r4, #8]
 800e4e2:	6923      	ldr	r3, [r4, #16]
 800e4e4:	3208      	adds	r2, #8
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	2108      	movs	r1, #8
 800e4ea:	60a2      	str	r2, [r4, #8]
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	7561      	strb	r1, [r4, #21]
 800e4f0:	7da0      	ldrb	r0, [r4, #22]
 800e4f2:	f080 0001 	eor.w	r0, r0, #1
 800e4f6:	b003      	add	sp, #12
 800e4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4fc:	466b      	mov	r3, sp
 800e4fe:	cb03      	ldmia	r3!, {r0, r1}
 800e500:	68a3      	ldr	r3, [r4, #8]
 800e502:	6018      	str	r0, [r3, #0]
 800e504:	6059      	str	r1, [r3, #4]
 800e506:	e7eb      	b.n	800e4e0 <ucdr_serialize_endian_double+0x10c>
 800e508:	68a2      	ldr	r2, [r4, #8]
 800e50a:	6923      	ldr	r3, [r4, #16]
 800e50c:	7da0      	ldrb	r0, [r4, #22]
 800e50e:	f884 8015 	strb.w	r8, [r4, #21]
 800e512:	1b52      	subs	r2, r2, r5
 800e514:	1b5b      	subs	r3, r3, r5
 800e516:	f080 0001 	eor.w	r0, r0, #1
 800e51a:	60a2      	str	r2, [r4, #8]
 800e51c:	6123      	str	r3, [r4, #16]
 800e51e:	b003      	add	sp, #12
 800e520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e524:	68a3      	ldr	r3, [r4, #8]
 800e526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e52a:	701a      	strb	r2, [r3, #0]
 800e52c:	68a3      	ldr	r3, [r4, #8]
 800e52e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e532:	701a      	strb	r2, [r3, #0]
 800e534:	68a3      	ldr	r3, [r4, #8]
 800e536:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	68a3      	ldr	r3, [r4, #8]
 800e53e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e542:	701a      	strb	r2, [r3, #0]
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e54a:	701a      	strb	r2, [r3, #0]
 800e54c:	68a3      	ldr	r3, [r4, #8]
 800e54e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e552:	701a      	strb	r2, [r3, #0]
 800e554:	68a3      	ldr	r3, [r4, #8]
 800e556:	f89d 2000 	ldrb.w	r2, [sp]
 800e55a:	701a      	strb	r2, [r3, #0]
 800e55c:	e78a      	b.n	800e474 <ucdr_serialize_endian_double+0xa0>
 800e55e:	466e      	mov	r6, sp
 800e560:	4631      	mov	r1, r6
 800e562:	462a      	mov	r2, r5
 800e564:	4638      	mov	r0, r7
 800e566:	f00d fc8e 	bl	801be86 <memcpy>
 800e56a:	68a0      	ldr	r0, [r4, #8]
 800e56c:	464a      	mov	r2, r9
 800e56e:	1971      	adds	r1, r6, r5
 800e570:	f00d fc89 	bl	801be86 <memcpy>
 800e574:	e77e      	b.n	800e474 <ucdr_serialize_endian_double+0xa0>
 800e576:	bf00      	nop

0800e578 <ucdr_deserialize_double>:
 800e578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57c:	460d      	mov	r5, r1
 800e57e:	2108      	movs	r1, #8
 800e580:	4604      	mov	r4, r0
 800e582:	f000 f9ed 	bl	800e960 <ucdr_buffer_alignment>
 800e586:	4601      	mov	r1, r0
 800e588:	4620      	mov	r0, r4
 800e58a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e58e:	f000 fa2b 	bl	800e9e8 <ucdr_advance_buffer>
 800e592:	2108      	movs	r1, #8
 800e594:	4620      	mov	r0, r4
 800e596:	f000 f983 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d151      	bne.n	800e642 <ucdr_deserialize_double+0xca>
 800e59e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e5a2:	42be      	cmp	r6, r7
 800e5a4:	d948      	bls.n	800e638 <ucdr_deserialize_double+0xc0>
 800e5a6:	6923      	ldr	r3, [r4, #16]
 800e5a8:	60a6      	str	r6, [r4, #8]
 800e5aa:	1bf6      	subs	r6, r6, r7
 800e5ac:	4433      	add	r3, r6
 800e5ae:	f1c6 0808 	rsb	r8, r6, #8
 800e5b2:	6123      	str	r3, [r4, #16]
 800e5b4:	4641      	mov	r1, r8
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 f97e 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d06d      	beq.n	800e69c <ucdr_deserialize_double+0x124>
 800e5c0:	7d23      	ldrb	r3, [r4, #20]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	f000 8093 	beq.w	800e6ee <ucdr_deserialize_double+0x176>
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	702b      	strb	r3, [r5, #0]
 800e5cc:	2e00      	cmp	r6, #0
 800e5ce:	d072      	beq.n	800e6b6 <ucdr_deserialize_double+0x13e>
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	706b      	strb	r3, [r5, #1]
 800e5d4:	2e01      	cmp	r6, #1
 800e5d6:	f105 0302 	add.w	r3, r5, #2
 800e5da:	d070      	beq.n	800e6be <ucdr_deserialize_double+0x146>
 800e5dc:	797b      	ldrb	r3, [r7, #5]
 800e5de:	70ab      	strb	r3, [r5, #2]
 800e5e0:	2e02      	cmp	r6, #2
 800e5e2:	f105 0303 	add.w	r3, r5, #3
 800e5e6:	d06e      	beq.n	800e6c6 <ucdr_deserialize_double+0x14e>
 800e5e8:	793b      	ldrb	r3, [r7, #4]
 800e5ea:	70eb      	strb	r3, [r5, #3]
 800e5ec:	2e03      	cmp	r6, #3
 800e5ee:	f105 0304 	add.w	r3, r5, #4
 800e5f2:	d06c      	beq.n	800e6ce <ucdr_deserialize_double+0x156>
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	712b      	strb	r3, [r5, #4]
 800e5f8:	2e04      	cmp	r6, #4
 800e5fa:	f105 0305 	add.w	r3, r5, #5
 800e5fe:	d06a      	beq.n	800e6d6 <ucdr_deserialize_double+0x15e>
 800e600:	78bb      	ldrb	r3, [r7, #2]
 800e602:	716b      	strb	r3, [r5, #5]
 800e604:	2e05      	cmp	r6, #5
 800e606:	f105 0306 	add.w	r3, r5, #6
 800e60a:	d068      	beq.n	800e6de <ucdr_deserialize_double+0x166>
 800e60c:	787b      	ldrb	r3, [r7, #1]
 800e60e:	71ab      	strb	r3, [r5, #6]
 800e610:	2e06      	cmp	r6, #6
 800e612:	f105 0307 	add.w	r3, r5, #7
 800e616:	d066      	beq.n	800e6e6 <ucdr_deserialize_double+0x16e>
 800e618:	783b      	ldrb	r3, [r7, #0]
 800e61a:	71eb      	strb	r3, [r5, #7]
 800e61c:	6923      	ldr	r3, [r4, #16]
 800e61e:	68a2      	ldr	r2, [r4, #8]
 800e620:	7da0      	ldrb	r0, [r4, #22]
 800e622:	3308      	adds	r3, #8
 800e624:	1b9e      	subs	r6, r3, r6
 800e626:	2308      	movs	r3, #8
 800e628:	4442      	add	r2, r8
 800e62a:	7563      	strb	r3, [r4, #21]
 800e62c:	60a2      	str	r2, [r4, #8]
 800e62e:	6126      	str	r6, [r4, #16]
 800e630:	f080 0001 	eor.w	r0, r0, #1
 800e634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e638:	2108      	movs	r1, #8
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 f93c 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e640:	b310      	cbz	r0, 800e688 <ucdr_deserialize_double+0x110>
 800e642:	7d23      	ldrb	r3, [r4, #20]
 800e644:	2b01      	cmp	r3, #1
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	d023      	beq.n	800e692 <ucdr_deserialize_double+0x11a>
 800e64a:	79db      	ldrb	r3, [r3, #7]
 800e64c:	702b      	strb	r3, [r5, #0]
 800e64e:	68a3      	ldr	r3, [r4, #8]
 800e650:	799b      	ldrb	r3, [r3, #6]
 800e652:	706b      	strb	r3, [r5, #1]
 800e654:	68a3      	ldr	r3, [r4, #8]
 800e656:	795b      	ldrb	r3, [r3, #5]
 800e658:	70ab      	strb	r3, [r5, #2]
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	791b      	ldrb	r3, [r3, #4]
 800e65e:	70eb      	strb	r3, [r5, #3]
 800e660:	68a3      	ldr	r3, [r4, #8]
 800e662:	78db      	ldrb	r3, [r3, #3]
 800e664:	712b      	strb	r3, [r5, #4]
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	789b      	ldrb	r3, [r3, #2]
 800e66a:	716b      	strb	r3, [r5, #5]
 800e66c:	68a3      	ldr	r3, [r4, #8]
 800e66e:	785b      	ldrb	r3, [r3, #1]
 800e670:	71ab      	strb	r3, [r5, #6]
 800e672:	68a3      	ldr	r3, [r4, #8]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	71eb      	strb	r3, [r5, #7]
 800e678:	68a2      	ldr	r2, [r4, #8]
 800e67a:	6923      	ldr	r3, [r4, #16]
 800e67c:	3208      	adds	r2, #8
 800e67e:	3308      	adds	r3, #8
 800e680:	2108      	movs	r1, #8
 800e682:	60a2      	str	r2, [r4, #8]
 800e684:	6123      	str	r3, [r4, #16]
 800e686:	7561      	strb	r1, [r4, #21]
 800e688:	7da0      	ldrb	r0, [r4, #22]
 800e68a:	f080 0001 	eor.w	r0, r0, #1
 800e68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	606b      	str	r3, [r5, #4]
 800e698:	602a      	str	r2, [r5, #0]
 800e69a:	e7ed      	b.n	800e678 <ucdr_deserialize_double+0x100>
 800e69c:	68a2      	ldr	r2, [r4, #8]
 800e69e:	6923      	ldr	r3, [r4, #16]
 800e6a0:	7da0      	ldrb	r0, [r4, #22]
 800e6a2:	f884 9015 	strb.w	r9, [r4, #21]
 800e6a6:	1b92      	subs	r2, r2, r6
 800e6a8:	1b9b      	subs	r3, r3, r6
 800e6aa:	60a2      	str	r2, [r4, #8]
 800e6ac:	6123      	str	r3, [r4, #16]
 800e6ae:	f080 0001 	eor.w	r0, r0, #1
 800e6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	799b      	ldrb	r3, [r3, #6]
 800e6ba:	706b      	strb	r3, [r5, #1]
 800e6bc:	1cab      	adds	r3, r5, #2
 800e6be:	68a2      	ldr	r2, [r4, #8]
 800e6c0:	7952      	ldrb	r2, [r2, #5]
 800e6c2:	f803 2b01 	strb.w	r2, [r3], #1
 800e6c6:	68a2      	ldr	r2, [r4, #8]
 800e6c8:	7912      	ldrb	r2, [r2, #4]
 800e6ca:	f803 2b01 	strb.w	r2, [r3], #1
 800e6ce:	68a2      	ldr	r2, [r4, #8]
 800e6d0:	78d2      	ldrb	r2, [r2, #3]
 800e6d2:	f803 2b01 	strb.w	r2, [r3], #1
 800e6d6:	68a2      	ldr	r2, [r4, #8]
 800e6d8:	7892      	ldrb	r2, [r2, #2]
 800e6da:	f803 2b01 	strb.w	r2, [r3], #1
 800e6de:	68a2      	ldr	r2, [r4, #8]
 800e6e0:	7852      	ldrb	r2, [r2, #1]
 800e6e2:	f803 2b01 	strb.w	r2, [r3], #1
 800e6e6:	68a2      	ldr	r2, [r4, #8]
 800e6e8:	7812      	ldrb	r2, [r2, #0]
 800e6ea:	701a      	strb	r2, [r3, #0]
 800e6ec:	e796      	b.n	800e61c <ucdr_deserialize_double+0xa4>
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	4632      	mov	r2, r6
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f00d fbc7 	bl	801be86 <memcpy>
 800e6f8:	68a1      	ldr	r1, [r4, #8]
 800e6fa:	4642      	mov	r2, r8
 800e6fc:	19a8      	adds	r0, r5, r6
 800e6fe:	f00d fbc2 	bl	801be86 <memcpy>
 800e702:	e78b      	b.n	800e61c <ucdr_deserialize_double+0xa4>

0800e704 <ucdr_deserialize_endian_double>:
 800e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e708:	460f      	mov	r7, r1
 800e70a:	2108      	movs	r1, #8
 800e70c:	4604      	mov	r4, r0
 800e70e:	4615      	mov	r5, r2
 800e710:	f000 f926 	bl	800e960 <ucdr_buffer_alignment>
 800e714:	4601      	mov	r1, r0
 800e716:	4620      	mov	r0, r4
 800e718:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e71c:	f000 f964 	bl	800e9e8 <ucdr_advance_buffer>
 800e720:	2108      	movs	r1, #8
 800e722:	4620      	mov	r0, r4
 800e724:	f000 f8bc 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d159      	bne.n	800e7e0 <ucdr_deserialize_endian_double+0xdc>
 800e72c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800e730:	4546      	cmp	r6, r8
 800e732:	d950      	bls.n	800e7d6 <ucdr_deserialize_endian_double+0xd2>
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	60a6      	str	r6, [r4, #8]
 800e738:	eba6 0608 	sub.w	r6, r6, r8
 800e73c:	4433      	add	r3, r6
 800e73e:	f1c6 0a08 	rsb	sl, r6, #8
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	4651      	mov	r1, sl
 800e746:	4620      	mov	r0, r4
 800e748:	f000 f8b6 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d073      	beq.n	800e838 <ucdr_deserialize_endian_double+0x134>
 800e750:	2f01      	cmp	r7, #1
 800e752:	f000 809a 	beq.w	800e88a <ucdr_deserialize_endian_double+0x186>
 800e756:	f898 3007 	ldrb.w	r3, [r8, #7]
 800e75a:	702b      	strb	r3, [r5, #0]
 800e75c:	2e00      	cmp	r6, #0
 800e75e:	d078      	beq.n	800e852 <ucdr_deserialize_endian_double+0x14e>
 800e760:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e764:	706b      	strb	r3, [r5, #1]
 800e766:	2e01      	cmp	r6, #1
 800e768:	f105 0302 	add.w	r3, r5, #2
 800e76c:	d075      	beq.n	800e85a <ucdr_deserialize_endian_double+0x156>
 800e76e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800e772:	70ab      	strb	r3, [r5, #2]
 800e774:	2e02      	cmp	r6, #2
 800e776:	f105 0303 	add.w	r3, r5, #3
 800e77a:	d072      	beq.n	800e862 <ucdr_deserialize_endian_double+0x15e>
 800e77c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e780:	70eb      	strb	r3, [r5, #3]
 800e782:	2e03      	cmp	r6, #3
 800e784:	f105 0304 	add.w	r3, r5, #4
 800e788:	d06f      	beq.n	800e86a <ucdr_deserialize_endian_double+0x166>
 800e78a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e78e:	712b      	strb	r3, [r5, #4]
 800e790:	2e04      	cmp	r6, #4
 800e792:	f105 0305 	add.w	r3, r5, #5
 800e796:	d06c      	beq.n	800e872 <ucdr_deserialize_endian_double+0x16e>
 800e798:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e79c:	716b      	strb	r3, [r5, #5]
 800e79e:	2e05      	cmp	r6, #5
 800e7a0:	f105 0306 	add.w	r3, r5, #6
 800e7a4:	d069      	beq.n	800e87a <ucdr_deserialize_endian_double+0x176>
 800e7a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e7aa:	71ab      	strb	r3, [r5, #6]
 800e7ac:	2e06      	cmp	r6, #6
 800e7ae:	f105 0307 	add.w	r3, r5, #7
 800e7b2:	d066      	beq.n	800e882 <ucdr_deserialize_endian_double+0x17e>
 800e7b4:	f898 3000 	ldrb.w	r3, [r8]
 800e7b8:	71eb      	strb	r3, [r5, #7]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	68a2      	ldr	r2, [r4, #8]
 800e7be:	7da0      	ldrb	r0, [r4, #22]
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	1b9e      	subs	r6, r3, r6
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	4452      	add	r2, sl
 800e7c8:	7563      	strb	r3, [r4, #21]
 800e7ca:	60a2      	str	r2, [r4, #8]
 800e7cc:	6126      	str	r6, [r4, #16]
 800e7ce:	f080 0001 	eor.w	r0, r0, #1
 800e7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d6:	2108      	movs	r1, #8
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 f86d 	bl	800e8b8 <ucdr_check_final_buffer_behavior>
 800e7de:	b308      	cbz	r0, 800e824 <ucdr_deserialize_endian_double+0x120>
 800e7e0:	2f01      	cmp	r7, #1
 800e7e2:	68a3      	ldr	r3, [r4, #8]
 800e7e4:	d023      	beq.n	800e82e <ucdr_deserialize_endian_double+0x12a>
 800e7e6:	79db      	ldrb	r3, [r3, #7]
 800e7e8:	702b      	strb	r3, [r5, #0]
 800e7ea:	68a3      	ldr	r3, [r4, #8]
 800e7ec:	799b      	ldrb	r3, [r3, #6]
 800e7ee:	706b      	strb	r3, [r5, #1]
 800e7f0:	68a3      	ldr	r3, [r4, #8]
 800e7f2:	795b      	ldrb	r3, [r3, #5]
 800e7f4:	70ab      	strb	r3, [r5, #2]
 800e7f6:	68a3      	ldr	r3, [r4, #8]
 800e7f8:	791b      	ldrb	r3, [r3, #4]
 800e7fa:	70eb      	strb	r3, [r5, #3]
 800e7fc:	68a3      	ldr	r3, [r4, #8]
 800e7fe:	78db      	ldrb	r3, [r3, #3]
 800e800:	712b      	strb	r3, [r5, #4]
 800e802:	68a3      	ldr	r3, [r4, #8]
 800e804:	789b      	ldrb	r3, [r3, #2]
 800e806:	716b      	strb	r3, [r5, #5]
 800e808:	68a3      	ldr	r3, [r4, #8]
 800e80a:	785b      	ldrb	r3, [r3, #1]
 800e80c:	71ab      	strb	r3, [r5, #6]
 800e80e:	68a3      	ldr	r3, [r4, #8]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	71eb      	strb	r3, [r5, #7]
 800e814:	68a2      	ldr	r2, [r4, #8]
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	3208      	adds	r2, #8
 800e81a:	3308      	adds	r3, #8
 800e81c:	2108      	movs	r1, #8
 800e81e:	60a2      	str	r2, [r4, #8]
 800e820:	6123      	str	r3, [r4, #16]
 800e822:	7561      	strb	r1, [r4, #21]
 800e824:	7da0      	ldrb	r0, [r4, #22]
 800e826:	f080 0001 	eor.w	r0, r0, #1
 800e82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	606b      	str	r3, [r5, #4]
 800e834:	602a      	str	r2, [r5, #0]
 800e836:	e7ed      	b.n	800e814 <ucdr_deserialize_endian_double+0x110>
 800e838:	68a2      	ldr	r2, [r4, #8]
 800e83a:	6923      	ldr	r3, [r4, #16]
 800e83c:	7da0      	ldrb	r0, [r4, #22]
 800e83e:	f884 9015 	strb.w	r9, [r4, #21]
 800e842:	1b92      	subs	r2, r2, r6
 800e844:	1b9b      	subs	r3, r3, r6
 800e846:	60a2      	str	r2, [r4, #8]
 800e848:	6123      	str	r3, [r4, #16]
 800e84a:	f080 0001 	eor.w	r0, r0, #1
 800e84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	799b      	ldrb	r3, [r3, #6]
 800e856:	706b      	strb	r3, [r5, #1]
 800e858:	1cab      	adds	r3, r5, #2
 800e85a:	68a2      	ldr	r2, [r4, #8]
 800e85c:	7952      	ldrb	r2, [r2, #5]
 800e85e:	f803 2b01 	strb.w	r2, [r3], #1
 800e862:	68a2      	ldr	r2, [r4, #8]
 800e864:	7912      	ldrb	r2, [r2, #4]
 800e866:	f803 2b01 	strb.w	r2, [r3], #1
 800e86a:	68a2      	ldr	r2, [r4, #8]
 800e86c:	78d2      	ldrb	r2, [r2, #3]
 800e86e:	f803 2b01 	strb.w	r2, [r3], #1
 800e872:	68a2      	ldr	r2, [r4, #8]
 800e874:	7892      	ldrb	r2, [r2, #2]
 800e876:	f803 2b01 	strb.w	r2, [r3], #1
 800e87a:	68a2      	ldr	r2, [r4, #8]
 800e87c:	7852      	ldrb	r2, [r2, #1]
 800e87e:	f803 2b01 	strb.w	r2, [r3], #1
 800e882:	68a2      	ldr	r2, [r4, #8]
 800e884:	7812      	ldrb	r2, [r2, #0]
 800e886:	701a      	strb	r2, [r3, #0]
 800e888:	e797      	b.n	800e7ba <ucdr_deserialize_endian_double+0xb6>
 800e88a:	4641      	mov	r1, r8
 800e88c:	4632      	mov	r2, r6
 800e88e:	4628      	mov	r0, r5
 800e890:	f00d faf9 	bl	801be86 <memcpy>
 800e894:	68a1      	ldr	r1, [r4, #8]
 800e896:	4652      	mov	r2, sl
 800e898:	19a8      	adds	r0, r5, r6
 800e89a:	f00d faf4 	bl	801be86 <memcpy>
 800e89e:	e78c      	b.n	800e7ba <ucdr_deserialize_endian_double+0xb6>

0800e8a0 <ucdr_check_buffer_available_for>:
 800e8a0:	7d83      	ldrb	r3, [r0, #22]
 800e8a2:	b93b      	cbnz	r3, 800e8b4 <ucdr_check_buffer_available_for+0x14>
 800e8a4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e8a8:	4419      	add	r1, r3
 800e8aa:	4288      	cmp	r0, r1
 800e8ac:	bf34      	ite	cc
 800e8ae:	2000      	movcc	r0, #0
 800e8b0:	2001      	movcs	r0, #1
 800e8b2:	4770      	bx	lr
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	4770      	bx	lr

0800e8b8 <ucdr_check_final_buffer_behavior>:
 800e8b8:	7d83      	ldrb	r3, [r0, #22]
 800e8ba:	b943      	cbnz	r3, 800e8ce <ucdr_check_final_buffer_behavior+0x16>
 800e8bc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e8c0:	4291      	cmp	r1, r2
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	d205      	bcs.n	800e8d4 <ucdr_check_final_buffer_behavior+0x1c>
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	bd10      	pop	{r4, pc}
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	4770      	bx	lr
 800e8d4:	6982      	ldr	r2, [r0, #24]
 800e8d6:	b13a      	cbz	r2, 800e8e8 <ucdr_check_final_buffer_behavior+0x30>
 800e8d8:	69c1      	ldr	r1, [r0, #28]
 800e8da:	4790      	blx	r2
 800e8dc:	f080 0301 	eor.w	r3, r0, #1
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	75a0      	strb	r0, [r4, #22]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	bd10      	pop	{r4, pc}
 800e8e8:	2001      	movs	r0, #1
 800e8ea:	75a0      	strb	r0, [r4, #22]
 800e8ec:	e7fa      	b.n	800e8e4 <ucdr_check_final_buffer_behavior+0x2c>
 800e8ee:	bf00      	nop

0800e8f0 <ucdr_set_on_full_buffer_callback>:
 800e8f0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop

0800e8f8 <ucdr_init_buffer_origin_offset_endian>:
 800e8f8:	b410      	push	{r4}
 800e8fa:	9c01      	ldr	r4, [sp, #4]
 800e8fc:	6001      	str	r1, [r0, #0]
 800e8fe:	440a      	add	r2, r1
 800e900:	6042      	str	r2, [r0, #4]
 800e902:	190a      	adds	r2, r1, r4
 800e904:	441c      	add	r4, r3
 800e906:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e90a:	6082      	str	r2, [r0, #8]
 800e90c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e910:	7503      	strb	r3, [r0, #20]
 800e912:	2200      	movs	r2, #0
 800e914:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e91c:	7542      	strb	r2, [r0, #21]
 800e91e:	7582      	strb	r2, [r0, #22]
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <ucdr_init_buffer_origin_offset>:
 800e924:	b510      	push	{r4, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	9c04      	ldr	r4, [sp, #16]
 800e92a:	9400      	str	r4, [sp, #0]
 800e92c:	2401      	movs	r4, #1
 800e92e:	9401      	str	r4, [sp, #4]
 800e930:	f7ff ffe2 	bl	800e8f8 <ucdr_init_buffer_origin_offset_endian>
 800e934:	b002      	add	sp, #8
 800e936:	bd10      	pop	{r4, pc}

0800e938 <ucdr_init_buffer_origin>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	2400      	movs	r4, #0
 800e93e:	9400      	str	r4, [sp, #0]
 800e940:	f7ff fff0 	bl	800e924 <ucdr_init_buffer_origin_offset>
 800e944:	b002      	add	sp, #8
 800e946:	bd10      	pop	{r4, pc}

0800e948 <ucdr_init_buffer>:
 800e948:	2300      	movs	r3, #0
 800e94a:	f7ff bff5 	b.w	800e938 <ucdr_init_buffer_origin>
 800e94e:	bf00      	nop

0800e950 <ucdr_alignment>:
 800e950:	fbb0 f3f1 	udiv	r3, r0, r1
 800e954:	fb03 0011 	mls	r0, r3, r1, r0
 800e958:	1a08      	subs	r0, r1, r0
 800e95a:	3901      	subs	r1, #1
 800e95c:	4008      	ands	r0, r1
 800e95e:	4770      	bx	lr

0800e960 <ucdr_buffer_alignment>:
 800e960:	7d43      	ldrb	r3, [r0, #21]
 800e962:	428b      	cmp	r3, r1
 800e964:	d208      	bcs.n	800e978 <ucdr_buffer_alignment+0x18>
 800e966:	6900      	ldr	r0, [r0, #16]
 800e968:	fbb0 f3f1 	udiv	r3, r0, r1
 800e96c:	fb01 0013 	mls	r0, r1, r3, r0
 800e970:	1a08      	subs	r0, r1, r0
 800e972:	3901      	subs	r1, #1
 800e974:	4008      	ands	r0, r1
 800e976:	4770      	bx	lr
 800e978:	2000      	movs	r0, #0
 800e97a:	4770      	bx	lr

0800e97c <ucdr_align_to>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	f7ff ffed 	bl	800e960 <ucdr_buffer_alignment>
 800e986:	68a3      	ldr	r3, [r4, #8]
 800e988:	6921      	ldr	r1, [r4, #16]
 800e98a:	7565      	strb	r5, [r4, #21]
 800e98c:	181a      	adds	r2, r3, r0
 800e98e:	6863      	ldr	r3, [r4, #4]
 800e990:	4293      	cmp	r3, r2
 800e992:	4408      	add	r0, r1
 800e994:	bf28      	it	cs
 800e996:	4613      	movcs	r3, r2
 800e998:	6120      	str	r0, [r4, #16]
 800e99a:	60a3      	str	r3, [r4, #8]
 800e99c:	bd38      	pop	{r3, r4, r5, pc}
 800e99e:	bf00      	nop

0800e9a0 <ucdr_buffer_length>:
 800e9a0:	6882      	ldr	r2, [r0, #8]
 800e9a2:	6800      	ldr	r0, [r0, #0]
 800e9a4:	1a10      	subs	r0, r2, r0
 800e9a6:	4770      	bx	lr

0800e9a8 <ucdr_buffer_remaining>:
 800e9a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e9ac:	1a10      	subs	r0, r2, r0
 800e9ae:	4770      	bx	lr

0800e9b0 <ucdr_check_final_buffer_behavior_array>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	7d83      	ldrb	r3, [r0, #22]
 800e9b4:	b963      	cbnz	r3, 800e9d0 <ucdr_check_final_buffer_behavior_array+0x20>
 800e9b6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	4604      	mov	r4, r0
 800e9be:	460d      	mov	r5, r1
 800e9c0:	d308      	bcc.n	800e9d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e9c2:	b139      	cbz	r1, 800e9d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e9c4:	6983      	ldr	r3, [r0, #24]
 800e9c6:	b163      	cbz	r3, 800e9e2 <ucdr_check_final_buffer_behavior_array+0x32>
 800e9c8:	69c1      	ldr	r1, [r0, #28]
 800e9ca:	4798      	blx	r3
 800e9cc:	75a0      	strb	r0, [r4, #22]
 800e9ce:	b108      	cbz	r0, 800e9d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	bd38      	pop	{r3, r4, r5, pc}
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7ff ffe7 	bl	800e9a8 <ucdr_buffer_remaining>
 800e9da:	42a8      	cmp	r0, r5
 800e9dc:	bf28      	it	cs
 800e9de:	4628      	movcs	r0, r5
 800e9e0:	bd38      	pop	{r3, r4, r5, pc}
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	7583      	strb	r3, [r0, #22]
 800e9e6:	e7f3      	b.n	800e9d0 <ucdr_check_final_buffer_behavior_array+0x20>

0800e9e8 <ucdr_advance_buffer>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	460d      	mov	r5, r1
 800e9ee:	f7ff ff57 	bl	800e8a0 <ucdr_check_buffer_available_for>
 800e9f2:	b178      	cbz	r0, 800ea14 <ucdr_advance_buffer+0x2c>
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	68a2      	ldr	r2, [r4, #8]
 800e9f8:	442b      	add	r3, r5
 800e9fa:	6123      	str	r3, [r4, #16]
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	442a      	add	r2, r5
 800ea00:	7563      	strb	r3, [r4, #21]
 800ea02:	60a2      	str	r2, [r4, #8]
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	68a2      	ldr	r2, [r4, #8]
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	4402      	add	r2, r0
 800ea0c:	4403      	add	r3, r0
 800ea0e:	1a2d      	subs	r5, r5, r0
 800ea10:	60a2      	str	r2, [r4, #8]
 800ea12:	6123      	str	r3, [r4, #16]
 800ea14:	4629      	mov	r1, r5
 800ea16:	2201      	movs	r2, #1
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f7ff ffc9 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d1f1      	bne.n	800ea06 <ucdr_advance_buffer+0x1e>
 800ea22:	2301      	movs	r3, #1
 800ea24:	7563      	strb	r3, [r4, #21]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}

0800ea28 <rcl_get_zero_initialized_init_options>:
 800ea28:	2000      	movs	r0, #0
 800ea2a:	4770      	bx	lr

0800ea2c <rcl_init_options_init>:
 800ea2c:	b084      	sub	sp, #16
 800ea2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea30:	b097      	sub	sp, #92	@ 0x5c
 800ea32:	ae1d      	add	r6, sp, #116	@ 0x74
 800ea34:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d058      	beq.n	800eaee <rcl_init_options_init+0xc2>
 800ea3c:	6803      	ldr	r3, [r0, #0]
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b133      	cbz	r3, 800ea50 <rcl_init_options_init+0x24>
 800ea42:	2464      	movs	r4, #100	@ 0x64
 800ea44:	4620      	mov	r0, r4
 800ea46:	b017      	add	sp, #92	@ 0x5c
 800ea48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea4c:	b004      	add	sp, #16
 800ea4e:	4770      	bx	lr
 800ea50:	4630      	mov	r0, r6
 800ea52:	f001 f9cf 	bl	800fdf4 <rcutils_allocator_is_valid>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d049      	beq.n	800eaee <rcl_init_options_init+0xc2>
 800ea5a:	46b4      	mov	ip, r6
 800ea5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea60:	ac11      	add	r4, sp, #68	@ 0x44
 800ea62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea64:	f8dc 3000 	ldr.w	r3, [ip]
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ea6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea6e:	2050      	movs	r0, #80	@ 0x50
 800ea70:	4798      	blx	r3
 800ea72:	4604      	mov	r4, r0
 800ea74:	6028      	str	r0, [r5, #0]
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d03b      	beq.n	800eaf2 <rcl_init_options_init+0xc6>
 800ea7a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ea7e:	4686      	mov	lr, r0
 800ea80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea88:	f8dc 3000 	ldr.w	r3, [ip]
 800ea8c:	f8ce 3000 	str.w	r3, [lr]
 800ea90:	a802      	add	r0, sp, #8
 800ea92:	f001 fa41 	bl	800ff18 <rmw_get_zero_initialized_init_options>
 800ea96:	f10d 0e08 	add.w	lr, sp, #8
 800ea9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea9e:	f104 0c18 	add.w	ip, r4, #24
 800eaa2:	682f      	ldr	r7, [r5, #0]
 800eaa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eaac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eab0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eab8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eabc:	ac20      	add	r4, sp, #128	@ 0x80
 800eabe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eac6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eaca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800eace:	f107 0018 	add.w	r0, r7, #24
 800ead2:	f001 fa4f 	bl	800ff74 <rmw_init_options_init>
 800ead6:	4604      	mov	r4, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d0b3      	beq.n	800ea44 <rcl_init_options_init+0x18>
 800eadc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eade:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eae0:	6828      	ldr	r0, [r5, #0]
 800eae2:	4798      	blx	r3
 800eae4:	4620      	mov	r0, r4
 800eae6:	f007 f9a5 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 800eaea:	4604      	mov	r4, r0
 800eaec:	e7aa      	b.n	800ea44 <rcl_init_options_init+0x18>
 800eaee:	240b      	movs	r4, #11
 800eaf0:	e7a8      	b.n	800ea44 <rcl_init_options_init+0x18>
 800eaf2:	240a      	movs	r4, #10
 800eaf4:	e7a6      	b.n	800ea44 <rcl_init_options_init+0x18>
 800eaf6:	bf00      	nop

0800eaf8 <rcl_init_options_fini>:
 800eaf8:	b530      	push	{r4, r5, lr}
 800eafa:	b087      	sub	sp, #28
 800eafc:	b1f0      	cbz	r0, 800eb3c <rcl_init_options_fini+0x44>
 800eafe:	6803      	ldr	r3, [r0, #0]
 800eb00:	4604      	mov	r4, r0
 800eb02:	b1db      	cbz	r3, 800eb3c <rcl_init_options_fini+0x44>
 800eb04:	469c      	mov	ip, r3
 800eb06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb0a:	f10d 0e04 	add.w	lr, sp, #4
 800eb0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb12:	f8dc 3000 	ldr.w	r3, [ip]
 800eb16:	f8ce 3000 	str.w	r3, [lr]
 800eb1a:	a801      	add	r0, sp, #4
 800eb1c:	f001 f96a 	bl	800fdf4 <rcutils_allocator_is_valid>
 800eb20:	b160      	cbz	r0, 800eb3c <rcl_init_options_fini+0x44>
 800eb22:	6820      	ldr	r0, [r4, #0]
 800eb24:	3018      	adds	r0, #24
 800eb26:	f001 fad5 	bl	80100d4 <rmw_init_options_fini>
 800eb2a:	4605      	mov	r5, r0
 800eb2c:	b950      	cbnz	r0, 800eb44 <rcl_init_options_fini+0x4c>
 800eb2e:	6820      	ldr	r0, [r4, #0]
 800eb30:	9b02      	ldr	r3, [sp, #8]
 800eb32:	9905      	ldr	r1, [sp, #20]
 800eb34:	4798      	blx	r3
 800eb36:	4628      	mov	r0, r5
 800eb38:	b007      	add	sp, #28
 800eb3a:	bd30      	pop	{r4, r5, pc}
 800eb3c:	250b      	movs	r5, #11
 800eb3e:	4628      	mov	r0, r5
 800eb40:	b007      	add	sp, #28
 800eb42:	bd30      	pop	{r4, r5, pc}
 800eb44:	f007 f976 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 800eb48:	4605      	mov	r5, r0
 800eb4a:	e7f8      	b.n	800eb3e <rcl_init_options_fini+0x46>

0800eb4c <rcl_init_options_copy>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	b094      	sub	sp, #80	@ 0x50
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d058      	beq.n	800ec08 <rcl_init_options_copy+0xbc>
 800eb56:	4604      	mov	r4, r0
 800eb58:	6800      	ldr	r0, [r0, #0]
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d054      	beq.n	800ec08 <rcl_init_options_copy+0xbc>
 800eb5e:	460e      	mov	r6, r1
 800eb60:	f001 f948 	bl	800fdf4 <rcutils_allocator_is_valid>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d04f      	beq.n	800ec08 <rcl_init_options_copy+0xbc>
 800eb68:	2e00      	cmp	r6, #0
 800eb6a:	d04d      	beq.n	800ec08 <rcl_init_options_copy+0xbc>
 800eb6c:	6833      	ldr	r3, [r6, #0]
 800eb6e:	b123      	cbz	r3, 800eb7a <rcl_init_options_copy+0x2e>
 800eb70:	2464      	movs	r4, #100	@ 0x64
 800eb72:	4620      	mov	r0, r4
 800eb74:	b014      	add	sp, #80	@ 0x50
 800eb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7a:	6827      	ldr	r7, [r4, #0]
 800eb7c:	46bc      	mov	ip, r7
 800eb7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb82:	ad0f      	add	r5, sp, #60	@ 0x3c
 800eb84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb86:	f8dc 3000 	ldr.w	r3, [ip]
 800eb8a:	f8d7 8000 	ldr.w	r8, [r7]
 800eb8e:	602b      	str	r3, [r5, #0]
 800eb90:	4619      	mov	r1, r3
 800eb92:	2050      	movs	r0, #80	@ 0x50
 800eb94:	47c0      	blx	r8
 800eb96:	4605      	mov	r5, r0
 800eb98:	6030      	str	r0, [r6, #0]
 800eb9a:	b3d0      	cbz	r0, 800ec12 <rcl_init_options_copy+0xc6>
 800eb9c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800eba0:	4686      	mov	lr, r0
 800eba2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eba6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ebaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ebae:	f8ce 3000 	str.w	r3, [lr]
 800ebb2:	4668      	mov	r0, sp
 800ebb4:	f001 f9b0 	bl	800ff18 <rmw_get_zero_initialized_init_options>
 800ebb8:	46ee      	mov	lr, sp
 800ebba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebbe:	f105 0c18 	add.w	ip, r5, #24
 800ebc2:	6824      	ldr	r4, [r4, #0]
 800ebc4:	6835      	ldr	r5, [r6, #0]
 800ebc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebda:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ebde:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ebe2:	f104 0018 	add.w	r0, r4, #24
 800ebe6:	f105 0118 	add.w	r1, r5, #24
 800ebea:	f001 fa2b 	bl	8010044 <rmw_init_options_copy>
 800ebee:	4604      	mov	r4, r0
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d0be      	beq.n	800eb72 <rcl_init_options_copy+0x26>
 800ebf4:	f001 f90c 	bl	800fe10 <rcutils_get_error_string>
 800ebf8:	f001 f922 	bl	800fe40 <rcutils_reset_error>
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f7ff ff7b 	bl	800eaf8 <rcl_init_options_fini>
 800ec02:	b140      	cbz	r0, 800ec16 <rcl_init_options_copy+0xca>
 800ec04:	4604      	mov	r4, r0
 800ec06:	e7b4      	b.n	800eb72 <rcl_init_options_copy+0x26>
 800ec08:	240b      	movs	r4, #11
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	b014      	add	sp, #80	@ 0x50
 800ec0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec12:	240a      	movs	r4, #10
 800ec14:	e7ad      	b.n	800eb72 <rcl_init_options_copy+0x26>
 800ec16:	4620      	mov	r0, r4
 800ec18:	b014      	add	sp, #80	@ 0x50
 800ec1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	f007 b909 	b.w	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 800ec22:	bf00      	nop

0800ec24 <rcl_init_options_set_domain_id>:
 800ec24:	b120      	cbz	r0, 800ec30 <rcl_init_options_set_domain_id+0xc>
 800ec26:	6803      	ldr	r3, [r0, #0]
 800ec28:	b113      	cbz	r3, 800ec30 <rcl_init_options_set_domain_id+0xc>
 800ec2a:	6259      	str	r1, [r3, #36]	@ 0x24
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	4770      	bx	lr
 800ec30:	200b      	movs	r0, #11
 800ec32:	4770      	bx	lr

0800ec34 <rcl_get_zero_initialized_publisher>:
 800ec34:	4b01      	ldr	r3, [pc, #4]	@ (800ec3c <rcl_get_zero_initialized_publisher+0x8>)
 800ec36:	6818      	ldr	r0, [r3, #0]
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	0801d94c 	.word	0x0801d94c

0800ec40 <rcl_publisher_init>:
 800ec40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	b088      	sub	sp, #32
 800ec46:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ec48:	2d00      	cmp	r5, #0
 800ec4a:	d069      	beq.n	800ed20 <rcl_publisher_init+0xe0>
 800ec4c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ec50:	4604      	mov	r4, r0
 800ec52:	4648      	mov	r0, r9
 800ec54:	460e      	mov	r6, r1
 800ec56:	4690      	mov	r8, r2
 800ec58:	461f      	mov	r7, r3
 800ec5a:	f001 f8cb 	bl	800fdf4 <rcutils_allocator_is_valid>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d05e      	beq.n	800ed20 <rcl_publisher_init+0xe0>
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d05c      	beq.n	800ed20 <rcl_publisher_init+0xe0>
 800ec66:	f8d4 a000 	ldr.w	sl, [r4]
 800ec6a:	f1ba 0f00 	cmp.w	sl, #0
 800ec6e:	d004      	beq.n	800ec7a <rcl_publisher_init+0x3a>
 800ec70:	2764      	movs	r7, #100	@ 0x64
 800ec72:	4638      	mov	r0, r7
 800ec74:	b008      	add	sp, #32
 800ec76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f007 fbd4 	bl	8016428 <rcl_node_is_valid>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d052      	beq.n	800ed2a <rcl_publisher_init+0xea>
 800ec84:	f1b8 0f00 	cmp.w	r8, #0
 800ec88:	d04a      	beq.n	800ed20 <rcl_publisher_init+0xe0>
 800ec8a:	2f00      	cmp	r7, #0
 800ec8c:	d048      	beq.n	800ed20 <rcl_publisher_init+0xe0>
 800ec8e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ec92:	aa07      	add	r2, sp, #28
 800ec94:	9205      	str	r2, [sp, #20]
 800ec96:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ec9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ec9e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eca2:	f8cd a01c 	str.w	sl, [sp, #28]
 800eca6:	4639      	mov	r1, r7
 800eca8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ecac:	4630      	mov	r0, r6
 800ecae:	f007 fc0f 	bl	80164d0 <rcl_node_resolve_name>
 800ecb2:	4607      	mov	r7, r0
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d14f      	bne.n	800ed58 <rcl_publisher_init+0x118>
 800ecb8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ecba:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ecbc:	20c8      	movs	r0, #200	@ 0xc8
 800ecbe:	4798      	blx	r3
 800ecc0:	6020      	str	r0, [r4, #0]
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d04e      	beq.n	800ed64 <rcl_publisher_init+0x124>
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f007 fbd0 	bl	801646c <rcl_node_get_rmw_handle>
 800eccc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	9a07      	ldr	r2, [sp, #28]
 800ecd4:	6827      	ldr	r7, [r4, #0]
 800ecd6:	462b      	mov	r3, r5
 800ecd8:	4641      	mov	r1, r8
 800ecda:	f001 fd23 	bl	8010724 <rmw_create_publisher>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ece4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ece8:	b370      	cbz	r0, 800ed48 <rcl_publisher_init+0x108>
 800ecea:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ecee:	f001 fdf7 	bl	80108e0 <rmw_publisher_get_actual_qos>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	b9d0      	cbnz	r0, 800ed2e <rcl_publisher_init+0xee>
 800ecf8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ecfc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ed00:	4629      	mov	r1, r5
 800ed02:	2270      	movs	r2, #112	@ 0x70
 800ed04:	4618      	mov	r0, r3
 800ed06:	f00d f8be 	bl	801be86 <memcpy>
 800ed0a:	6832      	ldr	r2, [r6, #0]
 800ed0c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ed10:	9807      	ldr	r0, [sp, #28]
 800ed12:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ed14:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ed16:	4798      	blx	r3
 800ed18:	4638      	mov	r0, r7
 800ed1a:	b008      	add	sp, #32
 800ed1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed20:	270b      	movs	r7, #11
 800ed22:	4638      	mov	r0, r7
 800ed24:	b008      	add	sp, #32
 800ed26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed2a:	27c8      	movs	r7, #200	@ 0xc8
 800ed2c:	e7a1      	b.n	800ec72 <rcl_publisher_init+0x32>
 800ed2e:	b18b      	cbz	r3, 800ed54 <rcl_publisher_init+0x114>
 800ed30:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ed34:	b142      	cbz	r2, 800ed48 <rcl_publisher_init+0x108>
 800ed36:	4630      	mov	r0, r6
 800ed38:	f007 fb98 	bl	801646c <rcl_node_get_rmw_handle>
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ed42:	f001 fddd 	bl	8010900 <rmw_destroy_publisher>
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ed4a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	4790      	blx	r2
 800ed50:	2300      	movs	r3, #0
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	2701      	movs	r7, #1
 800ed56:	e7db      	b.n	800ed10 <rcl_publisher_init+0xd0>
 800ed58:	2867      	cmp	r0, #103	@ 0x67
 800ed5a:	d0d9      	beq.n	800ed10 <rcl_publisher_init+0xd0>
 800ed5c:	2869      	cmp	r0, #105	@ 0x69
 800ed5e:	d003      	beq.n	800ed68 <rcl_publisher_init+0x128>
 800ed60:	280a      	cmp	r0, #10
 800ed62:	d1f7      	bne.n	800ed54 <rcl_publisher_init+0x114>
 800ed64:	270a      	movs	r7, #10
 800ed66:	e7d3      	b.n	800ed10 <rcl_publisher_init+0xd0>
 800ed68:	2767      	movs	r7, #103	@ 0x67
 800ed6a:	e7d1      	b.n	800ed10 <rcl_publisher_init+0xd0>

0800ed6c <rcl_publisher_get_default_options>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	4d14      	ldr	r5, [pc, #80]	@ (800edc0 <rcl_publisher_get_default_options+0x54>)
 800ed70:	4914      	ldr	r1, [pc, #80]	@ (800edc4 <rcl_publisher_get_default_options+0x58>)
 800ed72:	b088      	sub	sp, #32
 800ed74:	4604      	mov	r4, r0
 800ed76:	2250      	movs	r2, #80	@ 0x50
 800ed78:	4628      	mov	r0, r5
 800ed7a:	f00d f884 	bl	801be86 <memcpy>
 800ed7e:	a802      	add	r0, sp, #8
 800ed80:	f001 f82a 	bl	800fdd8 <rcutils_get_default_allocator>
 800ed84:	f10d 0c08 	add.w	ip, sp, #8
 800ed88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed8c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ed90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed94:	466e      	mov	r6, sp
 800ed96:	f8dc 3000 	ldr.w	r3, [ip]
 800ed9a:	f8ce 3000 	str.w	r3, [lr]
 800ed9e:	4630      	mov	r0, r6
 800eda0:	f001 f8ca 	bl	800ff38 <rmw_get_default_publisher_options>
 800eda4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eda8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800edac:	e883 0003 	stmia.w	r3, {r0, r1}
 800edb0:	2270      	movs	r2, #112	@ 0x70
 800edb2:	4629      	mov	r1, r5
 800edb4:	4620      	mov	r0, r4
 800edb6:	f00d f866 	bl	801be86 <memcpy>
 800edba:	4620      	mov	r0, r4
 800edbc:	b008      	add	sp, #32
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	20006e68 	.word	0x20006e68
 800edc4:	0801d950 	.word	0x0801d950

0800edc8 <rcl_publish>:
 800edc8:	b1f8      	cbz	r0, 800ee0a <rcl_publish+0x42>
 800edca:	6803      	ldr	r3, [r0, #0]
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4604      	mov	r4, r0
 800edd0:	b1b3      	cbz	r3, 800ee00 <rcl_publish+0x38>
 800edd2:	4616      	mov	r6, r2
 800edd4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800edd8:	b192      	cbz	r2, 800ee00 <rcl_publish+0x38>
 800edda:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800edde:	460d      	mov	r5, r1
 800ede0:	f007 f846 	bl	8015e70 <rcl_context_is_valid>
 800ede4:	b160      	cbz	r0, 800ee00 <rcl_publish+0x38>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800edec:	b140      	cbz	r0, 800ee00 <rcl_publish+0x38>
 800edee:	b155      	cbz	r5, 800ee06 <rcl_publish+0x3e>
 800edf0:	4632      	mov	r2, r6
 800edf2:	4629      	mov	r1, r5
 800edf4:	f001 fc36 	bl	8010664 <rmw_publish>
 800edf8:	3800      	subs	r0, #0
 800edfa:	bf18      	it	ne
 800edfc:	2001      	movne	r0, #1
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
 800ee06:	200b      	movs	r0, #11
 800ee08:	bd70      	pop	{r4, r5, r6, pc}
 800ee0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ee0e:	4770      	bx	lr

0800ee10 <rcl_publisher_is_valid>:
 800ee10:	b1a0      	cbz	r0, 800ee3c <rcl_publisher_is_valid+0x2c>
 800ee12:	6803      	ldr	r3, [r0, #0]
 800ee14:	b510      	push	{r4, lr}
 800ee16:	4604      	mov	r4, r0
 800ee18:	b173      	cbz	r3, 800ee38 <rcl_publisher_is_valid+0x28>
 800ee1a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ee1e:	b15a      	cbz	r2, 800ee38 <rcl_publisher_is_valid+0x28>
 800ee20:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ee24:	f007 f824 	bl	8015e70 <rcl_context_is_valid>
 800ee28:	b130      	cbz	r0, 800ee38 <rcl_publisher_is_valid+0x28>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ee30:	3800      	subs	r0, #0
 800ee32:	bf18      	it	ne
 800ee34:	2001      	movne	r0, #1
 800ee36:	bd10      	pop	{r4, pc}
 800ee38:	2000      	movs	r0, #0
 800ee3a:	bd10      	pop	{r4, pc}
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	4770      	bx	lr

0800ee40 <rcl_publisher_is_valid_except_context>:
 800ee40:	b130      	cbz	r0, 800ee50 <rcl_publisher_is_valid_except_context+0x10>
 800ee42:	6800      	ldr	r0, [r0, #0]
 800ee44:	b120      	cbz	r0, 800ee50 <rcl_publisher_is_valid_except_context+0x10>
 800ee46:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ee4a:	3800      	subs	r0, #0
 800ee4c:	bf18      	it	ne
 800ee4e:	2001      	movne	r0, #1
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop

0800ee54 <_rclc_check_for_new_data>:
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d046      	beq.n	800eee6 <_rclc_check_for_new_data+0x92>
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	7802      	ldrb	r2, [r0, #0]
 800ee5c:	b084      	sub	sp, #16
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2a0a      	cmp	r2, #10
 800ee62:	d842      	bhi.n	800eeea <_rclc_check_for_new_data+0x96>
 800ee64:	e8df f002 	tbb	[pc, r2]
 800ee68:	14181212 	.word	0x14181212
 800ee6c:	06060614 	.word	0x06060614
 800ee70:	2e1a      	.short	0x2e1a
 800ee72:	16          	.byte	0x16
 800ee73:	00          	.byte	0x00
 800ee74:	6a0a      	ldr	r2, [r1, #32]
 800ee76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ee78:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	1a12      	subs	r2, r2, r0
 800ee80:	bf18      	it	ne
 800ee82:	2201      	movne	r2, #1
 800ee84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ee88:	b004      	add	sp, #16
 800ee8a:	bd10      	pop	{r4, pc}
 800ee8c:	680a      	ldr	r2, [r1, #0]
 800ee8e:	e7f2      	b.n	800ee76 <_rclc_check_for_new_data+0x22>
 800ee90:	698a      	ldr	r2, [r1, #24]
 800ee92:	e7f0      	b.n	800ee76 <_rclc_check_for_new_data+0x22>
 800ee94:	688a      	ldr	r2, [r1, #8]
 800ee96:	e7ee      	b.n	800ee76 <_rclc_check_for_new_data+0x22>
 800ee98:	690a      	ldr	r2, [r1, #16]
 800ee9a:	e7ec      	b.n	800ee76 <_rclc_check_for_new_data+0x22>
 800ee9c:	685c      	ldr	r4, [r3, #4]
 800ee9e:	4608      	mov	r0, r1
 800eea0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800eea4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800eea8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800eeac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800eeb6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800eeba:	f104 0110 	add.w	r1, r4, #16
 800eebe:	f009 f9b7 	bl	8018230 <rcl_action_client_wait_set_get_entities_ready>
 800eec2:	e7e1      	b.n	800ee88 <_rclc_check_for_new_data+0x34>
 800eec4:	685c      	ldr	r4, [r3, #4]
 800eec6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800eeca:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800eece:	e9cd 3200 	strd	r3, r2, [sp]
 800eed2:	4608      	mov	r0, r1
 800eed4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800eed8:	f104 0220 	add.w	r2, r4, #32
 800eedc:	f104 0110 	add.w	r1, r4, #16
 800eee0:	f009 fbbe 	bl	8018660 <rcl_action_server_wait_set_get_entities_ready>
 800eee4:	e7d0      	b.n	800ee88 <_rclc_check_for_new_data+0x34>
 800eee6:	200b      	movs	r0, #11
 800eee8:	4770      	bx	lr
 800eeea:	2001      	movs	r0, #1
 800eeec:	e7cc      	b.n	800ee88 <_rclc_check_for_new_data+0x34>
 800eeee:	bf00      	nop

0800eef0 <_rclc_take_new_data>:
 800eef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef2:	b09b      	sub	sp, #108	@ 0x6c
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f000 8088 	beq.w	800f00a <_rclc_take_new_data+0x11a>
 800eefa:	7803      	ldrb	r3, [r0, #0]
 800eefc:	4604      	mov	r4, r0
 800eefe:	2b0a      	cmp	r3, #10
 800ef00:	f200 8167 	bhi.w	800f1d2 <_rclc_take_new_data+0x2e2>
 800ef04:	e8df f003 	tbb	[pc, r3]
 800ef08:	44152d2d 	.word	0x44152d2d
 800ef0c:	19191944 	.word	0x19191944
 800ef10:	065a      	.short	0x065a
 800ef12:	15          	.byte	0x15
 800ef13:	00          	.byte	0x00
 800ef14:	6840      	ldr	r0, [r0, #4]
 800ef16:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f040 80b2 	bne.w	800f084 <_rclc_take_new_data+0x194>
 800ef20:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 80e4 	bne.w	800f0f2 <_rclc_take_new_data+0x202>
 800ef2a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d16f      	bne.n	800f012 <_rclc_take_new_data+0x122>
 800ef32:	2500      	movs	r5, #0
 800ef34:	4628      	mov	r0, r5
 800ef36:	b01b      	add	sp, #108	@ 0x6c
 800ef38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef3a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ef3c:	6a0b      	ldr	r3, [r1, #32]
 800ef3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0f5      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800ef46:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ef4a:	f104 0110 	add.w	r1, r4, #16
 800ef4e:	f007 fd1b 	bl	8016988 <rcl_take_request>
 800ef52:	4605      	mov	r5, r0
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d0ec      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800ef58:	f240 2359 	movw	r3, #601	@ 0x259
 800ef5c:	4298      	cmp	r0, r3
 800ef5e:	d013      	beq.n	800ef88 <_rclc_take_new_data+0x98>
 800ef60:	e029      	b.n	800efb6 <_rclc_take_new_data+0xc6>
 800ef62:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ef64:	680b      	ldr	r3, [r1, #0]
 800ef66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0e1      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800ef6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ef72:	2300      	movs	r3, #0
 800ef74:	aa0a      	add	r2, sp, #40	@ 0x28
 800ef76:	f007 fd69 	bl	8016a4c <rcl_take>
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d0d9      	beq.n	800ef34 <_rclc_take_new_data+0x44>
 800ef80:	f240 1391 	movw	r3, #401	@ 0x191
 800ef84:	4298      	cmp	r0, r3
 800ef86:	d116      	bne.n	800efb6 <_rclc_take_new_data+0xc6>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800ef8e:	e7d1      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800ef90:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ef92:	698b      	ldr	r3, [r1, #24]
 800ef94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d0ca      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800ef9c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800efa0:	f104 0110 	add.w	r1, r4, #16
 800efa4:	f006 fef4 	bl	8015d90 <rcl_take_response>
 800efa8:	4605      	mov	r5, r0
 800efaa:	2800      	cmp	r0, #0
 800efac:	d0c1      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800efae:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800efb2:	4298      	cmp	r0, r3
 800efb4:	d0be      	beq.n	800ef34 <_rclc_take_new_data+0x44>
 800efb6:	f000 ff43 	bl	800fe40 <rcutils_reset_error>
 800efba:	e7bb      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800efbc:	6840      	ldr	r0, [r0, #4]
 800efbe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d17d      	bne.n	800f0c2 <_rclc_take_new_data+0x1d2>
 800efc6:	69c3      	ldr	r3, [r0, #28]
 800efc8:	b11b      	cbz	r3, 800efd2 <_rclc_take_new_data+0xe2>
 800efca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d144      	bne.n	800f05c <_rclc_take_new_data+0x16c>
 800efd2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f040 80ac 	bne.w	800f134 <_rclc_take_new_data+0x244>
 800efdc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d0a6      	beq.n	800ef32 <_rclc_take_new_data+0x42>
 800efe4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800efe6:	a90a      	add	r1, sp, #40	@ 0x28
 800efe8:	3010      	adds	r0, #16
 800efea:	f008 fff9 	bl	8017fe0 <rcl_action_take_result_response>
 800efee:	4605      	mov	r5, r0
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d1e0      	bne.n	800efb6 <_rclc_take_new_data+0xc6>
 800eff4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eff8:	6860      	ldr	r0, [r4, #4]
 800effa:	f009 fc55 	bl	80188a8 <rclc_action_find_handle_by_result_request_sequence_number>
 800effe:	2800      	cmp	r0, #0
 800f000:	d098      	beq.n	800ef34 <_rclc_take_new_data+0x44>
 800f002:	2301      	movs	r3, #1
 800f004:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f008:	e794      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f00a:	250b      	movs	r5, #11
 800f00c:	4628      	mov	r0, r5
 800f00e:	b01b      	add	sp, #108	@ 0x6c
 800f010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f012:	ae04      	add	r6, sp, #16
 800f014:	aa0a      	add	r2, sp, #40	@ 0x28
 800f016:	3010      	adds	r0, #16
 800f018:	4631      	mov	r1, r6
 800f01a:	f009 fa55 	bl	80184c8 <rcl_action_take_cancel_request>
 800f01e:	4605      	mov	r5, r0
 800f020:	2800      	cmp	r0, #0
 800f022:	d1c8      	bne.n	800efb6 <_rclc_take_new_data+0xc6>
 800f024:	6860      	ldr	r0, [r4, #4]
 800f026:	a90a      	add	r1, sp, #40	@ 0x28
 800f028:	f009 fbfc 	bl	8018824 <rclc_action_find_goal_handle_by_uuid>
 800f02c:	4607      	mov	r7, r0
 800f02e:	2800      	cmp	r0, #0
 800f030:	f000 80bb 	beq.w	800f1aa <_rclc_take_new_data+0x2ba>
 800f034:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f038:	2101      	movs	r1, #1
 800f03a:	f009 fb7d 	bl	8018738 <rcl_action_transition_goal_state>
 800f03e:	2803      	cmp	r0, #3
 800f040:	4684      	mov	ip, r0
 800f042:	f040 80a7 	bne.w	800f194 <_rclc_take_new_data+0x2a4>
 800f046:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f048:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f04c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f04e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f052:	e884 0003 	stmia.w	r4, {r0, r1}
 800f056:	f887 c008 	strb.w	ip, [r7, #8]
 800f05a:	e76b      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f05c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f05e:	3010      	adds	r0, #16
 800f060:	f009 f83e 	bl	80180e0 <rcl_action_take_feedback>
 800f064:	4605      	mov	r5, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d1a5      	bne.n	800efb6 <_rclc_take_new_data+0xc6>
 800f06a:	6860      	ldr	r0, [r4, #4]
 800f06c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f06e:	f009 fbd9 	bl	8018824 <rclc_action_find_goal_handle_by_uuid>
 800f072:	4603      	mov	r3, r0
 800f074:	2800      	cmp	r0, #0
 800f076:	f000 80a3 	beq.w	800f1c0 <_rclc_take_new_data+0x2d0>
 800f07a:	2201      	movs	r2, #1
 800f07c:	6860      	ldr	r0, [r4, #4]
 800f07e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f082:	e7a6      	b.n	800efd2 <_rclc_take_new_data+0xe2>
 800f084:	f009 fba8 	bl	80187d8 <rclc_action_take_goal_handle>
 800f088:	4606      	mov	r6, r0
 800f08a:	6860      	ldr	r0, [r4, #4]
 800f08c:	2e00      	cmp	r6, #0
 800f08e:	f43f af47 	beq.w	800ef20 <_rclc_take_new_data+0x30>
 800f092:	6070      	str	r0, [r6, #4]
 800f094:	69f2      	ldr	r2, [r6, #28]
 800f096:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f09a:	3010      	adds	r0, #16
 800f09c:	f009 f95c 	bl	8018358 <rcl_action_take_goal_request>
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f040 808e 	bne.w	800f1c4 <_rclc_take_new_data+0x2d4>
 800f0a8:	69f7      	ldr	r7, [r6, #28]
 800f0aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f0ac:	7235      	strb	r5, [r6, #8]
 800f0ae:	f8c6 0009 	str.w	r0, [r6, #9]
 800f0b2:	f8c6 100d 	str.w	r1, [r6, #13]
 800f0b6:	6860      	ldr	r0, [r4, #4]
 800f0b8:	f8c6 2011 	str.w	r2, [r6, #17]
 800f0bc:	f8c6 3015 	str.w	r3, [r6, #21]
 800f0c0:	e72e      	b.n	800ef20 <_rclc_take_new_data+0x30>
 800f0c2:	aa04      	add	r2, sp, #16
 800f0c4:	a90a      	add	r1, sp, #40	@ 0x28
 800f0c6:	3010      	adds	r0, #16
 800f0c8:	f008 ff12 	bl	8017ef0 <rcl_action_take_goal_response>
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	f47f af71 	bne.w	800efb6 <_rclc_take_new_data+0xc6>
 800f0d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0d8:	6860      	ldr	r0, [r4, #4]
 800f0da:	f009 fbd3 	bl	8018884 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f0de:	b130      	cbz	r0, 800f0ee <_rclc_take_new_data+0x1fe>
 800f0e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f0e4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f880 2020 	strb.w	r2, [r0, #32]
 800f0ee:	6860      	ldr	r0, [r4, #4]
 800f0f0:	e769      	b.n	800efc6 <_rclc_take_new_data+0xd6>
 800f0f2:	aa04      	add	r2, sp, #16
 800f0f4:	3010      	adds	r0, #16
 800f0f6:	a90a      	add	r1, sp, #40	@ 0x28
 800f0f8:	f009 f9a6 	bl	8018448 <rcl_action_take_result_request>
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	2800      	cmp	r0, #0
 800f100:	f47f af59 	bne.w	800efb6 <_rclc_take_new_data+0xc6>
 800f104:	6860      	ldr	r0, [r4, #4]
 800f106:	a904      	add	r1, sp, #16
 800f108:	f009 fb8c 	bl	8018824 <rclc_action_find_goal_handle_by_uuid>
 800f10c:	4607      	mov	r7, r0
 800f10e:	b160      	cbz	r0, 800f12a <_rclc_take_new_data+0x23a>
 800f110:	ad0a      	add	r5, sp, #40	@ 0x28
 800f112:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f118:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f11a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f11e:	f04f 0c02 	mov.w	ip, #2
 800f122:	e886 0003 	stmia.w	r6, {r0, r1}
 800f126:	f887 c008 	strb.w	ip, [r7, #8]
 800f12a:	6860      	ldr	r0, [r4, #4]
 800f12c:	2300      	movs	r3, #0
 800f12e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f132:	e6fa      	b.n	800ef2a <_rclc_take_new_data+0x3a>
 800f134:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f138:	a90a      	add	r1, sp, #40	@ 0x28
 800f13a:	3010      	adds	r0, #16
 800f13c:	f008 ff90 	bl	8018060 <rcl_action_take_cancel_response>
 800f140:	4605      	mov	r5, r0
 800f142:	2800      	cmp	r0, #0
 800f144:	f47f af37 	bne.w	800efb6 <_rclc_take_new_data+0xc6>
 800f148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f14c:	6860      	ldr	r0, [r4, #4]
 800f14e:	f009 fbbd 	bl	80188cc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f152:	4606      	mov	r6, r0
 800f154:	6860      	ldr	r0, [r4, #4]
 800f156:	2e00      	cmp	r6, #0
 800f158:	f43f af40 	beq.w	800efdc <_rclc_take_new_data+0xec>
 800f15c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f15e:	2701      	movs	r7, #1
 800f160:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f162:	2b00      	cmp	r3, #0
 800f164:	f43f af3a 	beq.w	800efdc <_rclc_take_new_data+0xec>
 800f168:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f16a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f16e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f172:	f009 fb57 	bl	8018824 <rclc_action_find_goal_handle_by_uuid>
 800f176:	b138      	cbz	r0, 800f188 <_rclc_take_new_data+0x298>
 800f178:	6860      	ldr	r0, [r4, #4]
 800f17a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f17c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f180:	3501      	adds	r5, #1
 800f182:	42ab      	cmp	r3, r5
 800f184:	d8f0      	bhi.n	800f168 <_rclc_take_new_data+0x278>
 800f186:	e729      	b.n	800efdc <_rclc_take_new_data+0xec>
 800f188:	6860      	ldr	r0, [r4, #4]
 800f18a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f18c:	3501      	adds	r5, #1
 800f18e:	42ab      	cmp	r3, r5
 800f190:	d8ea      	bhi.n	800f168 <_rclc_take_new_data+0x278>
 800f192:	e723      	b.n	800efdc <_rclc_take_new_data+0xec>
 800f194:	ab06      	add	r3, sp, #24
 800f196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f198:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f19c:	2103      	movs	r1, #3
 800f19e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f1a2:	6860      	ldr	r0, [r4, #4]
 800f1a4:	f009 fc08 	bl	80189b8 <rclc_action_server_goal_cancel_reject>
 800f1a8:	e6c4      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f1aa:	ab06      	add	r3, sp, #24
 800f1ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f1b8:	6860      	ldr	r0, [r4, #4]
 800f1ba:	f009 fbfd 	bl	80189b8 <rclc_action_server_goal_cancel_reject>
 800f1be:	e6b9      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f1c0:	6860      	ldr	r0, [r4, #4]
 800f1c2:	e706      	b.n	800efd2 <_rclc_take_new_data+0xe2>
 800f1c4:	6860      	ldr	r0, [r4, #4]
 800f1c6:	4631      	mov	r1, r6
 800f1c8:	f009 fb16 	bl	80187f8 <rclc_action_remove_used_goal_handle>
 800f1cc:	f000 fe38 	bl	800fe40 <rcutils_reset_error>
 800f1d0:	e6b0      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f1d2:	2501      	movs	r5, #1
 800f1d4:	e6ae      	b.n	800ef34 <_rclc_take_new_data+0x44>
 800f1d6:	bf00      	nop

0800f1d8 <_rclc_execute.part.0>:
 800f1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1da:	7803      	ldrb	r3, [r0, #0]
 800f1dc:	b087      	sub	sp, #28
 800f1de:	4604      	mov	r4, r0
 800f1e0:	2b0a      	cmp	r3, #10
 800f1e2:	f200 8136 	bhi.w	800f452 <_rclc_execute.part.0+0x27a>
 800f1e6:	e8df f003 	tbb	[pc, r3]
 800f1ea:	435e      	.short	0x435e
 800f1ec:	06a1664f 	.word	0x06a1664f
 800f1f0:	6c1e0606 	.word	0x6c1e0606
 800f1f4:	59          	.byte	0x59
 800f1f5:	00          	.byte	0x00
 800f1f6:	2b06      	cmp	r3, #6
 800f1f8:	f000 8122 	beq.w	800f440 <_rclc_execute.part.0+0x268>
 800f1fc:	2b07      	cmp	r3, #7
 800f1fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f200:	f040 8118 	bne.w	800f434 <_rclc_execute.part.0+0x25c>
 800f204:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f208:	6880      	ldr	r0, [r0, #8]
 800f20a:	4798      	blx	r3
 800f20c:	f104 0110 	add.w	r1, r4, #16
 800f210:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f212:	6860      	ldr	r0, [r4, #4]
 800f214:	f007 fbf8 	bl	8016a08 <rcl_send_response>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d033      	beq.n	800f284 <_rclc_execute.part.0+0xac>
 800f21c:	9005      	str	r0, [sp, #20]
 800f21e:	f000 fe0f 	bl	800fe40 <rcutils_reset_error>
 800f222:	9805      	ldr	r0, [sp, #20]
 800f224:	e02e      	b.n	800f284 <_rclc_execute.part.0+0xac>
 800f226:	6840      	ldr	r0, [r0, #4]
 800f228:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f000 8086 	beq.w	800f33e <_rclc_execute.part.0+0x166>
 800f232:	2600      	movs	r6, #0
 800f234:	2701      	movs	r7, #1
 800f236:	e004      	b.n	800f242 <_rclc_execute.part.0+0x6a>
 800f238:	f009 faa8 	bl	801878c <rclc_action_send_result_request>
 800f23c:	b998      	cbnz	r0, 800f266 <_rclc_execute.part.0+0x8e>
 800f23e:	722f      	strb	r7, [r5, #8]
 800f240:	6860      	ldr	r0, [r4, #4]
 800f242:	f009 fb55 	bl	80188f0 <rclc_action_find_first_handle_with_goal_response>
 800f246:	4605      	mov	r5, r0
 800f248:	2800      	cmp	r0, #0
 800f24a:	d077      	beq.n	800f33c <_rclc_execute.part.0+0x164>
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f256:	f885 6020 	strb.w	r6, [r5, #32]
 800f25a:	4798      	blx	r3
 800f25c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f260:	4628      	mov	r0, r5
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e8      	bne.n	800f238 <_rclc_execute.part.0+0x60>
 800f266:	6860      	ldr	r0, [r4, #4]
 800f268:	4629      	mov	r1, r5
 800f26a:	f009 fac5 	bl	80187f8 <rclc_action_remove_used_goal_handle>
 800f26e:	e7e7      	b.n	800f240 <_rclc_execute.part.0+0x68>
 800f270:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f274:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800f278:	2d00      	cmp	r5, #0
 800f27a:	f000 80c9 	beq.w	800f410 <_rclc_execute.part.0+0x238>
 800f27e:	6880      	ldr	r0, [r0, #8]
 800f280:	4798      	blx	r3
 800f282:	2000      	movs	r0, #0
 800f284:	b007      	add	sp, #28
 800f286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f288:	6840      	ldr	r0, [r0, #4]
 800f28a:	f007 feef 	bl	801706c <rcl_timer_call>
 800f28e:	f240 3321 	movw	r3, #801	@ 0x321
 800f292:	4298      	cmp	r0, r3
 800f294:	d004      	beq.n	800f2a0 <_rclc_execute.part.0+0xc8>
 800f296:	2800      	cmp	r0, #0
 800f298:	d0f4      	beq.n	800f284 <_rclc_execute.part.0+0xac>
 800f29a:	e7bf      	b.n	800f21c <_rclc_execute.part.0+0x44>
 800f29c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f29e:	4798      	blx	r3
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	b007      	add	sp, #28
 800f2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f2aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f2ac:	b925      	cbnz	r5, 800f2b8 <_rclc_execute.part.0+0xe0>
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	4798      	blx	r3
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	e7e6      	b.n	800f284 <_rclc_execute.part.0+0xac>
 800f2b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f2b8:	68a0      	ldr	r0, [r4, #8]
 800f2ba:	4798      	blx	r3
 800f2bc:	2000      	movs	r0, #0
 800f2be:	b007      	add	sp, #28
 800f2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c2:	6840      	ldr	r0, [r0, #4]
 800f2c4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f2c8:	bb3b      	cbnz	r3, 800f31a <_rclc_execute.part.0+0x142>
 800f2ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d07b      	beq.n	800f3ca <_rclc_execute.part.0+0x1f2>
 800f2d2:	f640 0634 	movw	r6, #2100	@ 0x834
 800f2d6:	2701      	movs	r7, #1
 800f2d8:	e007      	b.n	800f2ea <_rclc_execute.part.0+0x112>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f009 fb20 	bl	8018920 <rclc_action_server_response_goal_request>
 800f2e0:	6860      	ldr	r0, [r4, #4]
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	f009 fa88 	bl	80187f8 <rclc_action_remove_used_goal_handle>
 800f2e8:	6860      	ldr	r0, [r4, #4]
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	f009 fab2 	bl	8018854 <rclc_action_find_first_handle_by_status>
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d066      	beq.n	800f3c4 <_rclc_execute.part.0+0x1ec>
 800f2f6:	6863      	ldr	r3, [r4, #4]
 800f2f8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	4798      	blx	r3
 800f2fe:	42b0      	cmp	r0, r6
 800f300:	f04f 0100 	mov.w	r1, #0
 800f304:	d1e9      	bne.n	800f2da <_rclc_execute.part.0+0x102>
 800f306:	2101      	movs	r1, #1
 800f308:	4628      	mov	r0, r5
 800f30a:	f009 fb09 	bl	8018920 <rclc_action_server_response_goal_request>
 800f30e:	722f      	strb	r7, [r5, #8]
 800f310:	e7ea      	b.n	800f2e8 <_rclc_execute.part.0+0x110>
 800f312:	6848      	ldr	r0, [r1, #4]
 800f314:	f009 fa70 	bl	80187f8 <rclc_action_remove_used_goal_handle>
 800f318:	6860      	ldr	r0, [r4, #4]
 800f31a:	f009 faa7 	bl	801886c <rclc_action_find_first_terminated_handle>
 800f31e:	4601      	mov	r1, r0
 800f320:	2800      	cmp	r0, #0
 800f322:	d1f6      	bne.n	800f312 <_rclc_execute.part.0+0x13a>
 800f324:	6860      	ldr	r0, [r4, #4]
 800f326:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f32a:	e7ce      	b.n	800f2ca <_rclc_execute.part.0+0xf2>
 800f32c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f32e:	6880      	ldr	r0, [r0, #8]
 800f330:	f104 0110 	add.w	r1, r4, #16
 800f334:	4798      	blx	r3
 800f336:	2000      	movs	r0, #0
 800f338:	b007      	add	sp, #28
 800f33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f33c:	6860      	ldr	r0, [r4, #4]
 800f33e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f342:	b18b      	cbz	r3, 800f368 <_rclc_execute.part.0+0x190>
 800f344:	68c5      	ldr	r5, [r0, #12]
 800f346:	b32d      	cbz	r5, 800f394 <_rclc_execute.part.0+0x1bc>
 800f348:	2600      	movs	r6, #0
 800f34a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f34e:	b143      	cbz	r3, 800f362 <_rclc_execute.part.0+0x18a>
 800f350:	69c3      	ldr	r3, [r0, #28]
 800f352:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f356:	b123      	cbz	r3, 800f362 <_rclc_execute.part.0+0x18a>
 800f358:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f35a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f35c:	4628      	mov	r0, r5
 800f35e:	4798      	blx	r3
 800f360:	6860      	ldr	r0, [r4, #4]
 800f362:	682d      	ldr	r5, [r5, #0]
 800f364:	2d00      	cmp	r5, #0
 800f366:	d1f0      	bne.n	800f34a <_rclc_execute.part.0+0x172>
 800f368:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f36c:	b193      	cbz	r3, 800f394 <_rclc_execute.part.0+0x1bc>
 800f36e:	68c5      	ldr	r5, [r0, #12]
 800f370:	b185      	cbz	r5, 800f394 <_rclc_execute.part.0+0x1bc>
 800f372:	2600      	movs	r6, #0
 800f374:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f378:	b14b      	cbz	r3, 800f38e <_rclc_execute.part.0+0x1b6>
 800f37a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f37c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f380:	b12b      	cbz	r3, 800f38e <_rclc_execute.part.0+0x1b6>
 800f382:	4628      	mov	r0, r5
 800f384:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f388:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f38a:	4798      	blx	r3
 800f38c:	6860      	ldr	r0, [r4, #4]
 800f38e:	682d      	ldr	r5, [r5, #0]
 800f390:	2d00      	cmp	r5, #0
 800f392:	d1ef      	bne.n	800f374 <_rclc_execute.part.0+0x19c>
 800f394:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d081      	beq.n	800f2a0 <_rclc_execute.part.0+0xc8>
 800f39c:	2700      	movs	r7, #0
 800f39e:	e00b      	b.n	800f3b8 <_rclc_execute.part.0+0x1e0>
 800f3a0:	6863      	ldr	r3, [r4, #4]
 800f3a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f3a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f3a6:	6a1e      	ldr	r6, [r3, #32]
 800f3a8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f3ac:	47b0      	blx	r6
 800f3ae:	6860      	ldr	r0, [r4, #4]
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	f009 fa21 	bl	80187f8 <rclc_action_remove_used_goal_handle>
 800f3b6:	6860      	ldr	r0, [r4, #4]
 800f3b8:	f009 faa6 	bl	8018908 <rclc_action_find_first_handle_with_result_response>
 800f3bc:	4605      	mov	r5, r0
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d1ee      	bne.n	800f3a0 <_rclc_execute.part.0+0x1c8>
 800f3c2:	e76d      	b.n	800f2a0 <_rclc_execute.part.0+0xc8>
 800f3c4:	6860      	ldr	r0, [r4, #4]
 800f3c6:	f880 5020 	strb.w	r5, [r0, #32]
 800f3ca:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f43f af66 	beq.w	800f2a0 <_rclc_execute.part.0+0xc8>
 800f3d4:	68c5      	ldr	r5, [r0, #12]
 800f3d6:	b1b5      	cbz	r5, 800f406 <_rclc_execute.part.0+0x22e>
 800f3d8:	2602      	movs	r6, #2
 800f3da:	e001      	b.n	800f3e0 <_rclc_execute.part.0+0x208>
 800f3dc:	682d      	ldr	r5, [r5, #0]
 800f3de:	b195      	cbz	r5, 800f406 <_rclc_execute.part.0+0x22e>
 800f3e0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d1f9      	bne.n	800f3dc <_rclc_execute.part.0+0x204>
 800f3e8:	69c3      	ldr	r3, [r0, #28]
 800f3ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	4798      	blx	r3
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f3fc:	b163      	cbz	r3, 800f418 <_rclc_execute.part.0+0x240>
 800f3fe:	f009 faaf 	bl	8018960 <rclc_action_server_goal_cancel_accept>
 800f402:	6860      	ldr	r0, [r4, #4]
 800f404:	e7ea      	b.n	800f3dc <_rclc_execute.part.0+0x204>
 800f406:	2300      	movs	r3, #0
 800f408:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f40c:	4618      	mov	r0, r3
 800f40e:	e739      	b.n	800f284 <_rclc_execute.part.0+0xac>
 800f410:	4628      	mov	r0, r5
 800f412:	4798      	blx	r3
 800f414:	4628      	mov	r0, r5
 800f416:	e735      	b.n	800f284 <_rclc_execute.part.0+0xac>
 800f418:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f41a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f41e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f426:	6860      	ldr	r0, [r4, #4]
 800f428:	2101      	movs	r1, #1
 800f42a:	f009 fac5 	bl	80189b8 <rclc_action_server_goal_cancel_reject>
 800f42e:	722e      	strb	r6, [r5, #8]
 800f430:	6860      	ldr	r0, [r4, #4]
 800f432:	e7d3      	b.n	800f3dc <_rclc_execute.part.0+0x204>
 800f434:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f436:	6880      	ldr	r0, [r0, #8]
 800f438:	4798      	blx	r3
 800f43a:	f104 0110 	add.w	r1, r4, #16
 800f43e:	e6e7      	b.n	800f210 <_rclc_execute.part.0+0x38>
 800f440:	f100 0110 	add.w	r1, r0, #16
 800f444:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f446:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f448:	6880      	ldr	r0, [r0, #8]
 800f44a:	9105      	str	r1, [sp, #20]
 800f44c:	4798      	blx	r3
 800f44e:	9905      	ldr	r1, [sp, #20]
 800f450:	e6de      	b.n	800f210 <_rclc_execute.part.0+0x38>
 800f452:	2001      	movs	r0, #1
 800f454:	e716      	b.n	800f284 <_rclc_execute.part.0+0xac>
 800f456:	bf00      	nop

0800f458 <rclc_executor_trigger_any>:
 800f458:	2800      	cmp	r0, #0
 800f45a:	d03f      	beq.n	800f4dc <rclc_executor_trigger_any+0x84>
 800f45c:	2900      	cmp	r1, #0
 800f45e:	d03e      	beq.n	800f4de <rclc_executor_trigger_any+0x86>
 800f460:	4603      	mov	r3, r0
 800f462:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f466:	2200      	movs	r2, #0
 800f468:	2800      	cmp	r0, #0
 800f46a:	d037      	beq.n	800f4dc <rclc_executor_trigger_any+0x84>
 800f46c:	b430      	push	{r4, r5}
 800f46e:	f893 c000 	ldrb.w	ip, [r3]
 800f472:	f1bc 0f08 	cmp.w	ip, #8
 800f476:	d11e      	bne.n	800f4b6 <rclc_executor_trigger_any+0x5e>
 800f478:	685c      	ldr	r4, [r3, #4]
 800f47a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f47c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f480:	d105      	bne.n	800f48e <rclc_executor_trigger_any+0x36>
 800f482:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f486:	b910      	cbnz	r0, 800f48e <rclc_executor_trigger_any+0x36>
 800f488:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f48c:	b128      	cbz	r0, 800f49a <rclc_executor_trigger_any+0x42>
 800f48e:	bc30      	pop	{r4, r5}
 800f490:	4770      	bx	lr
 800f492:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f496:	2800      	cmp	r0, #0
 800f498:	d1f9      	bne.n	800f48e <rclc_executor_trigger_any+0x36>
 800f49a:	3201      	adds	r2, #1
 800f49c:	4291      	cmp	r1, r2
 800f49e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f4a2:	d018      	beq.n	800f4d6 <rclc_executor_trigger_any+0x7e>
 800f4a4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d0f0      	beq.n	800f48e <rclc_executor_trigger_any+0x36>
 800f4ac:	f893 c000 	ldrb.w	ip, [r3]
 800f4b0:	f1bc 0f08 	cmp.w	ip, #8
 800f4b4:	d0e0      	beq.n	800f478 <rclc_executor_trigger_any+0x20>
 800f4b6:	f1bc 0f09 	cmp.w	ip, #9
 800f4ba:	d1ea      	bne.n	800f492 <rclc_executor_trigger_any+0x3a>
 800f4bc:	685c      	ldr	r4, [r3, #4]
 800f4be:	6a25      	ldr	r5, [r4, #32]
 800f4c0:	2d00      	cmp	r5, #0
 800f4c2:	d1e4      	bne.n	800f48e <rclc_executor_trigger_any+0x36>
 800f4c4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d1e0      	bne.n	800f48e <rclc_executor_trigger_any+0x36>
 800f4cc:	3201      	adds	r2, #1
 800f4ce:	4291      	cmp	r1, r2
 800f4d0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f4d4:	d1e6      	bne.n	800f4a4 <rclc_executor_trigger_any+0x4c>
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	bc30      	pop	{r4, r5}
 800f4da:	4770      	bx	lr
 800f4dc:	4770      	bx	lr
 800f4de:	4608      	mov	r0, r1
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop

0800f4e4 <rclc_executor_get_zero_initialized_executor>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4903      	ldr	r1, [pc, #12]	@ (800f4f4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	2288      	movs	r2, #136	@ 0x88
 800f4ec:	f00c fccb 	bl	801be86 <memcpy>
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	bd10      	pop	{r4, pc}
 800f4f4:	0801d9a0 	.word	0x0801d9a0

0800f4f8 <rclc_executor_init>:
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d05f      	beq.n	800f5bc <rclc_executor_init+0xc4>
 800f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	460c      	mov	r4, r1
 800f502:	b0b0      	sub	sp, #192	@ 0xc0
 800f504:	2900      	cmp	r1, #0
 800f506:	d051      	beq.n	800f5ac <rclc_executor_init+0xb4>
 800f508:	4605      	mov	r5, r0
 800f50a:	4618      	mov	r0, r3
 800f50c:	4616      	mov	r6, r2
 800f50e:	461f      	mov	r7, r3
 800f510:	f000 fc70 	bl	800fdf4 <rcutils_allocator_is_valid>
 800f514:	2800      	cmp	r0, #0
 800f516:	d049      	beq.n	800f5ac <rclc_executor_init+0xb4>
 800f518:	2e00      	cmp	r6, #0
 800f51a:	d047      	beq.n	800f5ac <rclc_executor_init+0xb4>
 800f51c:	492c      	ldr	r1, [pc, #176]	@ (800f5d0 <rclc_executor_init+0xd8>)
 800f51e:	2288      	movs	r2, #136	@ 0x88
 800f520:	a80e      	add	r0, sp, #56	@ 0x38
 800f522:	f00c fcb0 	bl	801be86 <memcpy>
 800f526:	a90e      	add	r1, sp, #56	@ 0x38
 800f528:	2288      	movs	r2, #136	@ 0x88
 800f52a:	4628      	mov	r0, r5
 800f52c:	f00c fcab 	bl	801be86 <memcpy>
 800f530:	602c      	str	r4, [r5, #0]
 800f532:	4668      	mov	r0, sp
 800f534:	60ae      	str	r6, [r5, #8]
 800f536:	466c      	mov	r4, sp
 800f538:	f007 ff0a 	bl	8017350 <rcl_get_zero_initialized_wait_set>
 800f53c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f53e:	f105 0c14 	add.w	ip, r5, #20
 800f542:	f8d7 8000 	ldr.w	r8, [r7]
 800f546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f54a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f54c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f552:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f556:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f5c8 <rclc_executor_init+0xd0>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	f8cc 3000 	str.w	r3, [ip]
 800f560:	6939      	ldr	r1, [r7, #16]
 800f562:	612f      	str	r7, [r5, #16]
 800f564:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f568:	01b0      	lsls	r0, r6, #6
 800f56a:	47c0      	blx	r8
 800f56c:	6068      	str	r0, [r5, #4]
 800f56e:	b338      	cbz	r0, 800f5c0 <rclc_executor_init+0xc8>
 800f570:	2400      	movs	r4, #0
 800f572:	e000      	b.n	800f576 <rclc_executor_init+0x7e>
 800f574:	6868      	ldr	r0, [r5, #4]
 800f576:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f57a:	4631      	mov	r1, r6
 800f57c:	3401      	adds	r4, #1
 800f57e:	f000 faa3 	bl	800fac8 <rclc_executor_handle_init>
 800f582:	42a6      	cmp	r6, r4
 800f584:	d1f6      	bne.n	800f574 <rclc_executor_init+0x7c>
 800f586:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f58a:	f000 fa93 	bl	800fab4 <rclc_executor_handle_counters_zero_init>
 800f58e:	4a11      	ldr	r2, [pc, #68]	@ (800f5d4 <rclc_executor_init+0xdc>)
 800f590:	686b      	ldr	r3, [r5, #4]
 800f592:	2000      	movs	r0, #0
 800f594:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800f598:	b163      	cbz	r3, 800f5b4 <rclc_executor_init+0xbc>
 800f59a:	692b      	ldr	r3, [r5, #16]
 800f59c:	b153      	cbz	r3, 800f5b4 <rclc_executor_init+0xbc>
 800f59e:	68ab      	ldr	r3, [r5, #8]
 800f5a0:	b143      	cbz	r3, 800f5b4 <rclc_executor_init+0xbc>
 800f5a2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800f5a6:	b030      	add	sp, #192	@ 0xc0
 800f5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ac:	200b      	movs	r0, #11
 800f5ae:	b030      	add	sp, #192	@ 0xc0
 800f5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	b030      	add	sp, #192	@ 0xc0
 800f5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5bc:	200b      	movs	r0, #11
 800f5be:	4770      	bx	lr
 800f5c0:	200a      	movs	r0, #10
 800f5c2:	e7f4      	b.n	800f5ae <rclc_executor_init+0xb6>
 800f5c4:	f3af 8000 	nop.w
 800f5c8:	3b9aca00 	.word	0x3b9aca00
 800f5cc:	00000000 	.word	0x00000000
 800f5d0:	0801d9a0 	.word	0x0801d9a0
 800f5d4:	0800f459 	.word	0x0800f459

0800f5d8 <rclc_executor_add_timer>:
 800f5d8:	b300      	cbz	r0, 800f61c <rclc_executor_add_timer+0x44>
 800f5da:	b1f9      	cbz	r1, 800f61c <rclc_executor_add_timer+0x44>
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	d301      	bcc.n	800f5ec <rclc_executor_add_timer+0x14>
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	6840      	ldr	r0, [r0, #4]
 800f5ee:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800f5f2:	019d      	lsls	r5, r3, #6
 800f5f4:	6051      	str	r1, [r2, #4]
 800f5f6:	2102      	movs	r1, #2
 800f5f8:	5341      	strh	r1, [r0, r5]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	2101      	movs	r1, #1
 800f600:	f104 0514 	add.w	r5, r4, #20
 800f604:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800f606:	8711      	strh	r1, [r2, #56]	@ 0x38
 800f608:	4628      	mov	r0, r5
 800f60a:	60e3      	str	r3, [r4, #12]
 800f60c:	f007 feb4 	bl	8017378 <rcl_wait_set_is_valid>
 800f610:	b930      	cbnz	r0, 800f620 <rclc_executor_add_timer+0x48>
 800f612:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f614:	3301      	adds	r3, #1
 800f616:	2000      	movs	r0, #0
 800f618:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	200b      	movs	r0, #11
 800f61e:	4770      	bx	lr
 800f620:	4628      	mov	r0, r5
 800f622:	f007 feaf 	bl	8017384 <rcl_wait_set_fini>
 800f626:	2800      	cmp	r0, #0
 800f628:	d0f3      	beq.n	800f612 <rclc_executor_add_timer+0x3a>
 800f62a:	bd38      	pop	{r3, r4, r5, pc}

0800f62c <rclc_executor_add_service>:
 800f62c:	b370      	cbz	r0, 800f68c <rclc_executor_add_service+0x60>
 800f62e:	b369      	cbz	r1, 800f68c <rclc_executor_add_service+0x60>
 800f630:	b362      	cbz	r2, 800f68c <rclc_executor_add_service+0x60>
 800f632:	b35b      	cbz	r3, 800f68c <rclc_executor_add_service+0x60>
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4604      	mov	r4, r0
 800f638:	9804      	ldr	r0, [sp, #16]
 800f63a:	b378      	cbz	r0, 800f69c <rclc_executor_add_service+0x70>
 800f63c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800f640:	42a8      	cmp	r0, r5
 800f642:	d301      	bcc.n	800f648 <rclc_executor_add_service+0x1c>
 800f644:	2001      	movs	r0, #1
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	6865      	ldr	r5, [r4, #4]
 800f64a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800f64e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800f652:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800f656:	9b04      	ldr	r3, [sp, #16]
 800f658:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800f65c:	2305      	movs	r3, #5
 800f65e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800f662:	3001      	adds	r0, #1
 800f664:	f825 300e 	strh.w	r3, [r5, lr]
 800f668:	2201      	movs	r2, #1
 800f66a:	2300      	movs	r3, #0
 800f66c:	f104 0514 	add.w	r5, r4, #20
 800f670:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800f674:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800f678:	60e0      	str	r0, [r4, #12]
 800f67a:	4628      	mov	r0, r5
 800f67c:	f007 fe7c 	bl	8017378 <rcl_wait_set_is_valid>
 800f680:	b930      	cbnz	r0, 800f690 <rclc_executor_add_service+0x64>
 800f682:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f684:	3301      	adds	r3, #1
 800f686:	2000      	movs	r0, #0
 800f688:	6563      	str	r3, [r4, #84]	@ 0x54
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	200b      	movs	r0, #11
 800f68e:	4770      	bx	lr
 800f690:	4628      	mov	r0, r5
 800f692:	f007 fe77 	bl	8017384 <rcl_wait_set_fini>
 800f696:	2800      	cmp	r0, #0
 800f698:	d0f3      	beq.n	800f682 <rclc_executor_add_service+0x56>
 800f69a:	e7d4      	b.n	800f646 <rclc_executor_add_service+0x1a>
 800f69c:	200b      	movs	r0, #11
 800f69e:	bd38      	pop	{r3, r4, r5, pc}

0800f6a0 <rclc_executor_prepare>:
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d044      	beq.n	800f72e <rclc_executor_prepare+0x8e>
 800f6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6a6:	f100 0514 	add.w	r5, r0, #20
 800f6aa:	b09b      	sub	sp, #108	@ 0x6c
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f007 fe62 	bl	8017378 <rcl_wait_set_is_valid>
 800f6b4:	b110      	cbz	r0, 800f6bc <rclc_executor_prepare+0x1c>
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	b01b      	add	sp, #108	@ 0x6c
 800f6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f007 fe61 	bl	8017384 <rcl_wait_set_fini>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d130      	bne.n	800f728 <rclc_executor_prepare+0x88>
 800f6c6:	a80c      	add	r0, sp, #48	@ 0x30
 800f6c8:	f007 fe42 	bl	8017350 <rcl_get_zero_initialized_wait_set>
 800f6cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f6d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6d4:	46ae      	mov	lr, r5
 800f6d6:	6927      	ldr	r7, [r4, #16]
 800f6d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6ec:	f8dc 3000 	ldr.w	r3, [ip]
 800f6f0:	f8ce 3000 	str.w	r3, [lr]
 800f6f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f6f6:	ae04      	add	r6, sp, #16
 800f6f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	6822      	ldr	r2, [r4, #0]
 800f6fe:	6033      	str	r3, [r6, #0]
 800f700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f702:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f704:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f708:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f70c:	e9cd 2100 	strd	r2, r1, [sp]
 800f710:	4628      	mov	r0, r5
 800f712:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f714:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f716:	f008 f933 	bl	8017980 <rcl_wait_set_init>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d0cc      	beq.n	800f6b8 <rclc_executor_prepare+0x18>
 800f71e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f720:	f000 fb8e 	bl	800fe40 <rcutils_reset_error>
 800f724:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f726:	e7c7      	b.n	800f6b8 <rclc_executor_prepare+0x18>
 800f728:	f000 fb8a 	bl	800fe40 <rcutils_reset_error>
 800f72c:	e7cb      	b.n	800f6c6 <rclc_executor_prepare+0x26>
 800f72e:	200b      	movs	r0, #11
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop

0800f734 <rclc_executor_spin_some.part.0>:
 800f734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	f100 0614 	add.w	r6, r0, #20
 800f73c:	b083      	sub	sp, #12
 800f73e:	4691      	mov	r9, r2
 800f740:	4698      	mov	r8, r3
 800f742:	4605      	mov	r5, r0
 800f744:	f7ff ffac 	bl	800f6a0 <rclc_executor_prepare>
 800f748:	4630      	mov	r0, r6
 800f74a:	f007 fee7 	bl	801751c <rcl_wait_set_clear>
 800f74e:	4607      	mov	r7, r0
 800f750:	2800      	cmp	r0, #0
 800f752:	f040 80ed 	bne.w	800f930 <rclc_executor_spin_some.part.0+0x1fc>
 800f756:	68ab      	ldr	r3, [r5, #8]
 800f758:	4604      	mov	r4, r0
 800f75a:	b303      	cbz	r3, 800f79e <rclc_executor_spin_some.part.0+0x6a>
 800f75c:	6869      	ldr	r1, [r5, #4]
 800f75e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f762:	01a2      	lsls	r2, r4, #6
 800f764:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f768:	b1cb      	cbz	r3, 800f79e <rclc_executor_spin_some.part.0+0x6a>
 800f76a:	5c8b      	ldrb	r3, [r1, r2]
 800f76c:	2b0a      	cmp	r3, #10
 800f76e:	f200 80d8 	bhi.w	800f922 <rclc_executor_spin_some.part.0+0x1ee>
 800f772:	e8df f003 	tbb	[pc, r3]
 800f776:	9c9c      	.short	0x9c9c
 800f778:	068c8ca7 	.word	0x068c8ca7
 800f77c:	bdc90606 	.word	0xbdc90606
 800f780:	b2          	.byte	0xb2
 800f781:	00          	.byte	0x00
 800f782:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f786:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f78a:	4630      	mov	r0, r6
 800f78c:	f008 fa0e 	bl	8017bac <rcl_wait_set_add_service>
 800f790:	2800      	cmp	r0, #0
 800f792:	f040 8086 	bne.w	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f796:	68ab      	ldr	r3, [r5, #8]
 800f798:	3401      	adds	r4, #1
 800f79a:	429c      	cmp	r4, r3
 800f79c:	d3de      	bcc.n	800f75c <rclc_executor_spin_some.part.0+0x28>
 800f79e:	4643      	mov	r3, r8
 800f7a0:	464a      	mov	r2, r9
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f008 fa30 	bl	8017c08 <rcl_wait>
 800f7a8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 80c7 	beq.w	800f940 <rclc_executor_spin_some.part.0+0x20c>
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	f040 80b5 	bne.w	800f922 <rclc_executor_spin_some.part.0+0x1ee>
 800f7b8:	68ab      	ldr	r3, [r5, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 8159 	beq.w	800fa72 <rclc_executor_spin_some.part.0+0x33e>
 800f7c0:	2400      	movs	r4, #0
 800f7c2:	46a0      	mov	r8, r4
 800f7c4:	f240 1991 	movw	r9, #401	@ 0x191
 800f7c8:	e00a      	b.n	800f7e0 <rclc_executor_spin_some.part.0+0xac>
 800f7ca:	f7ff fb43 	bl	800ee54 <_rclc_check_for_new_data>
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	b110      	cbz	r0, 800f7d8 <rclc_executor_spin_some.part.0+0xa4>
 800f7d2:	4548      	cmp	r0, r9
 800f7d4:	f040 80b2 	bne.w	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f7d8:	68ab      	ldr	r3, [r5, #8]
 800f7da:	4598      	cmp	r8, r3
 800f7dc:	f080 8126 	bcs.w	800fa2c <rclc_executor_spin_some.part.0+0x2f8>
 800f7e0:	686a      	ldr	r2, [r5, #4]
 800f7e2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f7ec:	f108 0801 	add.w	r8, r8, #1
 800f7f0:	f1bc 0f00 	cmp.w	ip, #0
 800f7f4:	d1e9      	bne.n	800f7ca <rclc_executor_spin_some.part.0+0x96>
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f7fe:	4798      	blx	r3
 800f800:	2800      	cmp	r0, #0
 800f802:	f000 809b 	beq.w	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f806:	68ab      	ldr	r3, [r5, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 8097 	beq.w	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f80e:	f04f 0800 	mov.w	r8, #0
 800f812:	f240 1991 	movw	r9, #401	@ 0x191
 800f816:	e009      	b.n	800f82c <rclc_executor_spin_some.part.0+0xf8>
 800f818:	f7ff fb6a 	bl	800eef0 <_rclc_take_new_data>
 800f81c:	4604      	mov	r4, r0
 800f81e:	b110      	cbz	r0, 800f826 <rclc_executor_spin_some.part.0+0xf2>
 800f820:	4548      	cmp	r0, r9
 800f822:	f040 808b 	bne.w	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f826:	68ab      	ldr	r3, [r5, #8]
 800f828:	4598      	cmp	r8, r3
 800f82a:	d209      	bcs.n	800f840 <rclc_executor_spin_some.part.0+0x10c>
 800f82c:	6868      	ldr	r0, [r5, #4]
 800f82e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f832:	4631      	mov	r1, r6
 800f834:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f838:	f108 0801 	add.w	r8, r8, #1
 800f83c:	2a00      	cmp	r2, #0
 800f83e:	d1eb      	bne.n	800f818 <rclc_executor_spin_some.part.0+0xe4>
 800f840:	2600      	movs	r6, #0
 800f842:	b97b      	cbnz	r3, 800f864 <rclc_executor_spin_some.part.0+0x130>
 800f844:	e07a      	b.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f846:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f84a:	2a08      	cmp	r2, #8
 800f84c:	f000 80fd 	beq.w	800fa4a <rclc_executor_spin_some.part.0+0x316>
 800f850:	2a09      	cmp	r2, #9
 800f852:	f000 80ef 	beq.w	800fa34 <rclc_executor_spin_some.part.0+0x300>
 800f856:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f85a:	b98a      	cbnz	r2, 800f880 <rclc_executor_spin_some.part.0+0x14c>
 800f85c:	3601      	adds	r6, #1
 800f85e:	429e      	cmp	r6, r3
 800f860:	d262      	bcs.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800f862:	2400      	movs	r4, #0
 800f864:	686a      	ldr	r2, [r5, #4]
 800f866:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f86a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f86e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f872:	2900      	cmp	r1, #0
 800f874:	d062      	beq.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f876:	7841      	ldrb	r1, [r0, #1]
 800f878:	2900      	cmp	r1, #0
 800f87a:	d0e4      	beq.n	800f846 <rclc_executor_spin_some.part.0+0x112>
 800f87c:	2901      	cmp	r1, #1
 800f87e:	d1ed      	bne.n	800f85c <rclc_executor_spin_some.part.0+0x128>
 800f880:	f7ff fcaa 	bl	800f1d8 <_rclc_execute.part.0>
 800f884:	2800      	cmp	r0, #0
 800f886:	f040 80b6 	bne.w	800f9f6 <rclc_executor_spin_some.part.0+0x2c2>
 800f88a:	68ab      	ldr	r3, [r5, #8]
 800f88c:	e7e6      	b.n	800f85c <rclc_executor_spin_some.part.0+0x128>
 800f88e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f892:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f896:	4630      	mov	r0, r6
 800f898:	f008 f95c 	bl	8017b54 <rcl_wait_set_add_client>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f43f af7a 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f8a2:	9001      	str	r0, [sp, #4]
 800f8a4:	f000 facc 	bl	800fe40 <rcutils_reset_error>
 800f8a8:	9801      	ldr	r0, [sp, #4]
 800f8aa:	4607      	mov	r7, r0
 800f8ac:	e03c      	b.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800f8ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f007 fe04 	bl	80174c4 <rcl_wait_set_add_subscription>
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	f43f af6a 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f8c2:	e7ee      	b.n	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f8c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f008 f911 	bl	8017af4 <rcl_wait_set_add_timer>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	f43f af5f 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f8d8:	e7e3      	b.n	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f8da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f008 f8da 	bl	8017a9c <rcl_wait_set_add_guard_condition>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	f43f af54 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f8ee:	e7d8      	b.n	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f8f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8f8:	3110      	adds	r1, #16
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f008 fe5c 	bl	80185b8 <rcl_action_wait_set_add_action_server>
 800f900:	2800      	cmp	r0, #0
 800f902:	f43f af48 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f906:	e7cc      	b.n	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f908:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f90c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f910:	3110      	adds	r1, #16
 800f912:	2300      	movs	r3, #0
 800f914:	4630      	mov	r0, r6
 800f916:	f008 fc27 	bl	8018168 <rcl_action_wait_set_add_action_client>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	f43f af3b 	beq.w	800f796 <rclc_executor_spin_some.part.0+0x62>
 800f920:	e7bf      	b.n	800f8a2 <rclc_executor_spin_some.part.0+0x16e>
 800f922:	f000 fa8d 	bl	800fe40 <rcutils_reset_error>
 800f926:	2701      	movs	r7, #1
 800f928:	4638      	mov	r0, r7
 800f92a:	b003      	add	sp, #12
 800f92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f930:	f000 fa86 	bl	800fe40 <rcutils_reset_error>
 800f934:	4638      	mov	r0, r7
 800f936:	b003      	add	sp, #12
 800f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93c:	4627      	mov	r7, r4
 800f93e:	e7f3      	b.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800f940:	68ab      	ldr	r3, [r5, #8]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8092 	beq.w	800fa6c <rclc_executor_spin_some.part.0+0x338>
 800f948:	2400      	movs	r4, #0
 800f94a:	46a0      	mov	r8, r4
 800f94c:	f240 1991 	movw	r9, #401	@ 0x191
 800f950:	e008      	b.n	800f964 <rclc_executor_spin_some.part.0+0x230>
 800f952:	f7ff fa7f 	bl	800ee54 <_rclc_check_for_new_data>
 800f956:	4604      	mov	r4, r0
 800f958:	b108      	cbz	r0, 800f95e <rclc_executor_spin_some.part.0+0x22a>
 800f95a:	4548      	cmp	r0, r9
 800f95c:	d1ee      	bne.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f95e:	68ab      	ldr	r3, [r5, #8]
 800f960:	4598      	cmp	r8, r3
 800f962:	d265      	bcs.n	800fa30 <rclc_executor_spin_some.part.0+0x2fc>
 800f964:	686a      	ldr	r2, [r5, #4]
 800f966:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f96a:	4631      	mov	r1, r6
 800f96c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f970:	f108 0801 	add.w	r8, r8, #1
 800f974:	f1bc 0f00 	cmp.w	ip, #0
 800f978:	d1eb      	bne.n	800f952 <rclc_executor_spin_some.part.0+0x21e>
 800f97a:	4619      	mov	r1, r3
 800f97c:	4610      	mov	r0, r2
 800f97e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f982:	4798      	blx	r3
 800f984:	2800      	cmp	r0, #0
 800f986:	d0d9      	beq.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f988:	68ab      	ldr	r3, [r5, #8]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0d6      	beq.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f98e:	f04f 0800 	mov.w	r8, #0
 800f992:	f240 1991 	movw	r9, #401	@ 0x191
 800f996:	f240 2a59 	movw	sl, #601	@ 0x259
 800f99a:	e00e      	b.n	800f9ba <rclc_executor_spin_some.part.0+0x286>
 800f99c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f9a0:	2b08      	cmp	r3, #8
 800f9a2:	d033      	beq.n	800fa0c <rclc_executor_spin_some.part.0+0x2d8>
 800f9a4:	2b09      	cmp	r3, #9
 800f9a6:	d028      	beq.n	800f9fa <rclc_executor_spin_some.part.0+0x2c6>
 800f9a8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f9ac:	b9fb      	cbnz	r3, 800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800f9ae:	68ab      	ldr	r3, [r5, #8]
 800f9b0:	f108 0801 	add.w	r8, r8, #1
 800f9b4:	4598      	cmp	r8, r3
 800f9b6:	d2b7      	bcs.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800f9b8:	2400      	movs	r4, #0
 800f9ba:	6868      	ldr	r0, [r5, #4]
 800f9bc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f9c0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800f9c4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d0b7      	beq.n	800f93c <rclc_executor_spin_some.part.0+0x208>
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	f7ff fa8f 	bl	800eef0 <_rclc_take_new_data>
 800f9d2:	b118      	cbz	r0, 800f9dc <rclc_executor_spin_some.part.0+0x2a8>
 800f9d4:	4548      	cmp	r0, r9
 800f9d6:	d001      	beq.n	800f9dc <rclc_executor_spin_some.part.0+0x2a8>
 800f9d8:	4550      	cmp	r0, sl
 800f9da:	d10c      	bne.n	800f9f6 <rclc_executor_spin_some.part.0+0x2c2>
 800f9dc:	686b      	ldr	r3, [r5, #4]
 800f9de:	eb13 000b 	adds.w	r0, r3, fp
 800f9e2:	d021      	beq.n	800fa28 <rclc_executor_spin_some.part.0+0x2f4>
 800f9e4:	7842      	ldrb	r2, [r0, #1]
 800f9e6:	2a00      	cmp	r2, #0
 800f9e8:	d0d8      	beq.n	800f99c <rclc_executor_spin_some.part.0+0x268>
 800f9ea:	2a01      	cmp	r2, #1
 800f9ec:	d1df      	bne.n	800f9ae <rclc_executor_spin_some.part.0+0x27a>
 800f9ee:	f7ff fbf3 	bl	800f1d8 <_rclc_execute.part.0>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d0db      	beq.n	800f9ae <rclc_executor_spin_some.part.0+0x27a>
 800f9f6:	4607      	mov	r7, r0
 800f9f8:	e796      	b.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800f9fa:	6843      	ldr	r3, [r0, #4]
 800f9fc:	6a1a      	ldr	r2, [r3, #32]
 800f9fe:	2a00      	cmp	r2, #0
 800fa00:	d1f5      	bne.n	800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800fa02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d0d1      	beq.n	800f9ae <rclc_executor_spin_some.part.0+0x27a>
 800fa0a:	e7f0      	b.n	800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800fa0c:	6843      	ldr	r3, [r0, #4]
 800fa0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa10:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800fa14:	d1eb      	bne.n	800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800fa16:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fa1a:	2a00      	cmp	r2, #0
 800fa1c:	d1e7      	bne.n	800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800fa1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d0c3      	beq.n	800f9ae <rclc_executor_spin_some.part.0+0x27a>
 800fa26:	e7e2      	b.n	800f9ee <rclc_executor_spin_some.part.0+0x2ba>
 800fa28:	270b      	movs	r7, #11
 800fa2a:	e77d      	b.n	800f928 <rclc_executor_spin_some.part.0+0x1f4>
 800fa2c:	686a      	ldr	r2, [r5, #4]
 800fa2e:	e6e2      	b.n	800f7f6 <rclc_executor_spin_some.part.0+0xc2>
 800fa30:	686a      	ldr	r2, [r5, #4]
 800fa32:	e7a2      	b.n	800f97a <rclc_executor_spin_some.part.0+0x246>
 800fa34:	6842      	ldr	r2, [r0, #4]
 800fa36:	6a11      	ldr	r1, [r2, #32]
 800fa38:	2900      	cmp	r1, #0
 800fa3a:	f47f af21 	bne.w	800f880 <rclc_executor_spin_some.part.0+0x14c>
 800fa3e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800fa42:	2a00      	cmp	r2, #0
 800fa44:	f43f af0a 	beq.w	800f85c <rclc_executor_spin_some.part.0+0x128>
 800fa48:	e71a      	b.n	800f880 <rclc_executor_spin_some.part.0+0x14c>
 800fa4a:	6842      	ldr	r2, [r0, #4]
 800fa4c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800fa4e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800fa52:	f47f af15 	bne.w	800f880 <rclc_executor_spin_some.part.0+0x14c>
 800fa56:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	f47f af10 	bne.w	800f880 <rclc_executor_spin_some.part.0+0x14c>
 800fa60:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800fa64:	2a00      	cmp	r2, #0
 800fa66:	f43f aef9 	beq.w	800f85c <rclc_executor_spin_some.part.0+0x128>
 800fa6a:	e709      	b.n	800f880 <rclc_executor_spin_some.part.0+0x14c>
 800fa6c:	686a      	ldr	r2, [r5, #4]
 800fa6e:	461c      	mov	r4, r3
 800fa70:	e783      	b.n	800f97a <rclc_executor_spin_some.part.0+0x246>
 800fa72:	686a      	ldr	r2, [r5, #4]
 800fa74:	461c      	mov	r4, r3
 800fa76:	e6be      	b.n	800f7f6 <rclc_executor_spin_some.part.0+0xc2>

0800fa78 <rclc_executor_spin>:
 800fa78:	b1d0      	cbz	r0, 800fab0 <rclc_executor_spin+0x38>
 800fa7a:	b510      	push	{r4, lr}
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	b082      	sub	sp, #8
 800fa80:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800fa84:	6820      	ldr	r0, [r4, #0]
 800fa86:	e9cd 2300 	strd	r2, r3, [sp]
 800fa8a:	f006 f9f1 	bl	8015e70 <rcl_context_is_valid>
 800fa8e:	4601      	mov	r1, r0
 800fa90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa94:	4620      	mov	r0, r4
 800fa96:	b131      	cbz	r1, 800faa6 <rclc_executor_spin+0x2e>
 800fa98:	f7ff fe4c 	bl	800f734 <rclc_executor_spin_some.part.0>
 800fa9c:	f030 0302 	bics.w	r3, r0, #2
 800faa0:	d0ee      	beq.n	800fa80 <rclc_executor_spin+0x8>
 800faa2:	b002      	add	sp, #8
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	f000 f9cb 	bl	800fe40 <rcutils_reset_error>
 800faaa:	2001      	movs	r0, #1
 800faac:	b002      	add	sp, #8
 800faae:	bd10      	pop	{r4, pc}
 800fab0:	200b      	movs	r0, #11
 800fab2:	4770      	bx	lr

0800fab4 <rclc_executor_handle_counters_zero_init>:
 800fab4:	b130      	cbz	r0, 800fac4 <rclc_executor_handle_counters_zero_init+0x10>
 800fab6:	b508      	push	{r3, lr}
 800fab8:	2220      	movs	r2, #32
 800faba:	2100      	movs	r1, #0
 800fabc:	f00c f91a 	bl	801bcf4 <memset>
 800fac0:	2000      	movs	r0, #0
 800fac2:	bd08      	pop	{r3, pc}
 800fac4:	200b      	movs	r0, #11
 800fac6:	4770      	bx	lr

0800fac8 <rclc_executor_handle_init>:
 800fac8:	b168      	cbz	r0, 800fae6 <rclc_executor_handle_init+0x1e>
 800faca:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800faf0 <rclc_executor_handle_init+0x28>
 800face:	2300      	movs	r3, #0
 800fad0:	220b      	movs	r2, #11
 800fad2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800fad6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800fada:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800fade:	8002      	strh	r2, [r0, #0]
 800fae0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800fae2:	4618      	mov	r0, r3
 800fae4:	4770      	bx	lr
 800fae6:	200b      	movs	r0, #11
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w
	...

0800faf8 <rclc_support_init_with_options>:
 800faf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fafc:	b083      	sub	sp, #12
 800fafe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fb00:	b340      	cbz	r0, 800fb54 <rclc_support_init_with_options+0x5c>
 800fb02:	461d      	mov	r5, r3
 800fb04:	b333      	cbz	r3, 800fb54 <rclc_support_init_with_options+0x5c>
 800fb06:	b32e      	cbz	r6, 800fb54 <rclc_support_init_with_options+0x5c>
 800fb08:	46e9      	mov	r9, sp
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4648      	mov	r0, r9
 800fb0e:	460f      	mov	r7, r1
 800fb10:	4690      	mov	r8, r2
 800fb12:	f006 f9a3 	bl	8015e5c <rcl_get_zero_initialized_context>
 800fb16:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb20:	4623      	mov	r3, r4
 800fb22:	4641      	mov	r1, r8
 800fb24:	4638      	mov	r0, r7
 800fb26:	f006 fa09 	bl	8015f3c <rcl_init>
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	b960      	cbnz	r0, 800fb48 <rclc_support_init_with_options+0x50>
 800fb2e:	60a6      	str	r6, [r4, #8]
 800fb30:	4632      	mov	r2, r6
 800fb32:	f104 010c 	add.w	r1, r4, #12
 800fb36:	2003      	movs	r0, #3
 800fb38:	f007 f808 	bl	8016b4c <rcl_clock_init>
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	b918      	cbnz	r0, 800fb48 <rclc_support_init_with_options+0x50>
 800fb40:	4628      	mov	r0, r5
 800fb42:	b003      	add	sp, #12
 800fb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb48:	f000 f97a 	bl	800fe40 <rcutils_reset_error>
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	b003      	add	sp, #12
 800fb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb54:	250b      	movs	r5, #11
 800fb56:	4628      	mov	r0, r5
 800fb58:	b003      	add	sp, #12
 800fb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb5e:	bf00      	nop

0800fb60 <rclc_node_init_default>:
 800fb60:	b3b8      	cbz	r0, 800fbd2 <rclc_node_init_default+0x72>
 800fb62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb66:	460d      	mov	r5, r1
 800fb68:	b0a1      	sub	sp, #132	@ 0x84
 800fb6a:	b329      	cbz	r1, 800fbb8 <rclc_node_init_default+0x58>
 800fb6c:	4616      	mov	r6, r2
 800fb6e:	b31a      	cbz	r2, 800fbb8 <rclc_node_init_default+0x58>
 800fb70:	461f      	mov	r7, r3
 800fb72:	b30b      	cbz	r3, 800fbb8 <rclc_node_init_default+0x58>
 800fb74:	f10d 0810 	add.w	r8, sp, #16
 800fb78:	4604      	mov	r4, r0
 800fb7a:	4640      	mov	r0, r8
 800fb7c:	f006 fb04 	bl	8016188 <rcl_get_zero_initialized_node>
 800fb80:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fb84:	f10d 0918 	add.w	r9, sp, #24
 800fb88:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f006 fc73 	bl	8016478 <rcl_node_get_default_options>
 800fb92:	4640      	mov	r0, r8
 800fb94:	f006 faf8 	bl	8016188 <rcl_get_zero_initialized_node>
 800fb98:	f8cd 9000 	str.w	r9, [sp]
 800fb9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fba0:	463b      	mov	r3, r7
 800fba2:	e884 0003 	stmia.w	r4, {r0, r1}
 800fba6:	4632      	mov	r2, r6
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f006 faf6 	bl	801619c <rcl_node_init>
 800fbb0:	b930      	cbnz	r0, 800fbc0 <rclc_node_init_default+0x60>
 800fbb2:	b021      	add	sp, #132	@ 0x84
 800fbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbb8:	200b      	movs	r0, #11
 800fbba:	b021      	add	sp, #132	@ 0x84
 800fbbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc0:	9003      	str	r0, [sp, #12]
 800fbc2:	f000 f93d 	bl	800fe40 <rcutils_reset_error>
 800fbc6:	f000 f93b 	bl	800fe40 <rcutils_reset_error>
 800fbca:	9803      	ldr	r0, [sp, #12]
 800fbcc:	b021      	add	sp, #132	@ 0x84
 800fbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd2:	200b      	movs	r0, #11
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop

0800fbd8 <rclc_publisher_init_default>:
 800fbd8:	b368      	cbz	r0, 800fc36 <rclc_publisher_init_default+0x5e>
 800fbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbde:	460d      	mov	r5, r1
 800fbe0:	b0a0      	sub	sp, #128	@ 0x80
 800fbe2:	b321      	cbz	r1, 800fc2e <rclc_publisher_init_default+0x56>
 800fbe4:	4616      	mov	r6, r2
 800fbe6:	b312      	cbz	r2, 800fc2e <rclc_publisher_init_default+0x56>
 800fbe8:	461f      	mov	r7, r3
 800fbea:	b303      	cbz	r3, 800fc2e <rclc_publisher_init_default+0x56>
 800fbec:	4604      	mov	r4, r0
 800fbee:	f7ff f821 	bl	800ec34 <rcl_get_zero_initialized_publisher>
 800fbf2:	f10d 0810 	add.w	r8, sp, #16
 800fbf6:	6020      	str	r0, [r4, #0]
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	f7ff f8b7 	bl	800ed6c <rcl_publisher_get_default_options>
 800fbfe:	490f      	ldr	r1, [pc, #60]	@ (800fc3c <rclc_publisher_init_default+0x64>)
 800fc00:	2250      	movs	r2, #80	@ 0x50
 800fc02:	4640      	mov	r0, r8
 800fc04:	f00c f93f 	bl	801be86 <memcpy>
 800fc08:	f8cd 8000 	str.w	r8, [sp]
 800fc0c:	463b      	mov	r3, r7
 800fc0e:	4632      	mov	r2, r6
 800fc10:	4629      	mov	r1, r5
 800fc12:	4620      	mov	r0, r4
 800fc14:	f7ff f814 	bl	800ec40 <rcl_publisher_init>
 800fc18:	b910      	cbnz	r0, 800fc20 <rclc_publisher_init_default+0x48>
 800fc1a:	b020      	add	sp, #128	@ 0x80
 800fc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc20:	9003      	str	r0, [sp, #12]
 800fc22:	f000 f90d 	bl	800fe40 <rcutils_reset_error>
 800fc26:	9803      	ldr	r0, [sp, #12]
 800fc28:	b020      	add	sp, #128	@ 0x80
 800fc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc2e:	200b      	movs	r0, #11
 800fc30:	b020      	add	sp, #128	@ 0x80
 800fc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc36:	200b      	movs	r0, #11
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	0801da28 	.word	0x0801da28

0800fc40 <rclc_publisher_init_best_effort>:
 800fc40:	b368      	cbz	r0, 800fc9e <rclc_publisher_init_best_effort+0x5e>
 800fc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc46:	460d      	mov	r5, r1
 800fc48:	b0a0      	sub	sp, #128	@ 0x80
 800fc4a:	b321      	cbz	r1, 800fc96 <rclc_publisher_init_best_effort+0x56>
 800fc4c:	4616      	mov	r6, r2
 800fc4e:	b312      	cbz	r2, 800fc96 <rclc_publisher_init_best_effort+0x56>
 800fc50:	461f      	mov	r7, r3
 800fc52:	b303      	cbz	r3, 800fc96 <rclc_publisher_init_best_effort+0x56>
 800fc54:	4604      	mov	r4, r0
 800fc56:	f7fe ffed 	bl	800ec34 <rcl_get_zero_initialized_publisher>
 800fc5a:	f10d 0810 	add.w	r8, sp, #16
 800fc5e:	6020      	str	r0, [r4, #0]
 800fc60:	4640      	mov	r0, r8
 800fc62:	f7ff f883 	bl	800ed6c <rcl_publisher_get_default_options>
 800fc66:	490f      	ldr	r1, [pc, #60]	@ (800fca4 <rclc_publisher_init_best_effort+0x64>)
 800fc68:	2250      	movs	r2, #80	@ 0x50
 800fc6a:	4640      	mov	r0, r8
 800fc6c:	f00c f90b 	bl	801be86 <memcpy>
 800fc70:	f8cd 8000 	str.w	r8, [sp]
 800fc74:	463b      	mov	r3, r7
 800fc76:	4632      	mov	r2, r6
 800fc78:	4629      	mov	r1, r5
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f7fe ffe0 	bl	800ec40 <rcl_publisher_init>
 800fc80:	b910      	cbnz	r0, 800fc88 <rclc_publisher_init_best_effort+0x48>
 800fc82:	b020      	add	sp, #128	@ 0x80
 800fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc88:	9003      	str	r0, [sp, #12]
 800fc8a:	f000 f8d9 	bl	800fe40 <rcutils_reset_error>
 800fc8e:	9803      	ldr	r0, [sp, #12]
 800fc90:	b020      	add	sp, #128	@ 0x80
 800fc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc96:	200b      	movs	r0, #11
 800fc98:	b020      	add	sp, #128	@ 0x80
 800fc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9e:	200b      	movs	r0, #11
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	0801da78 	.word	0x0801da78

0800fca8 <rclc_service_init_default>:
 800fca8:	b368      	cbz	r0, 800fd06 <rclc_service_init_default+0x5e>
 800fcaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcae:	460d      	mov	r5, r1
 800fcb0:	b09e      	sub	sp, #120	@ 0x78
 800fcb2:	b321      	cbz	r1, 800fcfe <rclc_service_init_default+0x56>
 800fcb4:	4616      	mov	r6, r2
 800fcb6:	b312      	cbz	r2, 800fcfe <rclc_service_init_default+0x56>
 800fcb8:	461f      	mov	r7, r3
 800fcba:	b303      	cbz	r3, 800fcfe <rclc_service_init_default+0x56>
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	f006 fdab 	bl	8016818 <rcl_get_zero_initialized_service>
 800fcc2:	f10d 0810 	add.w	r8, sp, #16
 800fcc6:	6020      	str	r0, [r4, #0]
 800fcc8:	4640      	mov	r0, r8
 800fcca:	f006 fe33 	bl	8016934 <rcl_service_get_default_options>
 800fcce:	490f      	ldr	r1, [pc, #60]	@ (800fd0c <rclc_service_init_default+0x64>)
 800fcd0:	2250      	movs	r2, #80	@ 0x50
 800fcd2:	4640      	mov	r0, r8
 800fcd4:	f00c f8d7 	bl	801be86 <memcpy>
 800fcd8:	f8cd 8000 	str.w	r8, [sp]
 800fcdc:	463b      	mov	r3, r7
 800fcde:	4632      	mov	r2, r6
 800fce0:	4629      	mov	r1, r5
 800fce2:	4620      	mov	r0, r4
 800fce4:	f006 fd9e 	bl	8016824 <rcl_service_init>
 800fce8:	b910      	cbnz	r0, 800fcf0 <rclc_service_init_default+0x48>
 800fcea:	b01e      	add	sp, #120	@ 0x78
 800fcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf0:	9003      	str	r0, [sp, #12]
 800fcf2:	f000 f8a5 	bl	800fe40 <rcutils_reset_error>
 800fcf6:	9803      	ldr	r0, [sp, #12]
 800fcf8:	b01e      	add	sp, #120	@ 0x78
 800fcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfe:	200b      	movs	r0, #11
 800fd00:	b01e      	add	sp, #120	@ 0x78
 800fd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd06:	200b      	movs	r0, #11
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	0801dac8 	.word	0x0801dac8

0800fd10 <rclc_timer_init_default>:
 800fd10:	b360      	cbz	r0, 800fd6c <rclc_timer_init_default+0x5c>
 800fd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd16:	460e      	mov	r6, r1
 800fd18:	b08a      	sub	sp, #40	@ 0x28
 800fd1a:	b319      	cbz	r1, 800fd64 <rclc_timer_init_default+0x54>
 800fd1c:	4690      	mov	r8, r2
 800fd1e:	461f      	mov	r7, r3
 800fd20:	4605      	mov	r5, r0
 800fd22:	f007 f8f1 	bl	8016f08 <rcl_get_zero_initialized_timer>
 800fd26:	68b4      	ldr	r4, [r6, #8]
 800fd28:	6028      	str	r0, [r5, #0]
 800fd2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd2c:	f10d 0c0c 	add.w	ip, sp, #12
 800fd30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	f8cc 3000 	str.w	r3, [ip]
 800fd3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd3c:	9302      	str	r3, [sp, #8]
 800fd3e:	e9cd 8700 	strd	r8, r7, [sp]
 800fd42:	4628      	mov	r0, r5
 800fd44:	4632      	mov	r2, r6
 800fd46:	f106 010c 	add.w	r1, r6, #12
 800fd4a:	f007 f8e5 	bl	8016f18 <rcl_timer_init>
 800fd4e:	b910      	cbnz	r0, 800fd56 <rclc_timer_init_default+0x46>
 800fd50:	b00a      	add	sp, #40	@ 0x28
 800fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd56:	9009      	str	r0, [sp, #36]	@ 0x24
 800fd58:	f000 f872 	bl	800fe40 <rcutils_reset_error>
 800fd5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd5e:	b00a      	add	sp, #40	@ 0x28
 800fd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd64:	200b      	movs	r0, #11
 800fd66:	b00a      	add	sp, #40	@ 0x28
 800fd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd6c:	200b      	movs	r0, #11
 800fd6e:	4770      	bx	lr

0800fd70 <__default_zero_allocate>:
 800fd70:	f00b bad6 	b.w	801b320 <calloc>

0800fd74 <__default_reallocate>:
 800fd74:	f00b bc74 	b.w	801b660 <realloc>

0800fd78 <__default_deallocate>:
 800fd78:	f00b bb50 	b.w	801b41c <free>

0800fd7c <__default_allocate>:
 800fd7c:	f00b bb46 	b.w	801b40c <malloc>

0800fd80 <rcutils_get_zero_initialized_allocator>:
 800fd80:	b510      	push	{r4, lr}
 800fd82:	4c05      	ldr	r4, [pc, #20]	@ (800fd98 <rcutils_get_zero_initialized_allocator+0x18>)
 800fd84:	4686      	mov	lr, r0
 800fd86:	4684      	mov	ip, r0
 800fd88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd8e:	6823      	ldr	r3, [r4, #0]
 800fd90:	f8cc 3000 	str.w	r3, [ip]
 800fd94:	4670      	mov	r0, lr
 800fd96:	bd10      	pop	{r4, pc}
 800fd98:	0801db18 	.word	0x0801db18

0800fd9c <rcutils_set_default_allocator>:
 800fd9c:	b1a8      	cbz	r0, 800fdca <rcutils_set_default_allocator+0x2e>
 800fd9e:	6802      	ldr	r2, [r0, #0]
 800fda0:	b1a2      	cbz	r2, 800fdcc <rcutils_set_default_allocator+0x30>
 800fda2:	6841      	ldr	r1, [r0, #4]
 800fda4:	b1a1      	cbz	r1, 800fdd0 <rcutils_set_default_allocator+0x34>
 800fda6:	b410      	push	{r4}
 800fda8:	68c4      	ldr	r4, [r0, #12]
 800fdaa:	b164      	cbz	r4, 800fdc6 <rcutils_set_default_allocator+0x2a>
 800fdac:	6880      	ldr	r0, [r0, #8]
 800fdae:	b138      	cbz	r0, 800fdc0 <rcutils_set_default_allocator+0x24>
 800fdb0:	4b08      	ldr	r3, [pc, #32]	@ (800fdd4 <rcutils_set_default_allocator+0x38>)
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800fdba:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdc4:	4770      	bx	lr
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	e7fa      	b.n	800fdc0 <rcutils_set_default_allocator+0x24>
 800fdca:	4770      	bx	lr
 800fdcc:	4610      	mov	r0, r2
 800fdce:	4770      	bx	lr
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	4770      	bx	lr
 800fdd4:	200003a0 	.word	0x200003a0

0800fdd8 <rcutils_get_default_allocator>:
 800fdd8:	b510      	push	{r4, lr}
 800fdda:	4c05      	ldr	r4, [pc, #20]	@ (800fdf0 <rcutils_get_default_allocator+0x18>)
 800fddc:	4686      	mov	lr, r0
 800fdde:	4684      	mov	ip, r0
 800fde0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fde2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	f8cc 3000 	str.w	r3, [ip]
 800fdec:	4670      	mov	r0, lr
 800fdee:	bd10      	pop	{r4, pc}
 800fdf0:	200003a0 	.word	0x200003a0

0800fdf4 <rcutils_allocator_is_valid>:
 800fdf4:	b158      	cbz	r0, 800fe0e <rcutils_allocator_is_valid+0x1a>
 800fdf6:	6803      	ldr	r3, [r0, #0]
 800fdf8:	b143      	cbz	r3, 800fe0c <rcutils_allocator_is_valid+0x18>
 800fdfa:	6843      	ldr	r3, [r0, #4]
 800fdfc:	b133      	cbz	r3, 800fe0c <rcutils_allocator_is_valid+0x18>
 800fdfe:	68c3      	ldr	r3, [r0, #12]
 800fe00:	b123      	cbz	r3, 800fe0c <rcutils_allocator_is_valid+0x18>
 800fe02:	6880      	ldr	r0, [r0, #8]
 800fe04:	3800      	subs	r0, #0
 800fe06:	bf18      	it	ne
 800fe08:	2001      	movne	r0, #1
 800fe0a:	4770      	bx	lr
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	4770      	bx	lr

0800fe10 <rcutils_get_error_string>:
 800fe10:	4b06      	ldr	r3, [pc, #24]	@ (800fe2c <rcutils_get_error_string+0x1c>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	b13b      	cbz	r3, 800fe26 <rcutils_get_error_string+0x16>
 800fe16:	4b06      	ldr	r3, [pc, #24]	@ (800fe30 <rcutils_get_error_string+0x20>)
 800fe18:	781a      	ldrb	r2, [r3, #0]
 800fe1a:	b90a      	cbnz	r2, 800fe20 <rcutils_get_error_string+0x10>
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	4b04      	ldr	r3, [pc, #16]	@ (800fe34 <rcutils_get_error_string+0x24>)
 800fe22:	7818      	ldrb	r0, [r3, #0]
 800fe24:	4770      	bx	lr
 800fe26:	4b04      	ldr	r3, [pc, #16]	@ (800fe38 <rcutils_get_error_string+0x28>)
 800fe28:	7818      	ldrb	r0, [r3, #0]
 800fe2a:	4770      	bx	lr
 800fe2c:	20006ed8 	.word	0x20006ed8
 800fe30:	20006ef1 	.word	0x20006ef1
 800fe34:	20006ef0 	.word	0x20006ef0
 800fe38:	0801d6d0 	.word	0x0801d6d0
 800fe3c:	00000000 	.word	0x00000000

0800fe40 <rcutils_reset_error>:
 800fe40:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fe60 <rcutils_reset_error+0x20>
 800fe44:	4a08      	ldr	r2, [pc, #32]	@ (800fe68 <rcutils_reset_error+0x28>)
 800fe46:	4809      	ldr	r0, [pc, #36]	@ (800fe6c <rcutils_reset_error+0x2c>)
 800fe48:	4909      	ldr	r1, [pc, #36]	@ (800fe70 <rcutils_reset_error+0x30>)
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	8013      	strh	r3, [r2, #0]
 800fe4e:	ed82 7b02 	vstr	d7, [r2, #8]
 800fe52:	4a08      	ldr	r2, [pc, #32]	@ (800fe74 <rcutils_reset_error+0x34>)
 800fe54:	7003      	strb	r3, [r0, #0]
 800fe56:	700b      	strb	r3, [r1, #0]
 800fe58:	7013      	strb	r3, [r2, #0]
 800fe5a:	4770      	bx	lr
 800fe5c:	f3af 8000 	nop.w
	...
 800fe68:	20006ee0 	.word	0x20006ee0
 800fe6c:	20006ef1 	.word	0x20006ef1
 800fe70:	20006ef0 	.word	0x20006ef0
 800fe74:	20006ed8 	.word	0x20006ed8

0800fe78 <rcutils_system_time_now>:
 800fe78:	b308      	cbz	r0, 800febe <rcutils_system_time_now+0x46>
 800fe7a:	b570      	push	{r4, r5, r6, lr}
 800fe7c:	b084      	sub	sp, #16
 800fe7e:	4604      	mov	r4, r0
 800fe80:	4669      	mov	r1, sp
 800fe82:	2001      	movs	r0, #1
 800fe84:	f7f2 fbb8 	bl	80025f8 <clock_gettime>
 800fe88:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fe8c:	2d00      	cmp	r5, #0
 800fe8e:	db13      	blt.n	800feb8 <rcutils_system_time_now+0x40>
 800fe90:	9902      	ldr	r1, [sp, #8]
 800fe92:	2900      	cmp	r1, #0
 800fe94:	db0d      	blt.n	800feb2 <rcutils_system_time_now+0x3a>
 800fe96:	4e0b      	ldr	r6, [pc, #44]	@ (800fec4 <rcutils_system_time_now+0x4c>)
 800fe98:	fba3 3206 	umull	r3, r2, r3, r6
 800fe9c:	185b      	adds	r3, r3, r1
 800fe9e:	fb06 2205 	mla	r2, r6, r5, r2
 800fea2:	f04f 0000 	mov.w	r0, #0
 800fea6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800feaa:	e9c4 3200 	strd	r3, r2, [r4]
 800feae:	b004      	add	sp, #16
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	ea53 0205 	orrs.w	r2, r3, r5
 800feb6:	d1ee      	bne.n	800fe96 <rcutils_system_time_now+0x1e>
 800feb8:	2002      	movs	r0, #2
 800feba:	b004      	add	sp, #16
 800febc:	bd70      	pop	{r4, r5, r6, pc}
 800febe:	200b      	movs	r0, #11
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	3b9aca00 	.word	0x3b9aca00

0800fec8 <rcutils_steady_time_now>:
 800fec8:	b308      	cbz	r0, 800ff0e <rcutils_steady_time_now+0x46>
 800feca:	b570      	push	{r4, r5, r6, lr}
 800fecc:	b084      	sub	sp, #16
 800fece:	4604      	mov	r4, r0
 800fed0:	4669      	mov	r1, sp
 800fed2:	2000      	movs	r0, #0
 800fed4:	f7f2 fb90 	bl	80025f8 <clock_gettime>
 800fed8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fedc:	2d00      	cmp	r5, #0
 800fede:	db13      	blt.n	800ff08 <rcutils_steady_time_now+0x40>
 800fee0:	9902      	ldr	r1, [sp, #8]
 800fee2:	2900      	cmp	r1, #0
 800fee4:	db0d      	blt.n	800ff02 <rcutils_steady_time_now+0x3a>
 800fee6:	4e0b      	ldr	r6, [pc, #44]	@ (800ff14 <rcutils_steady_time_now+0x4c>)
 800fee8:	fba3 3206 	umull	r3, r2, r3, r6
 800feec:	185b      	adds	r3, r3, r1
 800feee:	fb06 2205 	mla	r2, r6, r5, r2
 800fef2:	f04f 0000 	mov.w	r0, #0
 800fef6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fefa:	e9c4 3200 	strd	r3, r2, [r4]
 800fefe:	b004      	add	sp, #16
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	ea53 0205 	orrs.w	r2, r3, r5
 800ff06:	d1ee      	bne.n	800fee6 <rcutils_steady_time_now+0x1e>
 800ff08:	2002      	movs	r0, #2
 800ff0a:	b004      	add	sp, #16
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	200b      	movs	r0, #11
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	3b9aca00 	.word	0x3b9aca00

0800ff18 <rmw_get_zero_initialized_init_options>:
 800ff18:	b510      	push	{r4, lr}
 800ff1a:	2238      	movs	r2, #56	@ 0x38
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	2100      	movs	r1, #0
 800ff20:	f00b fee8 	bl	801bcf4 <memset>
 800ff24:	f104 0010 	add.w	r0, r4, #16
 800ff28:	f000 f80a 	bl	800ff40 <rmw_get_default_security_options>
 800ff2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff30:	60e3      	str	r3, [r4, #12]
 800ff32:	4620      	mov	r0, r4
 800ff34:	bd10      	pop	{r4, pc}
 800ff36:	bf00      	nop

0800ff38 <rmw_get_default_publisher_options>:
 800ff38:	2200      	movs	r2, #0
 800ff3a:	6002      	str	r2, [r0, #0]
 800ff3c:	7102      	strb	r2, [r0, #4]
 800ff3e:	4770      	bx	lr

0800ff40 <rmw_get_default_security_options>:
 800ff40:	2200      	movs	r2, #0
 800ff42:	7002      	strb	r2, [r0, #0]
 800ff44:	6042      	str	r2, [r0, #4]
 800ff46:	4770      	bx	lr

0800ff48 <rmw_uros_set_custom_transport>:
 800ff48:	b470      	push	{r4, r5, r6}
 800ff4a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ff4e:	b162      	cbz	r2, 800ff6a <rmw_uros_set_custom_transport+0x22>
 800ff50:	b15b      	cbz	r3, 800ff6a <rmw_uros_set_custom_transport+0x22>
 800ff52:	b155      	cbz	r5, 800ff6a <rmw_uros_set_custom_transport+0x22>
 800ff54:	b14e      	cbz	r6, 800ff6a <rmw_uros_set_custom_transport+0x22>
 800ff56:	4c06      	ldr	r4, [pc, #24]	@ (800ff70 <rmw_uros_set_custom_transport+0x28>)
 800ff58:	7020      	strb	r0, [r4, #0]
 800ff5a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ff5e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ff62:	6166      	str	r6, [r4, #20]
 800ff64:	2000      	movs	r0, #0
 800ff66:	bc70      	pop	{r4, r5, r6}
 800ff68:	4770      	bx	lr
 800ff6a:	200b      	movs	r0, #11
 800ff6c:	bc70      	pop	{r4, r5, r6}
 800ff6e:	4770      	bx	lr
 800ff70:	20006ef4 	.word	0x20006ef4

0800ff74 <rmw_init_options_init>:
 800ff74:	b084      	sub	sp, #16
 800ff76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff78:	b083      	sub	sp, #12
 800ff7a:	ad09      	add	r5, sp, #36	@ 0x24
 800ff7c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ff80:	b130      	cbz	r0, 800ff90 <rmw_init_options_init+0x1c>
 800ff82:	4604      	mov	r4, r0
 800ff84:	4628      	mov	r0, r5
 800ff86:	f7ff ff35 	bl	800fdf4 <rcutils_allocator_is_valid>
 800ff8a:	b108      	cbz	r0, 800ff90 <rmw_init_options_init+0x1c>
 800ff8c:	68a6      	ldr	r6, [r4, #8]
 800ff8e:	b12e      	cbz	r6, 800ff9c <rmw_init_options_init+0x28>
 800ff90:	200b      	movs	r0, #11
 800ff92:	b003      	add	sp, #12
 800ff94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff98:	b004      	add	sp, #16
 800ff9a:	4770      	bx	lr
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e9c4 2300 	strd	r2, r3, [r4]
 800ffa4:	4b22      	ldr	r3, [pc, #136]	@ (8010030 <rmw_init_options_init+0xbc>)
 800ffa6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8010040 <rmw_init_options_init+0xcc>
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60a3      	str	r3, [r4, #8]
 800ffae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffb0:	f104 0c20 	add.w	ip, r4, #32
 800ffb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffb8:	466f      	mov	r7, sp
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	f8cc 3000 	str.w	r3, [ip]
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ffc6:	60e6      	str	r6, [r4, #12]
 800ffc8:	f7ff ffba 	bl	800ff40 <rmw_get_default_security_options>
 800ffcc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ffd0:	f104 0310 	add.w	r3, r4, #16
 800ffd4:	e883 0003 	stmia.w	r3, {r0, r1}
 800ffd8:	2203      	movs	r2, #3
 800ffda:	4816      	ldr	r0, [pc, #88]	@ (8010034 <rmw_init_options_init+0xc0>)
 800ffdc:	4916      	ldr	r1, [pc, #88]	@ (8010038 <rmw_init_options_init+0xc4>)
 800ffde:	7626      	strb	r6, [r4, #24]
 800ffe0:	f000 ffbc 	bl	8010f5c <rmw_uxrce_init_init_options_impl_memory>
 800ffe4:	4813      	ldr	r0, [pc, #76]	@ (8010034 <rmw_init_options_init+0xc0>)
 800ffe6:	f009 fb1b 	bl	8019620 <get_memory>
 800ffea:	b1f0      	cbz	r0, 801002a <rmw_init_options_init+0xb6>
 800ffec:	4a13      	ldr	r2, [pc, #76]	@ (801003c <rmw_init_options_init+0xc8>)
 800ffee:	6883      	ldr	r3, [r0, #8]
 800fff0:	6851      	ldr	r1, [r2, #4]
 800fff2:	7810      	ldrb	r0, [r2, #0]
 800fff4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fff6:	7418      	strb	r0, [r3, #16]
 800fff8:	6159      	str	r1, [r3, #20]
 800fffa:	68d1      	ldr	r1, [r2, #12]
 800fffc:	61d9      	str	r1, [r3, #28]
 800fffe:	6911      	ldr	r1, [r2, #16]
 8010000:	6219      	str	r1, [r3, #32]
 8010002:	6951      	ldr	r1, [r2, #20]
 8010004:	6892      	ldr	r2, [r2, #8]
 8010006:	619a      	str	r2, [r3, #24]
 8010008:	6259      	str	r1, [r3, #36]	@ 0x24
 801000a:	f004 fd07 	bl	8014a1c <uxr_nanos>
 801000e:	f00b fabb 	bl	801b588 <srand>
 8010012:	f00b fae7 	bl	801b5e4 <rand>
 8010016:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010018:	6298      	str	r0, [r3, #40]	@ 0x28
 801001a:	2800      	cmp	r0, #0
 801001c:	d0f9      	beq.n	8010012 <rmw_init_options_init+0x9e>
 801001e:	2000      	movs	r0, #0
 8010020:	b003      	add	sp, #12
 8010022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010026:	b004      	add	sp, #16
 8010028:	4770      	bx	lr
 801002a:	2001      	movs	r0, #1
 801002c:	e7b1      	b.n	800ff92 <rmw_init_options_init+0x1e>
 801002e:	bf00      	nop
 8010030:	0801e910 	.word	0x0801e910
 8010034:	2000bc6c 	.word	0x2000bc6c
 8010038:	20007440 	.word	0x20007440
 801003c:	20006ef4 	.word	0x20006ef4
 8010040:	0801db2c 	.word	0x0801db2c

08010044 <rmw_init_options_copy>:
 8010044:	b570      	push	{r4, r5, r6, lr}
 8010046:	b158      	cbz	r0, 8010060 <rmw_init_options_copy+0x1c>
 8010048:	460d      	mov	r5, r1
 801004a:	b149      	cbz	r1, 8010060 <rmw_init_options_copy+0x1c>
 801004c:	4604      	mov	r4, r0
 801004e:	6880      	ldr	r0, [r0, #8]
 8010050:	b120      	cbz	r0, 801005c <rmw_init_options_copy+0x18>
 8010052:	4b1e      	ldr	r3, [pc, #120]	@ (80100cc <rmw_init_options_copy+0x88>)
 8010054:	6819      	ldr	r1, [r3, #0]
 8010056:	f7f0 f8e3 	bl	8000220 <strcmp>
 801005a:	bb90      	cbnz	r0, 80100c2 <rmw_init_options_copy+0x7e>
 801005c:	68ab      	ldr	r3, [r5, #8]
 801005e:	b113      	cbz	r3, 8010066 <rmw_init_options_copy+0x22>
 8010060:	250b      	movs	r5, #11
 8010062:	4628      	mov	r0, r5
 8010064:	bd70      	pop	{r4, r5, r6, pc}
 8010066:	4623      	mov	r3, r4
 8010068:	462a      	mov	r2, r5
 801006a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801006e:	f8d3 c000 	ldr.w	ip, [r3]
 8010072:	6858      	ldr	r0, [r3, #4]
 8010074:	6899      	ldr	r1, [r3, #8]
 8010076:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801007a:	f8c2 e00c 	str.w	lr, [r2, #12]
 801007e:	3310      	adds	r3, #16
 8010080:	42b3      	cmp	r3, r6
 8010082:	f8c2 c000 	str.w	ip, [r2]
 8010086:	6050      	str	r0, [r2, #4]
 8010088:	6091      	str	r1, [r2, #8]
 801008a:	f102 0210 	add.w	r2, r2, #16
 801008e:	d1ee      	bne.n	801006e <rmw_init_options_copy+0x2a>
 8010090:	6819      	ldr	r1, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	480e      	ldr	r0, [pc, #56]	@ (80100d0 <rmw_init_options_copy+0x8c>)
 8010096:	6053      	str	r3, [r2, #4]
 8010098:	6011      	str	r1, [r2, #0]
 801009a:	f009 fac1 	bl	8019620 <get_memory>
 801009e:	b198      	cbz	r0, 80100c8 <rmw_init_options_copy+0x84>
 80100a0:	6883      	ldr	r3, [r0, #8]
 80100a2:	636b      	str	r3, [r5, #52]	@ 0x34
 80100a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80100a6:	f102 0c10 	add.w	ip, r2, #16
 80100aa:	f103 0410 	add.w	r4, r3, #16
 80100ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100b4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80100b8:	2500      	movs	r5, #0
 80100ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80100be:	4628      	mov	r0, r5
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	250c      	movs	r5, #12
 80100c4:	4628      	mov	r0, r5
 80100c6:	bd70      	pop	{r4, r5, r6, pc}
 80100c8:	2501      	movs	r5, #1
 80100ca:	e7ca      	b.n	8010062 <rmw_init_options_copy+0x1e>
 80100cc:	0801e910 	.word	0x0801e910
 80100d0:	2000bc6c 	.word	0x2000bc6c

080100d4 <rmw_init_options_fini>:
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d03d      	beq.n	8010154 <rmw_init_options_fini+0x80>
 80100d8:	b510      	push	{r4, lr}
 80100da:	4604      	mov	r4, r0
 80100dc:	b08e      	sub	sp, #56	@ 0x38
 80100de:	3020      	adds	r0, #32
 80100e0:	f7ff fe88 	bl	800fdf4 <rcutils_allocator_is_valid>
 80100e4:	b360      	cbz	r0, 8010140 <rmw_init_options_fini+0x6c>
 80100e6:	68a0      	ldr	r0, [r4, #8]
 80100e8:	b120      	cbz	r0, 80100f4 <rmw_init_options_fini+0x20>
 80100ea:	4b1c      	ldr	r3, [pc, #112]	@ (801015c <rmw_init_options_fini+0x88>)
 80100ec:	6819      	ldr	r1, [r3, #0]
 80100ee:	f7f0 f897 	bl	8000220 <strcmp>
 80100f2:	bb68      	cbnz	r0, 8010150 <rmw_init_options_fini+0x7c>
 80100f4:	4b1a      	ldr	r3, [pc, #104]	@ (8010160 <rmw_init_options_fini+0x8c>)
 80100f6:	6819      	ldr	r1, [r3, #0]
 80100f8:	b331      	cbz	r1, 8010148 <rmw_init_options_fini+0x74>
 80100fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80100fc:	e001      	b.n	8010102 <rmw_init_options_fini+0x2e>
 80100fe:	6849      	ldr	r1, [r1, #4]
 8010100:	b311      	cbz	r1, 8010148 <rmw_init_options_fini+0x74>
 8010102:	688b      	ldr	r3, [r1, #8]
 8010104:	429a      	cmp	r2, r3
 8010106:	d1fa      	bne.n	80100fe <rmw_init_options_fini+0x2a>
 8010108:	4815      	ldr	r0, [pc, #84]	@ (8010160 <rmw_init_options_fini+0x8c>)
 801010a:	f009 fa99 	bl	8019640 <put_memory>
 801010e:	4668      	mov	r0, sp
 8010110:	f7ff ff02 	bl	800ff18 <rmw_get_zero_initialized_init_options>
 8010114:	46ee      	mov	lr, sp
 8010116:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801011a:	46a4      	mov	ip, r4
 801011c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010120:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801012c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010130:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010134:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010138:	2300      	movs	r3, #0
 801013a:	4618      	mov	r0, r3
 801013c:	b00e      	add	sp, #56	@ 0x38
 801013e:	bd10      	pop	{r4, pc}
 8010140:	230b      	movs	r3, #11
 8010142:	4618      	mov	r0, r3
 8010144:	b00e      	add	sp, #56	@ 0x38
 8010146:	bd10      	pop	{r4, pc}
 8010148:	2301      	movs	r3, #1
 801014a:	4618      	mov	r0, r3
 801014c:	b00e      	add	sp, #56	@ 0x38
 801014e:	bd10      	pop	{r4, pc}
 8010150:	230c      	movs	r3, #12
 8010152:	e7f2      	b.n	801013a <rmw_init_options_fini+0x66>
 8010154:	230b      	movs	r3, #11
 8010156:	4618      	mov	r0, r3
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	0801e910 	.word	0x0801e910
 8010160:	2000bc6c 	.word	0x2000bc6c

08010164 <rmw_init>:
 8010164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010168:	b083      	sub	sp, #12
 801016a:	2800      	cmp	r0, #0
 801016c:	f000 80d3 	beq.w	8010316 <rmw_init+0x1b2>
 8010170:	460e      	mov	r6, r1
 8010172:	2900      	cmp	r1, #0
 8010174:	f000 80cf 	beq.w	8010316 <rmw_init+0x1b2>
 8010178:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801017a:	4605      	mov	r5, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 80ca 	beq.w	8010316 <rmw_init+0x1b2>
 8010182:	4b78      	ldr	r3, [pc, #480]	@ (8010364 <rmw_init+0x200>)
 8010184:	6880      	ldr	r0, [r0, #8]
 8010186:	681f      	ldr	r7, [r3, #0]
 8010188:	b128      	cbz	r0, 8010196 <rmw_init+0x32>
 801018a:	4639      	mov	r1, r7
 801018c:	f7f0 f848 	bl	8000220 <strcmp>
 8010190:	2800      	cmp	r0, #0
 8010192:	f040 80ca 	bne.w	801032a <rmw_init+0x1c6>
 8010196:	e9d5 2300 	ldrd	r2, r3, [r5]
 801019a:	4c73      	ldr	r4, [pc, #460]	@ (8010368 <rmw_init+0x204>)
 801019c:	4973      	ldr	r1, [pc, #460]	@ (801036c <rmw_init+0x208>)
 801019e:	4874      	ldr	r0, [pc, #464]	@ (8010370 <rmw_init+0x20c>)
 80101a0:	60b7      	str	r7, [r6, #8]
 80101a2:	e9c6 2300 	strd	r2, r3, [r6]
 80101a6:	68eb      	ldr	r3, [r5, #12]
 80101a8:	64b3      	str	r3, [r6, #72]	@ 0x48
 80101aa:	2201      	movs	r2, #1
 80101ac:	f000 fe76 	bl	8010e9c <rmw_uxrce_init_session_memory>
 80101b0:	4620      	mov	r0, r4
 80101b2:	4970      	ldr	r1, [pc, #448]	@ (8010374 <rmw_init+0x210>)
 80101b4:	2204      	movs	r2, #4
 80101b6:	f000 feb1 	bl	8010f1c <rmw_uxrce_init_static_input_buffer_memory>
 80101ba:	f04f 0800 	mov.w	r8, #0
 80101be:	486c      	ldr	r0, [pc, #432]	@ (8010370 <rmw_init+0x20c>)
 80101c0:	f884 800d 	strb.w	r8, [r4, #13]
 80101c4:	f009 fa2c 	bl	8019620 <get_memory>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	f000 80a9 	beq.w	8010320 <rmw_init+0x1bc>
 80101ce:	6884      	ldr	r4, [r0, #8]
 80101d0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80101d2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80101d4:	f890 c010 	ldrb.w	ip, [r0, #16]
 80101d8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80101dc:	9101      	str	r1, [sp, #4]
 80101de:	6a00      	ldr	r0, [r0, #32]
 80101e0:	9000      	str	r0, [sp, #0]
 80101e2:	f104 0910 	add.w	r9, r4, #16
 80101e6:	4661      	mov	r1, ip
 80101e8:	4648      	mov	r0, r9
 80101ea:	f002 fb4d 	bl	8012888 <uxr_set_custom_transport_callbacks>
 80101ee:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80101f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80101f6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80101fa:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80101fe:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010202:	495d      	ldr	r1, [pc, #372]	@ (8010378 <rmw_init+0x214>)
 8010204:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010208:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801020c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010210:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010214:	4859      	ldr	r0, [pc, #356]	@ (801037c <rmw_init+0x218>)
 8010216:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801021a:	2201      	movs	r2, #1
 801021c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801021e:	f000 fe1d 	bl	8010e5c <rmw_uxrce_init_node_memory>
 8010222:	4957      	ldr	r1, [pc, #348]	@ (8010380 <rmw_init+0x21c>)
 8010224:	4857      	ldr	r0, [pc, #348]	@ (8010384 <rmw_init+0x220>)
 8010226:	2205      	movs	r2, #5
 8010228:	f000 fdf8 	bl	8010e1c <rmw_uxrce_init_subscription_memory>
 801022c:	4956      	ldr	r1, [pc, #344]	@ (8010388 <rmw_init+0x224>)
 801022e:	4857      	ldr	r0, [pc, #348]	@ (801038c <rmw_init+0x228>)
 8010230:	220a      	movs	r2, #10
 8010232:	f000 fdd3 	bl	8010ddc <rmw_uxrce_init_publisher_memory>
 8010236:	4956      	ldr	r1, [pc, #344]	@ (8010390 <rmw_init+0x22c>)
 8010238:	4856      	ldr	r0, [pc, #344]	@ (8010394 <rmw_init+0x230>)
 801023a:	2202      	movs	r2, #2
 801023c:	f000 fd8e 	bl	8010d5c <rmw_uxrce_init_service_memory>
 8010240:	4955      	ldr	r1, [pc, #340]	@ (8010398 <rmw_init+0x234>)
 8010242:	4856      	ldr	r0, [pc, #344]	@ (801039c <rmw_init+0x238>)
 8010244:	2204      	movs	r2, #4
 8010246:	f000 fda9 	bl	8010d9c <rmw_uxrce_init_client_memory>
 801024a:	4955      	ldr	r1, [pc, #340]	@ (80103a0 <rmw_init+0x23c>)
 801024c:	4855      	ldr	r0, [pc, #340]	@ (80103a4 <rmw_init+0x240>)
 801024e:	220f      	movs	r2, #15
 8010250:	f000 fe44 	bl	8010edc <rmw_uxrce_init_topic_memory>
 8010254:	4954      	ldr	r1, [pc, #336]	@ (80103a8 <rmw_init+0x244>)
 8010256:	4855      	ldr	r0, [pc, #340]	@ (80103ac <rmw_init+0x248>)
 8010258:	2203      	movs	r2, #3
 801025a:	f000 fe7f 	bl	8010f5c <rmw_uxrce_init_init_options_impl_memory>
 801025e:	4954      	ldr	r1, [pc, #336]	@ (80103b0 <rmw_init+0x24c>)
 8010260:	4854      	ldr	r0, [pc, #336]	@ (80103b4 <rmw_init+0x250>)
 8010262:	2204      	movs	r2, #4
 8010264:	f000 fe9a 	bl	8010f9c <rmw_uxrce_init_wait_set_memory>
 8010268:	4953      	ldr	r1, [pc, #332]	@ (80103b8 <rmw_init+0x254>)
 801026a:	4854      	ldr	r0, [pc, #336]	@ (80103bc <rmw_init+0x258>)
 801026c:	2204      	movs	r2, #4
 801026e:	f000 feb5 	bl	8010fdc <rmw_uxrce_init_guard_condition_memory>
 8010272:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010274:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010276:	4642      	mov	r2, r8
 8010278:	f000 fd2a 	bl	8010cd0 <rmw_uxrce_transport_init>
 801027c:	4607      	mov	r7, r0
 801027e:	2800      	cmp	r0, #0
 8010280:	d158      	bne.n	8010334 <rmw_init+0x1d0>
 8010282:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010284:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801028a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801028e:	4628      	mov	r0, r5
 8010290:	f002 fd2e 	bl	8012cf0 <uxr_init_session>
 8010294:	494a      	ldr	r1, [pc, #296]	@ (80103c0 <rmw_init+0x25c>)
 8010296:	4622      	mov	r2, r4
 8010298:	4628      	mov	r0, r5
 801029a:	f002 fd4d 	bl	8012d38 <uxr_set_topic_callback>
 801029e:	4949      	ldr	r1, [pc, #292]	@ (80103c4 <rmw_init+0x260>)
 80102a0:	463a      	mov	r2, r7
 80102a2:	4628      	mov	r0, r5
 80102a4:	f002 fd44 	bl	8012d30 <uxr_set_status_callback>
 80102a8:	4947      	ldr	r1, [pc, #284]	@ (80103c8 <rmw_init+0x264>)
 80102aa:	463a      	mov	r2, r7
 80102ac:	4628      	mov	r0, r5
 80102ae:	f002 fd47 	bl	8012d40 <uxr_set_request_callback>
 80102b2:	4946      	ldr	r1, [pc, #280]	@ (80103cc <rmw_init+0x268>)
 80102b4:	463a      	mov	r2, r7
 80102b6:	4628      	mov	r0, r5
 80102b8:	f002 fd46 	bl	8012d48 <uxr_set_reply_callback>
 80102bc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80102c0:	2304      	movs	r3, #4
 80102c2:	0092      	lsls	r2, r2, #2
 80102c4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80102c8:	4628      	mov	r0, r5
 80102ca:	f002 fd7b 	bl	8012dc4 <uxr_create_input_reliable_stream>
 80102ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80102d2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80102d6:	0092      	lsls	r2, r2, #2
 80102d8:	2304      	movs	r3, #4
 80102da:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80102de:	4628      	mov	r0, r5
 80102e0:	f002 fd48 	bl	8012d74 <uxr_create_output_reliable_stream>
 80102e4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80102e8:	4628      	mov	r0, r5
 80102ea:	f002 fd65 	bl	8012db8 <uxr_create_input_best_effort_stream>
 80102ee:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80102f2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80102f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80102fa:	3114      	adds	r1, #20
 80102fc:	4628      	mov	r0, r5
 80102fe:	f002 fd27 	bl	8012d50 <uxr_create_output_best_effort_stream>
 8010302:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010306:	4628      	mov	r0, r5
 8010308:	f003 fb1a 	bl	8013940 <uxr_create_session>
 801030c:	b1f8      	cbz	r0, 801034e <rmw_init+0x1ea>
 801030e:	4638      	mov	r0, r7
 8010310:	b003      	add	sp, #12
 8010312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010316:	270b      	movs	r7, #11
 8010318:	4638      	mov	r0, r7
 801031a:	b003      	add	sp, #12
 801031c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010320:	2701      	movs	r7, #1
 8010322:	4638      	mov	r0, r7
 8010324:	b003      	add	sp, #12
 8010326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801032a:	270c      	movs	r7, #12
 801032c:	4638      	mov	r0, r7
 801032e:	b003      	add	sp, #12
 8010330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010334:	4648      	mov	r0, r9
 8010336:	f002 fae9 	bl	801290c <uxr_close_custom_transport>
 801033a:	480d      	ldr	r0, [pc, #52]	@ (8010370 <rmw_init+0x20c>)
 801033c:	4621      	mov	r1, r4
 801033e:	f009 f97f 	bl	8019640 <put_memory>
 8010342:	4638      	mov	r0, r7
 8010344:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010348:	b003      	add	sp, #12
 801034a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801034e:	4648      	mov	r0, r9
 8010350:	f002 fadc 	bl	801290c <uxr_close_custom_transport>
 8010354:	4806      	ldr	r0, [pc, #24]	@ (8010370 <rmw_init+0x20c>)
 8010356:	4621      	mov	r1, r4
 8010358:	f009 f972 	bl	8019640 <put_memory>
 801035c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801035e:	2701      	movs	r7, #1
 8010360:	e7d5      	b.n	801030e <rmw_init+0x1aa>
 8010362:	bf00      	nop
 8010364:	0801e910 	.word	0x0801e910
 8010368:	2000bcbc 	.word	0x2000bcbc
 801036c:	20007f68 	.word	0x20007f68
 8010370:	2000bcac 	.word	0x2000bcac
 8010374:	20009510 	.word	0x20009510
 8010378:	200074c4 	.word	0x200074c4
 801037c:	2000bc7c 	.word	0x2000bc7c
 8010380:	2000b610 	.word	0x2000b610
 8010384:	2000bccc 	.word	0x2000bccc
 8010388:	20007568 	.word	0x20007568
 801038c:	2000bc8c 	.word	0x2000bc8c
 8010390:	20007dd8 	.word	0x20007dd8
 8010394:	2000bc9c 	.word	0x2000bc9c
 8010398:	200070a0 	.word	0x200070a0
 801039c:	2000708c 	.word	0x2000708c
 80103a0:	2000ba48 	.word	0x2000ba48
 80103a4:	2000bcdc 	.word	0x2000bcdc
 80103a8:	20007440 	.word	0x20007440
 80103ac:	2000bc6c 	.word	0x2000bc6c
 80103b0:	2000bbec 	.word	0x2000bbec
 80103b4:	2000bcec 	.word	0x2000bcec
 80103b8:	200073c0 	.word	0x200073c0
 80103bc:	2000bc5c 	.word	0x2000bc5c
 80103c0:	08019459 	.word	0x08019459
 80103c4:	08019451 	.word	0x08019451
 80103c8:	080194f1 	.word	0x080194f1
 80103cc:	0801958d 	.word	0x0801958d

080103d0 <rmw_context_fini>:
 80103d0:	4b17      	ldr	r3, [pc, #92]	@ (8010430 <rmw_context_fini+0x60>)
 80103d2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	681c      	ldr	r4, [r3, #0]
 80103d8:	4605      	mov	r5, r0
 80103da:	b334      	cbz	r4, 801042a <rmw_context_fini+0x5a>
 80103dc:	2600      	movs	r6, #0
 80103de:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80103e2:	6902      	ldr	r2, [r0, #16]
 80103e4:	428a      	cmp	r2, r1
 80103e6:	d018      	beq.n	801041a <rmw_context_fini+0x4a>
 80103e8:	2c00      	cmp	r4, #0
 80103ea:	d1f8      	bne.n	80103de <rmw_context_fini+0xe>
 80103ec:	b189      	cbz	r1, 8010412 <rmw_context_fini+0x42>
 80103ee:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80103f2:	789b      	ldrb	r3, [r3, #2]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80103fa:	bf14      	ite	ne
 80103fc:	210a      	movne	r1, #10
 80103fe:	2100      	moveq	r1, #0
 8010400:	f003 fa76 	bl	80138f0 <uxr_delete_session_retries>
 8010404:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010406:	f000 fe09 	bl	801101c <rmw_uxrce_fini_session_memory>
 801040a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801040c:	3010      	adds	r0, #16
 801040e:	f002 fa7d 	bl	801290c <uxr_close_custom_transport>
 8010412:	2300      	movs	r3, #0
 8010414:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8010416:	4630      	mov	r0, r6
 8010418:	bd70      	pop	{r4, r5, r6, pc}
 801041a:	3018      	adds	r0, #24
 801041c:	f000 f89c 	bl	8010558 <rmw_destroy_node>
 8010420:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010422:	4606      	mov	r6, r0
 8010424:	2c00      	cmp	r4, #0
 8010426:	d1da      	bne.n	80103de <rmw_context_fini+0xe>
 8010428:	e7e0      	b.n	80103ec <rmw_context_fini+0x1c>
 801042a:	4626      	mov	r6, r4
 801042c:	e7de      	b.n	80103ec <rmw_context_fini+0x1c>
 801042e:	bf00      	nop
 8010430:	2000bc7c 	.word	0x2000bc7c

08010434 <create_node>:
 8010434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010438:	b083      	sub	sp, #12
 801043a:	2b00      	cmp	r3, #0
 801043c:	d05f      	beq.n	80104fe <create_node+0xca>
 801043e:	4606      	mov	r6, r0
 8010440:	4835      	ldr	r0, [pc, #212]	@ (8010518 <create_node+0xe4>)
 8010442:	460f      	mov	r7, r1
 8010444:	4690      	mov	r8, r2
 8010446:	461d      	mov	r5, r3
 8010448:	f009 f8ea 	bl	8019620 <get_memory>
 801044c:	2800      	cmp	r0, #0
 801044e:	d056      	beq.n	80104fe <create_node+0xca>
 8010450:	6884      	ldr	r4, [r0, #8]
 8010452:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010454:	6123      	str	r3, [r4, #16]
 8010456:	f009 f94b 	bl	80196f0 <rmw_get_implementation_identifier>
 801045a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801045e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010462:	f8c4 9020 	str.w	r9, [r4, #32]
 8010466:	4630      	mov	r0, r6
 8010468:	f7ef fee4 	bl	8000234 <strlen>
 801046c:	1c42      	adds	r2, r0, #1
 801046e:	2a3c      	cmp	r2, #60	@ 0x3c
 8010470:	f104 0518 	add.w	r5, r4, #24
 8010474:	d840      	bhi.n	80104f8 <create_node+0xc4>
 8010476:	4648      	mov	r0, r9
 8010478:	4631      	mov	r1, r6
 801047a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801047e:	f00b fd02 	bl	801be86 <memcpy>
 8010482:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010486:	4638      	mov	r0, r7
 8010488:	f7ef fed4 	bl	8000234 <strlen>
 801048c:	1c42      	adds	r2, r0, #1
 801048e:	2a3c      	cmp	r2, #60	@ 0x3c
 8010490:	d832      	bhi.n	80104f8 <create_node+0xc4>
 8010492:	4639      	mov	r1, r7
 8010494:	4648      	mov	r0, r9
 8010496:	f00b fcf6 	bl	801be86 <memcpy>
 801049a:	6923      	ldr	r3, [r4, #16]
 801049c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80104a0:	2101      	movs	r1, #1
 80104a2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80104a6:	1842      	adds	r2, r0, r1
 80104a8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80104ac:	f002 fa32 	bl	8012914 <uxr_object_id>
 80104b0:	6160      	str	r0, [r4, #20]
 80104b2:	783b      	ldrb	r3, [r7, #0]
 80104b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80104b6:	d127      	bne.n	8010508 <create_node+0xd4>
 80104b8:	787b      	ldrb	r3, [r7, #1]
 80104ba:	bb2b      	cbnz	r3, 8010508 <create_node+0xd4>
 80104bc:	4a17      	ldr	r2, [pc, #92]	@ (801051c <create_node+0xe8>)
 80104be:	4818      	ldr	r0, [pc, #96]	@ (8010520 <create_node+0xec>)
 80104c0:	4633      	mov	r3, r6
 80104c2:	213c      	movs	r1, #60	@ 0x3c
 80104c4:	f00b faa8 	bl	801ba18 <sniprintf>
 80104c8:	6920      	ldr	r0, [r4, #16]
 80104ca:	4915      	ldr	r1, [pc, #84]	@ (8010520 <create_node+0xec>)
 80104cc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80104d0:	9100      	str	r1, [sp, #0]
 80104d2:	2106      	movs	r1, #6
 80104d4:	9101      	str	r1, [sp, #4]
 80104d6:	6811      	ldr	r1, [r2, #0]
 80104d8:	6962      	ldr	r2, [r4, #20]
 80104da:	fa1f f388 	uxth.w	r3, r8
 80104de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80104e2:	f002 f80d 	bl	8012500 <uxr_buffer_create_participant_bin>
 80104e6:	4602      	mov	r2, r0
 80104e8:	6920      	ldr	r0, [r4, #16]
 80104ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80104ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80104f2:	f000 ff0b 	bl	801130c <run_xrce_session>
 80104f6:	b918      	cbnz	r0, 8010500 <create_node+0xcc>
 80104f8:	4628      	mov	r0, r5
 80104fa:	f000 fd95 	bl	8011028 <rmw_uxrce_fini_node_memory>
 80104fe:	2500      	movs	r5, #0
 8010500:	4628      	mov	r0, r5
 8010502:	b003      	add	sp, #12
 8010504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010508:	4a06      	ldr	r2, [pc, #24]	@ (8010524 <create_node+0xf0>)
 801050a:	9600      	str	r6, [sp, #0]
 801050c:	463b      	mov	r3, r7
 801050e:	213c      	movs	r1, #60	@ 0x3c
 8010510:	4803      	ldr	r0, [pc, #12]	@ (8010520 <create_node+0xec>)
 8010512:	f00b fa81 	bl	801ba18 <sniprintf>
 8010516:	e7d7      	b.n	80104c8 <create_node+0x94>
 8010518:	2000bc7c 	.word	0x2000bc7c
 801051c:	0801db48 	.word	0x0801db48
 8010520:	20006f10 	.word	0x20006f10
 8010524:	0801db30 	.word	0x0801db30

08010528 <rmw_create_node>:
 8010528:	b199      	cbz	r1, 8010552 <rmw_create_node+0x2a>
 801052a:	780b      	ldrb	r3, [r1, #0]
 801052c:	468c      	mov	ip, r1
 801052e:	b183      	cbz	r3, 8010552 <rmw_create_node+0x2a>
 8010530:	b410      	push	{r4}
 8010532:	4614      	mov	r4, r2
 8010534:	b14a      	cbz	r2, 801054a <rmw_create_node+0x22>
 8010536:	7813      	ldrb	r3, [r2, #0]
 8010538:	b13b      	cbz	r3, 801054a <rmw_create_node+0x22>
 801053a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801053c:	4603      	mov	r3, r0
 801053e:	4621      	mov	r1, r4
 8010540:	4660      	mov	r0, ip
 8010542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010546:	f7ff bf75 	b.w	8010434 <create_node>
 801054a:	2000      	movs	r0, #0
 801054c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	2000      	movs	r0, #0
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop

08010558 <rmw_destroy_node>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	b328      	cbz	r0, 80105a8 <rmw_destroy_node+0x50>
 801055c:	4607      	mov	r7, r0
 801055e:	6800      	ldr	r0, [r0, #0]
 8010560:	b120      	cbz	r0, 801056c <rmw_destroy_node+0x14>
 8010562:	4b36      	ldr	r3, [pc, #216]	@ (801063c <rmw_destroy_node+0xe4>)
 8010564:	6819      	ldr	r1, [r3, #0]
 8010566:	f7ef fe5b 	bl	8000220 <strcmp>
 801056a:	b9e8      	cbnz	r0, 80105a8 <rmw_destroy_node+0x50>
 801056c:	687d      	ldr	r5, [r7, #4]
 801056e:	b1dd      	cbz	r5, 80105a8 <rmw_destroy_node+0x50>
 8010570:	4b33      	ldr	r3, [pc, #204]	@ (8010640 <rmw_destroy_node+0xe8>)
 8010572:	681c      	ldr	r4, [r3, #0]
 8010574:	2c00      	cmp	r4, #0
 8010576:	d05f      	beq.n	8010638 <rmw_destroy_node+0xe0>
 8010578:	2600      	movs	r6, #0
 801057a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801057e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010582:	429d      	cmp	r5, r3
 8010584:	d013      	beq.n	80105ae <rmw_destroy_node+0x56>
 8010586:	2c00      	cmp	r4, #0
 8010588:	d1f7      	bne.n	801057a <rmw_destroy_node+0x22>
 801058a:	4b2e      	ldr	r3, [pc, #184]	@ (8010644 <rmw_destroy_node+0xec>)
 801058c:	681c      	ldr	r4, [r3, #0]
 801058e:	b1c4      	cbz	r4, 80105c2 <rmw_destroy_node+0x6a>
 8010590:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010594:	6a0b      	ldr	r3, [r1, #32]
 8010596:	429d      	cmp	r5, r3
 8010598:	d1f9      	bne.n	801058e <rmw_destroy_node+0x36>
 801059a:	317c      	adds	r1, #124	@ 0x7c
 801059c:	4638      	mov	r0, r7
 801059e:	f000 fb37 	bl	8010c10 <rmw_destroy_subscription>
 80105a2:	2801      	cmp	r0, #1
 80105a4:	4606      	mov	r6, r0
 80105a6:	d1f2      	bne.n	801058e <rmw_destroy_node+0x36>
 80105a8:	2601      	movs	r6, #1
 80105aa:	4630      	mov	r0, r6
 80105ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ae:	3184      	adds	r1, #132	@ 0x84
 80105b0:	4638      	mov	r0, r7
 80105b2:	f000 f9a5 	bl	8010900 <rmw_destroy_publisher>
 80105b6:	2801      	cmp	r0, #1
 80105b8:	4606      	mov	r6, r0
 80105ba:	d0f5      	beq.n	80105a8 <rmw_destroy_node+0x50>
 80105bc:	2c00      	cmp	r4, #0
 80105be:	d1dc      	bne.n	801057a <rmw_destroy_node+0x22>
 80105c0:	e7e3      	b.n	801058a <rmw_destroy_node+0x32>
 80105c2:	4b21      	ldr	r3, [pc, #132]	@ (8010648 <rmw_destroy_node+0xf0>)
 80105c4:	681c      	ldr	r4, [r3, #0]
 80105c6:	b16c      	cbz	r4, 80105e4 <rmw_destroy_node+0x8c>
 80105c8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80105cc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80105ce:	429d      	cmp	r5, r3
 80105d0:	d1f9      	bne.n	80105c6 <rmw_destroy_node+0x6e>
 80105d2:	317c      	adds	r1, #124	@ 0x7c
 80105d4:	4638      	mov	r0, r7
 80105d6:	f000 fab7 	bl	8010b48 <rmw_destroy_service>
 80105da:	2801      	cmp	r0, #1
 80105dc:	4606      	mov	r6, r0
 80105de:	d0e3      	beq.n	80105a8 <rmw_destroy_node+0x50>
 80105e0:	2c00      	cmp	r4, #0
 80105e2:	d1f1      	bne.n	80105c8 <rmw_destroy_node+0x70>
 80105e4:	4b19      	ldr	r3, [pc, #100]	@ (801064c <rmw_destroy_node+0xf4>)
 80105e6:	681c      	ldr	r4, [r3, #0]
 80105e8:	b16c      	cbz	r4, 8010606 <rmw_destroy_node+0xae>
 80105ea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80105ee:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80105f0:	429d      	cmp	r5, r3
 80105f2:	d1f9      	bne.n	80105e8 <rmw_destroy_node+0x90>
 80105f4:	317c      	adds	r1, #124	@ 0x7c
 80105f6:	4638      	mov	r0, r7
 80105f8:	f009 f836 	bl	8019668 <rmw_destroy_client>
 80105fc:	2801      	cmp	r0, #1
 80105fe:	4606      	mov	r6, r0
 8010600:	d0d2      	beq.n	80105a8 <rmw_destroy_node+0x50>
 8010602:	2c00      	cmp	r4, #0
 8010604:	d1f1      	bne.n	80105ea <rmw_destroy_node+0x92>
 8010606:	6928      	ldr	r0, [r5, #16]
 8010608:	696a      	ldr	r2, [r5, #20]
 801060a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801060e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010612:	6819      	ldr	r1, [r3, #0]
 8010614:	f001 ff28 	bl	8012468 <uxr_buffer_delete_entity>
 8010618:	4602      	mov	r2, r0
 801061a:	6928      	ldr	r0, [r5, #16]
 801061c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010620:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010624:	f000 fe72 	bl	801130c <run_xrce_session>
 8010628:	2800      	cmp	r0, #0
 801062a:	bf08      	it	eq
 801062c:	2602      	moveq	r6, #2
 801062e:	4638      	mov	r0, r7
 8010630:	f000 fcfa 	bl	8011028 <rmw_uxrce_fini_node_memory>
 8010634:	4630      	mov	r0, r6
 8010636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010638:	4626      	mov	r6, r4
 801063a:	e7a6      	b.n	801058a <rmw_destroy_node+0x32>
 801063c:	0801e910 	.word	0x0801e910
 8010640:	2000bc8c 	.word	0x2000bc8c
 8010644:	2000bccc 	.word	0x2000bccc
 8010648:	2000bc9c 	.word	0x2000bc9c
 801064c:	2000708c 	.word	0x2000708c

08010650 <rmw_node_get_graph_guard_condition>:
 8010650:	6843      	ldr	r3, [r0, #4]
 8010652:	6918      	ldr	r0, [r3, #16]
 8010654:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop

0801065c <flush_session>:
 801065c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801065e:	f002 bfa9 	b.w	80135b4 <uxr_run_session_until_confirm_delivery>
 8010662:	bf00      	nop

08010664 <rmw_publish>:
 8010664:	2800      	cmp	r0, #0
 8010666:	d053      	beq.n	8010710 <rmw_publish+0xac>
 8010668:	b570      	push	{r4, r5, r6, lr}
 801066a:	460d      	mov	r5, r1
 801066c:	b08e      	sub	sp, #56	@ 0x38
 801066e:	2900      	cmp	r1, #0
 8010670:	d04b      	beq.n	801070a <rmw_publish+0xa6>
 8010672:	4604      	mov	r4, r0
 8010674:	6800      	ldr	r0, [r0, #0]
 8010676:	f000 ff63 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 801067a:	2800      	cmp	r0, #0
 801067c:	d045      	beq.n	801070a <rmw_publish+0xa6>
 801067e:	6866      	ldr	r6, [r4, #4]
 8010680:	2e00      	cmp	r6, #0
 8010682:	d042      	beq.n	801070a <rmw_publish+0xa6>
 8010684:	69b4      	ldr	r4, [r6, #24]
 8010686:	4628      	mov	r0, r5
 8010688:	6923      	ldr	r3, [r4, #16]
 801068a:	4798      	blx	r3
 801068c:	69f3      	ldr	r3, [r6, #28]
 801068e:	9005      	str	r0, [sp, #20]
 8010690:	b113      	cbz	r3, 8010698 <rmw_publish+0x34>
 8010692:	a805      	add	r0, sp, #20
 8010694:	4798      	blx	r3
 8010696:	9805      	ldr	r0, [sp, #20]
 8010698:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	9000      	str	r0, [sp, #0]
 80106a0:	6972      	ldr	r2, [r6, #20]
 80106a2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80106a4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80106a8:	ab06      	add	r3, sp, #24
 80106aa:	f004 fa57 	bl	8014b5c <uxr_prepare_output_stream>
 80106ae:	b1d8      	cbz	r0, 80106e8 <rmw_publish+0x84>
 80106b0:	68a3      	ldr	r3, [r4, #8]
 80106b2:	a906      	add	r1, sp, #24
 80106b4:	4628      	mov	r0, r5
 80106b6:	4798      	blx	r3
 80106b8:	6a33      	ldr	r3, [r6, #32]
 80106ba:	4604      	mov	r4, r0
 80106bc:	b10b      	cbz	r3, 80106c2 <rmw_publish+0x5e>
 80106be:	a806      	add	r0, sp, #24
 80106c0:	4798      	blx	r3
 80106c2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80106cc:	d022      	beq.n	8010714 <rmw_publish+0xb0>
 80106ce:	6918      	ldr	r0, [r3, #16]
 80106d0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80106d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106d6:	f002 ff6d 	bl	80135b4 <uxr_run_session_until_confirm_delivery>
 80106da:	4020      	ands	r0, r4
 80106dc:	b2c4      	uxtb	r4, r0
 80106de:	f084 0001 	eor.w	r0, r4, #1
 80106e2:	b2c0      	uxtb	r0, r0
 80106e4:	b00e      	add	sp, #56	@ 0x38
 80106e6:	bd70      	pop	{r4, r5, r6, pc}
 80106e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80106ec:	6918      	ldr	r0, [r3, #16]
 80106ee:	9b05      	ldr	r3, [sp, #20]
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010720 <rmw_publish+0xbc>)
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	9602      	str	r6, [sp, #8]
 80106f8:	6972      	ldr	r2, [r6, #20]
 80106fa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80106fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010700:	ab06      	add	r3, sp, #24
 8010702:	f004 fa5b 	bl	8014bbc <uxr_prepare_output_stream_fragmented>
 8010706:	2800      	cmp	r0, #0
 8010708:	d1d2      	bne.n	80106b0 <rmw_publish+0x4c>
 801070a:	2001      	movs	r0, #1
 801070c:	b00e      	add	sp, #56	@ 0x38
 801070e:	bd70      	pop	{r4, r5, r6, pc}
 8010710:	2001      	movs	r0, #1
 8010712:	4770      	bx	lr
 8010714:	6918      	ldr	r0, [r3, #16]
 8010716:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801071a:	f002 fb8b 	bl	8012e34 <uxr_flash_output_streams>
 801071e:	e7de      	b.n	80106de <rmw_publish+0x7a>
 8010720:	0801065d 	.word	0x0801065d

08010724 <rmw_create_publisher>:
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	b087      	sub	sp, #28
 801072a:	2800      	cmp	r0, #0
 801072c:	f000 80cc 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010730:	460e      	mov	r6, r1
 8010732:	2900      	cmp	r1, #0
 8010734:	f000 80c8 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010738:	4604      	mov	r4, r0
 801073a:	6800      	ldr	r0, [r0, #0]
 801073c:	4615      	mov	r5, r2
 801073e:	4698      	mov	r8, r3
 8010740:	f000 fefe 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010744:	2800      	cmp	r0, #0
 8010746:	f000 80bf 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 801074a:	2d00      	cmp	r5, #0
 801074c:	f000 80bc 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010750:	782b      	ldrb	r3, [r5, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 80b8 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010758:	f1b8 0f00 	cmp.w	r8, #0
 801075c:	f000 80b4 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010760:	485c      	ldr	r0, [pc, #368]	@ (80108d4 <rmw_create_publisher+0x1b0>)
 8010762:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010766:	f008 ff5b 	bl	8019620 <get_memory>
 801076a:	2800      	cmp	r0, #0
 801076c:	f000 80ac 	beq.w	80108c8 <rmw_create_publisher+0x1a4>
 8010770:	6884      	ldr	r4, [r0, #8]
 8010772:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010776:	f008 ffbb 	bl	80196f0 <rmw_get_implementation_identifier>
 801077a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801077e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8010782:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010786:	4628      	mov	r0, r5
 8010788:	f7ef fd54 	bl	8000234 <strlen>
 801078c:	3001      	adds	r0, #1
 801078e:	283c      	cmp	r0, #60	@ 0x3c
 8010790:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8010794:	f200 8091 	bhi.w	80108ba <rmw_create_publisher+0x196>
 8010798:	4a4f      	ldr	r2, [pc, #316]	@ (80108d8 <rmw_create_publisher+0x1b4>)
 801079a:	462b      	mov	r3, r5
 801079c:	213c      	movs	r1, #60	@ 0x3c
 801079e:	4650      	mov	r0, sl
 80107a0:	f00b f93a 	bl	801ba18 <sniprintf>
 80107a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80107aa:	4641      	mov	r1, r8
 80107ac:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80107b0:	2250      	movs	r2, #80	@ 0x50
 80107b2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80107b6:	f00b fb66 	bl	801be86 <memcpy>
 80107ba:	f898 3008 	ldrb.w	r3, [r8, #8]
 80107be:	4947      	ldr	r1, [pc, #284]	@ (80108dc <rmw_create_publisher+0x1b8>)
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107c6:	bf0c      	ite	eq
 80107c8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80107cc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80107d0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80107d2:	2300      	movs	r3, #0
 80107d4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80107d8:	4630      	mov	r0, r6
 80107da:	f000 febf 	bl	801155c <get_message_typesupport_handle>
 80107de:	2800      	cmp	r0, #0
 80107e0:	d06b      	beq.n	80108ba <rmw_create_publisher+0x196>
 80107e2:	6842      	ldr	r2, [r0, #4]
 80107e4:	61a2      	str	r2, [r4, #24]
 80107e6:	2a00      	cmp	r2, #0
 80107e8:	d067      	beq.n	80108ba <rmw_create_publisher+0x196>
 80107ea:	4629      	mov	r1, r5
 80107ec:	4643      	mov	r3, r8
 80107ee:	4648      	mov	r0, r9
 80107f0:	f008 ff84 	bl	80196fc <create_topic>
 80107f4:	6260      	str	r0, [r4, #36]	@ 0x24
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d063      	beq.n	80108c2 <rmw_create_publisher+0x19e>
 80107fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010802:	2103      	movs	r1, #3
 8010804:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8010808:	1c42      	adds	r2, r0, #1
 801080a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801080e:	f002 f881 	bl	8012914 <uxr_object_id>
 8010812:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8010816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801081a:	6120      	str	r0, [r4, #16]
 801081c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8010820:	6910      	ldr	r0, [r2, #16]
 8010822:	2506      	movs	r5, #6
 8010824:	9500      	str	r5, [sp, #0]
 8010826:	6819      	ldr	r1, [r3, #0]
 8010828:	6922      	ldr	r2, [r4, #16]
 801082a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801082e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010832:	f001 fecd 	bl	80125d0 <uxr_buffer_create_publisher_bin>
 8010836:	4602      	mov	r2, r0
 8010838:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801083c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010840:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010844:	f000 fd62 	bl	801130c <run_xrce_session>
 8010848:	b3b8      	cbz	r0, 80108ba <rmw_create_publisher+0x196>
 801084a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801084e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010852:	2105      	movs	r1, #5
 8010854:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010858:	1c42      	adds	r2, r0, #1
 801085a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801085e:	f002 f859 	bl	8012914 <uxr_object_id>
 8010862:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010866:	6160      	str	r0, [r4, #20]
 8010868:	691e      	ldr	r6, [r3, #16]
 801086a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801086e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010872:	f10d 0a10 	add.w	sl, sp, #16
 8010876:	4641      	mov	r1, r8
 8010878:	4650      	mov	r0, sl
 801087a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801087e:	f000 fd61 	bl	8011344 <convert_qos_profile>
 8010882:	9503      	str	r5, [sp, #12]
 8010884:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010888:	9001      	str	r0, [sp, #4]
 801088a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801088e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010892:	9300      	str	r3, [sp, #0]
 8010894:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010898:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801089c:	f8d8 1000 	ldr.w	r1, [r8]
 80108a0:	4630      	mov	r0, r6
 80108a2:	f001 fec5 	bl	8012630 <uxr_buffer_create_datawriter_bin>
 80108a6:	4602      	mov	r2, r0
 80108a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80108ac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80108b0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80108b4:	f000 fd2a 	bl	801130c <run_xrce_session>
 80108b8:	b938      	cbnz	r0, 80108ca <rmw_create_publisher+0x1a6>
 80108ba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80108bc:	b108      	cbz	r0, 80108c2 <rmw_create_publisher+0x19e>
 80108be:	f000 fc23 	bl	8011108 <rmw_uxrce_fini_topic_memory>
 80108c2:	4638      	mov	r0, r7
 80108c4:	f000 fbc8 	bl	8011058 <rmw_uxrce_fini_publisher_memory>
 80108c8:	2700      	movs	r7, #0
 80108ca:	4638      	mov	r0, r7
 80108cc:	b007      	add	sp, #28
 80108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d2:	bf00      	nop
 80108d4:	2000bc8c 	.word	0x2000bc8c
 80108d8:	0801db48 	.word	0x0801db48
 80108dc:	0801d4b0 	.word	0x0801d4b0

080108e0 <rmw_publisher_get_actual_qos>:
 80108e0:	b150      	cbz	r0, 80108f8 <rmw_publisher_get_actual_qos+0x18>
 80108e2:	b508      	push	{r3, lr}
 80108e4:	460b      	mov	r3, r1
 80108e6:	b149      	cbz	r1, 80108fc <rmw_publisher_get_actual_qos+0x1c>
 80108e8:	6841      	ldr	r1, [r0, #4]
 80108ea:	2250      	movs	r2, #80	@ 0x50
 80108ec:	3128      	adds	r1, #40	@ 0x28
 80108ee:	4618      	mov	r0, r3
 80108f0:	f00b fac9 	bl	801be86 <memcpy>
 80108f4:	2000      	movs	r0, #0
 80108f6:	bd08      	pop	{r3, pc}
 80108f8:	200b      	movs	r0, #11
 80108fa:	4770      	bx	lr
 80108fc:	200b      	movs	r0, #11
 80108fe:	bd08      	pop	{r3, pc}

08010900 <rmw_destroy_publisher>:
 8010900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010902:	b128      	cbz	r0, 8010910 <rmw_destroy_publisher+0x10>
 8010904:	4604      	mov	r4, r0
 8010906:	6800      	ldr	r0, [r0, #0]
 8010908:	460d      	mov	r5, r1
 801090a:	f000 fe19 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 801090e:	b910      	cbnz	r0, 8010916 <rmw_destroy_publisher+0x16>
 8010910:	2401      	movs	r4, #1
 8010912:	4620      	mov	r0, r4
 8010914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010916:	6863      	ldr	r3, [r4, #4]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d0f9      	beq.n	8010910 <rmw_destroy_publisher+0x10>
 801091c:	2d00      	cmp	r5, #0
 801091e:	d0f7      	beq.n	8010910 <rmw_destroy_publisher+0x10>
 8010920:	6828      	ldr	r0, [r5, #0]
 8010922:	f000 fe0d 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010926:	2800      	cmp	r0, #0
 8010928:	d0f2      	beq.n	8010910 <rmw_destroy_publisher+0x10>
 801092a:	686c      	ldr	r4, [r5, #4]
 801092c:	2c00      	cmp	r4, #0
 801092e:	d0ef      	beq.n	8010910 <rmw_destroy_publisher+0x10>
 8010930:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010932:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8010936:	f008 ff31 	bl	801979c <destroy_topic>
 801093a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801093e:	6962      	ldr	r2, [r4, #20]
 8010940:	6918      	ldr	r0, [r3, #16]
 8010942:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010946:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801094a:	6819      	ldr	r1, [r3, #0]
 801094c:	f001 fd8c 	bl	8012468 <uxr_buffer_delete_entity>
 8010950:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010954:	6922      	ldr	r2, [r4, #16]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801095c:	4604      	mov	r4, r0
 801095e:	6809      	ldr	r1, [r1, #0]
 8010960:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010964:	f001 fd80 	bl	8012468 <uxr_buffer_delete_entity>
 8010968:	693e      	ldr	r6, [r7, #16]
 801096a:	4622      	mov	r2, r4
 801096c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010970:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010974:	4604      	mov	r4, r0
 8010976:	4630      	mov	r0, r6
 8010978:	f000 fcc8 	bl	801130c <run_xrce_session>
 801097c:	693e      	ldr	r6, [r7, #16]
 801097e:	4622      	mov	r2, r4
 8010980:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010984:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010988:	4604      	mov	r4, r0
 801098a:	4630      	mov	r0, r6
 801098c:	f000 fcbe 	bl	801130c <run_xrce_session>
 8010990:	b12c      	cbz	r4, 801099e <rmw_destroy_publisher+0x9e>
 8010992:	b120      	cbz	r0, 801099e <rmw_destroy_publisher+0x9e>
 8010994:	2400      	movs	r4, #0
 8010996:	4628      	mov	r0, r5
 8010998:	f000 fb5e 	bl	8011058 <rmw_uxrce_fini_publisher_memory>
 801099c:	e7b9      	b.n	8010912 <rmw_destroy_publisher+0x12>
 801099e:	2402      	movs	r4, #2
 80109a0:	e7f9      	b.n	8010996 <rmw_destroy_publisher+0x96>
 80109a2:	bf00      	nop

080109a4 <rmw_create_service>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	b091      	sub	sp, #68	@ 0x44
 80109aa:	2800      	cmp	r0, #0
 80109ac:	f000 80ba 	beq.w	8010b24 <rmw_create_service+0x180>
 80109b0:	4689      	mov	r9, r1
 80109b2:	2900      	cmp	r1, #0
 80109b4:	f000 80b6 	beq.w	8010b24 <rmw_create_service+0x180>
 80109b8:	4606      	mov	r6, r0
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	4614      	mov	r4, r2
 80109be:	461d      	mov	r5, r3
 80109c0:	f000 fdbe 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	f000 80ad 	beq.w	8010b24 <rmw_create_service+0x180>
 80109ca:	2c00      	cmp	r4, #0
 80109cc:	f000 80aa 	beq.w	8010b24 <rmw_create_service+0x180>
 80109d0:	7823      	ldrb	r3, [r4, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 80a6 	beq.w	8010b24 <rmw_create_service+0x180>
 80109d8:	2d00      	cmp	r5, #0
 80109da:	f000 80a3 	beq.w	8010b24 <rmw_create_service+0x180>
 80109de:	4854      	ldr	r0, [pc, #336]	@ (8010b30 <rmw_create_service+0x18c>)
 80109e0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80109e4:	f008 fe1c 	bl	8019620 <get_memory>
 80109e8:	4606      	mov	r6, r0
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f000 809b 	beq.w	8010b26 <rmw_create_service+0x182>
 80109f0:	6887      	ldr	r7, [r0, #8]
 80109f2:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80109f6:	f008 fe7b 	bl	80196f0 <rmw_get_implementation_identifier>
 80109fa:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 80109fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010a00:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8010a04:	4620      	mov	r0, r4
 8010a06:	f7ef fc15 	bl	8000234 <strlen>
 8010a0a:	1c42      	adds	r2, r0, #1
 8010a0c:	2a3c      	cmp	r2, #60	@ 0x3c
 8010a0e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8010a12:	f200 8084 	bhi.w	8010b1e <rmw_create_service+0x17a>
 8010a16:	4621      	mov	r1, r4
 8010a18:	4650      	mov	r0, sl
 8010a1a:	f00b fa34 	bl	801be86 <memcpy>
 8010a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a22:	4629      	mov	r1, r5
 8010a24:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8010a28:	677b      	str	r3, [r7, #116]	@ 0x74
 8010a2a:	2250      	movs	r2, #80	@ 0x50
 8010a2c:	f107 0020 	add.w	r0, r7, #32
 8010a30:	f00b fa29 	bl	801be86 <memcpy>
 8010a34:	493f      	ldr	r1, [pc, #252]	@ (8010b34 <rmw_create_service+0x190>)
 8010a36:	4648      	mov	r0, r9
 8010a38:	f000 fd9c 	bl	8011574 <get_service_typesupport_handle>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d06e      	beq.n	8010b1e <rmw_create_service+0x17a>
 8010a40:	6843      	ldr	r3, [r0, #4]
 8010a42:	617b      	str	r3, [r7, #20]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d06a      	beq.n	8010b1e <rmw_create_service+0x17a>
 8010a48:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010a4c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8010b3c <rmw_create_service+0x198>
 8010a50:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8010b40 <rmw_create_service+0x19c>
 8010a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a58:	2108      	movs	r1, #8
 8010a5a:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8010a5e:	1c42      	adds	r2, r0, #1
 8010a60:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8010a64:	f001 ff56 	bl	8012914 <uxr_object_id>
 8010a68:	2364      	movs	r3, #100	@ 0x64
 8010a6a:	6138      	str	r0, [r7, #16]
 8010a6c:	4652      	mov	r2, sl
 8010a6e:	6978      	ldr	r0, [r7, #20]
 8010a70:	4649      	mov	r1, r9
 8010a72:	f000 fcb3 	bl	80113dc <generate_service_types>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d051      	beq.n	8010b1e <rmw_create_service+0x17a>
 8010a7a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8010b44 <rmw_create_service+0x1a0>
 8010a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8010b38 <rmw_create_service+0x194>)
 8010a80:	233c      	movs	r3, #60	@ 0x3c
 8010a82:	4659      	mov	r1, fp
 8010a84:	4620      	mov	r0, r4
 8010a86:	f000 fc77 	bl	8011378 <generate_service_topics>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	d047      	beq.n	8010b1e <rmw_create_service+0x17a>
 8010a8e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010a92:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8010a96:	a80c      	add	r0, sp, #48	@ 0x30
 8010a98:	4629      	mov	r1, r5
 8010a9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a9e:	f000 fc51 	bl	8011344 <convert_qos_profile>
 8010aa2:	4a25      	ldr	r2, [pc, #148]	@ (8010b38 <rmw_create_service+0x194>)
 8010aa4:	9400      	str	r4, [sp, #0]
 8010aa6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010aaa:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8010aae:	a80c      	add	r0, sp, #48	@ 0x30
 8010ab0:	c803      	ldmia	r0, {r0, r1}
 8010ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab4:	9005      	str	r0, [sp, #20]
 8010ab6:	9a08      	ldr	r2, [sp, #32]
 8010ab8:	f8ad 1018 	strh.w	r1, [sp, #24]
 8010abc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010ac0:	2306      	movs	r3, #6
 8010ac2:	9307      	str	r3, [sp, #28]
 8010ac4:	6811      	ldr	r1, [r2, #0]
 8010ac6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010aca:	693a      	ldr	r2, [r7, #16]
 8010acc:	f001 fe26 	bl	801271c <uxr_buffer_create_replier_bin>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010ad6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010ada:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010ade:	f000 fc15 	bl	801130c <run_xrce_session>
 8010ae2:	b1e0      	cbz	r0, 8010b1e <rmw_create_service+0x17a>
 8010ae4:	7a2b      	ldrb	r3, [r5, #8]
 8010ae6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8010aea:	2200      	movs	r2, #0
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010af2:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8010af6:	bf0c      	ite	eq
 8010af8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8010afc:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8010b00:	673a      	str	r2, [r7, #112]	@ 0x70
 8010b02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b04:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010b08:	ab0e      	add	r3, sp, #56	@ 0x38
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	6811      	ldr	r1, [r2, #0]
 8010b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b10:	693a      	ldr	r2, [r7, #16]
 8010b12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b16:	f001 ff2d 	bl	8012974 <uxr_buffer_request_data>
 8010b1a:	8338      	strh	r0, [r7, #24]
 8010b1c:	e003      	b.n	8010b26 <rmw_create_service+0x182>
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f000 fac6 	bl	80110b0 <rmw_uxrce_fini_service_memory>
 8010b24:	2600      	movs	r6, #0
 8010b26:	4630      	mov	r0, r6
 8010b28:	b011      	add	sp, #68	@ 0x44
 8010b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2e:	bf00      	nop
 8010b30:	2000bc9c 	.word	0x2000bc9c
 8010b34:	0801d4b0 	.word	0x0801d4b0
 8010b38:	20006fec 	.word	0x20006fec
 8010b3c:	20007028 	.word	0x20007028
 8010b40:	20006f88 	.word	0x20006f88
 8010b44:	20006f4c 	.word	0x20006f4c

08010b48 <rmw_destroy_service>:
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	b128      	cbz	r0, 8010b58 <rmw_destroy_service+0x10>
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	6800      	ldr	r0, [r0, #0]
 8010b50:	460d      	mov	r5, r1
 8010b52:	f000 fcf5 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010b56:	b910      	cbnz	r0, 8010b5e <rmw_destroy_service+0x16>
 8010b58:	2401      	movs	r4, #1
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	bd70      	pop	{r4, r5, r6, pc}
 8010b5e:	6863      	ldr	r3, [r4, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d0f9      	beq.n	8010b58 <rmw_destroy_service+0x10>
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	d0f7      	beq.n	8010b58 <rmw_destroy_service+0x10>
 8010b68:	6828      	ldr	r0, [r5, #0]
 8010b6a:	f000 fce9 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0f2      	beq.n	8010b58 <rmw_destroy_service+0x10>
 8010b72:	686e      	ldr	r6, [r5, #4]
 8010b74:	2e00      	cmp	r6, #0
 8010b76:	d0ef      	beq.n	8010b58 <rmw_destroy_service+0x10>
 8010b78:	6864      	ldr	r4, [r4, #4]
 8010b7a:	6932      	ldr	r2, [r6, #16]
 8010b7c:	6920      	ldr	r0, [r4, #16]
 8010b7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010b82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b86:	6819      	ldr	r1, [r3, #0]
 8010b88:	f001 ff2e 	bl	80129e8 <uxr_buffer_cancel_data>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	6920      	ldr	r0, [r4, #16]
 8010b90:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010b94:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010b98:	f000 fbb8 	bl	801130c <run_xrce_session>
 8010b9c:	6920      	ldr	r0, [r4, #16]
 8010b9e:	6932      	ldr	r2, [r6, #16]
 8010ba0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010ba4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ba8:	6819      	ldr	r1, [r3, #0]
 8010baa:	f001 fc5d 	bl	8012468 <uxr_buffer_delete_entity>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	6920      	ldr	r0, [r4, #16]
 8010bb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010bb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010bba:	f000 fba7 	bl	801130c <run_xrce_session>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	bf14      	ite	ne
 8010bc4:	2400      	movne	r4, #0
 8010bc6:	2402      	moveq	r4, #2
 8010bc8:	f000 fa72 	bl	80110b0 <rmw_uxrce_fini_service_memory>
 8010bcc:	e7c5      	b.n	8010b5a <rmw_destroy_service+0x12>
 8010bce:	bf00      	nop

08010bd0 <rmw_service_response_publisher_get_actual_qos>:
 8010bd0:	b150      	cbz	r0, 8010be8 <rmw_service_response_publisher_get_actual_qos+0x18>
 8010bd2:	b508      	push	{r3, lr}
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	b149      	cbz	r1, 8010bec <rmw_service_response_publisher_get_actual_qos+0x1c>
 8010bd8:	6841      	ldr	r1, [r0, #4]
 8010bda:	2250      	movs	r2, #80	@ 0x50
 8010bdc:	3120      	adds	r1, #32
 8010bde:	4618      	mov	r0, r3
 8010be0:	f00b f951 	bl	801be86 <memcpy>
 8010be4:	2000      	movs	r0, #0
 8010be6:	bd08      	pop	{r3, pc}
 8010be8:	200b      	movs	r0, #11
 8010bea:	4770      	bx	lr
 8010bec:	200b      	movs	r0, #11
 8010bee:	bd08      	pop	{r3, pc}

08010bf0 <rmw_service_request_subscription_get_actual_qos>:
 8010bf0:	b150      	cbz	r0, 8010c08 <rmw_service_request_subscription_get_actual_qos+0x18>
 8010bf2:	b508      	push	{r3, lr}
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	b149      	cbz	r1, 8010c0c <rmw_service_request_subscription_get_actual_qos+0x1c>
 8010bf8:	6841      	ldr	r1, [r0, #4]
 8010bfa:	2250      	movs	r2, #80	@ 0x50
 8010bfc:	3120      	adds	r1, #32
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f00b f941 	bl	801be86 <memcpy>
 8010c04:	2000      	movs	r0, #0
 8010c06:	bd08      	pop	{r3, pc}
 8010c08:	200b      	movs	r0, #11
 8010c0a:	4770      	bx	lr
 8010c0c:	200b      	movs	r0, #11
 8010c0e:	bd08      	pop	{r3, pc}

08010c10 <rmw_destroy_subscription>:
 8010c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c12:	b128      	cbz	r0, 8010c20 <rmw_destroy_subscription+0x10>
 8010c14:	4604      	mov	r4, r0
 8010c16:	6800      	ldr	r0, [r0, #0]
 8010c18:	460d      	mov	r5, r1
 8010c1a:	f000 fc91 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010c1e:	b910      	cbnz	r0, 8010c26 <rmw_destroy_subscription+0x16>
 8010c20:	2401      	movs	r4, #1
 8010c22:	4620      	mov	r0, r4
 8010c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c26:	6863      	ldr	r3, [r4, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d0f9      	beq.n	8010c20 <rmw_destroy_subscription+0x10>
 8010c2c:	2d00      	cmp	r5, #0
 8010c2e:	d0f7      	beq.n	8010c20 <rmw_destroy_subscription+0x10>
 8010c30:	6828      	ldr	r0, [r5, #0]
 8010c32:	f000 fc85 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d0f2      	beq.n	8010c20 <rmw_destroy_subscription+0x10>
 8010c3a:	686c      	ldr	r4, [r5, #4]
 8010c3c:	2c00      	cmp	r4, #0
 8010c3e:	d0ef      	beq.n	8010c20 <rmw_destroy_subscription+0x10>
 8010c40:	6a26      	ldr	r6, [r4, #32]
 8010c42:	6962      	ldr	r2, [r4, #20]
 8010c44:	6930      	ldr	r0, [r6, #16]
 8010c46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010c4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010c4e:	6819      	ldr	r1, [r3, #0]
 8010c50:	f001 feca 	bl	80129e8 <uxr_buffer_cancel_data>
 8010c54:	4602      	mov	r2, r0
 8010c56:	6930      	ldr	r0, [r6, #16]
 8010c58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010c5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010c60:	f000 fb54 	bl	801130c <run_xrce_session>
 8010c64:	69e0      	ldr	r0, [r4, #28]
 8010c66:	f008 fd99 	bl	801979c <destroy_topic>
 8010c6a:	6a23      	ldr	r3, [r4, #32]
 8010c6c:	6962      	ldr	r2, [r4, #20]
 8010c6e:	6918      	ldr	r0, [r3, #16]
 8010c70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010c74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010c78:	6819      	ldr	r1, [r3, #0]
 8010c7a:	f001 fbf5 	bl	8012468 <uxr_buffer_delete_entity>
 8010c7e:	6a23      	ldr	r3, [r4, #32]
 8010c80:	6922      	ldr	r2, [r4, #16]
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010c88:	4604      	mov	r4, r0
 8010c8a:	6809      	ldr	r1, [r1, #0]
 8010c8c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010c90:	f001 fbea 	bl	8012468 <uxr_buffer_delete_entity>
 8010c94:	6937      	ldr	r7, [r6, #16]
 8010c96:	4622      	mov	r2, r4
 8010c98:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010c9c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	f000 fb32 	bl	801130c <run_xrce_session>
 8010ca8:	6936      	ldr	r6, [r6, #16]
 8010caa:	4622      	mov	r2, r4
 8010cac:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010cb0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f000 fb28 	bl	801130c <run_xrce_session>
 8010cbc:	b12c      	cbz	r4, 8010cca <rmw_destroy_subscription+0xba>
 8010cbe:	b120      	cbz	r0, 8010cca <rmw_destroy_subscription+0xba>
 8010cc0:	2400      	movs	r4, #0
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f000 f9de 	bl	8011084 <rmw_uxrce_fini_subscription_memory>
 8010cc8:	e7ab      	b.n	8010c22 <rmw_destroy_subscription+0x12>
 8010cca:	2402      	movs	r4, #2
 8010ccc:	e7f9      	b.n	8010cc2 <rmw_destroy_subscription+0xb2>
 8010cce:	bf00      	nop

08010cd0 <rmw_uxrce_transport_init>:
 8010cd0:	b508      	push	{r3, lr}
 8010cd2:	b108      	cbz	r0, 8010cd8 <rmw_uxrce_transport_init+0x8>
 8010cd4:	f100 0210 	add.w	r2, r0, #16
 8010cd8:	b139      	cbz	r1, 8010cea <rmw_uxrce_transport_init+0x1a>
 8010cda:	6949      	ldr	r1, [r1, #20]
 8010cdc:	4610      	mov	r0, r2
 8010cde:	f001 fde1 	bl	80128a4 <uxr_init_custom_transport>
 8010ce2:	f080 0001 	eor.w	r0, r0, #1
 8010ce6:	b2c0      	uxtb	r0, r0
 8010ce8:	bd08      	pop	{r3, pc}
 8010cea:	4b04      	ldr	r3, [pc, #16]	@ (8010cfc <rmw_uxrce_transport_init+0x2c>)
 8010cec:	4610      	mov	r0, r2
 8010cee:	6859      	ldr	r1, [r3, #4]
 8010cf0:	f001 fdd8 	bl	80128a4 <uxr_init_custom_transport>
 8010cf4:	f080 0001 	eor.w	r0, r0, #1
 8010cf8:	b2c0      	uxtb	r0, r0
 8010cfa:	bd08      	pop	{r3, pc}
 8010cfc:	20006ef4 	.word	0x20006ef4

08010d00 <rmw_uros_epoch_millis>:
 8010d00:	4b05      	ldr	r3, [pc, #20]	@ (8010d18 <rmw_uros_epoch_millis+0x18>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	b123      	cbz	r3, 8010d10 <rmw_uros_epoch_millis+0x10>
 8010d06:	6898      	ldr	r0, [r3, #8]
 8010d08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010d0c:	f002 b876 	b.w	8012dfc <uxr_epoch_millis>
 8010d10:	2000      	movs	r0, #0
 8010d12:	2100      	movs	r1, #0
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	2000bcac 	.word	0x2000bcac

08010d1c <rmw_uros_epoch_nanos>:
 8010d1c:	4b05      	ldr	r3, [pc, #20]	@ (8010d34 <rmw_uros_epoch_nanos+0x18>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	b123      	cbz	r3, 8010d2c <rmw_uros_epoch_nanos+0x10>
 8010d22:	6898      	ldr	r0, [r3, #8]
 8010d24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010d28:	f002 b87a 	b.w	8012e20 <uxr_epoch_nanos>
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	2100      	movs	r1, #0
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	2000bcac 	.word	0x2000bcac

08010d38 <rmw_uros_sync_session>:
 8010d38:	b508      	push	{r3, lr}
 8010d3a:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <rmw_uros_sync_session+0x20>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	b14b      	cbz	r3, 8010d54 <rmw_uros_sync_session+0x1c>
 8010d40:	4601      	mov	r1, r0
 8010d42:	6898      	ldr	r0, [r3, #8]
 8010d44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010d48:	f002 fcae 	bl	80136a8 <uxr_sync_session>
 8010d4c:	f080 0001 	eor.w	r0, r0, #1
 8010d50:	b2c0      	uxtb	r0, r0
 8010d52:	bd08      	pop	{r3, pc}
 8010d54:	2001      	movs	r0, #1
 8010d56:	bd08      	pop	{r3, pc}
 8010d58:	2000bcac 	.word	0x2000bcac

08010d5c <rmw_uxrce_init_service_memory>:
 8010d5c:	b1e2      	cbz	r2, 8010d98 <rmw_uxrce_init_service_memory+0x3c>
 8010d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d62:	7b05      	ldrb	r5, [r0, #12]
 8010d64:	4606      	mov	r6, r0
 8010d66:	b9ad      	cbnz	r5, 8010d94 <rmw_uxrce_init_service_memory+0x38>
 8010d68:	23c8      	movs	r3, #200	@ 0xc8
 8010d6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d6e:	6083      	str	r3, [r0, #8]
 8010d70:	f240 1301 	movw	r3, #257	@ 0x101
 8010d74:	4617      	mov	r7, r2
 8010d76:	8183      	strh	r3, [r0, #12]
 8010d78:	460c      	mov	r4, r1
 8010d7a:	46a8      	mov	r8, r5
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4630      	mov	r0, r6
 8010d80:	3501      	adds	r5, #1
 8010d82:	f008 fc5d 	bl	8019640 <put_memory>
 8010d86:	42af      	cmp	r7, r5
 8010d88:	60a4      	str	r4, [r4, #8]
 8010d8a:	f884 800c 	strb.w	r8, [r4, #12]
 8010d8e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010d92:	d1f3      	bne.n	8010d7c <rmw_uxrce_init_service_memory+0x20>
 8010d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <rmw_uxrce_init_client_memory>:
 8010d9c:	b1e2      	cbz	r2, 8010dd8 <rmw_uxrce_init_client_memory+0x3c>
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	7b05      	ldrb	r5, [r0, #12]
 8010da4:	4606      	mov	r6, r0
 8010da6:	b9ad      	cbnz	r5, 8010dd4 <rmw_uxrce_init_client_memory+0x38>
 8010da8:	23c8      	movs	r3, #200	@ 0xc8
 8010daa:	e9c0 5500 	strd	r5, r5, [r0]
 8010dae:	6083      	str	r3, [r0, #8]
 8010db0:	f240 1301 	movw	r3, #257	@ 0x101
 8010db4:	4617      	mov	r7, r2
 8010db6:	8183      	strh	r3, [r0, #12]
 8010db8:	460c      	mov	r4, r1
 8010dba:	46a8      	mov	r8, r5
 8010dbc:	4621      	mov	r1, r4
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	f008 fc3d 	bl	8019640 <put_memory>
 8010dc6:	42af      	cmp	r7, r5
 8010dc8:	60a4      	str	r4, [r4, #8]
 8010dca:	f884 800c 	strb.w	r8, [r4, #12]
 8010dce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010dd2:	d1f3      	bne.n	8010dbc <rmw_uxrce_init_client_memory+0x20>
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop

08010ddc <rmw_uxrce_init_publisher_memory>:
 8010ddc:	b1e2      	cbz	r2, 8010e18 <rmw_uxrce_init_publisher_memory+0x3c>
 8010dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de2:	7b05      	ldrb	r5, [r0, #12]
 8010de4:	4606      	mov	r6, r0
 8010de6:	b9ad      	cbnz	r5, 8010e14 <rmw_uxrce_init_publisher_memory+0x38>
 8010de8:	23d8      	movs	r3, #216	@ 0xd8
 8010dea:	e9c0 5500 	strd	r5, r5, [r0]
 8010dee:	6083      	str	r3, [r0, #8]
 8010df0:	f240 1301 	movw	r3, #257	@ 0x101
 8010df4:	4617      	mov	r7, r2
 8010df6:	8183      	strh	r3, [r0, #12]
 8010df8:	460c      	mov	r4, r1
 8010dfa:	46a8      	mov	r8, r5
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	4630      	mov	r0, r6
 8010e00:	3501      	adds	r5, #1
 8010e02:	f008 fc1d 	bl	8019640 <put_memory>
 8010e06:	42af      	cmp	r7, r5
 8010e08:	60a4      	str	r4, [r4, #8]
 8010e0a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e0e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010e12:	d1f3      	bne.n	8010dfc <rmw_uxrce_init_publisher_memory+0x20>
 8010e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop

08010e1c <rmw_uxrce_init_subscription_memory>:
 8010e1c:	b1e2      	cbz	r2, 8010e58 <rmw_uxrce_init_subscription_memory+0x3c>
 8010e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e22:	7b05      	ldrb	r5, [r0, #12]
 8010e24:	4606      	mov	r6, r0
 8010e26:	b9ad      	cbnz	r5, 8010e54 <rmw_uxrce_init_subscription_memory+0x38>
 8010e28:	23d8      	movs	r3, #216	@ 0xd8
 8010e2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010e2e:	6083      	str	r3, [r0, #8]
 8010e30:	f240 1301 	movw	r3, #257	@ 0x101
 8010e34:	4617      	mov	r7, r2
 8010e36:	8183      	strh	r3, [r0, #12]
 8010e38:	460c      	mov	r4, r1
 8010e3a:	46a8      	mov	r8, r5
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4630      	mov	r0, r6
 8010e40:	3501      	adds	r5, #1
 8010e42:	f008 fbfd 	bl	8019640 <put_memory>
 8010e46:	42af      	cmp	r7, r5
 8010e48:	60a4      	str	r4, [r4, #8]
 8010e4a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e4e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010e52:	d1f3      	bne.n	8010e3c <rmw_uxrce_init_subscription_memory+0x20>
 8010e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop

08010e5c <rmw_uxrce_init_node_memory>:
 8010e5c:	b1e2      	cbz	r2, 8010e98 <rmw_uxrce_init_node_memory+0x3c>
 8010e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e62:	7b05      	ldrb	r5, [r0, #12]
 8010e64:	4606      	mov	r6, r0
 8010e66:	b9ad      	cbnz	r5, 8010e94 <rmw_uxrce_init_node_memory+0x38>
 8010e68:	23a4      	movs	r3, #164	@ 0xa4
 8010e6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010e6e:	6083      	str	r3, [r0, #8]
 8010e70:	f240 1301 	movw	r3, #257	@ 0x101
 8010e74:	4617      	mov	r7, r2
 8010e76:	8183      	strh	r3, [r0, #12]
 8010e78:	460c      	mov	r4, r1
 8010e7a:	46a8      	mov	r8, r5
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	4630      	mov	r0, r6
 8010e80:	3501      	adds	r5, #1
 8010e82:	f008 fbdd 	bl	8019640 <put_memory>
 8010e86:	42af      	cmp	r7, r5
 8010e88:	60a4      	str	r4, [r4, #8]
 8010e8a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e8e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010e92:	d1f3      	bne.n	8010e7c <rmw_uxrce_init_node_memory+0x20>
 8010e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop

08010e9c <rmw_uxrce_init_session_memory>:
 8010e9c:	b1ea      	cbz	r2, 8010eda <rmw_uxrce_init_session_memory+0x3e>
 8010e9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ea2:	7b05      	ldrb	r5, [r0, #12]
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	b9b5      	cbnz	r5, 8010ed6 <rmw_uxrce_init_session_memory+0x3a>
 8010ea8:	e9c0 5500 	strd	r5, r5, [r0]
 8010eac:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010eb0:	f240 1301 	movw	r3, #257	@ 0x101
 8010eb4:	4617      	mov	r7, r2
 8010eb6:	f8c0 8008 	str.w	r8, [r0, #8]
 8010eba:	460c      	mov	r4, r1
 8010ebc:	8183      	strh	r3, [r0, #12]
 8010ebe:	46a9      	mov	r9, r5
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	3501      	adds	r5, #1
 8010ec6:	f008 fbbb 	bl	8019640 <put_memory>
 8010eca:	42af      	cmp	r7, r5
 8010ecc:	60a4      	str	r4, [r4, #8]
 8010ece:	f884 900c 	strb.w	r9, [r4, #12]
 8010ed2:	4444      	add	r4, r8
 8010ed4:	d1f4      	bne.n	8010ec0 <rmw_uxrce_init_session_memory+0x24>
 8010ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eda:	4770      	bx	lr

08010edc <rmw_uxrce_init_topic_memory>:
 8010edc:	b1e2      	cbz	r2, 8010f18 <rmw_uxrce_init_topic_memory+0x3c>
 8010ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee2:	7b05      	ldrb	r5, [r0, #12]
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	b9ad      	cbnz	r5, 8010f14 <rmw_uxrce_init_topic_memory+0x38>
 8010ee8:	231c      	movs	r3, #28
 8010eea:	e9c0 5500 	strd	r5, r5, [r0]
 8010eee:	6083      	str	r3, [r0, #8]
 8010ef0:	f240 1301 	movw	r3, #257	@ 0x101
 8010ef4:	4617      	mov	r7, r2
 8010ef6:	8183      	strh	r3, [r0, #12]
 8010ef8:	460c      	mov	r4, r1
 8010efa:	46a8      	mov	r8, r5
 8010efc:	4621      	mov	r1, r4
 8010efe:	4630      	mov	r0, r6
 8010f00:	3501      	adds	r5, #1
 8010f02:	f008 fb9d 	bl	8019640 <put_memory>
 8010f06:	42af      	cmp	r7, r5
 8010f08:	60a4      	str	r4, [r4, #8]
 8010f0a:	f884 800c 	strb.w	r8, [r4, #12]
 8010f0e:	f104 041c 	add.w	r4, r4, #28
 8010f12:	d1f3      	bne.n	8010efc <rmw_uxrce_init_topic_memory+0x20>
 8010f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop

08010f1c <rmw_uxrce_init_static_input_buffer_memory>:
 8010f1c:	b1ea      	cbz	r2, 8010f5a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f22:	7b05      	ldrb	r5, [r0, #12]
 8010f24:	4606      	mov	r6, r0
 8010f26:	b9b5      	cbnz	r5, 8010f56 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010f28:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010f2c:	e9c0 5500 	strd	r5, r5, [r0]
 8010f30:	6083      	str	r3, [r0, #8]
 8010f32:	f240 1301 	movw	r3, #257	@ 0x101
 8010f36:	4617      	mov	r7, r2
 8010f38:	8183      	strh	r3, [r0, #12]
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	46a8      	mov	r8, r5
 8010f3e:	4621      	mov	r1, r4
 8010f40:	4630      	mov	r0, r6
 8010f42:	3501      	adds	r5, #1
 8010f44:	f008 fb7c 	bl	8019640 <put_memory>
 8010f48:	42af      	cmp	r7, r5
 8010f4a:	60a4      	str	r4, [r4, #8]
 8010f4c:	f884 800c 	strb.w	r8, [r4, #12]
 8010f50:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010f54:	d1f3      	bne.n	8010f3e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5a:	4770      	bx	lr

08010f5c <rmw_uxrce_init_init_options_impl_memory>:
 8010f5c:	b1e2      	cbz	r2, 8010f98 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f62:	7b05      	ldrb	r5, [r0, #12]
 8010f64:	4606      	mov	r6, r0
 8010f66:	b9ad      	cbnz	r5, 8010f94 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010f68:	232c      	movs	r3, #44	@ 0x2c
 8010f6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010f6e:	6083      	str	r3, [r0, #8]
 8010f70:	f240 1301 	movw	r3, #257	@ 0x101
 8010f74:	4617      	mov	r7, r2
 8010f76:	8183      	strh	r3, [r0, #12]
 8010f78:	460c      	mov	r4, r1
 8010f7a:	46a8      	mov	r8, r5
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4630      	mov	r0, r6
 8010f80:	3501      	adds	r5, #1
 8010f82:	f008 fb5d 	bl	8019640 <put_memory>
 8010f86:	42af      	cmp	r7, r5
 8010f88:	60a4      	str	r4, [r4, #8]
 8010f8a:	f884 800c 	strb.w	r8, [r4, #12]
 8010f8e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010f92:	d1f3      	bne.n	8010f7c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop

08010f9c <rmw_uxrce_init_wait_set_memory>:
 8010f9c:	b1e2      	cbz	r2, 8010fd8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8010f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa2:	7b05      	ldrb	r5, [r0, #12]
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	b9ad      	cbnz	r5, 8010fd4 <rmw_uxrce_init_wait_set_memory+0x38>
 8010fa8:	231c      	movs	r3, #28
 8010faa:	e9c0 5500 	strd	r5, r5, [r0]
 8010fae:	6083      	str	r3, [r0, #8]
 8010fb0:	f240 1301 	movw	r3, #257	@ 0x101
 8010fb4:	4617      	mov	r7, r2
 8010fb6:	8183      	strh	r3, [r0, #12]
 8010fb8:	460c      	mov	r4, r1
 8010fba:	46a8      	mov	r8, r5
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	3501      	adds	r5, #1
 8010fc2:	f008 fb3d 	bl	8019640 <put_memory>
 8010fc6:	42af      	cmp	r7, r5
 8010fc8:	60a4      	str	r4, [r4, #8]
 8010fca:	f884 800c 	strb.w	r8, [r4, #12]
 8010fce:	f104 041c 	add.w	r4, r4, #28
 8010fd2:	d1f3      	bne.n	8010fbc <rmw_uxrce_init_wait_set_memory+0x20>
 8010fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop

08010fdc <rmw_uxrce_init_guard_condition_memory>:
 8010fdc:	b1e2      	cbz	r2, 8011018 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe2:	7b05      	ldrb	r5, [r0, #12]
 8010fe4:	4606      	mov	r6, r0
 8010fe6:	b9ad      	cbnz	r5, 8011014 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010fe8:	2320      	movs	r3, #32
 8010fea:	e9c0 5500 	strd	r5, r5, [r0]
 8010fee:	6083      	str	r3, [r0, #8]
 8010ff0:	f240 1301 	movw	r3, #257	@ 0x101
 8010ff4:	4617      	mov	r7, r2
 8010ff6:	8183      	strh	r3, [r0, #12]
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	46a8      	mov	r8, r5
 8010ffc:	4621      	mov	r1, r4
 8010ffe:	4630      	mov	r0, r6
 8011000:	3501      	adds	r5, #1
 8011002:	f008 fb1d 	bl	8019640 <put_memory>
 8011006:	42af      	cmp	r7, r5
 8011008:	60a4      	str	r4, [r4, #8]
 801100a:	f884 800c 	strb.w	r8, [r4, #12]
 801100e:	f104 0420 	add.w	r4, r4, #32
 8011012:	d1f3      	bne.n	8010ffc <rmw_uxrce_init_guard_condition_memory+0x20>
 8011014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop

0801101c <rmw_uxrce_fini_session_memory>:
 801101c:	4601      	mov	r1, r0
 801101e:	4801      	ldr	r0, [pc, #4]	@ (8011024 <rmw_uxrce_fini_session_memory+0x8>)
 8011020:	f008 bb0e 	b.w	8019640 <put_memory>
 8011024:	2000bcac 	.word	0x2000bcac

08011028 <rmw_uxrce_fini_node_memory>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4604      	mov	r4, r0
 801102c:	6800      	ldr	r0, [r0, #0]
 801102e:	b128      	cbz	r0, 801103c <rmw_uxrce_fini_node_memory+0x14>
 8011030:	4b07      	ldr	r3, [pc, #28]	@ (8011050 <rmw_uxrce_fini_node_memory+0x28>)
 8011032:	6819      	ldr	r1, [r3, #0]
 8011034:	f7ef f8f4 	bl	8000220 <strcmp>
 8011038:	b940      	cbnz	r0, 801104c <rmw_uxrce_fini_node_memory+0x24>
 801103a:	6020      	str	r0, [r4, #0]
 801103c:	6861      	ldr	r1, [r4, #4]
 801103e:	b129      	cbz	r1, 801104c <rmw_uxrce_fini_node_memory+0x24>
 8011040:	2500      	movs	r5, #0
 8011042:	4804      	ldr	r0, [pc, #16]	@ (8011054 <rmw_uxrce_fini_node_memory+0x2c>)
 8011044:	610d      	str	r5, [r1, #16]
 8011046:	f008 fafb 	bl	8019640 <put_memory>
 801104a:	6065      	str	r5, [r4, #4]
 801104c:	bd38      	pop	{r3, r4, r5, pc}
 801104e:	bf00      	nop
 8011050:	0801e910 	.word	0x0801e910
 8011054:	2000bc7c 	.word	0x2000bc7c

08011058 <rmw_uxrce_fini_publisher_memory>:
 8011058:	b510      	push	{r4, lr}
 801105a:	4604      	mov	r4, r0
 801105c:	6800      	ldr	r0, [r0, #0]
 801105e:	b128      	cbz	r0, 801106c <rmw_uxrce_fini_publisher_memory+0x14>
 8011060:	4b06      	ldr	r3, [pc, #24]	@ (801107c <rmw_uxrce_fini_publisher_memory+0x24>)
 8011062:	6819      	ldr	r1, [r3, #0]
 8011064:	f7ef f8dc 	bl	8000220 <strcmp>
 8011068:	b938      	cbnz	r0, 801107a <rmw_uxrce_fini_publisher_memory+0x22>
 801106a:	6020      	str	r0, [r4, #0]
 801106c:	6861      	ldr	r1, [r4, #4]
 801106e:	b121      	cbz	r1, 801107a <rmw_uxrce_fini_publisher_memory+0x22>
 8011070:	4803      	ldr	r0, [pc, #12]	@ (8011080 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011072:	f008 fae5 	bl	8019640 <put_memory>
 8011076:	2300      	movs	r3, #0
 8011078:	6063      	str	r3, [r4, #4]
 801107a:	bd10      	pop	{r4, pc}
 801107c:	0801e910 	.word	0x0801e910
 8011080:	2000bc8c 	.word	0x2000bc8c

08011084 <rmw_uxrce_fini_subscription_memory>:
 8011084:	b510      	push	{r4, lr}
 8011086:	4604      	mov	r4, r0
 8011088:	6800      	ldr	r0, [r0, #0]
 801108a:	b128      	cbz	r0, 8011098 <rmw_uxrce_fini_subscription_memory+0x14>
 801108c:	4b06      	ldr	r3, [pc, #24]	@ (80110a8 <rmw_uxrce_fini_subscription_memory+0x24>)
 801108e:	6819      	ldr	r1, [r3, #0]
 8011090:	f7ef f8c6 	bl	8000220 <strcmp>
 8011094:	b938      	cbnz	r0, 80110a6 <rmw_uxrce_fini_subscription_memory+0x22>
 8011096:	6020      	str	r0, [r4, #0]
 8011098:	6861      	ldr	r1, [r4, #4]
 801109a:	b121      	cbz	r1, 80110a6 <rmw_uxrce_fini_subscription_memory+0x22>
 801109c:	4803      	ldr	r0, [pc, #12]	@ (80110ac <rmw_uxrce_fini_subscription_memory+0x28>)
 801109e:	f008 facf 	bl	8019640 <put_memory>
 80110a2:	2300      	movs	r3, #0
 80110a4:	6063      	str	r3, [r4, #4]
 80110a6:	bd10      	pop	{r4, pc}
 80110a8:	0801e910 	.word	0x0801e910
 80110ac:	2000bccc 	.word	0x2000bccc

080110b0 <rmw_uxrce_fini_service_memory>:
 80110b0:	b510      	push	{r4, lr}
 80110b2:	4604      	mov	r4, r0
 80110b4:	6800      	ldr	r0, [r0, #0]
 80110b6:	b128      	cbz	r0, 80110c4 <rmw_uxrce_fini_service_memory+0x14>
 80110b8:	4b06      	ldr	r3, [pc, #24]	@ (80110d4 <rmw_uxrce_fini_service_memory+0x24>)
 80110ba:	6819      	ldr	r1, [r3, #0]
 80110bc:	f7ef f8b0 	bl	8000220 <strcmp>
 80110c0:	b938      	cbnz	r0, 80110d2 <rmw_uxrce_fini_service_memory+0x22>
 80110c2:	6020      	str	r0, [r4, #0]
 80110c4:	6861      	ldr	r1, [r4, #4]
 80110c6:	b121      	cbz	r1, 80110d2 <rmw_uxrce_fini_service_memory+0x22>
 80110c8:	4803      	ldr	r0, [pc, #12]	@ (80110d8 <rmw_uxrce_fini_service_memory+0x28>)
 80110ca:	f008 fab9 	bl	8019640 <put_memory>
 80110ce:	2300      	movs	r3, #0
 80110d0:	6063      	str	r3, [r4, #4]
 80110d2:	bd10      	pop	{r4, pc}
 80110d4:	0801e910 	.word	0x0801e910
 80110d8:	2000bc9c 	.word	0x2000bc9c

080110dc <rmw_uxrce_fini_client_memory>:
 80110dc:	b510      	push	{r4, lr}
 80110de:	4604      	mov	r4, r0
 80110e0:	6800      	ldr	r0, [r0, #0]
 80110e2:	b128      	cbz	r0, 80110f0 <rmw_uxrce_fini_client_memory+0x14>
 80110e4:	4b06      	ldr	r3, [pc, #24]	@ (8011100 <rmw_uxrce_fini_client_memory+0x24>)
 80110e6:	6819      	ldr	r1, [r3, #0]
 80110e8:	f7ef f89a 	bl	8000220 <strcmp>
 80110ec:	b938      	cbnz	r0, 80110fe <rmw_uxrce_fini_client_memory+0x22>
 80110ee:	6020      	str	r0, [r4, #0]
 80110f0:	6861      	ldr	r1, [r4, #4]
 80110f2:	b121      	cbz	r1, 80110fe <rmw_uxrce_fini_client_memory+0x22>
 80110f4:	4803      	ldr	r0, [pc, #12]	@ (8011104 <rmw_uxrce_fini_client_memory+0x28>)
 80110f6:	f008 faa3 	bl	8019640 <put_memory>
 80110fa:	2300      	movs	r3, #0
 80110fc:	6063      	str	r3, [r4, #4]
 80110fe:	bd10      	pop	{r4, pc}
 8011100:	0801e910 	.word	0x0801e910
 8011104:	2000708c 	.word	0x2000708c

08011108 <rmw_uxrce_fini_topic_memory>:
 8011108:	b510      	push	{r4, lr}
 801110a:	4604      	mov	r4, r0
 801110c:	4621      	mov	r1, r4
 801110e:	4803      	ldr	r0, [pc, #12]	@ (801111c <rmw_uxrce_fini_topic_memory+0x14>)
 8011110:	f008 fa96 	bl	8019640 <put_memory>
 8011114:	2300      	movs	r3, #0
 8011116:	61a3      	str	r3, [r4, #24]
 8011118:	bd10      	pop	{r4, pc}
 801111a:	bf00      	nop
 801111c:	2000bcdc 	.word	0x2000bcdc

08011120 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011120:	b082      	sub	sp, #8
 8011122:	b530      	push	{r4, r5, lr}
 8011124:	4925      	ldr	r1, [pc, #148]	@ (80111bc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011126:	680d      	ldr	r5, [r1, #0]
 8011128:	ac03      	add	r4, sp, #12
 801112a:	e884 000c 	stmia.w	r4, {r2, r3}
 801112e:	461c      	mov	r4, r3
 8011130:	2d00      	cmp	r5, #0
 8011132:	d041      	beq.n	80111b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011134:	462b      	mov	r3, r5
 8011136:	2100      	movs	r1, #0
 8011138:	689a      	ldr	r2, [r3, #8]
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011140:	4290      	cmp	r0, r2
 8011142:	bf08      	it	eq
 8011144:	3101      	addeq	r1, #1
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1f6      	bne.n	8011138 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801114a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801114e:	2b02      	cmp	r3, #2
 8011150:	d029      	beq.n	80111a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011152:	d907      	bls.n	8011164 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011154:	2b03      	cmp	r3, #3
 8011156:	d005      	beq.n	8011164 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011158:	2100      	movs	r1, #0
 801115a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801115e:	4608      	mov	r0, r1
 8011160:	b002      	add	sp, #8
 8011162:	4770      	bx	lr
 8011164:	b314      	cbz	r4, 80111ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011166:	428c      	cmp	r4, r1
 8011168:	d820      	bhi.n	80111ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801116a:	2d00      	cmp	r5, #0
 801116c:	d0f4      	beq.n	8011158 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801116e:	2100      	movs	r1, #0
 8011170:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011174:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011178:	e002      	b.n	8011180 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 801117a:	686d      	ldr	r5, [r5, #4]
 801117c:	2d00      	cmp	r5, #0
 801117e:	d0ec      	beq.n	801115a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011180:	68ab      	ldr	r3, [r5, #8]
 8011182:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011186:	4290      	cmp	r0, r2
 8011188:	d1f7      	bne.n	801117a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801118a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801118e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011192:	4562      	cmp	r2, ip
 8011194:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011198:	eb73 0e04 	sbcs.w	lr, r3, r4
 801119c:	daed      	bge.n	801117a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801119e:	4694      	mov	ip, r2
 80111a0:	461c      	mov	r4, r3
 80111a2:	4629      	mov	r1, r5
 80111a4:	e7e9      	b.n	801117a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80111a6:	b10c      	cbz	r4, 80111ac <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80111a8:	428c      	cmp	r4, r1
 80111aa:	d9d5      	bls.n	8011158 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80111ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111b0:	4802      	ldr	r0, [pc, #8]	@ (80111bc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80111b2:	b002      	add	sp, #8
 80111b4:	f008 ba34 	b.w	8019620 <get_memory>
 80111b8:	4629      	mov	r1, r5
 80111ba:	e7c6      	b.n	801114a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80111bc:	2000bcbc 	.word	0x2000bcbc

080111c0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80111c0:	4b11      	ldr	r3, [pc, #68]	@ (8011208 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	b530      	push	{r4, r5, lr}
 80111c6:	b1e3      	cbz	r3, 8011202 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80111c8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80111cc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80111d0:	2400      	movs	r4, #0
 80111d2:	e001      	b.n	80111d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	b193      	cbz	r3, 80111fe <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 80111d8:	689a      	ldr	r2, [r3, #8]
 80111da:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80111de:	4288      	cmp	r0, r1
 80111e0:	d1f8      	bne.n	80111d4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80111e2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80111e6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80111ea:	4571      	cmp	r1, lr
 80111ec:	eb72 050c 	sbcs.w	r5, r2, ip
 80111f0:	daf0      	bge.n	80111d4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80111f2:	461c      	mov	r4, r3
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	468e      	mov	lr, r1
 80111f8:	4694      	mov	ip, r2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1ec      	bne.n	80111d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80111fe:	4620      	mov	r0, r4
 8011200:	bd30      	pop	{r4, r5, pc}
 8011202:	461c      	mov	r4, r3
 8011204:	4620      	mov	r0, r4
 8011206:	bd30      	pop	{r4, r5, pc}
 8011208:	2000bcbc 	.word	0x2000bcbc
 801120c:	00000000 	.word	0x00000000

08011210 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011214:	4b3c      	ldr	r3, [pc, #240]	@ (8011308 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011216:	ed2d 8b06 	vpush	{d8-d10}
 801121a:	681f      	ldr	r7, [r3, #0]
 801121c:	b08d      	sub	sp, #52	@ 0x34
 801121e:	f7ff fd7d 	bl	8010d1c <rmw_uros_epoch_nanos>
 8011222:	2f00      	cmp	r7, #0
 8011224:	d05d      	beq.n	80112e2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011226:	46b8      	mov	r8, r7
 8011228:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80112f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801122c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011230:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011234:	2b04      	cmp	r3, #4
 8011236:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80112f8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801123a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8011300 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801123e:	4681      	mov	r9, r0
 8011240:	468a      	mov	sl, r1
 8011242:	ac04      	add	r4, sp, #16
 8011244:	d03f      	beq.n	80112c6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011246:	2b05      	cmp	r3, #5
 8011248:	d044      	beq.n	80112d4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801124a:	2b03      	cmp	r3, #3
 801124c:	d03b      	beq.n	80112c6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801124e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011252:	ed8d ab06 	vstr	d10, [sp, #24]
 8011256:	ed8d 8b08 	vstr	d8, [sp, #32]
 801125a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801125e:	ab08      	add	r3, sp, #32
 8011260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011262:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011266:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801126a:	f007 ff25 	bl	80190b8 <rmw_time_equal>
 801126e:	b118      	cbz	r0, 8011278 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011270:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011274:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801127c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011280:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8011284:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011288:	f007 ff6a 	bl	8019160 <rmw_time_total_nsec>
 801128c:	1830      	adds	r0, r6, r0
 801128e:	eb47 0101 	adc.w	r1, r7, r1
 8011292:	4548      	cmp	r0, r9
 8011294:	eb71 030a 	sbcs.w	r3, r1, sl
 8011298:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801129c:	db05      	blt.n	80112aa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801129e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80112a2:	4591      	cmp	r9, r2
 80112a4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80112a8:	da03      	bge.n	80112b2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80112aa:	4817      	ldr	r0, [pc, #92]	@ (8011308 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80112ac:	4641      	mov	r1, r8
 80112ae:	f008 f9c7 	bl	8019640 <put_memory>
 80112b2:	f1bb 0f00 	cmp.w	fp, #0
 80112b6:	d014      	beq.n	80112e2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80112b8:	46d8      	mov	r8, fp
 80112ba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80112be:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	d1bf      	bne.n	8011246 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80112c6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80112ca:	3340      	adds	r3, #64	@ 0x40
 80112cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80112d2:	e7c0      	b.n	8011256 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80112d4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80112d8:	3348      	adds	r3, #72	@ 0x48
 80112da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80112e0:	e7b9      	b.n	8011256 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80112e2:	b00d      	add	sp, #52	@ 0x34
 80112e4:	ecbd 8b06 	vpop	{d8-d10}
 80112e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ec:	f3af 8000 	nop.w
	...
 80112f8:	00000001 	.word	0x00000001
 80112fc:	00000000 	.word	0x00000000
 8011300:	0000001e 	.word	0x0000001e
 8011304:	00000000 	.word	0x00000000
 8011308:	2000bcbc 	.word	0x2000bcbc

0801130c <run_xrce_session>:
 801130c:	b510      	push	{r4, lr}
 801130e:	788c      	ldrb	r4, [r1, #2]
 8011310:	b086      	sub	sp, #24
 8011312:	2c01      	cmp	r4, #1
 8011314:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011318:	d00c      	beq.n	8011334 <run_xrce_session+0x28>
 801131a:	4619      	mov	r1, r3
 801131c:	2301      	movs	r3, #1
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	f10d 020e 	add.w	r2, sp, #14
 8011324:	f10d 0317 	add.w	r3, sp, #23
 8011328:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801132c:	f002 f968 	bl	8013600 <uxr_run_session_until_all_status>
 8011330:	b006      	add	sp, #24
 8011332:	bd10      	pop	{r4, pc}
 8011334:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011338:	f001 fd7c 	bl	8012e34 <uxr_flash_output_streams>
 801133c:	4620      	mov	r0, r4
 801133e:	b006      	add	sp, #24
 8011340:	bd10      	pop	{r4, pc}
 8011342:	bf00      	nop

08011344 <convert_qos_profile>:
 8011344:	7a4a      	ldrb	r2, [r1, #9]
 8011346:	f891 c008 	ldrb.w	ip, [r1, #8]
 801134a:	2a02      	cmp	r2, #2
 801134c:	bf18      	it	ne
 801134e:	2200      	movne	r2, #0
 8011350:	7002      	strb	r2, [r0, #0]
 8011352:	780a      	ldrb	r2, [r1, #0]
 8011354:	8889      	ldrh	r1, [r1, #4]
 8011356:	8081      	strh	r1, [r0, #4]
 8011358:	f1ac 0c02 	sub.w	ip, ip, #2
 801135c:	f1a2 0202 	sub.w	r2, r2, #2
 8011360:	fabc fc8c 	clz	ip, ip
 8011364:	fab2 f282 	clz	r2, r2
 8011368:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801136c:	0952      	lsrs	r2, r2, #5
 801136e:	f880 c001 	strb.w	ip, [r0, #1]
 8011372:	7082      	strb	r2, [r0, #2]
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <generate_service_topics>:
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	461c      	mov	r4, r3
 801137e:	4b12      	ldr	r3, [pc, #72]	@ (80113c8 <generate_service_topics+0x50>)
 8011380:	9301      	str	r3, [sp, #4]
 8011382:	4605      	mov	r5, r0
 8011384:	4b11      	ldr	r3, [pc, #68]	@ (80113cc <generate_service_topics+0x54>)
 8011386:	9000      	str	r0, [sp, #0]
 8011388:	4616      	mov	r6, r2
 801138a:	4608      	mov	r0, r1
 801138c:	4a10      	ldr	r2, [pc, #64]	@ (80113d0 <generate_service_topics+0x58>)
 801138e:	4621      	mov	r1, r4
 8011390:	f00a fb42 	bl	801ba18 <sniprintf>
 8011394:	4b0f      	ldr	r3, [pc, #60]	@ (80113d4 <generate_service_topics+0x5c>)
 8011396:	9301      	str	r3, [sp, #4]
 8011398:	4601      	mov	r1, r0
 801139a:	9500      	str	r5, [sp, #0]
 801139c:	4b0e      	ldr	r3, [pc, #56]	@ (80113d8 <generate_service_topics+0x60>)
 801139e:	4a0c      	ldr	r2, [pc, #48]	@ (80113d0 <generate_service_topics+0x58>)
 80113a0:	460d      	mov	r5, r1
 80113a2:	4630      	mov	r0, r6
 80113a4:	4621      	mov	r1, r4
 80113a6:	f00a fb37 	bl	801ba18 <sniprintf>
 80113aa:	2d00      	cmp	r5, #0
 80113ac:	db01      	blt.n	80113b2 <generate_service_topics+0x3a>
 80113ae:	42ac      	cmp	r4, r5
 80113b0:	dc02      	bgt.n	80113b8 <generate_service_topics+0x40>
 80113b2:	2000      	movs	r0, #0
 80113b4:	b002      	add	sp, #8
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
 80113b8:	2800      	cmp	r0, #0
 80113ba:	dbfa      	blt.n	80113b2 <generate_service_topics+0x3a>
 80113bc:	4284      	cmp	r4, r0
 80113be:	bfd4      	ite	le
 80113c0:	2000      	movle	r0, #0
 80113c2:	2001      	movgt	r0, #1
 80113c4:	b002      	add	sp, #8
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
 80113c8:	0801db6c 	.word	0x0801db6c
 80113cc:	0801db68 	.word	0x0801db68
 80113d0:	0801db44 	.word	0x0801db44
 80113d4:	0801db60 	.word	0x0801db60
 80113d8:	0801db5c 	.word	0x0801db5c

080113dc <generate_service_types>:
 80113dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e0:	4605      	mov	r5, r0
 80113e2:	b086      	sub	sp, #24
 80113e4:	6880      	ldr	r0, [r0, #8]
 80113e6:	460c      	mov	r4, r1
 80113e8:	4617      	mov	r7, r2
 80113ea:	461e      	mov	r6, r3
 80113ec:	4780      	blx	r0
 80113ee:	68eb      	ldr	r3, [r5, #12]
 80113f0:	4680      	mov	r8, r0
 80113f2:	4798      	blx	r3
 80113f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80113f8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80113fc:	2300      	movs	r3, #0
 80113fe:	7023      	strb	r3, [r4, #0]
 8011400:	6813      	ldr	r3, [r2, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d042      	beq.n	801148c <generate_service_types+0xb0>
 8011406:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80114a0 <generate_service_types+0xc4>
 801140a:	4641      	mov	r1, r8
 801140c:	4620      	mov	r0, r4
 801140e:	4c22      	ldr	r4, [pc, #136]	@ (8011498 <generate_service_types+0xbc>)
 8011410:	9405      	str	r4, [sp, #20]
 8011412:	6852      	ldr	r2, [r2, #4]
 8011414:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80114a8 <generate_service_types+0xcc>
 8011418:	9204      	str	r2, [sp, #16]
 801141a:	9100      	str	r1, [sp, #0]
 801141c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8011420:	4a1e      	ldr	r2, [pc, #120]	@ (801149c <generate_service_types+0xc0>)
 8011422:	f8cd a004 	str.w	sl, [sp, #4]
 8011426:	4631      	mov	r1, r6
 8011428:	f00a faf6 	bl	801ba18 <sniprintf>
 801142c:	2800      	cmp	r0, #0
 801142e:	db1f      	blt.n	8011470 <generate_service_types+0x94>
 8011430:	2300      	movs	r3, #0
 8011432:	703b      	strb	r3, [r7, #0]
 8011434:	f8d9 3000 	ldr.w	r3, [r9]
 8011438:	42b0      	cmp	r0, r6
 801143a:	bfac      	ite	ge
 801143c:	2500      	movge	r5, #0
 801143e:	2501      	movlt	r5, #1
 8011440:	b1eb      	cbz	r3, 801147e <generate_service_types+0xa2>
 8011442:	4a17      	ldr	r2, [pc, #92]	@ (80114a0 <generate_service_types+0xc4>)
 8011444:	9405      	str	r4, [sp, #20]
 8011446:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801144a:	9200      	str	r2, [sp, #0]
 801144c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8011450:	e9cd a401 	strd	sl, r4, [sp, #4]
 8011454:	4a11      	ldr	r2, [pc, #68]	@ (801149c <generate_service_types+0xc0>)
 8011456:	4638      	mov	r0, r7
 8011458:	4631      	mov	r1, r6
 801145a:	f00a fadd 	bl	801ba18 <sniprintf>
 801145e:	2800      	cmp	r0, #0
 8011460:	db10      	blt.n	8011484 <generate_service_types+0xa8>
 8011462:	42b0      	cmp	r0, r6
 8011464:	bfb4      	ite	lt
 8011466:	4628      	movlt	r0, r5
 8011468:	2000      	movge	r0, #0
 801146a:	b006      	add	sp, #24
 801146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011470:	2300      	movs	r3, #0
 8011472:	703b      	strb	r3, [r7, #0]
 8011474:	f8d9 3000 	ldr.w	r3, [r9]
 8011478:	2500      	movs	r5, #0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d1e1      	bne.n	8011442 <generate_service_types+0x66>
 801147e:	4b09      	ldr	r3, [pc, #36]	@ (80114a4 <generate_service_types+0xc8>)
 8011480:	461a      	mov	r2, r3
 8011482:	e7df      	b.n	8011444 <generate_service_types+0x68>
 8011484:	2000      	movs	r0, #0
 8011486:	b006      	add	sp, #24
 8011488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801148c:	4b05      	ldr	r3, [pc, #20]	@ (80114a4 <generate_service_types+0xc8>)
 801148e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 80114a0 <generate_service_types+0xc4>
 8011492:	4619      	mov	r1, r3
 8011494:	e7ba      	b.n	801140c <generate_service_types+0x30>
 8011496:	bf00      	nop
 8011498:	0801db4c 	.word	0x0801db4c
 801149c:	0801db3c 	.word	0x0801db3c
 80114a0:	0801db38 	.word	0x0801db38
 80114a4:	0801e99c 	.word	0x0801e99c
 80114a8:	0801db50 	.word	0x0801db50

080114ac <generate_type_name>:
 80114ac:	b530      	push	{r4, r5, lr}
 80114ae:	2300      	movs	r3, #0
 80114b0:	700b      	strb	r3, [r1, #0]
 80114b2:	6803      	ldr	r3, [r0, #0]
 80114b4:	b087      	sub	sp, #28
 80114b6:	4614      	mov	r4, r2
 80114b8:	b1d3      	cbz	r3, 80114f0 <generate_type_name+0x44>
 80114ba:	4a0f      	ldr	r2, [pc, #60]	@ (80114f8 <generate_type_name+0x4c>)
 80114bc:	4615      	mov	r5, r2
 80114be:	9203      	str	r2, [sp, #12]
 80114c0:	9500      	str	r5, [sp, #0]
 80114c2:	6842      	ldr	r2, [r0, #4]
 80114c4:	480d      	ldr	r0, [pc, #52]	@ (80114fc <generate_type_name+0x50>)
 80114c6:	9001      	str	r0, [sp, #4]
 80114c8:	4608      	mov	r0, r1
 80114ca:	490d      	ldr	r1, [pc, #52]	@ (8011500 <generate_type_name+0x54>)
 80114cc:	9204      	str	r2, [sp, #16]
 80114ce:	9105      	str	r1, [sp, #20]
 80114d0:	9102      	str	r1, [sp, #8]
 80114d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011504 <generate_type_name+0x58>)
 80114d4:	4621      	mov	r1, r4
 80114d6:	f00a fa9f 	bl	801ba18 <sniprintf>
 80114da:	2800      	cmp	r0, #0
 80114dc:	db05      	blt.n	80114ea <generate_type_name+0x3e>
 80114de:	4284      	cmp	r4, r0
 80114e0:	bfd4      	ite	le
 80114e2:	2000      	movle	r0, #0
 80114e4:	2001      	movgt	r0, #1
 80114e6:	b007      	add	sp, #28
 80114e8:	bd30      	pop	{r4, r5, pc}
 80114ea:	2000      	movs	r0, #0
 80114ec:	b007      	add	sp, #28
 80114ee:	bd30      	pop	{r4, r5, pc}
 80114f0:	4b05      	ldr	r3, [pc, #20]	@ (8011508 <generate_type_name+0x5c>)
 80114f2:	4a01      	ldr	r2, [pc, #4]	@ (80114f8 <generate_type_name+0x4c>)
 80114f4:	461d      	mov	r5, r3
 80114f6:	e7e2      	b.n	80114be <generate_type_name+0x12>
 80114f8:	0801db38 	.word	0x0801db38
 80114fc:	0801db50 	.word	0x0801db50
 8011500:	0801db4c 	.word	0x0801db4c
 8011504:	0801db3c 	.word	0x0801db3c
 8011508:	0801e99c 	.word	0x0801e99c

0801150c <generate_topic_name>:
 801150c:	b510      	push	{r4, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	4614      	mov	r4, r2
 8011512:	9000      	str	r0, [sp, #0]
 8011514:	4b08      	ldr	r3, [pc, #32]	@ (8011538 <generate_topic_name+0x2c>)
 8011516:	4a09      	ldr	r2, [pc, #36]	@ (801153c <generate_topic_name+0x30>)
 8011518:	4608      	mov	r0, r1
 801151a:	4621      	mov	r1, r4
 801151c:	f00a fa7c 	bl	801ba18 <sniprintf>
 8011520:	2800      	cmp	r0, #0
 8011522:	db05      	blt.n	8011530 <generate_topic_name+0x24>
 8011524:	4284      	cmp	r4, r0
 8011526:	bfd4      	ite	le
 8011528:	2000      	movle	r0, #0
 801152a:	2001      	movgt	r0, #1
 801152c:	b002      	add	sp, #8
 801152e:	bd10      	pop	{r4, pc}
 8011530:	2000      	movs	r0, #0
 8011532:	b002      	add	sp, #8
 8011534:	bd10      	pop	{r4, pc}
 8011536:	bf00      	nop
 8011538:	0801db74 	.word	0x0801db74
 801153c:	0801db54 	.word	0x0801db54

08011540 <is_uxrce_rmw_identifier_valid>:
 8011540:	b510      	push	{r4, lr}
 8011542:	4604      	mov	r4, r0
 8011544:	b140      	cbz	r0, 8011558 <is_uxrce_rmw_identifier_valid+0x18>
 8011546:	f008 f8d3 	bl	80196f0 <rmw_get_implementation_identifier>
 801154a:	4601      	mov	r1, r0
 801154c:	4620      	mov	r0, r4
 801154e:	f7ee fe67 	bl	8000220 <strcmp>
 8011552:	fab0 f080 	clz	r0, r0
 8011556:	0940      	lsrs	r0, r0, #5
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop

0801155c <get_message_typesupport_handle>:
 801155c:	6883      	ldr	r3, [r0, #8]
 801155e:	4718      	bx	r3

08011560 <get_message_typesupport_handle_function>:
 8011560:	b510      	push	{r4, lr}
 8011562:	4604      	mov	r4, r0
 8011564:	6800      	ldr	r0, [r0, #0]
 8011566:	f7ee fe5b 	bl	8000220 <strcmp>
 801156a:	2800      	cmp	r0, #0
 801156c:	bf0c      	ite	eq
 801156e:	4620      	moveq	r0, r4
 8011570:	2000      	movne	r0, #0
 8011572:	bd10      	pop	{r4, pc}

08011574 <get_service_typesupport_handle>:
 8011574:	6883      	ldr	r3, [r0, #8]
 8011576:	4718      	bx	r3

08011578 <get_service_typesupport_handle_function>:
 8011578:	b510      	push	{r4, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	6800      	ldr	r0, [r0, #0]
 801157e:	f7ee fe4f 	bl	8000220 <strcmp>
 8011582:	2800      	cmp	r0, #0
 8011584:	bf0c      	ite	eq
 8011586:	4620      	moveq	r0, r4
 8011588:	2000      	movne	r0, #0
 801158a:	bd10      	pop	{r4, pc}

0801158c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011590:	6805      	ldr	r5, [r0, #0]
 8011592:	4604      	mov	r4, r0
 8011594:	4628      	mov	r0, r5
 8011596:	460e      	mov	r6, r1
 8011598:	f7ee fe42 	bl	8000220 <strcmp>
 801159c:	b1c8      	cbz	r0, 80115d2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801159e:	4b11      	ldr	r3, [pc, #68]	@ (80115e4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	429d      	cmp	r5, r3
 80115a4:	d112      	bne.n	80115cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80115a6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80115aa:	f8d8 4000 	ldr.w	r4, [r8]
 80115ae:	b16c      	cbz	r4, 80115cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80115b0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80115b4:	2700      	movs	r7, #0
 80115b6:	3d04      	subs	r5, #4
 80115b8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80115bc:	4631      	mov	r1, r6
 80115be:	f7ee fe2f 	bl	8000220 <strcmp>
 80115c2:	00bb      	lsls	r3, r7, #2
 80115c4:	b140      	cbz	r0, 80115d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80115c6:	3701      	adds	r7, #1
 80115c8:	42bc      	cmp	r4, r7
 80115ca:	d1f5      	bne.n	80115b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80115cc:	2000      	movs	r0, #0
 80115ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d2:	4620      	mov	r0, r4
 80115d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80115dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115e0:	58d3      	ldr	r3, [r2, r3]
 80115e2:	4718      	bx	r3
 80115e4:	200003b4 	.word	0x200003b4

080115e8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ec:	6805      	ldr	r5, [r0, #0]
 80115ee:	4604      	mov	r4, r0
 80115f0:	4628      	mov	r0, r5
 80115f2:	460e      	mov	r6, r1
 80115f4:	f7ee fe14 	bl	8000220 <strcmp>
 80115f8:	b1c8      	cbz	r0, 801162e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80115fa:	4b11      	ldr	r3, [pc, #68]	@ (8011640 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	429d      	cmp	r5, r3
 8011600:	d112      	bne.n	8011628 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011602:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011606:	f8d8 4000 	ldr.w	r4, [r8]
 801160a:	b16c      	cbz	r4, 8011628 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801160c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011610:	2700      	movs	r7, #0
 8011612:	3d04      	subs	r5, #4
 8011614:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011618:	4631      	mov	r1, r6
 801161a:	f7ee fe01 	bl	8000220 <strcmp>
 801161e:	00bb      	lsls	r3, r7, #2
 8011620:	b140      	cbz	r0, 8011634 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8011622:	3701      	adds	r7, #1
 8011624:	42bc      	cmp	r4, r7
 8011626:	d1f5      	bne.n	8011614 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011628:	2000      	movs	r0, #0
 801162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162e:	4620      	mov	r0, r4
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801163c:	58d3      	ldr	r3, [r2, r3]
 801163e:	4718      	bx	r3
 8011640:	200003b4 	.word	0x200003b4

08011644 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011644:	4b04      	ldr	r3, [pc, #16]	@ (8011658 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	b10a      	cbz	r2, 801164e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 801164a:	4803      	ldr	r0, [pc, #12]	@ (8011658 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801164c:	4770      	bx	lr
 801164e:	4a03      	ldr	r2, [pc, #12]	@ (801165c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011650:	4801      	ldr	r0, [pc, #4]	@ (8011658 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011652:	6812      	ldr	r2, [r2, #0]
 8011654:	601a      	str	r2, [r3, #0]
 8011656:	4770      	bx	lr
 8011658:	200003c4 	.word	0x200003c4
 801165c:	200003b4 	.word	0x200003b4

08011660 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011660:	4a02      	ldr	r2, [pc, #8]	@ (801166c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8011662:	4b03      	ldr	r3, [pc, #12]	@ (8011670 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8011664:	6812      	ldr	r2, [r2, #0]
 8011666:	601a      	str	r2, [r3, #0]
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	200003b4 	.word	0x200003b4
 8011670:	200003c4 	.word	0x200003c4

08011674 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8011674:	2009      	movs	r0, #9
 8011676:	4770      	bx	lr

08011678 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8011678:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop

08011680 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8011680:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011688:	e9c2 0100 	strd	r0, r1, [r2]
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop

08011690 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8011690:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011694:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011698:	e9c1 2300 	strd	r2, r3, [r1]
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop

080116a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 80116a0:	f008 bbda 	b.w	8019e58 <sensor_msgs__msg__Imu__init>

080116a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 80116a4:	f008 bc2e 	b.w	8019f04 <sensor_msgs__msg__Imu__fini>

080116a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80116a8:	2009      	movs	r0, #9
 80116aa:	4770      	bx	lr

080116ac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80116ac:	2009      	movs	r0, #9
 80116ae:	4770      	bx	lr

080116b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80116b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop

080116b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80116b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop

080116c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80116c0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80116c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop

080116d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80116d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop

080116d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80116d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80116dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116e0:	e9c2 0100 	strd	r0, r1, [r2]
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop

080116e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 80116e8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80116ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80116f0:	e9c1 2300 	strd	r2, r3, [r1]
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 80116f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80116fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011700:	e9c2 0100 	strd	r0, r1, [r2]
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop

08011708 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8011708:	e9d2 2300 	ldrd	r2, r3, [r2]
 801170c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011710:	e9c1 2300 	strd	r2, r3, [r1]
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop

08011718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011718:	b510      	push	{r4, lr}
 801171a:	f000 f90f 	bl	801193c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801171e:	4c0b      	ldr	r4, [pc, #44]	@ (801174c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8011720:	60e0      	str	r0, [r4, #12]
 8011722:	f000 fb91 	bl	8011e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011726:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011728:	f7fb fbe6 	bl	800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801172c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011730:	f7fb fbe2 	bl	800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011734:	4b06      	ldr	r3, [pc, #24]	@ (8011750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011736:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	b10a      	cbz	r2, 8011742 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 801173e:	4804      	ldr	r0, [pc, #16]	@ (8011750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011740:	bd10      	pop	{r4, pc}
 8011742:	4a04      	ldr	r2, [pc, #16]	@ (8011754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8011744:	4802      	ldr	r0, [pc, #8]	@ (8011750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011746:	6812      	ldr	r2, [r2, #0]
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	bd10      	pop	{r4, pc}
 801174c:	200003d0 	.word	0x200003d0
 8011750:	20000574 	.word	0x20000574
 8011754:	200003b8 	.word	0x200003b8

08011758 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8011758:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801175c:	4680      	mov	r8, r0
 801175e:	460f      	mov	r7, r1
 8011760:	f000 f910 	bl	8011984 <get_serialized_size_std_msgs__msg__Header>
 8011764:	183c      	adds	r4, r7, r0
 8011766:	4621      	mov	r1, r4
 8011768:	f108 0018 	add.w	r0, r8, #24
 801176c:	f000 fb7a 	bl	8011e64 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8011770:	4404      	add	r4, r0
 8011772:	2108      	movs	r1, #8
 8011774:	4620      	mov	r0, r4
 8011776:	f7fd f8eb 	bl	800e950 <ucdr_alignment>
 801177a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 801177e:	4425      	add	r5, r4
 8011780:	4629      	mov	r1, r5
 8011782:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8011786:	f7fb fc2b 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 801178a:	4405      	add	r5, r0
 801178c:	2108      	movs	r1, #8
 801178e:	4628      	mov	r0, r5
 8011790:	f7fd f8de 	bl	800e950 <ucdr_alignment>
 8011794:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8011798:	4425      	add	r5, r4
 801179a:	4629      	mov	r1, r5
 801179c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 80117a0:	f7fb fc1e 	bl	800cfe0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80117a4:	4405      	add	r5, r0
 80117a6:	2108      	movs	r1, #8
 80117a8:	4628      	mov	r0, r5
 80117aa:	f7fd f8d1 	bl	800e950 <ucdr_alignment>
 80117ae:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80117b2:	4438      	add	r0, r7
 80117b4:	4428      	add	r0, r5
 80117b6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80117ba:	bf00      	nop

080117bc <get_serialized_size_sensor_msgs__msg__Imu>:
 80117bc:	b108      	cbz	r0, 80117c2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 80117be:	f7ff bfcb 	b.w	8011758 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80117c2:	4770      	bx	lr

080117c4 <_Imu__get_serialized_size>:
 80117c4:	b110      	cbz	r0, 80117cc <_Imu__get_serialized_size+0x8>
 80117c6:	2100      	movs	r1, #0
 80117c8:	f7ff bfc6 	b.w	8011758 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop

080117d0 <_Imu__cdr_deserialize>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	460c      	mov	r4, r1
 80117d4:	b399      	cbz	r1, 801183e <_Imu__cdr_deserialize+0x6e>
 80117d6:	4605      	mov	r5, r0
 80117d8:	f000 f956 	bl	8011a88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80117dc:	6843      	ldr	r3, [r0, #4]
 80117de:	4621      	mov	r1, r4
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	4628      	mov	r0, r5
 80117e4:	4798      	blx	r3
 80117e6:	f000 fbf1 	bl	8011fcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80117ea:	6843      	ldr	r3, [r0, #4]
 80117ec:	f104 0118 	add.w	r1, r4, #24
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	4628      	mov	r0, r5
 80117f4:	4798      	blx	r3
 80117f6:	2209      	movs	r2, #9
 80117f8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80117fc:	4628      	mov	r0, r5
 80117fe:	f000 fd85 	bl	801230c <ucdr_deserialize_array_double>
 8011802:	f7fb fc79 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011806:	6843      	ldr	r3, [r0, #4]
 8011808:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 801180c:	68db      	ldr	r3, [r3, #12]
 801180e:	4628      	mov	r0, r5
 8011810:	4798      	blx	r3
 8011812:	2209      	movs	r2, #9
 8011814:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011818:	4628      	mov	r0, r5
 801181a:	f000 fd77 	bl	801230c <ucdr_deserialize_array_double>
 801181e:	f7fb fc6b 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011822:	6843      	ldr	r3, [r0, #4]
 8011824:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	4628      	mov	r0, r5
 801182c:	4798      	blx	r3
 801182e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8011832:	4628      	mov	r0, r5
 8011834:	2209      	movs	r2, #9
 8011836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801183a:	f000 bd67 	b.w	801230c <ucdr_deserialize_array_double>
 801183e:	4608      	mov	r0, r1
 8011840:	bd38      	pop	{r3, r4, r5, pc}
 8011842:	bf00      	nop

08011844 <_Imu__cdr_serialize>:
 8011844:	2800      	cmp	r0, #0
 8011846:	d035      	beq.n	80118b4 <_Imu__cdr_serialize+0x70>
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	460d      	mov	r5, r1
 801184c:	4604      	mov	r4, r0
 801184e:	f000 f91b 	bl	8011a88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011852:	6843      	ldr	r3, [r0, #4]
 8011854:	4629      	mov	r1, r5
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	4620      	mov	r0, r4
 801185a:	4798      	blx	r3
 801185c:	f000 fbb6 	bl	8011fcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011860:	6843      	ldr	r3, [r0, #4]
 8011862:	4629      	mov	r1, r5
 8011864:	689b      	ldr	r3, [r3, #8]
 8011866:	f104 0018 	add.w	r0, r4, #24
 801186a:	4798      	blx	r3
 801186c:	2209      	movs	r2, #9
 801186e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011872:	4628      	mov	r0, r5
 8011874:	f000 fcf6 	bl	8012264 <ucdr_serialize_array_double>
 8011878:	f7fb fc3e 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801187c:	6843      	ldr	r3, [r0, #4]
 801187e:	4629      	mov	r1, r5
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011886:	4798      	blx	r3
 8011888:	2209      	movs	r2, #9
 801188a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801188e:	4628      	mov	r0, r5
 8011890:	f000 fce8 	bl	8012264 <ucdr_serialize_array_double>
 8011894:	f7fb fc30 	bl	800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011898:	6843      	ldr	r3, [r0, #4]
 801189a:	4629      	mov	r1, r5
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80118a2:	4798      	blx	r3
 80118a4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80118a8:	4628      	mov	r0, r5
 80118aa:	2209      	movs	r2, #9
 80118ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118b0:	f000 bcd8 	b.w	8012264 <ucdr_serialize_array_double>
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop

080118b8 <max_serialized_size_sensor_msgs__msg__Imu>:
 80118b8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80118bc:	2301      	movs	r3, #1
 80118be:	7003      	strb	r3, [r0, #0]
 80118c0:	4680      	mov	r8, r0
 80118c2:	460f      	mov	r7, r1
 80118c4:	f000 f8d6 	bl	8011a74 <max_serialized_size_std_msgs__msg__Header>
 80118c8:	183c      	adds	r4, r7, r0
 80118ca:	4621      	mov	r1, r4
 80118cc:	4640      	mov	r0, r8
 80118ce:	f000 fb5b 	bl	8011f88 <max_serialized_size_geometry_msgs__msg__Quaternion>
 80118d2:	4404      	add	r4, r0
 80118d4:	2108      	movs	r1, #8
 80118d6:	4620      	mov	r0, r4
 80118d8:	f7fd f83a 	bl	800e950 <ucdr_alignment>
 80118dc:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80118e0:	4425      	add	r5, r4
 80118e2:	4629      	mov	r1, r5
 80118e4:	4640      	mov	r0, r8
 80118e6:	f7fb fbeb 	bl	800d0c0 <max_serialized_size_geometry_msgs__msg__Vector3>
 80118ea:	4405      	add	r5, r0
 80118ec:	2108      	movs	r1, #8
 80118ee:	4628      	mov	r0, r5
 80118f0:	f7fd f82e 	bl	800e950 <ucdr_alignment>
 80118f4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80118f8:	4425      	add	r5, r4
 80118fa:	4629      	mov	r1, r5
 80118fc:	4640      	mov	r0, r8
 80118fe:	f7fb fbdf 	bl	800d0c0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011902:	4405      	add	r5, r0
 8011904:	2108      	movs	r1, #8
 8011906:	4628      	mov	r0, r5
 8011908:	f7fd f822 	bl	800e950 <ucdr_alignment>
 801190c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8011910:	4438      	add	r0, r7
 8011912:	4428      	add	r0, r5
 8011914:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

08011918 <_Imu__max_serialized_size>:
 8011918:	b500      	push	{lr}
 801191a:	b083      	sub	sp, #12
 801191c:	2100      	movs	r1, #0
 801191e:	f10d 0007 	add.w	r0, sp, #7
 8011922:	f7ff ffc9 	bl	80118b8 <max_serialized_size_sensor_msgs__msg__Imu>
 8011926:	b003      	add	sp, #12
 8011928:	f85d fb04 	ldr.w	pc, [sp], #4

0801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801192c:	4800      	ldr	r0, [pc, #0]	@ (8011930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 801192e:	4770      	bx	lr
 8011930:	20000580 	.word	0x20000580

08011934 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011934:	f008 bafa 	b.w	8019f2c <std_msgs__msg__Header__init>

08011938 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011938:	f008 bb1c 	b.w	8019f74 <std_msgs__msg__Header__fini>

0801193c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801193c:	b508      	push	{r3, lr}
 801193e:	f000 f9d3 	bl	8011ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011942:	4b06      	ldr	r3, [pc, #24]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011944:	4906      	ldr	r1, [pc, #24]	@ (8011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	60c8      	str	r0, [r1, #12]
 801194a:	b10a      	cbz	r2, 8011950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801194c:	4803      	ldr	r0, [pc, #12]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801194e:	bd08      	pop	{r3, pc}
 8011950:	4a04      	ldr	r2, [pc, #16]	@ (8011964 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011952:	4802      	ldr	r0, [pc, #8]	@ (801195c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011954:	6812      	ldr	r2, [r2, #0]
 8011956:	601a      	str	r2, [r3, #0]
 8011958:	bd08      	pop	{r3, pc}
 801195a:	bf00      	nop
 801195c:	20000620 	.word	0x20000620
 8011960:	200005a8 	.word	0x200005a8
 8011964:	200003b8 	.word	0x200003b8

08011968 <_Header__max_serialized_size>:
 8011968:	b500      	push	{lr}
 801196a:	b083      	sub	sp, #12
 801196c:	2301      	movs	r3, #1
 801196e:	2100      	movs	r1, #0
 8011970:	f10d 0007 	add.w	r0, sp, #7
 8011974:	f88d 3007 	strb.w	r3, [sp, #7]
 8011978:	f000 fa14 	bl	8011da4 <max_serialized_size_builtin_interfaces__msg__Time>
 801197c:	b003      	add	sp, #12
 801197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011982:	bf00      	nop

08011984 <get_serialized_size_std_msgs__msg__Header>:
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	4605      	mov	r5, r0
 8011988:	b168      	cbz	r0, 80119a6 <get_serialized_size_std_msgs__msg__Header+0x22>
 801198a:	460c      	mov	r4, r1
 801198c:	f000 f9ba 	bl	8011d04 <get_serialized_size_builtin_interfaces__msg__Time>
 8011990:	1826      	adds	r6, r4, r0
 8011992:	2104      	movs	r1, #4
 8011994:	4630      	mov	r0, r6
 8011996:	f7fc ffdb 	bl	800e950 <ucdr_alignment>
 801199a:	68e9      	ldr	r1, [r5, #12]
 801199c:	f1c4 0405 	rsb	r4, r4, #5
 80119a0:	440c      	add	r4, r1
 80119a2:	4404      	add	r4, r0
 80119a4:	19a0      	adds	r0, r4, r6
 80119a6:	bd70      	pop	{r4, r5, r6, pc}

080119a8 <_Header__cdr_deserialize>:
 80119a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119aa:	460c      	mov	r4, r1
 80119ac:	b083      	sub	sp, #12
 80119ae:	b1e1      	cbz	r1, 80119ea <_Header__cdr_deserialize+0x42>
 80119b0:	4606      	mov	r6, r0
 80119b2:	f000 fa0b 	bl	8011dcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80119b6:	6843      	ldr	r3, [r0, #4]
 80119b8:	4621      	mov	r1, r4
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	4630      	mov	r0, r6
 80119be:	4798      	blx	r3
 80119c0:	6927      	ldr	r7, [r4, #16]
 80119c2:	68a1      	ldr	r1, [r4, #8]
 80119c4:	ab01      	add	r3, sp, #4
 80119c6:	463a      	mov	r2, r7
 80119c8:	4630      	mov	r0, r6
 80119ca:	f000 fd07 	bl	80123dc <ucdr_deserialize_sequence_char>
 80119ce:	9b01      	ldr	r3, [sp, #4]
 80119d0:	4605      	mov	r5, r0
 80119d2:	b920      	cbnz	r0, 80119de <_Header__cdr_deserialize+0x36>
 80119d4:	429f      	cmp	r7, r3
 80119d6:	d30c      	bcc.n	80119f2 <_Header__cdr_deserialize+0x4a>
 80119d8:	4628      	mov	r0, r5
 80119da:	b003      	add	sp, #12
 80119dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119de:	b103      	cbz	r3, 80119e2 <_Header__cdr_deserialize+0x3a>
 80119e0:	3b01      	subs	r3, #1
 80119e2:	4628      	mov	r0, r5
 80119e4:	60e3      	str	r3, [r4, #12]
 80119e6:	b003      	add	sp, #12
 80119e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ea:	460d      	mov	r5, r1
 80119ec:	4628      	mov	r0, r5
 80119ee:	b003      	add	sp, #12
 80119f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119f2:	2101      	movs	r1, #1
 80119f4:	75b0      	strb	r0, [r6, #22]
 80119f6:	7571      	strb	r1, [r6, #21]
 80119f8:	4630      	mov	r0, r6
 80119fa:	60e5      	str	r5, [r4, #12]
 80119fc:	f7fc ffbe 	bl	800e97c <ucdr_align_to>
 8011a00:	4630      	mov	r0, r6
 8011a02:	9901      	ldr	r1, [sp, #4]
 8011a04:	f7fc fff0 	bl	800e9e8 <ucdr_advance_buffer>
 8011a08:	4628      	mov	r0, r5
 8011a0a:	b003      	add	sp, #12
 8011a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0e:	bf00      	nop

08011a10 <_Header__cdr_serialize>:
 8011a10:	b1f8      	cbz	r0, 8011a52 <_Header__cdr_serialize+0x42>
 8011a12:	b570      	push	{r4, r5, r6, lr}
 8011a14:	4604      	mov	r4, r0
 8011a16:	460d      	mov	r5, r1
 8011a18:	f000 f9d8 	bl	8011dcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a1c:	6843      	ldr	r3, [r0, #4]
 8011a1e:	4629      	mov	r1, r5
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	4620      	mov	r0, r4
 8011a24:	4798      	blx	r3
 8011a26:	68a6      	ldr	r6, [r4, #8]
 8011a28:	b156      	cbz	r6, 8011a40 <_Header__cdr_serialize+0x30>
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f7ee fc02 	bl	8000234 <strlen>
 8011a30:	4631      	mov	r1, r6
 8011a32:	60e0      	str	r0, [r4, #12]
 8011a34:	1c42      	adds	r2, r0, #1
 8011a36:	4628      	mov	r0, r5
 8011a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a3c:	f000 bcbc 	b.w	80123b8 <ucdr_serialize_sequence_char>
 8011a40:	4630      	mov	r0, r6
 8011a42:	60e0      	str	r0, [r4, #12]
 8011a44:	4632      	mov	r2, r6
 8011a46:	4631      	mov	r1, r6
 8011a48:	4628      	mov	r0, r5
 8011a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a4e:	f000 bcb3 	b.w	80123b8 <ucdr_serialize_sequence_char>
 8011a52:	4770      	bx	lr

08011a54 <_Header__get_serialized_size>:
 8011a54:	b538      	push	{r3, r4, r5, lr}
 8011a56:	4604      	mov	r4, r0
 8011a58:	b150      	cbz	r0, 8011a70 <_Header__get_serialized_size+0x1c>
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	f000 f952 	bl	8011d04 <get_serialized_size_builtin_interfaces__msg__Time>
 8011a60:	2104      	movs	r1, #4
 8011a62:	4605      	mov	r5, r0
 8011a64:	f7fc ff74 	bl	800e950 <ucdr_alignment>
 8011a68:	68e2      	ldr	r2, [r4, #12]
 8011a6a:	3205      	adds	r2, #5
 8011a6c:	1953      	adds	r3, r2, r5
 8011a6e:	4418      	add	r0, r3
 8011a70:	bd38      	pop	{r3, r4, r5, pc}
 8011a72:	bf00      	nop

08011a74 <max_serialized_size_std_msgs__msg__Header>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	2301      	movs	r3, #1
 8011a78:	4604      	mov	r4, r0
 8011a7a:	7003      	strb	r3, [r0, #0]
 8011a7c:	f000 f992 	bl	8011da4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011a80:	2300      	movs	r3, #0
 8011a82:	7023      	strb	r3, [r4, #0]
 8011a84:	bd10      	pop	{r4, pc}
 8011a86:	bf00      	nop

08011a88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011a88:	4800      	ldr	r0, [pc, #0]	@ (8011a8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011a8a:	4770      	bx	lr
 8011a8c:	2000062c 	.word	0x2000062c

08011a90 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8011a90:	4b04      	ldr	r3, [pc, #16]	@ (8011aa4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	b10a      	cbz	r2, 8011a9a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 8011a96:	4803      	ldr	r0, [pc, #12]	@ (8011aa4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011a98:	4770      	bx	lr
 8011a9a:	4a03      	ldr	r2, [pc, #12]	@ (8011aa8 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 8011a9c:	4801      	ldr	r0, [pc, #4]	@ (8011aa4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8011a9e:	6812      	ldr	r2, [r2, #0]
 8011aa0:	601a      	str	r2, [r3, #0]
 8011aa2:	4770      	bx	lr
 8011aa4:	2000065c 	.word	0x2000065c
 8011aa8:	200003b4 	.word	0x200003b4

08011aac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011aac:	4b04      	ldr	r3, [pc, #16]	@ (8011ac0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011aae:	4805      	ldr	r0, [pc, #20]	@ (8011ac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8011ab0:	4905      	ldr	r1, [pc, #20]	@ (8011ac8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 8011ab2:	4a06      	ldr	r2, [pc, #24]	@ (8011acc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	6003      	str	r3, [r0, #0]
 8011ab8:	600b      	str	r3, [r1, #0]
 8011aba:	6013      	str	r3, [r2, #0]
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	200003b4 	.word	0x200003b4
 8011ac4:	20000678 	.word	0x20000678
 8011ac8:	20000684 	.word	0x20000684
 8011acc:	2000065c 	.word	0x2000065c

08011ad0 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8011ad0:	f008 ba5c 	b.w	8019f8c <std_srvs__srv__SetBool_Request__init>

08011ad4 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 8011ad4:	f008 ba5e 	b.w	8019f94 <std_srvs__srv__SetBool_Request__fini>

08011ad8 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8011ad8:	f008 ba5e 	b.w	8019f98 <std_srvs__srv__SetBool_Response__init>

08011adc <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 8011adc:	f008 ba6e 	b.w	8019fbc <std_srvs__srv__SetBool_Response__fini>

08011ae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011ae0:	4b04      	ldr	r3, [pc, #16]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	b10a      	cbz	r2, 8011aea <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 8011ae6:	4803      	ldr	r0, [pc, #12]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011ae8:	4770      	bx	lr
 8011aea:	4a03      	ldr	r2, [pc, #12]	@ (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8011aec:	4801      	ldr	r0, [pc, #4]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8011aee:	6812      	ldr	r2, [r2, #0]
 8011af0:	601a      	str	r2, [r3, #0]
 8011af2:	4770      	bx	lr
 8011af4:	200006cc 	.word	0x200006cc
 8011af8:	200003b8 	.word	0x200003b8

08011afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8011afc:	4b04      	ldr	r3, [pc, #16]	@ (8011b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	b10a      	cbz	r2, 8011b06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 8011b02:	4803      	ldr	r0, [pc, #12]	@ (8011b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011b04:	4770      	bx	lr
 8011b06:	4a03      	ldr	r2, [pc, #12]	@ (8011b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 8011b08:	4801      	ldr	r0, [pc, #4]	@ (8011b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8011b0a:	6812      	ldr	r2, [r2, #0]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	4770      	bx	lr
 8011b10:	20000750 	.word	0x20000750
 8011b14:	200003b8 	.word	0x200003b8

08011b18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8011b18:	4b13      	ldr	r3, [pc, #76]	@ (8011b68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	b132      	cbz	r2, 8011b2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	689a      	ldr	r2, [r3, #8]
 8011b22:	b152      	cbz	r2, 8011b3a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 8011b24:	68da      	ldr	r2, [r3, #12]
 8011b26:	b182      	cbz	r2, 8011b4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 8011b28:	480f      	ldr	r0, [pc, #60]	@ (8011b68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011b2a:	4770      	bx	lr
 8011b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8011b6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011b2e:	6812      	ldr	r2, [r2, #0]
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	689a      	ldr	r2, [r3, #8]
 8011b36:	2a00      	cmp	r2, #0
 8011b38:	d1f4      	bne.n	8011b24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 8011b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8011b70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 8011b3c:	6811      	ldr	r1, [r2, #0]
 8011b3e:	b179      	cbz	r1, 8011b60 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 8011b40:	6852      	ldr	r2, [r2, #4]
 8011b42:	609a      	str	r2, [r3, #8]
 8011b44:	68da      	ldr	r2, [r3, #12]
 8011b46:	2a00      	cmp	r2, #0
 8011b48:	d1ee      	bne.n	8011b28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 8011b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8011b74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 8011b4c:	6811      	ldr	r1, [r2, #0]
 8011b4e:	b119      	cbz	r1, 8011b58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 8011b50:	6852      	ldr	r2, [r2, #4]
 8011b52:	4805      	ldr	r0, [pc, #20]	@ (8011b68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8011b54:	60da      	str	r2, [r3, #12]
 8011b56:	4770      	bx	lr
 8011b58:	4904      	ldr	r1, [pc, #16]	@ (8011b6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011b5a:	6809      	ldr	r1, [r1, #0]
 8011b5c:	6011      	str	r1, [r2, #0]
 8011b5e:	e7f7      	b.n	8011b50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 8011b60:	4902      	ldr	r1, [pc, #8]	@ (8011b6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8011b62:	6809      	ldr	r1, [r1, #0]
 8011b64:	6011      	str	r1, [r2, #0]
 8011b66:	e7eb      	b.n	8011b40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 8011b68:	2000076c 	.word	0x2000076c
 8011b6c:	200003b8 	.word	0x200003b8
 8011b70:	200006cc 	.word	0x200006cc
 8011b74:	20000750 	.word	0x20000750

08011b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8011b78:	4800      	ldr	r0, [pc, #0]	@ (8011b7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 8011b7a:	4770      	bx	lr
 8011b7c:	20000794 	.word	0x20000794

08011b80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8011b80:	4800      	ldr	r0, [pc, #0]	@ (8011b84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 8011b82:	4770      	bx	lr
 8011b84:	200007a0 	.word	0x200007a0

08011b88 <_SetBool_Request__max_serialized_size>:
 8011b88:	b508      	push	{r3, lr}
 8011b8a:	2101      	movs	r1, #1
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	f7fc fedf 	bl	800e950 <ucdr_alignment>
 8011b92:	3001      	adds	r0, #1
 8011b94:	bd08      	pop	{r3, pc}
 8011b96:	bf00      	nop

08011b98 <_SetBool_Request__cdr_deserialize>:
 8011b98:	b109      	cbz	r1, 8011b9e <_SetBool_Request__cdr_deserialize+0x6>
 8011b9a:	f7fb bbdb 	b.w	800d354 <ucdr_deserialize_bool>
 8011b9e:	4608      	mov	r0, r1
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop

08011ba4 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 8011ba4:	b138      	cbz	r0, 8011bb6 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 8011ba6:	b508      	push	{r3, lr}
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4618      	mov	r0, r3
 8011bac:	2101      	movs	r1, #1
 8011bae:	f7fc fecf 	bl	800e950 <ucdr_alignment>
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	bd08      	pop	{r3, pc}
 8011bb6:	4770      	bx	lr

08011bb8 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	4605      	mov	r5, r0
 8011bbc:	b180      	cbz	r0, 8011be0 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	2101      	movs	r1, #1
 8011bc4:	f7fc fec4 	bl	800e950 <ucdr_alignment>
 8011bc8:	1c63      	adds	r3, r4, #1
 8011bca:	181e      	adds	r6, r3, r0
 8011bcc:	2104      	movs	r1, #4
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f7fc febe 	bl	800e950 <ucdr_alignment>
 8011bd4:	68a9      	ldr	r1, [r5, #8]
 8011bd6:	f1c4 0405 	rsb	r4, r4, #5
 8011bda:	440c      	add	r4, r1
 8011bdc:	4404      	add	r4, r0
 8011bde:	19a0      	adds	r0, r4, r6
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	bf00      	nop

08011be4 <_SetBool_Request__cdr_serialize>:
 8011be4:	460a      	mov	r2, r1
 8011be6:	b118      	cbz	r0, 8011bf0 <_SetBool_Request__cdr_serialize+0xc>
 8011be8:	7801      	ldrb	r1, [r0, #0]
 8011bea:	4610      	mov	r0, r2
 8011bec:	f7fb bb9c 	b.w	800d328 <ucdr_serialize_bool>
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop

08011bf4 <_SetBool_Response__cdr_deserialize>:
 8011bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	b083      	sub	sp, #12
 8011bfa:	b1b9      	cbz	r1, 8011c2c <_SetBool_Response__cdr_deserialize+0x38>
 8011bfc:	4606      	mov	r6, r0
 8011bfe:	f7fb fba9 	bl	800d354 <ucdr_deserialize_bool>
 8011c02:	68e7      	ldr	r7, [r4, #12]
 8011c04:	6861      	ldr	r1, [r4, #4]
 8011c06:	ab01      	add	r3, sp, #4
 8011c08:	463a      	mov	r2, r7
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f000 fbe6 	bl	80123dc <ucdr_deserialize_sequence_char>
 8011c10:	9b01      	ldr	r3, [sp, #4]
 8011c12:	4605      	mov	r5, r0
 8011c14:	b920      	cbnz	r0, 8011c20 <_SetBool_Response__cdr_deserialize+0x2c>
 8011c16:	429f      	cmp	r7, r3
 8011c18:	d30c      	bcc.n	8011c34 <_SetBool_Response__cdr_deserialize+0x40>
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	b003      	add	sp, #12
 8011c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c20:	b103      	cbz	r3, 8011c24 <_SetBool_Response__cdr_deserialize+0x30>
 8011c22:	3b01      	subs	r3, #1
 8011c24:	4628      	mov	r0, r5
 8011c26:	60a3      	str	r3, [r4, #8]
 8011c28:	b003      	add	sp, #12
 8011c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	4628      	mov	r0, r5
 8011c30:	b003      	add	sp, #12
 8011c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c34:	2101      	movs	r1, #1
 8011c36:	75b0      	strb	r0, [r6, #22]
 8011c38:	7571      	strb	r1, [r6, #21]
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	60a5      	str	r5, [r4, #8]
 8011c3e:	f7fc fe9d 	bl	800e97c <ucdr_align_to>
 8011c42:	4630      	mov	r0, r6
 8011c44:	9901      	ldr	r1, [sp, #4]
 8011c46:	f7fc fecf 	bl	800e9e8 <ucdr_advance_buffer>
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	b003      	add	sp, #12
 8011c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c50 <_SetBool_Response__cdr_serialize>:
 8011c50:	b1e0      	cbz	r0, 8011c8c <_SetBool_Response__cdr_serialize+0x3c>
 8011c52:	b570      	push	{r4, r5, r6, lr}
 8011c54:	460d      	mov	r5, r1
 8011c56:	4604      	mov	r4, r0
 8011c58:	7801      	ldrb	r1, [r0, #0]
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7fb fb64 	bl	800d328 <ucdr_serialize_bool>
 8011c60:	6866      	ldr	r6, [r4, #4]
 8011c62:	b156      	cbz	r6, 8011c7a <_SetBool_Response__cdr_serialize+0x2a>
 8011c64:	4630      	mov	r0, r6
 8011c66:	f7ee fae5 	bl	8000234 <strlen>
 8011c6a:	4631      	mov	r1, r6
 8011c6c:	60a0      	str	r0, [r4, #8]
 8011c6e:	1c42      	adds	r2, r0, #1
 8011c70:	4628      	mov	r0, r5
 8011c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c76:	f000 bb9f 	b.w	80123b8 <ucdr_serialize_sequence_char>
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	60a0      	str	r0, [r4, #8]
 8011c7e:	4632      	mov	r2, r6
 8011c80:	4631      	mov	r1, r6
 8011c82:	4628      	mov	r0, r5
 8011c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c88:	f000 bb96 	b.w	80123b8 <ucdr_serialize_sequence_char>
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <_SetBool_Request__get_serialized_size>:
 8011c90:	b130      	cbz	r0, 8011ca0 <_SetBool_Request__get_serialized_size+0x10>
 8011c92:	b508      	push	{r3, lr}
 8011c94:	2101      	movs	r1, #1
 8011c96:	2000      	movs	r0, #0
 8011c98:	f7fc fe5a 	bl	800e950 <ucdr_alignment>
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	bd08      	pop	{r3, pc}
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop

08011ca4 <_SetBool_Response__max_serialized_size>:
 8011ca4:	b508      	push	{r3, lr}
 8011ca6:	2101      	movs	r1, #1
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f7fc fe51 	bl	800e950 <ucdr_alignment>
 8011cae:	3001      	adds	r0, #1
 8011cb0:	bd08      	pop	{r3, pc}
 8011cb2:	bf00      	nop

08011cb4 <_SetBool_Response__get_serialized_size>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	b160      	cbz	r0, 8011cd4 <_SetBool_Response__get_serialized_size+0x20>
 8011cba:	2101      	movs	r1, #1
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	f7fc fe47 	bl	800e950 <ucdr_alignment>
 8011cc2:	1c45      	adds	r5, r0, #1
 8011cc4:	2104      	movs	r1, #4
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f7fc fe42 	bl	800e950 <ucdr_alignment>
 8011ccc:	68a3      	ldr	r3, [r4, #8]
 8011cce:	3305      	adds	r3, #5
 8011cd0:	4418      	add	r0, r3
 8011cd2:	4428      	add	r0, r5
 8011cd4:	bd38      	pop	{r3, r4, r5, pc}
 8011cd6:	bf00      	nop

08011cd8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8011cd8:	4800      	ldr	r0, [pc, #0]	@ (8011cdc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 8011cda:	4770      	bx	lr
 8011cdc:	20000788 	.word	0x20000788

08011ce0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011ce0:	f008 b972 	b.w	8019fc8 <builtin_interfaces__msg__Time__init>

08011ce4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011ce4:	f008 b974 	b.w	8019fd0 <builtin_interfaces__msg__Time__fini>

08011ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011ce8:	4b04      	ldr	r3, [pc, #16]	@ (8011cfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	b10a      	cbz	r2, 8011cf2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8011cee:	4803      	ldr	r0, [pc, #12]	@ (8011cfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011cf0:	4770      	bx	lr
 8011cf2:	4a03      	ldr	r2, [pc, #12]	@ (8011d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011cf4:	4801      	ldr	r0, [pc, #4]	@ (8011cfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011cf6:	6812      	ldr	r2, [r2, #0]
 8011cf8:	601a      	str	r2, [r3, #0]
 8011cfa:	4770      	bx	lr
 8011cfc:	2000085c 	.word	0x2000085c
 8011d00:	200003b8 	.word	0x200003b8

08011d04 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011d04:	b180      	cbz	r0, 8011d28 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011d06:	b538      	push	{r3, r4, r5, lr}
 8011d08:	460d      	mov	r5, r1
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	2104      	movs	r1, #4
 8011d0e:	f7fc fe1f 	bl	800e950 <ucdr_alignment>
 8011d12:	1d2b      	adds	r3, r5, #4
 8011d14:	181c      	adds	r4, r3, r0
 8011d16:	2104      	movs	r1, #4
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7fc fe19 	bl	800e950 <ucdr_alignment>
 8011d1e:	f1c5 0504 	rsb	r5, r5, #4
 8011d22:	4428      	add	r0, r5
 8011d24:	4420      	add	r0, r4
 8011d26:	bd38      	pop	{r3, r4, r5, pc}
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop

08011d2c <_Time__cdr_deserialize>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	460c      	mov	r4, r1
 8011d30:	b141      	cbz	r1, 8011d44 <_Time__cdr_deserialize+0x18>
 8011d32:	4605      	mov	r5, r0
 8011d34:	f7fc f9ee 	bl	800e114 <ucdr_deserialize_int32_t>
 8011d38:	1d21      	adds	r1, r4, #4
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d40:	f7fb be66 	b.w	800da10 <ucdr_deserialize_uint32_t>
 8011d44:	4608      	mov	r0, r1
 8011d46:	bd38      	pop	{r3, r4, r5, pc}

08011d48 <_Time__cdr_serialize>:
 8011d48:	b160      	cbz	r0, 8011d64 <_Time__cdr_serialize+0x1c>
 8011d4a:	b538      	push	{r3, r4, r5, lr}
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	4604      	mov	r4, r0
 8011d50:	6801      	ldr	r1, [r0, #0]
 8011d52:	4628      	mov	r0, r5
 8011d54:	f7fc f946 	bl	800dfe4 <ucdr_serialize_int32_t>
 8011d58:	6861      	ldr	r1, [r4, #4]
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d60:	f7fb bd26 	b.w	800d7b0 <ucdr_serialize_uint32_t>
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop

08011d68 <_Time__get_serialized_size>:
 8011d68:	b160      	cbz	r0, 8011d84 <_Time__get_serialized_size+0x1c>
 8011d6a:	b510      	push	{r4, lr}
 8011d6c:	2104      	movs	r1, #4
 8011d6e:	2000      	movs	r0, #0
 8011d70:	f7fc fdee 	bl	800e950 <ucdr_alignment>
 8011d74:	1d04      	adds	r4, r0, #4
 8011d76:	2104      	movs	r1, #4
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f7fc fde9 	bl	800e950 <ucdr_alignment>
 8011d7e:	3004      	adds	r0, #4
 8011d80:	4420      	add	r0, r4
 8011d82:	bd10      	pop	{r4, pc}
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop

08011d88 <_Time__max_serialized_size>:
 8011d88:	b510      	push	{r4, lr}
 8011d8a:	2104      	movs	r1, #4
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	f7fc fddf 	bl	800e950 <ucdr_alignment>
 8011d92:	1d04      	adds	r4, r0, #4
 8011d94:	2104      	movs	r1, #4
 8011d96:	4620      	mov	r0, r4
 8011d98:	f7fc fdda 	bl	800e950 <ucdr_alignment>
 8011d9c:	3004      	adds	r0, #4
 8011d9e:	4420      	add	r0, r4
 8011da0:	bd10      	pop	{r4, pc}
 8011da2:	bf00      	nop

08011da4 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	460c      	mov	r4, r1
 8011da8:	2301      	movs	r3, #1
 8011daa:	7003      	strb	r3, [r0, #0]
 8011dac:	2104      	movs	r1, #4
 8011dae:	4620      	mov	r0, r4
 8011db0:	f7fc fdce 	bl	800e950 <ucdr_alignment>
 8011db4:	1d25      	adds	r5, r4, #4
 8011db6:	4405      	add	r5, r0
 8011db8:	2104      	movs	r1, #4
 8011dba:	4628      	mov	r0, r5
 8011dbc:	f7fc fdc8 	bl	800e950 <ucdr_alignment>
 8011dc0:	f1c4 0404 	rsb	r4, r4, #4
 8011dc4:	4420      	add	r0, r4
 8011dc6:	4428      	add	r0, r5
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	bf00      	nop

08011dcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011dcc:	4800      	ldr	r0, [pc, #0]	@ (8011dd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011dce:	4770      	bx	lr
 8011dd0:	20000868 	.word	0x20000868

08011dd4 <geometry_msgs__msg__Twist__init>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	b1a8      	cbz	r0, 8011e06 <geometry_msgs__msg__Twist__init+0x32>
 8011dda:	f000 f82b 	bl	8011e34 <geometry_msgs__msg__Vector3__init>
 8011dde:	4604      	mov	r4, r0
 8011de0:	b140      	cbz	r0, 8011df4 <geometry_msgs__msg__Twist__init+0x20>
 8011de2:	f105 0618 	add.w	r6, r5, #24
 8011de6:	4630      	mov	r0, r6
 8011de8:	f000 f824 	bl	8011e34 <geometry_msgs__msg__Vector3__init>
 8011dec:	4604      	mov	r4, r0
 8011dee:	b168      	cbz	r0, 8011e0c <geometry_msgs__msg__Twist__init+0x38>
 8011df0:	4620      	mov	r0, r4
 8011df2:	bd70      	pop	{r4, r5, r6, pc}
 8011df4:	4628      	mov	r0, r5
 8011df6:	f000 f821 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011dfa:	f105 0018 	add.w	r0, r5, #24
 8011dfe:	f000 f81d 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011e02:	4620      	mov	r0, r4
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
 8011e06:	4604      	mov	r4, r0
 8011e08:	4620      	mov	r0, r4
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f000 f815 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011e12:	4630      	mov	r0, r6
 8011e14:	f000 f812 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011e18:	e7ea      	b.n	8011df0 <geometry_msgs__msg__Twist__init+0x1c>
 8011e1a:	bf00      	nop

08011e1c <geometry_msgs__msg__Twist__fini>:
 8011e1c:	b148      	cbz	r0, 8011e32 <geometry_msgs__msg__Twist__fini+0x16>
 8011e1e:	b510      	push	{r4, lr}
 8011e20:	4604      	mov	r4, r0
 8011e22:	f000 f80b 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011e26:	f104 0018 	add.w	r0, r4, #24
 8011e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e2e:	f000 b805 	b.w	8011e3c <geometry_msgs__msg__Vector3__fini>
 8011e32:	4770      	bx	lr

08011e34 <geometry_msgs__msg__Vector3__init>:
 8011e34:	3800      	subs	r0, #0
 8011e36:	bf18      	it	ne
 8011e38:	2001      	movne	r0, #1
 8011e3a:	4770      	bx	lr

08011e3c <geometry_msgs__msg__Vector3__fini>:
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop

08011e40 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011e40:	f008 b8ca 	b.w	8019fd8 <geometry_msgs__msg__Quaternion__init>

08011e44 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011e44:	f008 b8dc 	b.w	801a000 <geometry_msgs__msg__Quaternion__fini>

08011e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011e48:	4b04      	ldr	r3, [pc, #16]	@ (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	b10a      	cbz	r2, 8011e52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011e4e:	4803      	ldr	r0, [pc, #12]	@ (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011e50:	4770      	bx	lr
 8011e52:	4a03      	ldr	r2, [pc, #12]	@ (8011e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011e54:	4801      	ldr	r0, [pc, #4]	@ (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011e56:	6812      	ldr	r2, [r2, #0]
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	4770      	bx	lr
 8011e5c:	20000980 	.word	0x20000980
 8011e60:	200003b8 	.word	0x200003b8

08011e64 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8011e64:	b1f0      	cbz	r0, 8011ea4 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8011e66:	b570      	push	{r4, r5, r6, lr}
 8011e68:	460d      	mov	r5, r1
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	2108      	movs	r1, #8
 8011e6e:	f7fc fd6f 	bl	800e950 <ucdr_alignment>
 8011e72:	f105 0308 	add.w	r3, r5, #8
 8011e76:	181e      	adds	r6, r3, r0
 8011e78:	2108      	movs	r1, #8
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f7fc fd68 	bl	800e950 <ucdr_alignment>
 8011e80:	f100 0408 	add.w	r4, r0, #8
 8011e84:	4434      	add	r4, r6
 8011e86:	2108      	movs	r1, #8
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f7fc fd61 	bl	800e950 <ucdr_alignment>
 8011e8e:	3008      	adds	r0, #8
 8011e90:	4404      	add	r4, r0
 8011e92:	2108      	movs	r1, #8
 8011e94:	4620      	mov	r0, r4
 8011e96:	f7fc fd5b 	bl	800e950 <ucdr_alignment>
 8011e9a:	f1c5 0508 	rsb	r5, r5, #8
 8011e9e:	4428      	add	r0, r5
 8011ea0:	4420      	add	r0, r4
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop

08011ea8 <_Quaternion__cdr_deserialize>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	460c      	mov	r4, r1
 8011eac:	b199      	cbz	r1, 8011ed6 <_Quaternion__cdr_deserialize+0x2e>
 8011eae:	4605      	mov	r5, r0
 8011eb0:	f7fc fb62 	bl	800e578 <ucdr_deserialize_double>
 8011eb4:	f104 0108 	add.w	r1, r4, #8
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f7fc fb5d 	bl	800e578 <ucdr_deserialize_double>
 8011ebe:	f104 0110 	add.w	r1, r4, #16
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f7fc fb58 	bl	800e578 <ucdr_deserialize_double>
 8011ec8:	f104 0118 	add.w	r1, r4, #24
 8011ecc:	4628      	mov	r0, r5
 8011ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ed2:	f7fc bb51 	b.w	800e578 <ucdr_deserialize_double>
 8011ed6:	4608      	mov	r0, r1
 8011ed8:	bd38      	pop	{r3, r4, r5, pc}
 8011eda:	bf00      	nop

08011edc <_Quaternion__cdr_serialize>:
 8011edc:	b1c0      	cbz	r0, 8011f10 <_Quaternion__cdr_serialize+0x34>
 8011ede:	b538      	push	{r3, r4, r5, lr}
 8011ee0:	ed90 0b00 	vldr	d0, [r0]
 8011ee4:	460d      	mov	r5, r1
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	4608      	mov	r0, r1
 8011eea:	f7fc f9a3 	bl	800e234 <ucdr_serialize_double>
 8011eee:	ed94 0b02 	vldr	d0, [r4, #8]
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f7fc f99e 	bl	800e234 <ucdr_serialize_double>
 8011ef8:	ed94 0b04 	vldr	d0, [r4, #16]
 8011efc:	4628      	mov	r0, r5
 8011efe:	f7fc f999 	bl	800e234 <ucdr_serialize_double>
 8011f02:	ed94 0b06 	vldr	d0, [r4, #24]
 8011f06:	4628      	mov	r0, r5
 8011f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f0c:	f7fc b992 	b.w	800e234 <ucdr_serialize_double>
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop

08011f14 <_Quaternion__get_serialized_size>:
 8011f14:	b1d0      	cbz	r0, 8011f4c <_Quaternion__get_serialized_size+0x38>
 8011f16:	b538      	push	{r3, r4, r5, lr}
 8011f18:	2108      	movs	r1, #8
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	f7fc fd18 	bl	800e950 <ucdr_alignment>
 8011f20:	f100 0508 	add.w	r5, r0, #8
 8011f24:	2108      	movs	r1, #8
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7fc fd12 	bl	800e950 <ucdr_alignment>
 8011f2c:	f100 0408 	add.w	r4, r0, #8
 8011f30:	442c      	add	r4, r5
 8011f32:	2108      	movs	r1, #8
 8011f34:	4620      	mov	r0, r4
 8011f36:	f7fc fd0b 	bl	800e950 <ucdr_alignment>
 8011f3a:	3008      	adds	r0, #8
 8011f3c:	4404      	add	r4, r0
 8011f3e:	2108      	movs	r1, #8
 8011f40:	4620      	mov	r0, r4
 8011f42:	f7fc fd05 	bl	800e950 <ucdr_alignment>
 8011f46:	3008      	adds	r0, #8
 8011f48:	4420      	add	r0, r4
 8011f4a:	bd38      	pop	{r3, r4, r5, pc}
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop

08011f50 <_Quaternion__max_serialized_size>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	2108      	movs	r1, #8
 8011f54:	2000      	movs	r0, #0
 8011f56:	f7fc fcfb 	bl	800e950 <ucdr_alignment>
 8011f5a:	f100 0508 	add.w	r5, r0, #8
 8011f5e:	2108      	movs	r1, #8
 8011f60:	4628      	mov	r0, r5
 8011f62:	f7fc fcf5 	bl	800e950 <ucdr_alignment>
 8011f66:	f100 0408 	add.w	r4, r0, #8
 8011f6a:	442c      	add	r4, r5
 8011f6c:	2108      	movs	r1, #8
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f7fc fcee 	bl	800e950 <ucdr_alignment>
 8011f74:	3008      	adds	r0, #8
 8011f76:	4404      	add	r4, r0
 8011f78:	2108      	movs	r1, #8
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f7fc fce8 	bl	800e950 <ucdr_alignment>
 8011f80:	3008      	adds	r0, #8
 8011f82:	4420      	add	r0, r4
 8011f84:	bd38      	pop	{r3, r4, r5, pc}
 8011f86:	bf00      	nop

08011f88 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	460c      	mov	r4, r1
 8011f8e:	7003      	strb	r3, [r0, #0]
 8011f90:	2108      	movs	r1, #8
 8011f92:	4620      	mov	r0, r4
 8011f94:	f7fc fcdc 	bl	800e950 <ucdr_alignment>
 8011f98:	f104 0508 	add.w	r5, r4, #8
 8011f9c:	1946      	adds	r6, r0, r5
 8011f9e:	2108      	movs	r1, #8
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f7fc fcd5 	bl	800e950 <ucdr_alignment>
 8011fa6:	f100 0508 	add.w	r5, r0, #8
 8011faa:	4435      	add	r5, r6
 8011fac:	2108      	movs	r1, #8
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f7fc fcce 	bl	800e950 <ucdr_alignment>
 8011fb4:	3008      	adds	r0, #8
 8011fb6:	4405      	add	r5, r0
 8011fb8:	2108      	movs	r1, #8
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f7fc fcc8 	bl	800e950 <ucdr_alignment>
 8011fc0:	f1c4 0408 	rsb	r4, r4, #8
 8011fc4:	4420      	add	r0, r4
 8011fc6:	4428      	add	r0, r5
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	bf00      	nop

08011fcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011fcc:	4800      	ldr	r0, [pc, #0]	@ (8011fd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011fce:	4770      	bx	lr
 8011fd0:	2000098c 	.word	0x2000098c

08011fd4 <imu_interfaces__srv__ImuCalibration_Request__init>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	4604      	mov	r4, r0
 8011fd8:	b128      	cbz	r0, 8011fe6 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 8011fda:	f007 ff3d 	bl	8019e58 <sensor_msgs__msg__Imu__init>
 8011fde:	4605      	mov	r5, r0
 8011fe0:	b120      	cbz	r0, 8011fec <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	bd38      	pop	{r3, r4, r5, pc}
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	4628      	mov	r0, r5
 8011fea:	bd38      	pop	{r3, r4, r5, pc}
 8011fec:	4620      	mov	r0, r4
 8011fee:	f007 ff89 	bl	8019f04 <sensor_msgs__msg__Imu__fini>
 8011ff2:	4628      	mov	r0, r5
 8011ff4:	bd38      	pop	{r3, r4, r5, pc}
 8011ff6:	bf00      	nop

08011ff8 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 8011ff8:	b108      	cbz	r0, 8011ffe <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 8011ffa:	f007 bf83 	b.w	8019f04 <sensor_msgs__msg__Imu__fini>
 8011ffe:	4770      	bx	lr

08012000 <imu_interfaces__srv__ImuCalibration_Response__init>:
 8012000:	3800      	subs	r0, #0
 8012002:	bf18      	it	ne
 8012004:	2001      	movne	r0, #1
 8012006:	4770      	bx	lr

08012008 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop

0801200c <ucdr_serialize_endian_array_char>:
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	4619      	mov	r1, r3
 8012012:	461f      	mov	r7, r3
 8012014:	4605      	mov	r5, r0
 8012016:	4690      	mov	r8, r2
 8012018:	f7fc fc42 	bl	800e8a0 <ucdr_check_buffer_available_for>
 801201c:	b9e0      	cbnz	r0, 8012058 <ucdr_serialize_endian_array_char+0x4c>
 801201e:	463e      	mov	r6, r7
 8012020:	e009      	b.n	8012036 <ucdr_serialize_endian_array_char+0x2a>
 8012022:	68a8      	ldr	r0, [r5, #8]
 8012024:	f009 ff2f 	bl	801be86 <memcpy>
 8012028:	68ab      	ldr	r3, [r5, #8]
 801202a:	6928      	ldr	r0, [r5, #16]
 801202c:	4423      	add	r3, r4
 801202e:	4420      	add	r0, r4
 8012030:	1b36      	subs	r6, r6, r4
 8012032:	60ab      	str	r3, [r5, #8]
 8012034:	6128      	str	r0, [r5, #16]
 8012036:	4631      	mov	r1, r6
 8012038:	2201      	movs	r2, #1
 801203a:	4628      	mov	r0, r5
 801203c:	f7fc fcb8 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 8012040:	1bb9      	subs	r1, r7, r6
 8012042:	4441      	add	r1, r8
 8012044:	4604      	mov	r4, r0
 8012046:	4602      	mov	r2, r0
 8012048:	2800      	cmp	r0, #0
 801204a:	d1ea      	bne.n	8012022 <ucdr_serialize_endian_array_char+0x16>
 801204c:	2301      	movs	r3, #1
 801204e:	7da8      	ldrb	r0, [r5, #22]
 8012050:	756b      	strb	r3, [r5, #21]
 8012052:	4058      	eors	r0, r3
 8012054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012058:	463a      	mov	r2, r7
 801205a:	68a8      	ldr	r0, [r5, #8]
 801205c:	4641      	mov	r1, r8
 801205e:	f009 ff12 	bl	801be86 <memcpy>
 8012062:	68aa      	ldr	r2, [r5, #8]
 8012064:	692b      	ldr	r3, [r5, #16]
 8012066:	443a      	add	r2, r7
 8012068:	443b      	add	r3, r7
 801206a:	60aa      	str	r2, [r5, #8]
 801206c:	612b      	str	r3, [r5, #16]
 801206e:	e7ed      	b.n	801204c <ucdr_serialize_endian_array_char+0x40>

08012070 <ucdr_deserialize_endian_array_char>:
 8012070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	4619      	mov	r1, r3
 8012076:	461f      	mov	r7, r3
 8012078:	4605      	mov	r5, r0
 801207a:	4690      	mov	r8, r2
 801207c:	f7fc fc10 	bl	800e8a0 <ucdr_check_buffer_available_for>
 8012080:	b9e0      	cbnz	r0, 80120bc <ucdr_deserialize_endian_array_char+0x4c>
 8012082:	463e      	mov	r6, r7
 8012084:	e009      	b.n	801209a <ucdr_deserialize_endian_array_char+0x2a>
 8012086:	68a9      	ldr	r1, [r5, #8]
 8012088:	f009 fefd 	bl	801be86 <memcpy>
 801208c:	68ab      	ldr	r3, [r5, #8]
 801208e:	6928      	ldr	r0, [r5, #16]
 8012090:	4423      	add	r3, r4
 8012092:	4420      	add	r0, r4
 8012094:	1b36      	subs	r6, r6, r4
 8012096:	60ab      	str	r3, [r5, #8]
 8012098:	6128      	str	r0, [r5, #16]
 801209a:	2201      	movs	r2, #1
 801209c:	4631      	mov	r1, r6
 801209e:	4628      	mov	r0, r5
 80120a0:	f7fc fc86 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 80120a4:	4604      	mov	r4, r0
 80120a6:	1bb8      	subs	r0, r7, r6
 80120a8:	4440      	add	r0, r8
 80120aa:	4622      	mov	r2, r4
 80120ac:	2c00      	cmp	r4, #0
 80120ae:	d1ea      	bne.n	8012086 <ucdr_deserialize_endian_array_char+0x16>
 80120b0:	2301      	movs	r3, #1
 80120b2:	7da8      	ldrb	r0, [r5, #22]
 80120b4:	756b      	strb	r3, [r5, #21]
 80120b6:	4058      	eors	r0, r3
 80120b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120bc:	463a      	mov	r2, r7
 80120be:	68a9      	ldr	r1, [r5, #8]
 80120c0:	4640      	mov	r0, r8
 80120c2:	f009 fee0 	bl	801be86 <memcpy>
 80120c6:	68aa      	ldr	r2, [r5, #8]
 80120c8:	692b      	ldr	r3, [r5, #16]
 80120ca:	443a      	add	r2, r7
 80120cc:	443b      	add	r3, r7
 80120ce:	60aa      	str	r2, [r5, #8]
 80120d0:	612b      	str	r3, [r5, #16]
 80120d2:	e7ed      	b.n	80120b0 <ucdr_deserialize_endian_array_char+0x40>

080120d4 <ucdr_serialize_array_uint8_t>:
 80120d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d8:	4688      	mov	r8, r1
 80120da:	4611      	mov	r1, r2
 80120dc:	4617      	mov	r7, r2
 80120de:	4605      	mov	r5, r0
 80120e0:	f7fc fbde 	bl	800e8a0 <ucdr_check_buffer_available_for>
 80120e4:	b9e0      	cbnz	r0, 8012120 <ucdr_serialize_array_uint8_t+0x4c>
 80120e6:	463e      	mov	r6, r7
 80120e8:	e009      	b.n	80120fe <ucdr_serialize_array_uint8_t+0x2a>
 80120ea:	68a8      	ldr	r0, [r5, #8]
 80120ec:	f009 fecb 	bl	801be86 <memcpy>
 80120f0:	68aa      	ldr	r2, [r5, #8]
 80120f2:	692b      	ldr	r3, [r5, #16]
 80120f4:	4422      	add	r2, r4
 80120f6:	4423      	add	r3, r4
 80120f8:	1b36      	subs	r6, r6, r4
 80120fa:	60aa      	str	r2, [r5, #8]
 80120fc:	612b      	str	r3, [r5, #16]
 80120fe:	4631      	mov	r1, r6
 8012100:	2201      	movs	r2, #1
 8012102:	4628      	mov	r0, r5
 8012104:	f7fc fc54 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 8012108:	1bb9      	subs	r1, r7, r6
 801210a:	4441      	add	r1, r8
 801210c:	4604      	mov	r4, r0
 801210e:	4602      	mov	r2, r0
 8012110:	2800      	cmp	r0, #0
 8012112:	d1ea      	bne.n	80120ea <ucdr_serialize_array_uint8_t+0x16>
 8012114:	2301      	movs	r3, #1
 8012116:	7da8      	ldrb	r0, [r5, #22]
 8012118:	756b      	strb	r3, [r5, #21]
 801211a:	4058      	eors	r0, r3
 801211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012120:	463a      	mov	r2, r7
 8012122:	68a8      	ldr	r0, [r5, #8]
 8012124:	4641      	mov	r1, r8
 8012126:	f009 feae 	bl	801be86 <memcpy>
 801212a:	68aa      	ldr	r2, [r5, #8]
 801212c:	692b      	ldr	r3, [r5, #16]
 801212e:	443a      	add	r2, r7
 8012130:	443b      	add	r3, r7
 8012132:	60aa      	str	r2, [r5, #8]
 8012134:	612b      	str	r3, [r5, #16]
 8012136:	e7ed      	b.n	8012114 <ucdr_serialize_array_uint8_t+0x40>

08012138 <ucdr_serialize_endian_array_uint8_t>:
 8012138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213c:	4619      	mov	r1, r3
 801213e:	461f      	mov	r7, r3
 8012140:	4605      	mov	r5, r0
 8012142:	4690      	mov	r8, r2
 8012144:	f7fc fbac 	bl	800e8a0 <ucdr_check_buffer_available_for>
 8012148:	b9e0      	cbnz	r0, 8012184 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801214a:	463e      	mov	r6, r7
 801214c:	e009      	b.n	8012162 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801214e:	68a8      	ldr	r0, [r5, #8]
 8012150:	f009 fe99 	bl	801be86 <memcpy>
 8012154:	68ab      	ldr	r3, [r5, #8]
 8012156:	6928      	ldr	r0, [r5, #16]
 8012158:	4423      	add	r3, r4
 801215a:	4420      	add	r0, r4
 801215c:	1b36      	subs	r6, r6, r4
 801215e:	60ab      	str	r3, [r5, #8]
 8012160:	6128      	str	r0, [r5, #16]
 8012162:	4631      	mov	r1, r6
 8012164:	2201      	movs	r2, #1
 8012166:	4628      	mov	r0, r5
 8012168:	f7fc fc22 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 801216c:	1bb9      	subs	r1, r7, r6
 801216e:	4441      	add	r1, r8
 8012170:	4604      	mov	r4, r0
 8012172:	4602      	mov	r2, r0
 8012174:	2800      	cmp	r0, #0
 8012176:	d1ea      	bne.n	801214e <ucdr_serialize_endian_array_uint8_t+0x16>
 8012178:	2301      	movs	r3, #1
 801217a:	7da8      	ldrb	r0, [r5, #22]
 801217c:	756b      	strb	r3, [r5, #21]
 801217e:	4058      	eors	r0, r3
 8012180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012184:	463a      	mov	r2, r7
 8012186:	68a8      	ldr	r0, [r5, #8]
 8012188:	4641      	mov	r1, r8
 801218a:	f009 fe7c 	bl	801be86 <memcpy>
 801218e:	68aa      	ldr	r2, [r5, #8]
 8012190:	692b      	ldr	r3, [r5, #16]
 8012192:	443a      	add	r2, r7
 8012194:	443b      	add	r3, r7
 8012196:	60aa      	str	r2, [r5, #8]
 8012198:	612b      	str	r3, [r5, #16]
 801219a:	e7ed      	b.n	8012178 <ucdr_serialize_endian_array_uint8_t+0x40>

0801219c <ucdr_deserialize_array_uint8_t>:
 801219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a0:	4688      	mov	r8, r1
 80121a2:	4611      	mov	r1, r2
 80121a4:	4617      	mov	r7, r2
 80121a6:	4605      	mov	r5, r0
 80121a8:	f7fc fb7a 	bl	800e8a0 <ucdr_check_buffer_available_for>
 80121ac:	b9e0      	cbnz	r0, 80121e8 <ucdr_deserialize_array_uint8_t+0x4c>
 80121ae:	463e      	mov	r6, r7
 80121b0:	e009      	b.n	80121c6 <ucdr_deserialize_array_uint8_t+0x2a>
 80121b2:	68a9      	ldr	r1, [r5, #8]
 80121b4:	f009 fe67 	bl	801be86 <memcpy>
 80121b8:	68aa      	ldr	r2, [r5, #8]
 80121ba:	692b      	ldr	r3, [r5, #16]
 80121bc:	4422      	add	r2, r4
 80121be:	4423      	add	r3, r4
 80121c0:	1b36      	subs	r6, r6, r4
 80121c2:	60aa      	str	r2, [r5, #8]
 80121c4:	612b      	str	r3, [r5, #16]
 80121c6:	2201      	movs	r2, #1
 80121c8:	4631      	mov	r1, r6
 80121ca:	4628      	mov	r0, r5
 80121cc:	f7fc fbf0 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 80121d0:	4604      	mov	r4, r0
 80121d2:	1bb8      	subs	r0, r7, r6
 80121d4:	4440      	add	r0, r8
 80121d6:	4622      	mov	r2, r4
 80121d8:	2c00      	cmp	r4, #0
 80121da:	d1ea      	bne.n	80121b2 <ucdr_deserialize_array_uint8_t+0x16>
 80121dc:	2301      	movs	r3, #1
 80121de:	7da8      	ldrb	r0, [r5, #22]
 80121e0:	756b      	strb	r3, [r5, #21]
 80121e2:	4058      	eors	r0, r3
 80121e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e8:	463a      	mov	r2, r7
 80121ea:	68a9      	ldr	r1, [r5, #8]
 80121ec:	4640      	mov	r0, r8
 80121ee:	f009 fe4a 	bl	801be86 <memcpy>
 80121f2:	68aa      	ldr	r2, [r5, #8]
 80121f4:	692b      	ldr	r3, [r5, #16]
 80121f6:	443a      	add	r2, r7
 80121f8:	443b      	add	r3, r7
 80121fa:	60aa      	str	r2, [r5, #8]
 80121fc:	612b      	str	r3, [r5, #16]
 80121fe:	e7ed      	b.n	80121dc <ucdr_deserialize_array_uint8_t+0x40>

08012200 <ucdr_deserialize_endian_array_uint8_t>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	4619      	mov	r1, r3
 8012206:	461f      	mov	r7, r3
 8012208:	4605      	mov	r5, r0
 801220a:	4690      	mov	r8, r2
 801220c:	f7fc fb48 	bl	800e8a0 <ucdr_check_buffer_available_for>
 8012210:	b9e0      	cbnz	r0, 801224c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012212:	463e      	mov	r6, r7
 8012214:	e009      	b.n	801222a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012216:	68a9      	ldr	r1, [r5, #8]
 8012218:	f009 fe35 	bl	801be86 <memcpy>
 801221c:	68ab      	ldr	r3, [r5, #8]
 801221e:	6928      	ldr	r0, [r5, #16]
 8012220:	4423      	add	r3, r4
 8012222:	4420      	add	r0, r4
 8012224:	1b36      	subs	r6, r6, r4
 8012226:	60ab      	str	r3, [r5, #8]
 8012228:	6128      	str	r0, [r5, #16]
 801222a:	2201      	movs	r2, #1
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	f7fc fbbe 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 8012234:	4604      	mov	r4, r0
 8012236:	1bb8      	subs	r0, r7, r6
 8012238:	4440      	add	r0, r8
 801223a:	4622      	mov	r2, r4
 801223c:	2c00      	cmp	r4, #0
 801223e:	d1ea      	bne.n	8012216 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012240:	2301      	movs	r3, #1
 8012242:	7da8      	ldrb	r0, [r5, #22]
 8012244:	756b      	strb	r3, [r5, #21]
 8012246:	4058      	eors	r0, r3
 8012248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801224c:	463a      	mov	r2, r7
 801224e:	68a9      	ldr	r1, [r5, #8]
 8012250:	4640      	mov	r0, r8
 8012252:	f009 fe18 	bl	801be86 <memcpy>
 8012256:	68aa      	ldr	r2, [r5, #8]
 8012258:	692b      	ldr	r3, [r5, #16]
 801225a:	443a      	add	r2, r7
 801225c:	443b      	add	r3, r7
 801225e:	60aa      	str	r2, [r5, #8]
 8012260:	612b      	str	r3, [r5, #16]
 8012262:	e7ed      	b.n	8012240 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012264 <ucdr_serialize_array_double>:
 8012264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012268:	460e      	mov	r6, r1
 801226a:	2108      	movs	r1, #8
 801226c:	4604      	mov	r4, r0
 801226e:	4617      	mov	r7, r2
 8012270:	f7fc fb76 	bl	800e960 <ucdr_buffer_alignment>
 8012274:	4601      	mov	r1, r0
 8012276:	4620      	mov	r0, r4
 8012278:	7d65      	ldrb	r5, [r4, #21]
 801227a:	f7fc fbb5 	bl	800e9e8 <ucdr_advance_buffer>
 801227e:	7d21      	ldrb	r1, [r4, #20]
 8012280:	7565      	strb	r5, [r4, #21]
 8012282:	2901      	cmp	r1, #1
 8012284:	d010      	beq.n	80122a8 <ucdr_serialize_array_double+0x44>
 8012286:	b157      	cbz	r7, 801229e <ucdr_serialize_array_double+0x3a>
 8012288:	2500      	movs	r5, #0
 801228a:	e000      	b.n	801228e <ucdr_serialize_array_double+0x2a>
 801228c:	7d21      	ldrb	r1, [r4, #20]
 801228e:	ecb6 0b02 	vldmia	r6!, {d0}
 8012292:	4620      	mov	r0, r4
 8012294:	3501      	adds	r5, #1
 8012296:	f7fc f89d 	bl	800e3d4 <ucdr_serialize_endian_double>
 801229a:	42af      	cmp	r7, r5
 801229c:	d1f6      	bne.n	801228c <ucdr_serialize_array_double+0x28>
 801229e:	7da0      	ldrb	r0, [r4, #22]
 80122a0:	f080 0001 	eor.w	r0, r0, #1
 80122a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a8:	00ff      	lsls	r7, r7, #3
 80122aa:	4639      	mov	r1, r7
 80122ac:	4620      	mov	r0, r4
 80122ae:	f7fc faf7 	bl	800e8a0 <ucdr_check_buffer_available_for>
 80122b2:	b9f8      	cbnz	r0, 80122f4 <ucdr_serialize_array_double+0x90>
 80122b4:	46b8      	mov	r8, r7
 80122b6:	e00a      	b.n	80122ce <ucdr_serialize_array_double+0x6a>
 80122b8:	68a0      	ldr	r0, [r4, #8]
 80122ba:	f009 fde4 	bl	801be86 <memcpy>
 80122be:	68a2      	ldr	r2, [r4, #8]
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	442a      	add	r2, r5
 80122c4:	442b      	add	r3, r5
 80122c6:	eba8 0805 	sub.w	r8, r8, r5
 80122ca:	60a2      	str	r2, [r4, #8]
 80122cc:	6123      	str	r3, [r4, #16]
 80122ce:	4641      	mov	r1, r8
 80122d0:	2208      	movs	r2, #8
 80122d2:	4620      	mov	r0, r4
 80122d4:	f7fc fb6c 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 80122d8:	eba7 0108 	sub.w	r1, r7, r8
 80122dc:	4431      	add	r1, r6
 80122de:	4605      	mov	r5, r0
 80122e0:	4602      	mov	r2, r0
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d1e8      	bne.n	80122b8 <ucdr_serialize_array_double+0x54>
 80122e6:	7da0      	ldrb	r0, [r4, #22]
 80122e8:	2308      	movs	r3, #8
 80122ea:	7563      	strb	r3, [r4, #21]
 80122ec:	f080 0001 	eor.w	r0, r0, #1
 80122f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f4:	463a      	mov	r2, r7
 80122f6:	68a0      	ldr	r0, [r4, #8]
 80122f8:	4631      	mov	r1, r6
 80122fa:	f009 fdc4 	bl	801be86 <memcpy>
 80122fe:	68a2      	ldr	r2, [r4, #8]
 8012300:	6923      	ldr	r3, [r4, #16]
 8012302:	443a      	add	r2, r7
 8012304:	441f      	add	r7, r3
 8012306:	60a2      	str	r2, [r4, #8]
 8012308:	6127      	str	r7, [r4, #16]
 801230a:	e7ec      	b.n	80122e6 <ucdr_serialize_array_double+0x82>

0801230c <ucdr_deserialize_array_double>:
 801230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012310:	460e      	mov	r6, r1
 8012312:	2108      	movs	r1, #8
 8012314:	4604      	mov	r4, r0
 8012316:	4617      	mov	r7, r2
 8012318:	f7fc fb22 	bl	800e960 <ucdr_buffer_alignment>
 801231c:	4601      	mov	r1, r0
 801231e:	4620      	mov	r0, r4
 8012320:	7d65      	ldrb	r5, [r4, #21]
 8012322:	f7fc fb61 	bl	800e9e8 <ucdr_advance_buffer>
 8012326:	7d21      	ldrb	r1, [r4, #20]
 8012328:	7565      	strb	r5, [r4, #21]
 801232a:	2901      	cmp	r1, #1
 801232c:	d011      	beq.n	8012352 <ucdr_deserialize_array_double+0x46>
 801232e:	b15f      	cbz	r7, 8012348 <ucdr_deserialize_array_double+0x3c>
 8012330:	2500      	movs	r5, #0
 8012332:	e000      	b.n	8012336 <ucdr_deserialize_array_double+0x2a>
 8012334:	7d21      	ldrb	r1, [r4, #20]
 8012336:	4632      	mov	r2, r6
 8012338:	4620      	mov	r0, r4
 801233a:	3501      	adds	r5, #1
 801233c:	f7fc f9e2 	bl	800e704 <ucdr_deserialize_endian_double>
 8012340:	42af      	cmp	r7, r5
 8012342:	f106 0608 	add.w	r6, r6, #8
 8012346:	d1f5      	bne.n	8012334 <ucdr_deserialize_array_double+0x28>
 8012348:	7da0      	ldrb	r0, [r4, #22]
 801234a:	f080 0001 	eor.w	r0, r0, #1
 801234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012352:	00ff      	lsls	r7, r7, #3
 8012354:	4639      	mov	r1, r7
 8012356:	4620      	mov	r0, r4
 8012358:	f7fc faa2 	bl	800e8a0 <ucdr_check_buffer_available_for>
 801235c:	b9f8      	cbnz	r0, 801239e <ucdr_deserialize_array_double+0x92>
 801235e:	46b8      	mov	r8, r7
 8012360:	e00a      	b.n	8012378 <ucdr_deserialize_array_double+0x6c>
 8012362:	68a1      	ldr	r1, [r4, #8]
 8012364:	f009 fd8f 	bl	801be86 <memcpy>
 8012368:	68a2      	ldr	r2, [r4, #8]
 801236a:	6923      	ldr	r3, [r4, #16]
 801236c:	442a      	add	r2, r5
 801236e:	442b      	add	r3, r5
 8012370:	eba8 0805 	sub.w	r8, r8, r5
 8012374:	60a2      	str	r2, [r4, #8]
 8012376:	6123      	str	r3, [r4, #16]
 8012378:	2208      	movs	r2, #8
 801237a:	4641      	mov	r1, r8
 801237c:	4620      	mov	r0, r4
 801237e:	f7fc fb17 	bl	800e9b0 <ucdr_check_final_buffer_behavior_array>
 8012382:	4605      	mov	r5, r0
 8012384:	eba7 0008 	sub.w	r0, r7, r8
 8012388:	4430      	add	r0, r6
 801238a:	462a      	mov	r2, r5
 801238c:	2d00      	cmp	r5, #0
 801238e:	d1e8      	bne.n	8012362 <ucdr_deserialize_array_double+0x56>
 8012390:	7da0      	ldrb	r0, [r4, #22]
 8012392:	2308      	movs	r3, #8
 8012394:	7563      	strb	r3, [r4, #21]
 8012396:	f080 0001 	eor.w	r0, r0, #1
 801239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239e:	463a      	mov	r2, r7
 80123a0:	68a1      	ldr	r1, [r4, #8]
 80123a2:	4630      	mov	r0, r6
 80123a4:	f009 fd6f 	bl	801be86 <memcpy>
 80123a8:	68a2      	ldr	r2, [r4, #8]
 80123aa:	6923      	ldr	r3, [r4, #16]
 80123ac:	443a      	add	r2, r7
 80123ae:	441f      	add	r7, r3
 80123b0:	60a2      	str	r2, [r4, #8]
 80123b2:	6127      	str	r7, [r4, #16]
 80123b4:	e7ec      	b.n	8012390 <ucdr_deserialize_array_double+0x84>
 80123b6:	bf00      	nop

080123b8 <ucdr_serialize_sequence_char>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	4615      	mov	r5, r2
 80123bc:	460e      	mov	r6, r1
 80123be:	7d01      	ldrb	r1, [r0, #20]
 80123c0:	4604      	mov	r4, r0
 80123c2:	f7fb fa8d 	bl	800d8e0 <ucdr_serialize_endian_uint32_t>
 80123c6:	b90d      	cbnz	r5, 80123cc <ucdr_serialize_sequence_char+0x14>
 80123c8:	2001      	movs	r0, #1
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	7d21      	ldrb	r1, [r4, #20]
 80123ce:	462b      	mov	r3, r5
 80123d0:	4632      	mov	r2, r6
 80123d2:	4620      	mov	r0, r4
 80123d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123d8:	f7ff be18 	b.w	801200c <ucdr_serialize_endian_array_char>

080123dc <ucdr_deserialize_sequence_char>:
 80123dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e0:	461d      	mov	r5, r3
 80123e2:	4616      	mov	r6, r2
 80123e4:	460f      	mov	r7, r1
 80123e6:	461a      	mov	r2, r3
 80123e8:	7d01      	ldrb	r1, [r0, #20]
 80123ea:	4604      	mov	r4, r0
 80123ec:	f7fb fba0 	bl	800db30 <ucdr_deserialize_endian_uint32_t>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	429e      	cmp	r6, r3
 80123f4:	bf3c      	itt	cc
 80123f6:	2201      	movcc	r2, #1
 80123f8:	75a2      	strbcc	r2, [r4, #22]
 80123fa:	b913      	cbnz	r3, 8012402 <ucdr_deserialize_sequence_char+0x26>
 80123fc:	2001      	movs	r0, #1
 80123fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012402:	7d21      	ldrb	r1, [r4, #20]
 8012404:	463a      	mov	r2, r7
 8012406:	4620      	mov	r0, r4
 8012408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801240c:	f7ff be30 	b.w	8012070 <ucdr_deserialize_endian_array_char>

08012410 <ucdr_serialize_sequence_uint8_t>:
 8012410:	b570      	push	{r4, r5, r6, lr}
 8012412:	4615      	mov	r5, r2
 8012414:	460e      	mov	r6, r1
 8012416:	7d01      	ldrb	r1, [r0, #20]
 8012418:	4604      	mov	r4, r0
 801241a:	f7fb fa61 	bl	800d8e0 <ucdr_serialize_endian_uint32_t>
 801241e:	b90d      	cbnz	r5, 8012424 <ucdr_serialize_sequence_uint8_t+0x14>
 8012420:	2001      	movs	r0, #1
 8012422:	bd70      	pop	{r4, r5, r6, pc}
 8012424:	7d21      	ldrb	r1, [r4, #20]
 8012426:	462b      	mov	r3, r5
 8012428:	4632      	mov	r2, r6
 801242a:	4620      	mov	r0, r4
 801242c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012430:	f7ff be82 	b.w	8012138 <ucdr_serialize_endian_array_uint8_t>

08012434 <ucdr_deserialize_sequence_uint8_t>:
 8012434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012438:	461d      	mov	r5, r3
 801243a:	4616      	mov	r6, r2
 801243c:	460f      	mov	r7, r1
 801243e:	461a      	mov	r2, r3
 8012440:	7d01      	ldrb	r1, [r0, #20]
 8012442:	4604      	mov	r4, r0
 8012444:	f7fb fb74 	bl	800db30 <ucdr_deserialize_endian_uint32_t>
 8012448:	682b      	ldr	r3, [r5, #0]
 801244a:	429e      	cmp	r6, r3
 801244c:	bf3c      	itt	cc
 801244e:	2201      	movcc	r2, #1
 8012450:	75a2      	strbcc	r2, [r4, #22]
 8012452:	b913      	cbnz	r3, 801245a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012454:	2001      	movs	r0, #1
 8012456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245a:	7d21      	ldrb	r1, [r4, #20]
 801245c:	463a      	mov	r2, r7
 801245e:	4620      	mov	r0, r4
 8012460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012464:	f7ff becc 	b.w	8012200 <ucdr_deserialize_endian_array_uint8_t>

08012468 <uxr_buffer_delete_entity>:
 8012468:	b510      	push	{r4, lr}
 801246a:	2300      	movs	r3, #0
 801246c:	b08e      	sub	sp, #56	@ 0x38
 801246e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012472:	2303      	movs	r3, #3
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	2204      	movs	r2, #4
 8012478:	ab06      	add	r3, sp, #24
 801247a:	4604      	mov	r4, r0
 801247c:	9103      	str	r1, [sp, #12]
 801247e:	f001 fb3d 	bl	8013afc <uxr_prepare_stream_to_write_submessage>
 8012482:	b918      	cbnz	r0, 801248c <uxr_buffer_delete_entity+0x24>
 8012484:	4604      	mov	r4, r0
 8012486:	4620      	mov	r0, r4
 8012488:	b00e      	add	sp, #56	@ 0x38
 801248a:	bd10      	pop	{r4, pc}
 801248c:	9902      	ldr	r1, [sp, #8]
 801248e:	aa05      	add	r2, sp, #20
 8012490:	4620      	mov	r0, r4
 8012492:	f001 fc69 	bl	8013d68 <uxr_init_base_object_request>
 8012496:	a905      	add	r1, sp, #20
 8012498:	4604      	mov	r4, r0
 801249a:	a806      	add	r0, sp, #24
 801249c:	f003 fa94 	bl	80159c8 <uxr_serialize_DELETE_Payload>
 80124a0:	4620      	mov	r0, r4
 80124a2:	b00e      	add	sp, #56	@ 0x38
 80124a4:	bd10      	pop	{r4, pc}
 80124a6:	bf00      	nop

080124a8 <uxr_common_create_entity>:
 80124a8:	b510      	push	{r4, lr}
 80124aa:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80124ae:	b08c      	sub	sp, #48	@ 0x30
 80124b0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80124b4:	f1bc 0f01 	cmp.w	ip, #1
 80124b8:	bf0c      	ite	eq
 80124ba:	f003 0201 	andeq.w	r2, r3, #1
 80124be:	2200      	movne	r2, #0
 80124c0:	330e      	adds	r3, #14
 80124c2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80124c6:	9101      	str	r1, [sp, #4]
 80124c8:	441a      	add	r2, r3
 80124ca:	2301      	movs	r3, #1
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	9903      	ldr	r1, [sp, #12]
 80124d0:	ab04      	add	r3, sp, #16
 80124d2:	b292      	uxth	r2, r2
 80124d4:	4604      	mov	r4, r0
 80124d6:	f001 fb11 	bl	8013afc <uxr_prepare_stream_to_write_submessage>
 80124da:	b918      	cbnz	r0, 80124e4 <uxr_common_create_entity+0x3c>
 80124dc:	4604      	mov	r4, r0
 80124de:	4620      	mov	r0, r4
 80124e0:	b00c      	add	sp, #48	@ 0x30
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	9902      	ldr	r1, [sp, #8]
 80124e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80124e8:	4620      	mov	r0, r4
 80124ea:	f001 fc3d 	bl	8013d68 <uxr_init_base_object_request>
 80124ee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80124f0:	4604      	mov	r4, r0
 80124f2:	a804      	add	r0, sp, #16
 80124f4:	f003 f9c4 	bl	8015880 <uxr_serialize_CREATE_Payload>
 80124f8:	4620      	mov	r0, r4
 80124fa:	b00c      	add	sp, #48	@ 0x30
 80124fc:	bd10      	pop	{r4, pc}
 80124fe:	bf00      	nop

08012500 <uxr_buffer_create_participant_bin>:
 8012500:	b570      	push	{r4, r5, r6, lr}
 8012502:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012506:	ac11      	add	r4, sp, #68	@ 0x44
 8012508:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801250c:	2303      	movs	r3, #3
 801250e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012512:	7223      	strb	r3, [r4, #8]
 8012514:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012516:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801251a:	2201      	movs	r2, #1
 801251c:	2100      	movs	r1, #0
 801251e:	4605      	mov	r5, r0
 8012520:	7122      	strb	r2, [r4, #4]
 8012522:	f88d 1014 	strb.w	r1, [sp, #20]
 8012526:	b1cb      	cbz	r3, 801255c <uxr_buffer_create_participant_bin+0x5c>
 8012528:	f88d 201c 	strb.w	r2, [sp, #28]
 801252c:	9308      	str	r3, [sp, #32]
 801252e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012532:	a915      	add	r1, sp, #84	@ 0x54
 8012534:	a809      	add	r0, sp, #36	@ 0x24
 8012536:	f7fc fa07 	bl	800e948 <ucdr_init_buffer>
 801253a:	a905      	add	r1, sp, #20
 801253c:	a809      	add	r0, sp, #36	@ 0x24
 801253e:	f002 fe39 	bl	80151b4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012544:	9600      	str	r6, [sp, #0]
 8012546:	9401      	str	r4, [sp, #4]
 8012548:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801254c:	60e3      	str	r3, [r4, #12]
 801254e:	4628      	mov	r0, r5
 8012550:	b29b      	uxth	r3, r3
 8012552:	f7ff ffa9 	bl	80124a8 <uxr_common_create_entity>
 8012556:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012560:	e7e5      	b.n	801252e <uxr_buffer_create_participant_bin+0x2e>
 8012562:	bf00      	nop

08012564 <uxr_buffer_create_topic_bin>:
 8012564:	b570      	push	{r4, r5, r6, lr}
 8012566:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801256a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801256e:	9105      	str	r1, [sp, #20]
 8012570:	4605      	mov	r5, r0
 8012572:	a997      	add	r1, sp, #604	@ 0x25c
 8012574:	4618      	mov	r0, r3
 8012576:	2302      	movs	r3, #2
 8012578:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801257c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012580:	f000 f9ea 	bl	8012958 <uxr_object_id_to_raw>
 8012584:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012586:	9306      	str	r3, [sp, #24]
 8012588:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801258a:	930a      	str	r3, [sp, #40]	@ 0x28
 801258c:	2303      	movs	r3, #3
 801258e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012592:	2301      	movs	r3, #1
 8012594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012598:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801259c:	a917      	add	r1, sp, #92	@ 0x5c
 801259e:	2300      	movs	r3, #0
 80125a0:	a80b      	add	r0, sp, #44	@ 0x2c
 80125a2:	f88d 301c 	strb.w	r3, [sp, #28]
 80125a6:	f7fc f9cf 	bl	800e948 <ucdr_init_buffer>
 80125aa:	a906      	add	r1, sp, #24
 80125ac:	a80b      	add	r0, sp, #44	@ 0x2c
 80125ae:	f002 fe23 	bl	80151f8 <uxr_serialize_OBJK_Topic_Binary>
 80125b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80125b6:	ac13      	add	r4, sp, #76	@ 0x4c
 80125b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80125bc:	9600      	str	r6, [sp, #0]
 80125be:	9401      	str	r4, [sp, #4]
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4628      	mov	r0, r5
 80125c4:	f7ff ff70 	bl	80124a8 <uxr_common_create_entity>
 80125c8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80125cc:	bd70      	pop	{r4, r5, r6, pc}
 80125ce:	bf00      	nop

080125d0 <uxr_buffer_create_publisher_bin>:
 80125d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125d2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80125d6:	4605      	mov	r5, r0
 80125d8:	9105      	str	r1, [sp, #20]
 80125da:	4618      	mov	r0, r3
 80125dc:	2603      	movs	r6, #3
 80125de:	a992      	add	r1, sp, #584	@ 0x248
 80125e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80125e4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80125e8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80125ec:	f000 f9b4 	bl	8012958 <uxr_object_id_to_raw>
 80125f0:	2300      	movs	r3, #0
 80125f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125f6:	a912      	add	r1, sp, #72	@ 0x48
 80125f8:	a806      	add	r0, sp, #24
 80125fa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80125fe:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012602:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012606:	f7fc f99f 	bl	800e948 <ucdr_init_buffer>
 801260a:	a993      	add	r1, sp, #588	@ 0x24c
 801260c:	a806      	add	r0, sp, #24
 801260e:	f002 fea7 	bl	8015360 <uxr_serialize_OBJK_Publisher_Binary>
 8012612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012614:	9311      	str	r3, [sp, #68]	@ 0x44
 8012616:	ac0e      	add	r4, sp, #56	@ 0x38
 8012618:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801261c:	9700      	str	r7, [sp, #0]
 801261e:	9401      	str	r4, [sp, #4]
 8012620:	b29b      	uxth	r3, r3
 8012622:	4628      	mov	r0, r5
 8012624:	f7ff ff40 	bl	80124a8 <uxr_common_create_entity>
 8012628:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801262e:	bf00      	nop

08012630 <uxr_buffer_create_datawriter_bin>:
 8012630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012634:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012638:	ac1d      	add	r4, sp, #116	@ 0x74
 801263a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801263e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012642:	9105      	str	r1, [sp, #20]
 8012644:	4606      	mov	r6, r0
 8012646:	a9a1      	add	r1, sp, #644	@ 0x284
 8012648:	4618      	mov	r0, r3
 801264a:	2305      	movs	r3, #5
 801264c:	7123      	strb	r3, [r4, #4]
 801264e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012652:	2703      	movs	r7, #3
 8012654:	f000 f980 	bl	8012958 <uxr_object_id_to_raw>
 8012658:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801265a:	7227      	strb	r7, [r4, #8]
 801265c:	a90e      	add	r1, sp, #56	@ 0x38
 801265e:	f000 f97b 	bl	8012958 <uxr_object_id_to_raw>
 8012662:	2300      	movs	r3, #0
 8012664:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012668:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801266c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012670:	3d00      	subs	r5, #0
 8012672:	bf18      	it	ne
 8012674:	2501      	movne	r5, #1
 8012676:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801267a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801267e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012682:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012686:	2301      	movs	r3, #1
 8012688:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801268c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012690:	bb8a      	cbnz	r2, 80126f6 <uxr_buffer_create_datawriter_bin+0xc6>
 8012692:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012696:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801269a:	f04f 0c13 	mov.w	ip, #19
 801269e:	250b      	movs	r5, #11
 80126a0:	2221      	movs	r2, #33	@ 0x21
 80126a2:	2111      	movs	r1, #17
 80126a4:	2009      	movs	r0, #9
 80126a6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80126aa:	b923      	cbnz	r3, 80126b6 <uxr_buffer_create_datawriter_bin+0x86>
 80126ac:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80126b0:	4672      	mov	r2, lr
 80126b2:	4661      	mov	r1, ip
 80126b4:	4628      	mov	r0, r5
 80126b6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d025      	beq.n	801270a <uxr_buffer_create_datawriter_bin+0xda>
 80126be:	2b03      	cmp	r3, #3
 80126c0:	d029      	beq.n	8012716 <uxr_buffer_create_datawriter_bin+0xe6>
 80126c2:	b32b      	cbz	r3, 8012710 <uxr_buffer_create_datawriter_bin+0xe0>
 80126c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126c8:	a921      	add	r1, sp, #132	@ 0x84
 80126ca:	a806      	add	r0, sp, #24
 80126cc:	f7fc f93c 	bl	800e948 <ucdr_init_buffer>
 80126d0:	a90e      	add	r1, sp, #56	@ 0x38
 80126d2:	a806      	add	r0, sp, #24
 80126d4:	f002 feba 	bl	801544c <uxr_serialize_OBJK_DataWriter_Binary>
 80126d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126da:	f8cd 8000 	str.w	r8, [sp]
 80126de:	9401      	str	r4, [sp, #4]
 80126e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80126e4:	60e3      	str	r3, [r4, #12]
 80126e6:	4630      	mov	r0, r6
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	f7ff fedd 	bl	80124a8 <uxr_common_create_entity>
 80126ee:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80126f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80126fa:	f04f 0c12 	mov.w	ip, #18
 80126fe:	250a      	movs	r5, #10
 8012700:	2220      	movs	r2, #32
 8012702:	2110      	movs	r1, #16
 8012704:	2008      	movs	r0, #8
 8012706:	2702      	movs	r7, #2
 8012708:	e7cd      	b.n	80126a6 <uxr_buffer_create_datawriter_bin+0x76>
 801270a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801270e:	e7d9      	b.n	80126c4 <uxr_buffer_create_datawriter_bin+0x94>
 8012710:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012714:	e7d6      	b.n	80126c4 <uxr_buffer_create_datawriter_bin+0x94>
 8012716:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801271a:	e7d3      	b.n	80126c4 <uxr_buffer_create_datawriter_bin+0x94>

0801271c <uxr_buffer_create_replier_bin>:
 801271c:	b570      	push	{r4, r5, r6, lr}
 801271e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8012722:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012726:	9105      	str	r1, [sp, #20]
 8012728:	4605      	mov	r5, r0
 801272a:	a999      	add	r1, sp, #612	@ 0x264
 801272c:	4618      	mov	r0, r3
 801272e:	2308      	movs	r3, #8
 8012730:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8012734:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8012738:	f000 f90e 	bl	8012958 <uxr_object_id_to_raw>
 801273c:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801273e:	9306      	str	r3, [sp, #24]
 8012740:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8012742:	9307      	str	r3, [sp, #28]
 8012744:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8012746:	9308      	str	r3, [sp, #32]
 8012748:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801274a:	930c      	str	r3, [sp, #48]	@ 0x30
 801274c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801274e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012750:	2301      	movs	r3, #1
 8012752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012756:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801275a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801275e:	a919      	add	r1, sp, #100	@ 0x64
 8012760:	2303      	movs	r3, #3
 8012762:	a80d      	add	r0, sp, #52	@ 0x34
 8012764:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8012768:	f7fc f8ee 	bl	800e948 <ucdr_init_buffer>
 801276c:	a906      	add	r1, sp, #24
 801276e:	a80d      	add	r0, sp, #52	@ 0x34
 8012770:	f002 fe98 	bl	80154a4 <uxr_serialize_OBJK_Replier_Binary>
 8012774:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012776:	9318      	str	r3, [sp, #96]	@ 0x60
 8012778:	ac15      	add	r4, sp, #84	@ 0x54
 801277a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801277e:	9600      	str	r6, [sp, #0]
 8012780:	9401      	str	r4, [sp, #4]
 8012782:	b29b      	uxth	r3, r3
 8012784:	4628      	mov	r0, r5
 8012786:	f7ff fe8f 	bl	80124a8 <uxr_common_create_entity>
 801278a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801278e:	bd70      	pop	{r4, r5, r6, pc}

08012790 <get_custom_error>:
 8012790:	4b01      	ldr	r3, [pc, #4]	@ (8012798 <get_custom_error+0x8>)
 8012792:	7818      	ldrb	r0, [r3, #0]
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	2000bcfc 	.word	0x2000bcfc

0801279c <recv_custom_msg>:
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a0:	4693      	mov	fp, r2
 80127a2:	b089      	sub	sp, #36	@ 0x24
 80127a4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80127a8:	9305      	str	r3, [sp, #20]
 80127aa:	468a      	mov	sl, r1
 80127ac:	2100      	movs	r1, #0
 80127ae:	4604      	mov	r4, r0
 80127b0:	f88d 101e 	strb.w	r1, [sp, #30]
 80127b4:	b322      	cbz	r2, 8012800 <recv_custom_msg+0x64>
 80127b6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80127ba:	f10d 081f 	add.w	r8, sp, #31
 80127be:	af05      	add	r7, sp, #20
 80127c0:	f10d 061e 	add.w	r6, sp, #30
 80127c4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80127c8:	e002      	b.n	80127d0 <recv_custom_msg+0x34>
 80127ca:	9b05      	ldr	r3, [sp, #20]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dd0f      	ble.n	80127f0 <recv_custom_msg+0x54>
 80127d0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80127d4:	4623      	mov	r3, r4
 80127d6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80127da:	e9cd 5600 	strd	r5, r6, [sp]
 80127de:	4622      	mov	r2, r4
 80127e0:	4648      	mov	r0, r9
 80127e2:	f001 fcef 	bl	80141c4 <uxr_read_framed_msg>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d0ef      	beq.n	80127ca <recv_custom_msg+0x2e>
 80127ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80127ee:	b1b3      	cbz	r3, 801281e <recv_custom_msg+0x82>
 80127f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012830 <recv_custom_msg+0x94>)
 80127f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80127f6:	701a      	strb	r2, [r3, #0]
 80127f8:	2000      	movs	r0, #0
 80127fa:	b009      	add	sp, #36	@ 0x24
 80127fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012800:	f10d 021f 	add.w	r2, sp, #31
 8012804:	9200      	str	r2, [sp, #0]
 8012806:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801280a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801280e:	4601      	mov	r1, r0
 8012810:	47a8      	blx	r5
 8012812:	2800      	cmp	r0, #0
 8012814:	d0ec      	beq.n	80127f0 <recv_custom_msg+0x54>
 8012816:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1e8      	bne.n	80127f0 <recv_custom_msg+0x54>
 801281e:	f8cb 0000 	str.w	r0, [fp]
 8012822:	2001      	movs	r0, #1
 8012824:	f8ca 4000 	str.w	r4, [sl]
 8012828:	b009      	add	sp, #36	@ 0x24
 801282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282e:	bf00      	nop
 8012830:	2000bcfc 	.word	0x2000bcfc

08012834 <send_custom_msg>:
 8012834:	b530      	push	{r4, r5, lr}
 8012836:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801283a:	b087      	sub	sp, #28
 801283c:	4615      	mov	r5, r2
 801283e:	b974      	cbnz	r4, 801285e <send_custom_msg+0x2a>
 8012840:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8012844:	f10d 0317 	add.w	r3, sp, #23
 8012848:	47a0      	blx	r4
 801284a:	b108      	cbz	r0, 8012850 <send_custom_msg+0x1c>
 801284c:	42a8      	cmp	r0, r5
 801284e:	d015      	beq.n	801287c <send_custom_msg+0x48>
 8012850:	4b0c      	ldr	r3, [pc, #48]	@ (8012884 <send_custom_msg+0x50>)
 8012852:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012856:	701a      	strb	r2, [r3, #0]
 8012858:	2000      	movs	r0, #0
 801285a:	b007      	add	sp, #28
 801285c:	bd30      	pop	{r4, r5, pc}
 801285e:	460b      	mov	r3, r1
 8012860:	2200      	movs	r2, #0
 8012862:	f10d 0117 	add.w	r1, sp, #23
 8012866:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801286a:	4602      	mov	r2, r0
 801286c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8012870:	9500      	str	r5, [sp, #0]
 8012872:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8012876:	f001 faad 	bl	8013dd4 <uxr_write_framed_msg>
 801287a:	e7e6      	b.n	801284a <send_custom_msg+0x16>
 801287c:	2001      	movs	r0, #1
 801287e:	b007      	add	sp, #28
 8012880:	bd30      	pop	{r4, r5, pc}
 8012882:	bf00      	nop
 8012884:	2000bcfc 	.word	0x2000bcfc

08012888 <uxr_set_custom_transport_callbacks>:
 8012888:	b410      	push	{r4}
 801288a:	9c01      	ldr	r4, [sp, #4]
 801288c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012890:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012894:	9b02      	ldr	r3, [sp, #8]
 8012896:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801289a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801289e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80128a2:	4770      	bx	lr

080128a4 <uxr_init_custom_transport>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80128aa:	b303      	cbz	r3, 80128ee <uxr_init_custom_transport+0x4a>
 80128ac:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80128b0:	4604      	mov	r4, r0
 80128b2:	b1e2      	cbz	r2, 80128ee <uxr_init_custom_transport+0x4a>
 80128b4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80128b8:	b1ca      	cbz	r2, 80128ee <uxr_init_custom_transport+0x4a>
 80128ba:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80128be:	b1b2      	cbz	r2, 80128ee <uxr_init_custom_transport+0x4a>
 80128c0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80128c4:	4798      	blx	r3
 80128c6:	4605      	mov	r5, r0
 80128c8:	b188      	cbz	r0, 80128ee <uxr_init_custom_transport+0x4a>
 80128ca:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80128ce:	b98b      	cbnz	r3, 80128f4 <uxr_init_custom_transport+0x50>
 80128d0:	490b      	ldr	r1, [pc, #44]	@ (8012900 <uxr_init_custom_transport+0x5c>)
 80128d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012904 <uxr_init_custom_transport+0x60>)
 80128d4:	4a0c      	ldr	r2, [pc, #48]	@ (8012908 <uxr_init_custom_transport+0x64>)
 80128d6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80128da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128de:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80128e2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80128e6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80128ea:	4628      	mov	r0, r5
 80128ec:	bd38      	pop	{r3, r4, r5, pc}
 80128ee:	2500      	movs	r5, #0
 80128f0:	4628      	mov	r0, r5
 80128f2:	bd38      	pop	{r3, r4, r5, pc}
 80128f4:	2100      	movs	r1, #0
 80128f6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80128fa:	f001 fa65 	bl	8013dc8 <uxr_init_framing_io>
 80128fe:	e7e7      	b.n	80128d0 <uxr_init_custom_transport+0x2c>
 8012900:	08012835 	.word	0x08012835
 8012904:	0801279d 	.word	0x0801279d
 8012908:	08012791 	.word	0x08012791

0801290c <uxr_close_custom_transport>:
 801290c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012910:	4718      	bx	r3
 8012912:	bf00      	nop

08012914 <uxr_object_id>:
 8012914:	b082      	sub	sp, #8
 8012916:	2300      	movs	r3, #0
 8012918:	f88d 1006 	strb.w	r1, [sp, #6]
 801291c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012920:	f360 030f 	bfi	r3, r0, #0, #16
 8012924:	f362 431f 	bfi	r3, r2, #16, #16
 8012928:	4618      	mov	r0, r3
 801292a:	b002      	add	sp, #8
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <uxr_object_id_from_raw>:
 8012930:	7843      	ldrb	r3, [r0, #1]
 8012932:	7801      	ldrb	r1, [r0, #0]
 8012934:	b082      	sub	sp, #8
 8012936:	f003 020f 	and.w	r2, r3, #15
 801293a:	f88d 2006 	strb.w	r2, [sp, #6]
 801293e:	091b      	lsrs	r3, r3, #4
 8012940:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012944:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012948:	2000      	movs	r0, #0
 801294a:	f363 000f 	bfi	r0, r3, #0, #16
 801294e:	f362 401f 	bfi	r0, r2, #16, #16
 8012952:	b002      	add	sp, #8
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop

08012958 <uxr_object_id_to_raw>:
 8012958:	4602      	mov	r2, r0
 801295a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801295e:	b082      	sub	sp, #8
 8012960:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012964:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012968:	f881 c000 	strb.w	ip, [r1]
 801296c:	7048      	strb	r0, [r1, #1]
 801296e:	b002      	add	sp, #8
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop

08012974 <uxr_buffer_request_data>:
 8012974:	b530      	push	{r4, r5, lr}
 8012976:	b095      	sub	sp, #84	@ 0x54
 8012978:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801297c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801297e:	9303      	str	r3, [sp, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	2d00      	cmp	r5, #0
 8012984:	bf14      	ite	ne
 8012986:	2101      	movne	r1, #1
 8012988:	4611      	moveq	r1, r2
 801298a:	4604      	mov	r4, r0
 801298c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012990:	f88d 201d 	strb.w	r2, [sp, #29]
 8012994:	f88d 201e 	strb.w	r2, [sp, #30]
 8012998:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801299c:	d021      	beq.n	80129e2 <uxr_buffer_request_data+0x6e>
 801299e:	682a      	ldr	r2, [r5, #0]
 80129a0:	686b      	ldr	r3, [r5, #4]
 80129a2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80129a6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80129aa:	2210      	movs	r2, #16
 80129ac:	2308      	movs	r3, #8
 80129ae:	2100      	movs	r1, #0
 80129b0:	e9cd 3100 	strd	r3, r1, [sp]
 80129b4:	4620      	mov	r0, r4
 80129b6:	9905      	ldr	r1, [sp, #20]
 80129b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80129ba:	f001 f89f 	bl	8013afc <uxr_prepare_stream_to_write_submessage>
 80129be:	b918      	cbnz	r0, 80129c8 <uxr_buffer_request_data+0x54>
 80129c0:	4604      	mov	r4, r0
 80129c2:	4620      	mov	r0, r4
 80129c4:	b015      	add	sp, #84	@ 0x54
 80129c6:	bd30      	pop	{r4, r5, pc}
 80129c8:	9904      	ldr	r1, [sp, #16]
 80129ca:	aa06      	add	r2, sp, #24
 80129cc:	4620      	mov	r0, r4
 80129ce:	f001 f9cb 	bl	8013d68 <uxr_init_base_object_request>
 80129d2:	a906      	add	r1, sp, #24
 80129d4:	4604      	mov	r4, r0
 80129d6:	a80c      	add	r0, sp, #48	@ 0x30
 80129d8:	f003 f8a0 	bl	8015b1c <uxr_serialize_READ_DATA_Payload>
 80129dc:	4620      	mov	r0, r4
 80129de:	b015      	add	sp, #84	@ 0x54
 80129e0:	bd30      	pop	{r4, r5, pc}
 80129e2:	2208      	movs	r2, #8
 80129e4:	e7e2      	b.n	80129ac <uxr_buffer_request_data+0x38>
 80129e6:	bf00      	nop

080129e8 <uxr_buffer_cancel_data>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	b094      	sub	sp, #80	@ 0x50
 80129ec:	2300      	movs	r3, #0
 80129ee:	9202      	str	r2, [sp, #8]
 80129f0:	9205      	str	r2, [sp, #20]
 80129f2:	9301      	str	r3, [sp, #4]
 80129f4:	2201      	movs	r2, #1
 80129f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80129fa:	f88d 301e 	strb.w	r3, [sp, #30]
 80129fe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012a02:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012a06:	2308      	movs	r3, #8
 8012a08:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012a0c:	9300      	str	r3, [sp, #0]
 8012a0e:	2210      	movs	r2, #16
 8012a10:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a12:	4604      	mov	r4, r0
 8012a14:	9103      	str	r1, [sp, #12]
 8012a16:	f001 f871 	bl	8013afc <uxr_prepare_stream_to_write_submessage>
 8012a1a:	b918      	cbnz	r0, 8012a24 <uxr_buffer_cancel_data+0x3c>
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	4620      	mov	r0, r4
 8012a20:	b014      	add	sp, #80	@ 0x50
 8012a22:	bd10      	pop	{r4, pc}
 8012a24:	9905      	ldr	r1, [sp, #20]
 8012a26:	aa06      	add	r2, sp, #24
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f001 f99d 	bl	8013d68 <uxr_init_base_object_request>
 8012a2e:	a906      	add	r1, sp, #24
 8012a30:	4604      	mov	r4, r0
 8012a32:	a80c      	add	r0, sp, #48	@ 0x30
 8012a34:	f003 f872 	bl	8015b1c <uxr_serialize_READ_DATA_Payload>
 8012a38:	4620      	mov	r0, r4
 8012a3a:	b014      	add	sp, #80	@ 0x50
 8012a3c:	bd10      	pop	{r4, pc}
 8012a3e:	bf00      	nop

08012a40 <read_submessage_format>:
 8012a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a44:	b095      	sub	sp, #84	@ 0x54
 8012a46:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8012a4a:	b113      	cbz	r3, 8012a52 <read_submessage_format+0x12>
 8012a4c:	b015      	add	sp, #84	@ 0x54
 8012a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a52:	460c      	mov	r4, r1
 8012a54:	4615      	mov	r5, r2
 8012a56:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012a5a:	4607      	mov	r7, r0
 8012a5c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012a5e:	9004      	str	r0, [sp, #16]
 8012a60:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012a62:	9005      	str	r0, [sp, #20]
 8012a64:	1a52      	subs	r2, r2, r1
 8012a66:	a80c      	add	r0, sp, #48	@ 0x30
 8012a68:	4699      	mov	r9, r3
 8012a6a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8012a6e:	f7fb ff6b 	bl	800e948 <ucdr_init_buffer>
 8012a72:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012a76:	a80c      	add	r0, sp, #48	@ 0x30
 8012a78:	f7fb ff3a 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8012a7c:	69e2      	ldr	r2, [r4, #28]
 8012a7e:	b19a      	cbz	r2, 8012aa8 <read_submessage_format+0x68>
 8012a80:	f1b8 0f07 	cmp.w	r8, #7
 8012a84:	f882 9014 	strb.w	r9, [r2, #20]
 8012a88:	d040      	beq.n	8012b0c <read_submessage_format+0xcc>
 8012a8a:	f1b8 0f08 	cmp.w	r8, #8
 8012a8e:	d02e      	beq.n	8012aee <read_submessage_format+0xae>
 8012a90:	f1b8 0f06 	cmp.w	r8, #6
 8012a94:	d011      	beq.n	8012aba <read_submessage_format+0x7a>
 8012a96:	2301      	movs	r3, #1
 8012a98:	7513      	strb	r3, [r2, #20]
 8012a9a:	4629      	mov	r1, r5
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7fb ffa3 	bl	800e9e8 <ucdr_advance_buffer>
 8012aa2:	b015      	add	sp, #84	@ 0x54
 8012aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012aa8:	f1b8 0f07 	cmp.w	r8, #7
 8012aac:	d02e      	beq.n	8012b0c <read_submessage_format+0xcc>
 8012aae:	f1b8 0f08 	cmp.w	r8, #8
 8012ab2:	d01c      	beq.n	8012aee <read_submessage_format+0xae>
 8012ab4:	f1b8 0f06 	cmp.w	r8, #6
 8012ab8:	d1ef      	bne.n	8012a9a <read_submessage_format+0x5a>
 8012aba:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8012abe:	f1b8 0f00 	cmp.w	r8, #0
 8012ac2:	d011      	beq.n	8012ae8 <read_submessage_format+0xa8>
 8012ac4:	ab0c      	add	r3, sp, #48	@ 0x30
 8012ac6:	e9cd 3500 	strd	r3, r5, [sp]
 8012aca:	2306      	movs	r3, #6
 8012acc:	f88d 3016 	strb.w	r3, [sp, #22]
 8012ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012ad4:	9302      	str	r3, [sp, #8]
 8012ad6:	4632      	mov	r2, r6
 8012ad8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012adc:	4638      	mov	r0, r7
 8012ade:	47c0      	blx	r8
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	69e2      	ldr	r2, [r4, #28]
 8012ae4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012ae8:	2a00      	cmp	r2, #0
 8012aea:	d1d4      	bne.n	8012a96 <read_submessage_format+0x56>
 8012aec:	e7d5      	b.n	8012a9a <read_submessage_format+0x5a>
 8012aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d0f8      	beq.n	8012ae8 <read_submessage_format+0xa8>
 8012af6:	a906      	add	r1, sp, #24
 8012af8:	a80c      	add	r0, sp, #48	@ 0x30
 8012afa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012afe:	f003 f8e1 	bl	8015cc4 <uxr_deserialize_SampleIdentity>
 8012b02:	b9a0      	cbnz	r0, 8012b2e <read_submessage_format+0xee>
 8012b04:	69e2      	ldr	r2, [r4, #28]
 8012b06:	2a00      	cmp	r2, #0
 8012b08:	d1c5      	bne.n	8012a96 <read_submessage_format+0x56>
 8012b0a:	e7c6      	b.n	8012a9a <read_submessage_format+0x5a>
 8012b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012b10:	b13b      	cbz	r3, 8012b22 <read_submessage_format+0xe2>
 8012b12:	a906      	add	r1, sp, #24
 8012b14:	a80c      	add	r0, sp, #48	@ 0x30
 8012b16:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012b1a:	f002 fd99 	bl	8015650 <uxr_deserialize_BaseObjectRequest>
 8012b1e:	bb60      	cbnz	r0, 8012b7a <read_submessage_format+0x13a>
 8012b20:	69e2      	ldr	r2, [r4, #28]
 8012b22:	68a3      	ldr	r3, [r4, #8]
 8012b24:	442b      	add	r3, r5
 8012b26:	60a3      	str	r3, [r4, #8]
 8012b28:	2a00      	cmp	r2, #0
 8012b2a:	d1b4      	bne.n	8012a96 <read_submessage_format+0x56>
 8012b2c:	e7b5      	b.n	8012a9a <read_submessage_format+0x5a>
 8012b2e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012b32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b34:	1a52      	subs	r2, r2, r1
 8012b36:	eba8 0803 	sub.w	r8, r8, r3
 8012b3a:	a80c      	add	r0, sp, #48	@ 0x30
 8012b3c:	f7fb ff04 	bl	800e948 <ucdr_init_buffer>
 8012b40:	44a8      	add	r8, r5
 8012b42:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012b46:	a80c      	add	r0, sp, #48	@ 0x30
 8012b48:	f7fb fed2 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8012b4c:	fa1f f888 	uxth.w	r8, r8
 8012b50:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	f8cd 8004 	str.w	r8, [sp, #4]
 8012b58:	2108      	movs	r1, #8
 8012b5a:	f88d 1016 	strb.w	r1, [sp, #22]
 8012b5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012b62:	9102      	str	r1, [sp, #8]
 8012b64:	ab06      	add	r3, sp, #24
 8012b66:	4632      	mov	r2, r6
 8012b68:	9905      	ldr	r1, [sp, #20]
 8012b6a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8012b6e:	4638      	mov	r0, r7
 8012b70:	47b0      	blx	r6
 8012b72:	2301      	movs	r3, #1
 8012b74:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012b78:	e7c4      	b.n	8012b04 <read_submessage_format+0xc4>
 8012b7a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012b7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b80:	1a52      	subs	r2, r2, r1
 8012b82:	a80c      	add	r0, sp, #48	@ 0x30
 8012b84:	eba8 0803 	sub.w	r8, r8, r3
 8012b88:	f7fb fede 	bl	800e948 <ucdr_init_buffer>
 8012b8c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012b90:	a80c      	add	r0, sp, #48	@ 0x30
 8012b92:	f7fb fead 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8012b96:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012b9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012ba2:	44a8      	add	r8, r5
 8012ba4:	fa1f f888 	uxth.w	r8, r8
 8012ba8:	f8cd 8004 	str.w	r8, [sp, #4]
 8012bac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012bb0:	2107      	movs	r1, #7
 8012bb2:	f88d 1016 	strb.w	r1, [sp, #22]
 8012bb6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8012bba:	9102      	str	r1, [sp, #8]
 8012bbc:	4632      	mov	r2, r6
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8012bc4:	9905      	ldr	r1, [sp, #20]
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	47b0      	blx	r6
 8012bca:	2301      	movs	r3, #1
 8012bcc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012bd0:	e7a6      	b.n	8012b20 <read_submessage_format+0xe0>
 8012bd2:	bf00      	nop

08012bd4 <on_get_fragmentation_info>:
 8012bd4:	b500      	push	{lr}
 8012bd6:	b08b      	sub	sp, #44	@ 0x2c
 8012bd8:	4601      	mov	r1, r0
 8012bda:	2204      	movs	r2, #4
 8012bdc:	a802      	add	r0, sp, #8
 8012bde:	f7fb feb3 	bl	800e948 <ucdr_init_buffer>
 8012be2:	f10d 0305 	add.w	r3, sp, #5
 8012be6:	f10d 0206 	add.w	r2, sp, #6
 8012bea:	a901      	add	r1, sp, #4
 8012bec:	a802      	add	r0, sp, #8
 8012bee:	f001 fecf 	bl	8014990 <uxr_read_submessage_header>
 8012bf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012bf6:	2b0d      	cmp	r3, #13
 8012bf8:	d003      	beq.n	8012c02 <on_get_fragmentation_info+0x2e>
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	b00b      	add	sp, #44	@ 0x2c
 8012bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c06:	f013 0f02 	tst.w	r3, #2
 8012c0a:	bf14      	ite	ne
 8012c0c:	2002      	movne	r0, #2
 8012c0e:	2001      	moveq	r0, #1
 8012c10:	b00b      	add	sp, #44	@ 0x2c
 8012c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c16:	bf00      	nop

08012c18 <read_submessage_get_info>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	2500      	movs	r5, #0
 8012c1c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012c20:	4604      	mov	r4, r0
 8012c22:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012c26:	460e      	mov	r6, r1
 8012c28:	a810      	add	r0, sp, #64	@ 0x40
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012c30:	f009 f860 	bl	801bcf4 <memset>
 8012c34:	a903      	add	r1, sp, #12
 8012c36:	4630      	mov	r0, r6
 8012c38:	f002 feb2 	bl	80159a0 <uxr_deserialize_GET_INFO_Payload>
 8012c3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012c40:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012c44:	4620      	mov	r0, r4
 8012c46:	f001 f887 	bl	8013d58 <uxr_session_header_offset>
 8012c4a:	462b      	mov	r3, r5
 8012c4c:	9000      	str	r0, [sp, #0]
 8012c4e:	220c      	movs	r2, #12
 8012c50:	a905      	add	r1, sp, #20
 8012c52:	a808      	add	r0, sp, #32
 8012c54:	f7fb fe66 	bl	800e924 <ucdr_init_buffer_origin_offset>
 8012c58:	a910      	add	r1, sp, #64	@ 0x40
 8012c5a:	a808      	add	r0, sp, #32
 8012c5c:	f002 ff12 	bl	8015a84 <uxr_serialize_INFO_Payload>
 8012c60:	9b08      	ldr	r3, [sp, #32]
 8012c62:	462a      	mov	r2, r5
 8012c64:	4629      	mov	r1, r5
 8012c66:	4620      	mov	r0, r4
 8012c68:	f001 f820 	bl	8013cac <uxr_stamp_session_header>
 8012c6c:	a808      	add	r0, sp, #32
 8012c6e:	f7fb fe97 	bl	800e9a0 <ucdr_buffer_length>
 8012c72:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c74:	4602      	mov	r2, r0
 8012c76:	a905      	add	r1, sp, #20
 8012c78:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012c7c:	47a0      	blx	r4
 8012c7e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8012c82:	bd70      	pop	{r4, r5, r6, pc}

08012c84 <write_submessage_acknack.isra.0>:
 8012c84:	b570      	push	{r4, r5, r6, lr}
 8012c86:	b092      	sub	sp, #72	@ 0x48
 8012c88:	4605      	mov	r5, r0
 8012c8a:	460e      	mov	r6, r1
 8012c8c:	4614      	mov	r4, r2
 8012c8e:	f001 f863 	bl	8013d58 <uxr_session_header_offset>
 8012c92:	a905      	add	r1, sp, #20
 8012c94:	9000      	str	r0, [sp, #0]
 8012c96:	2300      	movs	r3, #0
 8012c98:	a80a      	add	r0, sp, #40	@ 0x28
 8012c9a:	2211      	movs	r2, #17
 8012c9c:	f7fb fe42 	bl	800e924 <ucdr_init_buffer_origin_offset>
 8012ca0:	2218      	movs	r2, #24
 8012ca2:	fb02 5404 	mla	r4, r2, r4, r5
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	2205      	movs	r2, #5
 8012caa:	3450      	adds	r4, #80	@ 0x50
 8012cac:	210a      	movs	r1, #10
 8012cae:	a80a      	add	r0, sp, #40	@ 0x28
 8012cb0:	f001 fe54 	bl	801495c <uxr_buffer_submessage_header>
 8012cb4:	a903      	add	r1, sp, #12
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f007 fb5e 	bl	801a378 <uxr_compute_acknack>
 8012cbc:	ba40      	rev16	r0, r0
 8012cbe:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012cc2:	a903      	add	r1, sp, #12
 8012cc4:	a80a      	add	r0, sp, #40	@ 0x28
 8012cc6:	f88d 6010 	strb.w	r6, [sp, #16]
 8012cca:	f002 ff4b 	bl	8015b64 <uxr_serialize_ACKNACK_Payload>
 8012cce:	2200      	movs	r2, #0
 8012cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cd2:	4611      	mov	r1, r2
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f000 ffe9 	bl	8013cac <uxr_stamp_session_header>
 8012cda:	a80a      	add	r0, sp, #40	@ 0x28
 8012cdc:	f7fb fe60 	bl	800e9a0 <ucdr_buffer_length>
 8012ce0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	a905      	add	r1, sp, #20
 8012ce6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012cea:	47a0      	blx	r4
 8012cec:	b012      	add	sp, #72	@ 0x48
 8012cee:	bd70      	pop	{r4, r5, r6, pc}

08012cf0 <uxr_init_session>:
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012d28 <uxr_init_session+0x38>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012d02:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012d06:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012d0a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012d0e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012d12:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012d16:	2181      	movs	r1, #129	@ 0x81
 8012d18:	f000 ff34 	bl	8013b84 <uxr_init_session_info>
 8012d1c:	f104 0008 	add.w	r0, r4, #8
 8012d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d24:	f001 bd36 	b.w	8014794 <uxr_init_stream_storage>
	...

08012d30 <uxr_set_status_callback>:
 8012d30:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop

08012d38 <uxr_set_topic_callback>:
 8012d38:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop

08012d40 <uxr_set_request_callback>:
 8012d40:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop

08012d48 <uxr_set_reply_callback>:
 8012d48:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012d4c:	4770      	bx	lr
 8012d4e:	bf00      	nop

08012d50 <uxr_create_output_best_effort_stream>:
 8012d50:	b510      	push	{r4, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	e9cd 2100 	strd	r2, r1, [sp]
 8012d58:	4604      	mov	r4, r0
 8012d5a:	f000 fffd 	bl	8013d58 <uxr_session_header_offset>
 8012d5e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012d62:	4603      	mov	r3, r0
 8012d64:	f104 0008 	add.w	r0, r4, #8
 8012d68:	b004      	add	sp, #16
 8012d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d6e:	f001 bd5b 	b.w	8014828 <uxr_add_output_best_effort_buffer>
 8012d72:	bf00      	nop

08012d74 <uxr_create_output_reliable_stream>:
 8012d74:	b510      	push	{r4, lr}
 8012d76:	b088      	sub	sp, #32
 8012d78:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	9303      	str	r3, [sp, #12]
 8012d80:	f000 ffea 	bl	8013d58 <uxr_session_header_offset>
 8012d84:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012d88:	9000      	str	r0, [sp, #0]
 8012d8a:	9905      	ldr	r1, [sp, #20]
 8012d8c:	f104 0008 	add.w	r0, r4, #8
 8012d90:	f001 fd5e 	bl	8014850 <uxr_add_output_reliable_buffer>
 8012d94:	2200      	movs	r2, #0
 8012d96:	b2c3      	uxtb	r3, r0
 8012d98:	f363 0207 	bfi	r2, r3, #0, #8
 8012d9c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012da0:	f363 220f 	bfi	r2, r3, #8, #8
 8012da4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012da8:	f363 4217 	bfi	r2, r3, #16, #8
 8012dac:	0e03      	lsrs	r3, r0, #24
 8012dae:	f363 621f 	bfi	r2, r3, #24, #8
 8012db2:	4610      	mov	r0, r2
 8012db4:	b008      	add	sp, #32
 8012db6:	bd10      	pop	{r4, pc}

08012db8 <uxr_create_input_best_effort_stream>:
 8012db8:	b082      	sub	sp, #8
 8012dba:	3008      	adds	r0, #8
 8012dbc:	b002      	add	sp, #8
 8012dbe:	f001 bd61 	b.w	8014884 <uxr_add_input_best_effort_buffer>
 8012dc2:	bf00      	nop

08012dc4 <uxr_create_input_reliable_stream>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	4c0b      	ldr	r4, [pc, #44]	@ (8012df8 <uxr_create_input_reliable_stream+0x34>)
 8012dca:	9400      	str	r4, [sp, #0]
 8012dcc:	3008      	adds	r0, #8
 8012dce:	f001 fd6f 	bl	80148b0 <uxr_add_input_reliable_buffer>
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	b2c3      	uxtb	r3, r0
 8012dd6:	f363 0207 	bfi	r2, r3, #0, #8
 8012dda:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012dde:	f363 220f 	bfi	r2, r3, #8, #8
 8012de2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012de6:	f363 4217 	bfi	r2, r3, #16, #8
 8012dea:	0e03      	lsrs	r3, r0, #24
 8012dec:	f363 621f 	bfi	r2, r3, #24, #8
 8012df0:	4610      	mov	r0, r2
 8012df2:	b004      	add	sp, #16
 8012df4:	bd10      	pop	{r4, pc}
 8012df6:	bf00      	nop
 8012df8:	08012bd5 	.word	0x08012bd5

08012dfc <uxr_epoch_millis>:
 8012dfc:	b510      	push	{r4, lr}
 8012dfe:	4604      	mov	r4, r0
 8012e00:	f001 fe0c 	bl	8014a1c <uxr_nanos>
 8012e04:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8012e08:	1ac0      	subs	r0, r0, r3
 8012e0a:	4a04      	ldr	r2, [pc, #16]	@ (8012e1c <uxr_epoch_millis+0x20>)
 8012e0c:	f04f 0300 	mov.w	r3, #0
 8012e10:	eb61 0104 	sbc.w	r1, r1, r4
 8012e14:	f7ed fed8 	bl	8000bc8 <__aeabi_ldivmod>
 8012e18:	bd10      	pop	{r4, pc}
 8012e1a:	bf00      	nop
 8012e1c:	000f4240 	.word	0x000f4240

08012e20 <uxr_epoch_nanos>:
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4604      	mov	r4, r0
 8012e24:	f001 fdfa 	bl	8014a1c <uxr_nanos>
 8012e28:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012e2c:	1ac0      	subs	r0, r0, r3
 8012e2e:	eb61 0102 	sbc.w	r1, r1, r2
 8012e32:	bd10      	pop	{r4, pc}

08012e34 <uxr_flash_output_streams>:
 8012e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e38:	7e03      	ldrb	r3, [r0, #24]
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d035      	beq.n	8012eae <uxr_flash_output_streams+0x7a>
 8012e42:	f04f 0900 	mov.w	r9, #0
 8012e46:	4648      	mov	r0, r9
 8012e48:	f10d 0802 	add.w	r8, sp, #2
 8012e4c:	af03      	add	r7, sp, #12
 8012e4e:	ae02      	add	r6, sp, #8
 8012e50:	e006      	b.n	8012e60 <uxr_flash_output_streams+0x2c>
 8012e52:	7e23      	ldrb	r3, [r4, #24]
 8012e54:	f109 0901 	add.w	r9, r9, #1
 8012e58:	fa5f f089 	uxtb.w	r0, r9
 8012e5c:	4283      	cmp	r3, r0
 8012e5e:	d926      	bls.n	8012eae <uxr_flash_output_streams+0x7a>
 8012e60:	2201      	movs	r2, #1
 8012e62:	4611      	mov	r1, r2
 8012e64:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012e68:	f001 fc40 	bl	80146ec <uxr_stream_id>
 8012e6c:	3508      	adds	r5, #8
 8012e6e:	4684      	mov	ip, r0
 8012e70:	4643      	mov	r3, r8
 8012e72:	463a      	mov	r2, r7
 8012e74:	4631      	mov	r1, r6
 8012e76:	4628      	mov	r0, r5
 8012e78:	f8cd c004 	str.w	ip, [sp, #4]
 8012e7c:	f007 fb02 	bl	801a484 <uxr_prepare_best_effort_buffer_to_send>
 8012e80:	2800      	cmp	r0, #0
 8012e82:	d0e6      	beq.n	8012e52 <uxr_flash_output_streams+0x1e>
 8012e84:	9b02      	ldr	r3, [sp, #8]
 8012e86:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012e8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f000 ff0c 	bl	8013cac <uxr_stamp_session_header>
 8012e94:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012e96:	9a03      	ldr	r2, [sp, #12]
 8012e98:	685d      	ldr	r5, [r3, #4]
 8012e9a:	6818      	ldr	r0, [r3, #0]
 8012e9c:	9902      	ldr	r1, [sp, #8]
 8012e9e:	47a8      	blx	r5
 8012ea0:	f109 0901 	add.w	r9, r9, #1
 8012ea4:	7e23      	ldrb	r3, [r4, #24]
 8012ea6:	fa5f f089 	uxtb.w	r0, r9
 8012eaa:	4283      	cmp	r3, r0
 8012eac:	d8d8      	bhi.n	8012e60 <uxr_flash_output_streams+0x2c>
 8012eae:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012eb2:	b38b      	cbz	r3, 8012f18 <uxr_flash_output_streams+0xe4>
 8012eb4:	f04f 0900 	mov.w	r9, #0
 8012eb8:	f10d 0802 	add.w	r8, sp, #2
 8012ebc:	af03      	add	r7, sp, #12
 8012ebe:	ae02      	add	r6, sp, #8
 8012ec0:	4648      	mov	r0, r9
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	2102      	movs	r1, #2
 8012ec6:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012eca:	f001 fc0f 	bl	80146ec <uxr_stream_id>
 8012ece:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012ed2:	3520      	adds	r5, #32
 8012ed4:	9001      	str	r0, [sp, #4]
 8012ed6:	e00d      	b.n	8012ef4 <uxr_flash_output_streams+0xc0>
 8012ed8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012edc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012ee0:	9b02      	ldr	r3, [sp, #8]
 8012ee2:	f000 fee3 	bl	8013cac <uxr_stamp_session_header>
 8012ee6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012ee8:	9a03      	ldr	r2, [sp, #12]
 8012eea:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012eee:	9902      	ldr	r1, [sp, #8]
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	47d0      	blx	sl
 8012ef4:	4643      	mov	r3, r8
 8012ef6:	463a      	mov	r2, r7
 8012ef8:	4631      	mov	r1, r6
 8012efa:	4628      	mov	r0, r5
 8012efc:	f007 fce0 	bl	801a8c0 <uxr_prepare_next_reliable_buffer_to_send>
 8012f00:	4603      	mov	r3, r0
 8012f02:	4620      	mov	r0, r4
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d1e7      	bne.n	8012ed8 <uxr_flash_output_streams+0xa4>
 8012f08:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012f0c:	f109 0901 	add.w	r9, r9, #1
 8012f10:	fa5f f089 	uxtb.w	r0, r9
 8012f14:	4283      	cmp	r3, r0
 8012f16:	d8d4      	bhi.n	8012ec2 <uxr_flash_output_streams+0x8e>
 8012f18:	b004      	add	sp, #16
 8012f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f1e:	bf00      	nop

08012f20 <read_submessage_info>:
 8012f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f24:	460d      	mov	r5, r1
 8012f26:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012f2a:	4669      	mov	r1, sp
 8012f2c:	4607      	mov	r7, r0
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f002 fc44 	bl	80157bc <uxr_deserialize_BaseObjectReply>
 8012f34:	a902      	add	r1, sp, #8
 8012f36:	4604      	mov	r4, r0
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012f3e:	f7fa fa09 	bl	800d354 <ucdr_deserialize_bool>
 8012f42:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012f46:	4004      	ands	r4, r0
 8012f48:	b2e4      	uxtb	r4, r4
 8012f4a:	b95b      	cbnz	r3, 8012f64 <read_submessage_info+0x44>
 8012f4c:	a987      	add	r1, sp, #540	@ 0x21c
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7fa fa00 	bl	800d354 <ucdr_deserialize_bool>
 8012f54:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012f58:	4606      	mov	r6, r0
 8012f5a:	b94b      	cbnz	r3, 8012f70 <read_submessage_info+0x50>
 8012f5c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f64:	a903      	add	r1, sp, #12
 8012f66:	4628      	mov	r0, r5
 8012f68:	f002 fad0 	bl	801550c <uxr_deserialize_ObjectVariant>
 8012f6c:	4004      	ands	r4, r0
 8012f6e:	e7ed      	b.n	8012f4c <read_submessage_info+0x2c>
 8012f70:	a988      	add	r1, sp, #544	@ 0x220
 8012f72:	4628      	mov	r0, r5
 8012f74:	f7fa fa1c 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8012f78:	4234      	tst	r4, r6
 8012f7a:	d0ef      	beq.n	8012f5c <read_submessage_info+0x3c>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d0ed      	beq.n	8012f5c <read_submessage_info+0x3c>
 8012f80:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012f84:	2b0d      	cmp	r3, #13
 8012f86:	d1e9      	bne.n	8012f5c <read_submessage_info+0x3c>
 8012f88:	a98a      	add	r1, sp, #552	@ 0x228
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f7fa ffb6 	bl	800defc <ucdr_deserialize_int16_t>
 8012f90:	b140      	cbz	r0, 8012fa4 <read_submessage_info+0x84>
 8012f92:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	dd07      	ble.n	8012faa <read_submessage_info+0x8a>
 8012f9a:	f1b8 0f00 	cmp.w	r8, #0
 8012f9e:	bf14      	ite	ne
 8012fa0:	2001      	movne	r0, #1
 8012fa2:	2002      	moveq	r0, #2
 8012fa4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8012fa8:	e7d8      	b.n	8012f5c <read_submessage_info+0x3c>
 8012faa:	2000      	movs	r0, #0
 8012fac:	e7fa      	b.n	8012fa4 <read_submessage_info+0x84>
 8012fae:	bf00      	nop

08012fb0 <read_submessage_list>:
 8012fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb4:	b097      	sub	sp, #92	@ 0x5c
 8012fb6:	4ec1      	ldr	r6, [pc, #772]	@ (80132bc <read_submessage_list+0x30c>)
 8012fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012fba:	4604      	mov	r4, r0
 8012fbc:	460d      	mov	r5, r1
 8012fbe:	f04f 0801 	mov.w	r8, #1
 8012fc2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012fc6:	aa0c      	add	r2, sp, #48	@ 0x30
 8012fc8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f001 fcdf 	bl	8014990 <uxr_read_submessage_header>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	f000 813e 	beq.w	8013254 <read_submessage_list+0x2a4>
 8012fd8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012fdc:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012fe0:	3b02      	subs	r3, #2
 8012fe2:	2b0d      	cmp	r3, #13
 8012fe4:	d8ed      	bhi.n	8012fc2 <read_submessage_list+0x12>
 8012fe6:	a101      	add	r1, pc, #4	@ (adr r1, 8012fec <read_submessage_list+0x3c>)
 8012fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fec:	0801324b 	.word	0x0801324b
 8012ff0:	08012fc3 	.word	0x08012fc3
 8012ff4:	0801323b 	.word	0x0801323b
 8012ff8:	080131d9 	.word	0x080131d9
 8012ffc:	080131cf 	.word	0x080131cf
 8013000:	08012fc3 	.word	0x08012fc3
 8013004:	08012fc3 	.word	0x08012fc3
 8013008:	0801312f 	.word	0x0801312f
 801300c:	080130bf 	.word	0x080130bf
 8013010:	0801307f 	.word	0x0801307f
 8013014:	08012fc3 	.word	0x08012fc3
 8013018:	08012fc3 	.word	0x08012fc3
 801301c:	08012fc3 	.word	0x08012fc3
 8013020:	08013025 	.word	0x08013025
 8013024:	a910      	add	r1, sp, #64	@ 0x40
 8013026:	4628      	mov	r0, r5
 8013028:	f002 fdfa 	bl	8015c20 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801302c:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013030:	f1b9 0f00 	cmp.w	r9, #0
 8013034:	f000 8116 	beq.w	8013264 <read_submessage_list+0x2b4>
 8013038:	f001 fcf0 	bl	8014a1c <uxr_nanos>
 801303c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013044:	2100      	movs	r1, #0
 8013046:	468c      	mov	ip, r1
 8013048:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801304c:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013050:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013052:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013054:	468c      	mov	ip, r1
 8013056:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801305a:	46e2      	mov	sl, ip
 801305c:	46bc      	mov	ip, r7
 801305e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013062:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013066:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801306a:	e9cd 7100 	strd	r7, r1, [sp]
 801306e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013072:	9106      	str	r1, [sp, #24]
 8013074:	4620      	mov	r0, r4
 8013076:	47c8      	blx	r9
 8013078:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 801307c:	e7a1      	b.n	8012fc2 <read_submessage_list+0x12>
 801307e:	a910      	add	r1, sp, #64	@ 0x40
 8013080:	4628      	mov	r0, r5
 8013082:	f002 fdad 	bl	8015be0 <uxr_deserialize_HEARTBEAT_Payload>
 8013086:	2100      	movs	r1, #0
 8013088:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801308c:	f001 fb58 	bl	8014740 <uxr_stream_id_from_raw>
 8013090:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013094:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013096:	4639      	mov	r1, r7
 8013098:	f104 0008 	add.w	r0, r4, #8
 801309c:	f001 fc3e 	bl	801491c <uxr_get_input_reliable_stream>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d08e      	beq.n	8012fc2 <read_submessage_list+0x12>
 80130a4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80130a8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80130ac:	f007 f958 	bl	801a360 <uxr_process_heartbeat>
 80130b0:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80130b4:	463a      	mov	r2, r7
 80130b6:	4620      	mov	r0, r4
 80130b8:	f7ff fde4 	bl	8012c84 <write_submessage_acknack.isra.0>
 80130bc:	e781      	b.n	8012fc2 <read_submessage_list+0x12>
 80130be:	a910      	add	r1, sp, #64	@ 0x40
 80130c0:	4628      	mov	r0, r5
 80130c2:	f002 fd65 	bl	8015b90 <uxr_deserialize_ACKNACK_Payload>
 80130c6:	2100      	movs	r1, #0
 80130c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80130cc:	f001 fb38 	bl	8014740 <uxr_stream_id_from_raw>
 80130d0:	900d      	str	r0, [sp, #52]	@ 0x34
 80130d2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80130d6:	f104 0008 	add.w	r0, r4, #8
 80130da:	f001 fc0b 	bl	80148f4 <uxr_get_output_reliable_stream>
 80130de:	4607      	mov	r7, r0
 80130e0:	2800      	cmp	r0, #0
 80130e2:	f43f af6e 	beq.w	8012fc2 <read_submessage_list+0x12>
 80130e6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80130ea:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80130ee:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80130f2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80130f6:	b289      	uxth	r1, r1
 80130f8:	f007 fc8c 	bl	801aa14 <uxr_process_acknack>
 80130fc:	4638      	mov	r0, r7
 80130fe:	f007 fc49 	bl	801a994 <uxr_begin_output_nack_buffer_it>
 8013102:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013106:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801310a:	e006      	b.n	801311a <read_submessage_list+0x16a>
 801310c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801310e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013110:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013114:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	47c8      	blx	r9
 801311a:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801311e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013120:	4651      	mov	r1, sl
 8013122:	4638      	mov	r0, r7
 8013124:	f007 fc38 	bl	801a998 <uxr_next_reliable_nack_buffer_to_send>
 8013128:	2800      	cmp	r0, #0
 801312a:	d1ef      	bne.n	801310c <read_submessage_list+0x15c>
 801312c:	e749      	b.n	8012fc2 <read_submessage_list+0x12>
 801312e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013132:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013136:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801313a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801313e:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013142:	4651      	mov	r1, sl
 8013144:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013148:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 801314c:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013150:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013154:	4628      	mov	r0, r5
 8013156:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801315a:	f002 fa79 	bl	8015650 <uxr_deserialize_BaseObjectRequest>
 801315e:	4650      	mov	r0, sl
 8013160:	a90f      	add	r1, sp, #60	@ 0x3c
 8013162:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013166:	f000 fe1d 	bl	8013da4 <uxr_parse_base_object_request>
 801316a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801316e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013170:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013174:	9110      	str	r1, [sp, #64]	@ 0x40
 8013176:	3f04      	subs	r7, #4
 8013178:	f009 090e 	and.w	r9, r9, #14
 801317c:	b2bf      	uxth	r7, r7
 801317e:	f1bb 0f00 	cmp.w	fp, #0
 8013182:	d006      	beq.n	8013192 <read_submessage_list+0x1e2>
 8013184:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	4652      	mov	r2, sl
 801318c:	2300      	movs	r3, #0
 801318e:	4620      	mov	r0, r4
 8013190:	47d8      	blx	fp
 8013192:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013194:	b16a      	cbz	r2, 80131b2 <read_submessage_list+0x202>
 8013196:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013198:	2100      	movs	r1, #0
 801319a:	3802      	subs	r0, #2
 801319c:	e002      	b.n	80131a4 <read_submessage_list+0x1f4>
 801319e:	3101      	adds	r1, #1
 80131a0:	4291      	cmp	r1, r2
 80131a2:	d006      	beq.n	80131b2 <read_submessage_list+0x202>
 80131a4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80131a8:	4553      	cmp	r3, sl
 80131aa:	d1f8      	bne.n	801319e <read_submessage_list+0x1ee>
 80131ac:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80131ae:	2200      	movs	r2, #0
 80131b0:	545a      	strb	r2, [r3, r1]
 80131b2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80131b6:	9102      	str	r1, [sp, #8]
 80131b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80131ba:	9101      	str	r1, [sp, #4]
 80131bc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80131be:	9100      	str	r1, [sp, #0]
 80131c0:	464b      	mov	r3, r9
 80131c2:	463a      	mov	r2, r7
 80131c4:	4629      	mov	r1, r5
 80131c6:	4620      	mov	r0, r4
 80131c8:	f7ff fc3a 	bl	8012a40 <read_submessage_format>
 80131cc:	e6f9      	b.n	8012fc2 <read_submessage_list+0x12>
 80131ce:	4629      	mov	r1, r5
 80131d0:	4620      	mov	r0, r4
 80131d2:	f7ff fea5 	bl	8012f20 <read_submessage_info>
 80131d6:	e6f4      	b.n	8012fc2 <read_submessage_list+0x12>
 80131d8:	2a00      	cmp	r2, #0
 80131da:	d03e      	beq.n	801325a <read_submessage_list+0x2aa>
 80131dc:	a910      	add	r1, sp, #64	@ 0x40
 80131de:	4628      	mov	r0, r5
 80131e0:	f002 fc32 	bl	8015a48 <uxr_deserialize_STATUS_Payload>
 80131e4:	a90e      	add	r1, sp, #56	@ 0x38
 80131e6:	aa0d      	add	r2, sp, #52	@ 0x34
 80131e8:	a810      	add	r0, sp, #64	@ 0x40
 80131ea:	f000 fddb 	bl	8013da4 <uxr_parse_base_object_request>
 80131ee:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80131f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80131f4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80131f8:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80131fc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80131fe:	f1ba 0f00 	cmp.w	sl, #0
 8013202:	d006      	beq.n	8013212 <read_submessage_list+0x262>
 8013204:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013208:	9300      	str	r3, [sp, #0]
 801320a:	463a      	mov	r2, r7
 801320c:	464b      	mov	r3, r9
 801320e:	4620      	mov	r0, r4
 8013210:	47d0      	blx	sl
 8013212:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013214:	2a00      	cmp	r2, #0
 8013216:	f43f aed4 	beq.w	8012fc2 <read_submessage_list+0x12>
 801321a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801321c:	2100      	movs	r1, #0
 801321e:	3802      	subs	r0, #2
 8013220:	e003      	b.n	801322a <read_submessage_list+0x27a>
 8013222:	3101      	adds	r1, #1
 8013224:	4291      	cmp	r1, r2
 8013226:	f43f aecc 	beq.w	8012fc2 <read_submessage_list+0x12>
 801322a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801322e:	42bb      	cmp	r3, r7
 8013230:	d1f7      	bne.n	8013222 <read_submessage_list+0x272>
 8013232:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013234:	f803 9001 	strb.w	r9, [r3, r1]
 8013238:	e6c3      	b.n	8012fc2 <read_submessage_list+0x12>
 801323a:	2a00      	cmp	r2, #0
 801323c:	f47f aec1 	bne.w	8012fc2 <read_submessage_list+0x12>
 8013240:	4629      	mov	r1, r5
 8013242:	4620      	mov	r0, r4
 8013244:	f000 fcf4 	bl	8013c30 <uxr_read_create_session_status>
 8013248:	e6bb      	b.n	8012fc2 <read_submessage_list+0x12>
 801324a:	4629      	mov	r1, r5
 801324c:	4620      	mov	r0, r4
 801324e:	f7ff fce3 	bl	8012c18 <read_submessage_get_info>
 8013252:	e6b6      	b.n	8012fc2 <read_submessage_list+0x12>
 8013254:	b017      	add	sp, #92	@ 0x5c
 8013256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325a:	4629      	mov	r1, r5
 801325c:	4620      	mov	r0, r4
 801325e:	f000 fcf3 	bl	8013c48 <uxr_read_delete_session_status>
 8013262:	e6ae      	b.n	8012fc2 <read_submessage_list+0x12>
 8013264:	f001 fbda 	bl	8014a1c <uxr_nanos>
 8013268:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801326a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801326c:	464f      	mov	r7, r9
 801326e:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013272:	1812      	adds	r2, r2, r0
 8013274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013276:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013278:	eb47 0101 	adc.w	r1, r7, r1
 801327c:	464f      	mov	r7, r9
 801327e:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013282:	463b      	mov	r3, r7
 8013284:	4684      	mov	ip, r0
 8013286:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801328a:	fbc7 0906 	smlal	r0, r9, r7, r6
 801328e:	eb1c 0c00 	adds.w	ip, ip, r0
 8013292:	464f      	mov	r7, r9
 8013294:	eb43 0307 	adc.w	r3, r3, r7
 8013298:	ebb2 0c0c 	subs.w	ip, r2, ip
 801329c:	eb61 0303 	sbc.w	r3, r1, r3
 80132a0:	0fda      	lsrs	r2, r3, #31
 80132a2:	eb12 020c 	adds.w	r2, r2, ip
 80132a6:	f143 0300 	adc.w	r3, r3, #0
 80132aa:	0852      	lsrs	r2, r2, #1
 80132ac:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80132b0:	105b      	asrs	r3, r3, #1
 80132b2:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80132b6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80132ba:	e6dd      	b.n	8013078 <read_submessage_list+0xc8>
 80132bc:	3b9aca00 	.word	0x3b9aca00

080132c0 <listen_message_reliably>:
 80132c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c4:	1e0b      	subs	r3, r1, #0
 80132c6:	b09d      	sub	sp, #116	@ 0x74
 80132c8:	bfb8      	it	lt
 80132ca:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80132ce:	4680      	mov	r8, r0
 80132d0:	9305      	str	r3, [sp, #20]
 80132d2:	f001 fb89 	bl	80149e8 <uxr_millis>
 80132d6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80132da:	4681      	mov	r9, r0
 80132dc:	2a00      	cmp	r2, #0
 80132de:	f000 80a1 	beq.w	8013424 <listen_message_reliably+0x164>
 80132e2:	2600      	movs	r6, #0
 80132e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80132e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80132ec:	9303      	str	r3, [sp, #12]
 80132ee:	4630      	mov	r0, r6
 80132f0:	460f      	mov	r7, r1
 80132f2:	e00f      	b.n	8013314 <listen_message_reliably+0x54>
 80132f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80132f8:	9903      	ldr	r1, [sp, #12]
 80132fa:	455a      	cmp	r2, fp
 80132fc:	f106 0601 	add.w	r6, r6, #1
 8013300:	eb73 0101 	sbcs.w	r1, r3, r1
 8013304:	b2f0      	uxtb	r0, r6
 8013306:	da01      	bge.n	801330c <listen_message_reliably+0x4c>
 8013308:	4693      	mov	fp, r2
 801330a:	9303      	str	r3, [sp, #12]
 801330c:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013310:	4283      	cmp	r3, r0
 8013312:	d960      	bls.n	80133d6 <listen_message_reliably+0x116>
 8013314:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013318:	2102      	movs	r1, #2
 801331a:	2201      	movs	r2, #1
 801331c:	f001 f9e6 	bl	80146ec <uxr_stream_id>
 8013320:	00e4      	lsls	r4, r4, #3
 8013322:	f104 0520 	add.w	r5, r4, #32
 8013326:	4445      	add	r5, r8
 8013328:	4601      	mov	r1, r0
 801332a:	463b      	mov	r3, r7
 801332c:	464a      	mov	r2, r9
 801332e:	4628      	mov	r0, r5
 8013330:	9109      	str	r1, [sp, #36]	@ 0x24
 8013332:	f007 fb05 	bl	801a940 <uxr_update_output_stream_heartbeat_timestamp>
 8013336:	eb08 0304 	add.w	r3, r8, r4
 801333a:	2800      	cmp	r0, #0
 801333c:	d0da      	beq.n	80132f4 <listen_message_reliably+0x34>
 801333e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013342:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013346:	9304      	str	r3, [sp, #16]
 8013348:	4640      	mov	r0, r8
 801334a:	f000 fd05 	bl	8013d58 <uxr_session_header_offset>
 801334e:	3501      	adds	r5, #1
 8013350:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013354:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013358:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801335c:	2300      	movs	r3, #0
 801335e:	2211      	movs	r2, #17
 8013360:	9000      	str	r0, [sp, #0]
 8013362:	a90c      	add	r1, sp, #48	@ 0x30
 8013364:	4650      	mov	r0, sl
 8013366:	f7fb fadd 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801336a:	2300      	movs	r3, #0
 801336c:	2205      	movs	r2, #5
 801336e:	210b      	movs	r1, #11
 8013370:	4650      	mov	r0, sl
 8013372:	f001 faf3 	bl	801495c <uxr_buffer_submessage_header>
 8013376:	8968      	ldrh	r0, [r5, #10]
 8013378:	2101      	movs	r1, #1
 801337a:	f007 fba3 	bl	801aac4 <uxr_seq_num_add>
 801337e:	892b      	ldrh	r3, [r5, #8]
 8013380:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013384:	4602      	mov	r2, r0
 8013386:	9b04      	ldr	r3, [sp, #16]
 8013388:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801338c:	a90a      	add	r1, sp, #40	@ 0x28
 801338e:	4650      	mov	r0, sl
 8013390:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013394:	f002 fc10 	bl	8015bb8 <uxr_serialize_HEARTBEAT_Payload>
 8013398:	2200      	movs	r2, #0
 801339a:	4611      	mov	r1, r2
 801339c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801339e:	4640      	mov	r0, r8
 80133a0:	f000 fc84 	bl	8013cac <uxr_stamp_session_header>
 80133a4:	4650      	mov	r0, sl
 80133a6:	f7fb fafb 	bl	800e9a0 <ucdr_buffer_length>
 80133aa:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80133ae:	4602      	mov	r2, r0
 80133b0:	a90c      	add	r1, sp, #48	@ 0x30
 80133b2:	e9d3 0500 	ldrd	r0, r5, [r3]
 80133b6:	4444      	add	r4, r8
 80133b8:	47a8      	blx	r5
 80133ba:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80133be:	9903      	ldr	r1, [sp, #12]
 80133c0:	455a      	cmp	r2, fp
 80133c2:	f106 0601 	add.w	r6, r6, #1
 80133c6:	eb73 0101 	sbcs.w	r1, r3, r1
 80133ca:	b2f0      	uxtb	r0, r6
 80133cc:	db9c      	blt.n	8013308 <listen_message_reliably+0x48>
 80133ce:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80133d2:	4283      	cmp	r3, r0
 80133d4:	d89e      	bhi.n	8013314 <listen_message_reliably+0x54>
 80133d6:	9a03      	ldr	r2, [sp, #12]
 80133d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80133dc:	429a      	cmp	r2, r3
 80133de:	bf08      	it	eq
 80133e0:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80133e4:	d01e      	beq.n	8013424 <listen_message_reliably+0x164>
 80133e6:	ebab 0309 	sub.w	r3, fp, r9
 80133ea:	9905      	ldr	r1, [sp, #20]
 80133ec:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	bf08      	it	eq
 80133f4:	2301      	moveq	r3, #1
 80133f6:	4299      	cmp	r1, r3
 80133f8:	bfa8      	it	ge
 80133fa:	4619      	movge	r1, r3
 80133fc:	6894      	ldr	r4, [r2, #8]
 80133fe:	6810      	ldr	r0, [r2, #0]
 8013400:	4689      	mov	r9, r1
 8013402:	460b      	mov	r3, r1
 8013404:	aa08      	add	r2, sp, #32
 8013406:	a907      	add	r1, sp, #28
 8013408:	47a0      	blx	r4
 801340a:	b968      	cbnz	r0, 8013428 <listen_message_reliably+0x168>
 801340c:	9b05      	ldr	r3, [sp, #20]
 801340e:	eba3 0309 	sub.w	r3, r3, r9
 8013412:	2b00      	cmp	r3, #0
 8013414:	9305      	str	r3, [sp, #20]
 8013416:	f73f af5c 	bgt.w	80132d2 <listen_message_reliably+0x12>
 801341a:	4604      	mov	r4, r0
 801341c:	4620      	mov	r0, r4
 801341e:	b01d      	add	sp, #116	@ 0x74
 8013420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013424:	9b05      	ldr	r3, [sp, #20]
 8013426:	e7e0      	b.n	80133ea <listen_message_reliably+0x12a>
 8013428:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801342c:	4604      	mov	r4, r0
 801342e:	a80c      	add	r0, sp, #48	@ 0x30
 8013430:	f7fb fa8a 	bl	800e948 <ucdr_init_buffer>
 8013434:	2500      	movs	r5, #0
 8013436:	f10d 031a 	add.w	r3, sp, #26
 801343a:	aa06      	add	r2, sp, #24
 801343c:	a90c      	add	r1, sp, #48	@ 0x30
 801343e:	4640      	mov	r0, r8
 8013440:	f88d 5018 	strb.w	r5, [sp, #24]
 8013444:	f000 fc46 	bl	8013cd4 <uxr_read_session_header>
 8013448:	b918      	cbnz	r0, 8013452 <listen_message_reliably+0x192>
 801344a:	4620      	mov	r0, r4
 801344c:	b01d      	add	sp, #116	@ 0x74
 801344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013452:	4629      	mov	r1, r5
 8013454:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013458:	f001 f972 	bl	8014740 <uxr_stream_id_from_raw>
 801345c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013460:	2d01      	cmp	r5, #1
 8013462:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013466:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801346a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801346e:	d04b      	beq.n	8013508 <listen_message_reliably+0x248>
 8013470:	2d02      	cmp	r5, #2
 8013472:	d00f      	beq.n	8013494 <listen_message_reliably+0x1d4>
 8013474:	2d00      	cmp	r5, #0
 8013476:	d1e8      	bne.n	801344a <listen_message_reliably+0x18a>
 8013478:	4629      	mov	r1, r5
 801347a:	4628      	mov	r0, r5
 801347c:	f001 f960 	bl	8014740 <uxr_stream_id_from_raw>
 8013480:	a90c      	add	r1, sp, #48	@ 0x30
 8013482:	4602      	mov	r2, r0
 8013484:	4640      	mov	r0, r8
 8013486:	920a      	str	r2, [sp, #40]	@ 0x28
 8013488:	f7ff fd92 	bl	8012fb0 <read_submessage_list>
 801348c:	4620      	mov	r0, r4
 801348e:	b01d      	add	sp, #116	@ 0x74
 8013490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013494:	4631      	mov	r1, r6
 8013496:	f108 0008 	add.w	r0, r8, #8
 801349a:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801349e:	f001 fa3d 	bl	801491c <uxr_get_input_reliable_stream>
 80134a2:	4607      	mov	r7, r0
 80134a4:	b338      	cbz	r0, 80134f6 <listen_message_reliably+0x236>
 80134a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134a8:	9203      	str	r2, [sp, #12]
 80134aa:	a80c      	add	r0, sp, #48	@ 0x30
 80134ac:	f7fb fa7c 	bl	800e9a8 <ucdr_buffer_remaining>
 80134b0:	4603      	mov	r3, r0
 80134b2:	f10d 0019 	add.w	r0, sp, #25
 80134b6:	9000      	str	r0, [sp, #0]
 80134b8:	9a03      	ldr	r2, [sp, #12]
 80134ba:	4651      	mov	r1, sl
 80134bc:	4638      	mov	r0, r7
 80134be:	f006 fe55 	bl	801a16c <uxr_receive_reliable_message>
 80134c2:	b1c0      	cbz	r0, 80134f6 <listen_message_reliably+0x236>
 80134c4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80134c8:	b393      	cbz	r3, 8013530 <listen_message_reliably+0x270>
 80134ca:	ad14      	add	r5, sp, #80	@ 0x50
 80134cc:	f04f 0a02 	mov.w	sl, #2
 80134d0:	e00a      	b.n	80134e8 <listen_message_reliably+0x228>
 80134d2:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80134d6:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80134da:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80134de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80134e0:	4629      	mov	r1, r5
 80134e2:	4640      	mov	r0, r8
 80134e4:	f7ff fd64 	bl	8012fb0 <read_submessage_list>
 80134e8:	2204      	movs	r2, #4
 80134ea:	4629      	mov	r1, r5
 80134ec:	4638      	mov	r0, r7
 80134ee:	f006 febd 	bl	801a26c <uxr_next_input_reliable_buffer_available>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d1ed      	bne.n	80134d2 <listen_message_reliably+0x212>
 80134f6:	4640      	mov	r0, r8
 80134f8:	4632      	mov	r2, r6
 80134fa:	4649      	mov	r1, r9
 80134fc:	f7ff fbc2 	bl	8012c84 <write_submessage_acknack.isra.0>
 8013500:	4620      	mov	r0, r4
 8013502:	b01d      	add	sp, #116	@ 0x74
 8013504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013508:	4631      	mov	r1, r6
 801350a:	f108 0008 	add.w	r0, r8, #8
 801350e:	f001 f9fb 	bl	8014908 <uxr_get_input_best_effort_stream>
 8013512:	2800      	cmp	r0, #0
 8013514:	d099      	beq.n	801344a <listen_message_reliably+0x18a>
 8013516:	4651      	mov	r1, sl
 8013518:	f006 fd94 	bl	801a044 <uxr_receive_best_effort_message>
 801351c:	2800      	cmp	r0, #0
 801351e:	d094      	beq.n	801344a <listen_message_reliably+0x18a>
 8013520:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013526:	a90c      	add	r1, sp, #48	@ 0x30
 8013528:	4640      	mov	r0, r8
 801352a:	f7ff fd41 	bl	8012fb0 <read_submessage_list>
 801352e:	e78c      	b.n	801344a <listen_message_reliably+0x18a>
 8013530:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013536:	a90c      	add	r1, sp, #48	@ 0x30
 8013538:	4640      	mov	r0, r8
 801353a:	f7ff fd39 	bl	8012fb0 <read_submessage_list>
 801353e:	e7c4      	b.n	80134ca <listen_message_reliably+0x20a>

08013540 <uxr_run_session_timeout>:
 8013540:	b570      	push	{r4, r5, r6, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	460d      	mov	r5, r1
 8013546:	f001 fa4f 	bl	80149e8 <uxr_millis>
 801354a:	4606      	mov	r6, r0
 801354c:	4620      	mov	r0, r4
 801354e:	f7ff fc71 	bl	8012e34 <uxr_flash_output_streams>
 8013552:	4629      	mov	r1, r5
 8013554:	4620      	mov	r0, r4
 8013556:	f7ff feb3 	bl	80132c0 <listen_message_reliably>
 801355a:	f001 fa45 	bl	80149e8 <uxr_millis>
 801355e:	1b83      	subs	r3, r0, r6
 8013560:	1ae9      	subs	r1, r5, r3
 8013562:	2900      	cmp	r1, #0
 8013564:	dcf6      	bgt.n	8013554 <uxr_run_session_timeout+0x14>
 8013566:	f104 0008 	add.w	r0, r4, #8
 801356a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801356e:	f001 b9df 	b.w	8014930 <uxr_output_streams_confirmed>
 8013572:	bf00      	nop

08013574 <uxr_run_session_until_data>:
 8013574:	b570      	push	{r4, r5, r6, lr}
 8013576:	4604      	mov	r4, r0
 8013578:	460d      	mov	r5, r1
 801357a:	f001 fa35 	bl	80149e8 <uxr_millis>
 801357e:	4606      	mov	r6, r0
 8013580:	4620      	mov	r0, r4
 8013582:	f7ff fc57 	bl	8012e34 <uxr_flash_output_streams>
 8013586:	2300      	movs	r3, #0
 8013588:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801358c:	4629      	mov	r1, r5
 801358e:	e005      	b.n	801359c <uxr_run_session_until_data+0x28>
 8013590:	f001 fa2a 	bl	80149e8 <uxr_millis>
 8013594:	1b83      	subs	r3, r0, r6
 8013596:	1ae9      	subs	r1, r5, r3
 8013598:	2900      	cmp	r1, #0
 801359a:	dd07      	ble.n	80135ac <uxr_run_session_until_data+0x38>
 801359c:	4620      	mov	r0, r4
 801359e:	f7ff fe8f 	bl	80132c0 <listen_message_reliably>
 80135a2:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80135a6:	2800      	cmp	r0, #0
 80135a8:	d0f2      	beq.n	8013590 <uxr_run_session_until_data+0x1c>
 80135aa:	bd70      	pop	{r4, r5, r6, pc}
 80135ac:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80135b0:	bd70      	pop	{r4, r5, r6, pc}
 80135b2:	bf00      	nop

080135b4 <uxr_run_session_until_confirm_delivery>:
 80135b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b8:	4606      	mov	r6, r0
 80135ba:	460d      	mov	r5, r1
 80135bc:	f001 fa14 	bl	80149e8 <uxr_millis>
 80135c0:	4607      	mov	r7, r0
 80135c2:	4630      	mov	r0, r6
 80135c4:	f7ff fc36 	bl	8012e34 <uxr_flash_output_streams>
 80135c8:	2d00      	cmp	r5, #0
 80135ca:	f106 0808 	add.w	r8, r6, #8
 80135ce:	bfa8      	it	ge
 80135d0:	462c      	movge	r4, r5
 80135d2:	da07      	bge.n	80135e4 <uxr_run_session_until_confirm_delivery+0x30>
 80135d4:	e00e      	b.n	80135f4 <uxr_run_session_until_confirm_delivery+0x40>
 80135d6:	f7ff fe73 	bl	80132c0 <listen_message_reliably>
 80135da:	f001 fa05 	bl	80149e8 <uxr_millis>
 80135de:	1bc3      	subs	r3, r0, r7
 80135e0:	1aec      	subs	r4, r5, r3
 80135e2:	d407      	bmi.n	80135f4 <uxr_run_session_until_confirm_delivery+0x40>
 80135e4:	4640      	mov	r0, r8
 80135e6:	f001 f9a3 	bl	8014930 <uxr_output_streams_confirmed>
 80135ea:	4603      	mov	r3, r0
 80135ec:	4621      	mov	r1, r4
 80135ee:	4630      	mov	r0, r6
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d0f0      	beq.n	80135d6 <uxr_run_session_until_confirm_delivery+0x22>
 80135f4:	4640      	mov	r0, r8
 80135f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135fa:	f001 b999 	b.w	8014930 <uxr_output_streams_confirmed>
 80135fe:	bf00      	nop

08013600 <uxr_run_session_until_all_status>:
 8013600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013604:	9c08      	ldr	r4, [sp, #32]
 8013606:	4606      	mov	r6, r0
 8013608:	460f      	mov	r7, r1
 801360a:	4691      	mov	r9, r2
 801360c:	461d      	mov	r5, r3
 801360e:	f7ff fc11 	bl	8012e34 <uxr_flash_output_streams>
 8013612:	b124      	cbz	r4, 801361e <uxr_run_session_until_all_status+0x1e>
 8013614:	4622      	mov	r2, r4
 8013616:	21ff      	movs	r1, #255	@ 0xff
 8013618:	4628      	mov	r0, r5
 801361a:	f008 fb6b 	bl	801bcf4 <memset>
 801361e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8013622:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013624:	f001 f9e0 	bl	80149e8 <uxr_millis>
 8013628:	3d01      	subs	r5, #1
 801362a:	f1a9 0902 	sub.w	r9, r9, #2
 801362e:	4680      	mov	r8, r0
 8013630:	4639      	mov	r1, r7
 8013632:	4630      	mov	r0, r6
 8013634:	f7ff fe44 	bl	80132c0 <listen_message_reliably>
 8013638:	f001 f9d6 	bl	80149e8 <uxr_millis>
 801363c:	eba0 0008 	sub.w	r0, r0, r8
 8013640:	1a39      	subs	r1, r7, r0
 8013642:	b344      	cbz	r4, 8013696 <uxr_run_session_until_all_status+0x96>
 8013644:	4628      	mov	r0, r5
 8013646:	46ac      	mov	ip, r5
 8013648:	2301      	movs	r3, #1
 801364a:	e002      	b.n	8013652 <uxr_run_session_until_all_status+0x52>
 801364c:	42a3      	cmp	r3, r4
 801364e:	d20d      	bcs.n	801366c <uxr_run_session_until_all_status+0x6c>
 8013650:	3301      	adds	r3, #1
 8013652:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013656:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801365a:	d1f7      	bne.n	801364c <uxr_run_session_until_all_status+0x4c>
 801365c:	42a3      	cmp	r3, r4
 801365e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8013662:	d213      	bcs.n	801368c <uxr_run_session_until_all_status+0x8c>
 8013664:	2a00      	cmp	r2, #0
 8013666:	d0f3      	beq.n	8013650 <uxr_run_session_until_all_status+0x50>
 8013668:	2900      	cmp	r1, #0
 801366a:	dce2      	bgt.n	8013632 <uxr_run_session_until_all_status+0x32>
 801366c:	2300      	movs	r3, #0
 801366e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8013670:	442c      	add	r4, r5
 8013672:	e001      	b.n	8013678 <uxr_run_session_until_all_status+0x78>
 8013674:	2b01      	cmp	r3, #1
 8013676:	d812      	bhi.n	801369e <uxr_run_session_until_all_status+0x9e>
 8013678:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801367c:	4284      	cmp	r4, r0
 801367e:	d1f9      	bne.n	8013674 <uxr_run_session_until_all_status+0x74>
 8013680:	2b01      	cmp	r3, #1
 8013682:	bf8c      	ite	hi
 8013684:	2000      	movhi	r0, #0
 8013686:	2001      	movls	r0, #1
 8013688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801368c:	2900      	cmp	r1, #0
 801368e:	dded      	ble.n	801366c <uxr_run_session_until_all_status+0x6c>
 8013690:	2a00      	cmp	r2, #0
 8013692:	d1ce      	bne.n	8013632 <uxr_run_session_until_all_status+0x32>
 8013694:	e7ea      	b.n	801366c <uxr_run_session_until_all_status+0x6c>
 8013696:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013698:	2001      	movs	r0, #1
 801369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801369e:	2000      	movs	r0, #0
 80136a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a4:	0000      	movs	r0, r0
	...

080136a8 <uxr_sync_session>:
 80136a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136aa:	b093      	sub	sp, #76	@ 0x4c
 80136ac:	4604      	mov	r4, r0
 80136ae:	460d      	mov	r5, r1
 80136b0:	f000 fb52 	bl	8013d58 <uxr_session_header_offset>
 80136b4:	2214      	movs	r2, #20
 80136b6:	eb0d 0102 	add.w	r1, sp, r2
 80136ba:	9000      	str	r0, [sp, #0]
 80136bc:	2300      	movs	r3, #0
 80136be:	a80a      	add	r0, sp, #40	@ 0x28
 80136c0:	f7fb f930 	bl	800e924 <ucdr_init_buffer_origin_offset>
 80136c4:	2300      	movs	r3, #0
 80136c6:	2208      	movs	r2, #8
 80136c8:	210e      	movs	r1, #14
 80136ca:	a80a      	add	r0, sp, #40	@ 0x28
 80136cc:	f001 f946 	bl	801495c <uxr_buffer_submessage_header>
 80136d0:	f001 f9a4 	bl	8014a1c <uxr_nanos>
 80136d4:	a31c      	add	r3, pc, #112	@ (adr r3, 8013748 <uxr_sync_session+0xa0>)
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	460e      	mov	r6, r1
 80136dc:	4607      	mov	r7, r0
 80136de:	f7ed fa73 	bl	8000bc8 <__aeabi_ldivmod>
 80136e2:	4631      	mov	r1, r6
 80136e4:	9003      	str	r0, [sp, #12]
 80136e6:	a318      	add	r3, pc, #96	@ (adr r3, 8013748 <uxr_sync_session+0xa0>)
 80136e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ec:	4638      	mov	r0, r7
 80136ee:	f7ed fa6b 	bl	8000bc8 <__aeabi_ldivmod>
 80136f2:	a903      	add	r1, sp, #12
 80136f4:	a80a      	add	r0, sp, #40	@ 0x28
 80136f6:	9204      	str	r2, [sp, #16]
 80136f8:	f002 fa84 	bl	8015c04 <uxr_serialize_TIMESTAMP_Payload>
 80136fc:	2200      	movs	r2, #0
 80136fe:	4611      	mov	r1, r2
 8013700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013702:	4620      	mov	r0, r4
 8013704:	f000 fad2 	bl	8013cac <uxr_stamp_session_header>
 8013708:	a80a      	add	r0, sp, #40	@ 0x28
 801370a:	f7fb f949 	bl	800e9a0 <ucdr_buffer_length>
 801370e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013710:	4602      	mov	r2, r0
 8013712:	a905      	add	r1, sp, #20
 8013714:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013718:	47b0      	blx	r6
 801371a:	f001 f965 	bl	80149e8 <uxr_millis>
 801371e:	2300      	movs	r3, #0
 8013720:	4606      	mov	r6, r0
 8013722:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8013726:	4629      	mov	r1, r5
 8013728:	e000      	b.n	801372c <uxr_sync_session+0x84>
 801372a:	b950      	cbnz	r0, 8013742 <uxr_sync_session+0x9a>
 801372c:	4620      	mov	r0, r4
 801372e:	f7ff fdc7 	bl	80132c0 <listen_message_reliably>
 8013732:	f001 f959 	bl	80149e8 <uxr_millis>
 8013736:	1b83      	subs	r3, r0, r6
 8013738:	1ae9      	subs	r1, r5, r3
 801373a:	2900      	cmp	r1, #0
 801373c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8013740:	dcf3      	bgt.n	801372a <uxr_sync_session+0x82>
 8013742:	b013      	add	sp, #76	@ 0x4c
 8013744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013746:	bf00      	nop
 8013748:	3b9aca00 	.word	0x3b9aca00
 801374c:	00000000 	.word	0x00000000

08013750 <wait_session_status>:
 8013750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013754:	4604      	mov	r4, r0
 8013756:	b09d      	sub	sp, #116	@ 0x74
 8013758:	20ff      	movs	r0, #255	@ 0xff
 801375a:	7160      	strb	r0, [r4, #5]
 801375c:	9303      	str	r3, [sp, #12]
 801375e:	2b00      	cmp	r3, #0
 8013760:	f000 80b6 	beq.w	80138d0 <wait_session_status+0x180>
 8013764:	468a      	mov	sl, r1
 8013766:	4691      	mov	r9, r2
 8013768:	f04f 0b00 	mov.w	fp, #0
 801376c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801376e:	464a      	mov	r2, r9
 8013770:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013774:	4651      	mov	r1, sl
 8013776:	47a8      	blx	r5
 8013778:	f001 f936 	bl	80149e8 <uxr_millis>
 801377c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013780:	4605      	mov	r5, r0
 8013782:	e009      	b.n	8013798 <wait_session_status+0x48>
 8013784:	f001 f930 	bl	80149e8 <uxr_millis>
 8013788:	1b40      	subs	r0, r0, r5
 801378a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801378e:	2b00      	cmp	r3, #0
 8013790:	dd40      	ble.n	8013814 <wait_session_status+0xc4>
 8013792:	7960      	ldrb	r0, [r4, #5]
 8013794:	28ff      	cmp	r0, #255	@ 0xff
 8013796:	d145      	bne.n	8013824 <wait_session_status+0xd4>
 8013798:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801379a:	a908      	add	r1, sp, #32
 801379c:	6896      	ldr	r6, [r2, #8]
 801379e:	6810      	ldr	r0, [r2, #0]
 80137a0:	aa09      	add	r2, sp, #36	@ 0x24
 80137a2:	47b0      	blx	r6
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d0ed      	beq.n	8013784 <wait_session_status+0x34>
 80137a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80137ac:	a80c      	add	r0, sp, #48	@ 0x30
 80137ae:	f7fb f8cb 	bl	800e948 <ucdr_init_buffer>
 80137b2:	2600      	movs	r6, #0
 80137b4:	f10d 031e 	add.w	r3, sp, #30
 80137b8:	aa07      	add	r2, sp, #28
 80137ba:	a90c      	add	r1, sp, #48	@ 0x30
 80137bc:	4620      	mov	r0, r4
 80137be:	f88d 601c 	strb.w	r6, [sp, #28]
 80137c2:	f000 fa87 	bl	8013cd4 <uxr_read_session_header>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d0dc      	beq.n	8013784 <wait_session_status+0x34>
 80137ca:	4631      	mov	r1, r6
 80137cc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80137d0:	f000 ffb6 	bl	8014740 <uxr_stream_id_from_raw>
 80137d4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80137d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80137dc:	9302      	str	r3, [sp, #8]
 80137de:	2f01      	cmp	r7, #1
 80137e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80137e4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80137e8:	d05c      	beq.n	80138a4 <wait_session_status+0x154>
 80137ea:	2f02      	cmp	r7, #2
 80137ec:	d020      	beq.n	8013830 <wait_session_status+0xe0>
 80137ee:	2f00      	cmp	r7, #0
 80137f0:	d1c8      	bne.n	8013784 <wait_session_status+0x34>
 80137f2:	4639      	mov	r1, r7
 80137f4:	4638      	mov	r0, r7
 80137f6:	f000 ffa3 	bl	8014740 <uxr_stream_id_from_raw>
 80137fa:	a90c      	add	r1, sp, #48	@ 0x30
 80137fc:	4602      	mov	r2, r0
 80137fe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013800:	4620      	mov	r0, r4
 8013802:	f7ff fbd5 	bl	8012fb0 <read_submessage_list>
 8013806:	f001 f8ef 	bl	80149e8 <uxr_millis>
 801380a:	1b40      	subs	r0, r0, r5
 801380c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013810:	2b00      	cmp	r3, #0
 8013812:	dcbe      	bgt.n	8013792 <wait_session_status+0x42>
 8013814:	9b03      	ldr	r3, [sp, #12]
 8013816:	7960      	ldrb	r0, [r4, #5]
 8013818:	f10b 0b01 	add.w	fp, fp, #1
 801381c:	455b      	cmp	r3, fp
 801381e:	d001      	beq.n	8013824 <wait_session_status+0xd4>
 8013820:	28ff      	cmp	r0, #255	@ 0xff
 8013822:	d0a3      	beq.n	801376c <wait_session_status+0x1c>
 8013824:	38ff      	subs	r0, #255	@ 0xff
 8013826:	bf18      	it	ne
 8013828:	2001      	movne	r0, #1
 801382a:	b01d      	add	sp, #116	@ 0x74
 801382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013830:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013834:	9304      	str	r3, [sp, #16]
 8013836:	4631      	mov	r1, r6
 8013838:	f104 0008 	add.w	r0, r4, #8
 801383c:	f001 f86e 	bl	801491c <uxr_get_input_reliable_stream>
 8013840:	4680      	mov	r8, r0
 8013842:	b348      	cbz	r0, 8013898 <wait_session_status+0x148>
 8013844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013846:	9205      	str	r2, [sp, #20]
 8013848:	a80c      	add	r0, sp, #48	@ 0x30
 801384a:	f7fb f8ad 	bl	800e9a8 <ucdr_buffer_remaining>
 801384e:	4603      	mov	r3, r0
 8013850:	f10d 001d 	add.w	r0, sp, #29
 8013854:	9000      	str	r0, [sp, #0]
 8013856:	9a05      	ldr	r2, [sp, #20]
 8013858:	9902      	ldr	r1, [sp, #8]
 801385a:	4640      	mov	r0, r8
 801385c:	f006 fc86 	bl	801a16c <uxr_receive_reliable_message>
 8013860:	b1d0      	cbz	r0, 8013898 <wait_session_status+0x148>
 8013862:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d03a      	beq.n	80138e0 <wait_session_status+0x190>
 801386a:	9f04      	ldr	r7, [sp, #16]
 801386c:	e00a      	b.n	8013884 <wait_session_status+0x134>
 801386e:	f04f 0302 	mov.w	r3, #2
 8013872:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013876:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801387a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801387e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013880:	f7ff fb96 	bl	8012fb0 <read_submessage_list>
 8013884:	a914      	add	r1, sp, #80	@ 0x50
 8013886:	2204      	movs	r2, #4
 8013888:	4640      	mov	r0, r8
 801388a:	f006 fcef 	bl	801a26c <uxr_next_input_reliable_buffer_available>
 801388e:	4603      	mov	r3, r0
 8013890:	a914      	add	r1, sp, #80	@ 0x50
 8013892:	4620      	mov	r0, r4
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1ea      	bne.n	801386e <wait_session_status+0x11e>
 8013898:	9904      	ldr	r1, [sp, #16]
 801389a:	4632      	mov	r2, r6
 801389c:	4620      	mov	r0, r4
 801389e:	f7ff f9f1 	bl	8012c84 <write_submessage_acknack.isra.0>
 80138a2:	e76f      	b.n	8013784 <wait_session_status+0x34>
 80138a4:	4631      	mov	r1, r6
 80138a6:	f104 0008 	add.w	r0, r4, #8
 80138aa:	f001 f82d 	bl	8014908 <uxr_get_input_best_effort_stream>
 80138ae:	2800      	cmp	r0, #0
 80138b0:	f43f af68 	beq.w	8013784 <wait_session_status+0x34>
 80138b4:	9902      	ldr	r1, [sp, #8]
 80138b6:	f006 fbc5 	bl	801a044 <uxr_receive_best_effort_message>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	f43f af62 	beq.w	8013784 <wait_session_status+0x34>
 80138c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80138c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80138c6:	a90c      	add	r1, sp, #48	@ 0x30
 80138c8:	4620      	mov	r0, r4
 80138ca:	f7ff fb71 	bl	8012fb0 <read_submessage_list>
 80138ce:	e759      	b.n	8013784 <wait_session_status+0x34>
 80138d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80138d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80138d6:	47a0      	blx	r4
 80138d8:	2001      	movs	r0, #1
 80138da:	b01d      	add	sp, #116	@ 0x74
 80138dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80138e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80138e6:	a90c      	add	r1, sp, #48	@ 0x30
 80138e8:	4620      	mov	r0, r4
 80138ea:	f7ff fb61 	bl	8012fb0 <read_submessage_list>
 80138ee:	e7bc      	b.n	801386a <wait_session_status+0x11a>

080138f0 <uxr_delete_session_retries>:
 80138f0:	b530      	push	{r4, r5, lr}
 80138f2:	b08f      	sub	sp, #60	@ 0x3c
 80138f4:	4604      	mov	r4, r0
 80138f6:	460d      	mov	r5, r1
 80138f8:	f000 fa2e 	bl	8013d58 <uxr_session_header_offset>
 80138fc:	2300      	movs	r3, #0
 80138fe:	2210      	movs	r2, #16
 8013900:	9000      	str	r0, [sp, #0]
 8013902:	a902      	add	r1, sp, #8
 8013904:	a806      	add	r0, sp, #24
 8013906:	f7fb f80d 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801390a:	a906      	add	r1, sp, #24
 801390c:	4620      	mov	r0, r4
 801390e:	f000 f973 	bl	8013bf8 <uxr_buffer_delete_session>
 8013912:	2200      	movs	r2, #0
 8013914:	4611      	mov	r1, r2
 8013916:	9b06      	ldr	r3, [sp, #24]
 8013918:	4620      	mov	r0, r4
 801391a:	f000 f9c7 	bl	8013cac <uxr_stamp_session_header>
 801391e:	a806      	add	r0, sp, #24
 8013920:	f7fb f83e 	bl	800e9a0 <ucdr_buffer_length>
 8013924:	462b      	mov	r3, r5
 8013926:	4602      	mov	r2, r0
 8013928:	a902      	add	r1, sp, #8
 801392a:	4620      	mov	r0, r4
 801392c:	f7ff ff10 	bl	8013750 <wait_session_status>
 8013930:	b118      	cbz	r0, 801393a <uxr_delete_session_retries+0x4a>
 8013932:	7960      	ldrb	r0, [r4, #5]
 8013934:	fab0 f080 	clz	r0, r0
 8013938:	0940      	lsrs	r0, r0, #5
 801393a:	b00f      	add	sp, #60	@ 0x3c
 801393c:	bd30      	pop	{r4, r5, pc}
 801393e:	bf00      	nop

08013940 <uxr_create_session>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	f100 0b08 	add.w	fp, r0, #8
 8013948:	b0ab      	sub	sp, #172	@ 0xac
 801394a:	4604      	mov	r4, r0
 801394c:	4658      	mov	r0, fp
 801394e:	f000 ff2b 	bl	80147a8 <uxr_reset_stream_storage>
 8013952:	4620      	mov	r0, r4
 8013954:	f000 fa00 	bl	8013d58 <uxr_session_header_offset>
 8013958:	2300      	movs	r3, #0
 801395a:	9000      	str	r0, [sp, #0]
 801395c:	221c      	movs	r2, #28
 801395e:	a90b      	add	r1, sp, #44	@ 0x2c
 8013960:	a812      	add	r0, sp, #72	@ 0x48
 8013962:	f7fa ffdf 	bl	800e924 <ucdr_init_buffer_origin_offset>
 8013966:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013968:	8a1a      	ldrh	r2, [r3, #16]
 801396a:	3a04      	subs	r2, #4
 801396c:	b292      	uxth	r2, r2
 801396e:	a912      	add	r1, sp, #72	@ 0x48
 8013970:	4620      	mov	r0, r4
 8013972:	f000 f917 	bl	8013ba4 <uxr_buffer_create_session>
 8013976:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013978:	4620      	mov	r0, r4
 801397a:	f000 f983 	bl	8013c84 <uxr_stamp_create_session_header>
 801397e:	a812      	add	r0, sp, #72	@ 0x48
 8013980:	f7fb f80e 	bl	800e9a0 <ucdr_buffer_length>
 8013984:	23ff      	movs	r3, #255	@ 0xff
 8013986:	7163      	strb	r3, [r4, #5]
 8013988:	230a      	movs	r3, #10
 801398a:	46da      	mov	sl, fp
 801398c:	9303      	str	r3, [sp, #12]
 801398e:	4683      	mov	fp, r0
 8013990:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013992:	465a      	mov	r2, fp
 8013994:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013998:	a90b      	add	r1, sp, #44	@ 0x2c
 801399a:	47a8      	blx	r5
 801399c:	f001 f824 	bl	80149e8 <uxr_millis>
 80139a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80139a4:	4605      	mov	r5, r0
 80139a6:	e009      	b.n	80139bc <uxr_create_session+0x7c>
 80139a8:	f001 f81e 	bl	80149e8 <uxr_millis>
 80139ac:	1b40      	subs	r0, r0, r5
 80139ae:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	7962      	ldrb	r2, [r4, #5]
 80139b6:	dd38      	ble.n	8013a2a <uxr_create_session+0xea>
 80139b8:	2aff      	cmp	r2, #255	@ 0xff
 80139ba:	d13c      	bne.n	8013a36 <uxr_create_session+0xf6>
 80139bc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80139be:	a907      	add	r1, sp, #28
 80139c0:	6896      	ldr	r6, [r2, #8]
 80139c2:	6810      	ldr	r0, [r2, #0]
 80139c4:	aa08      	add	r2, sp, #32
 80139c6:	47b0      	blx	r6
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d0ed      	beq.n	80139a8 <uxr_create_session+0x68>
 80139cc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80139d0:	a81a      	add	r0, sp, #104	@ 0x68
 80139d2:	f7fa ffb9 	bl	800e948 <ucdr_init_buffer>
 80139d6:	2600      	movs	r6, #0
 80139d8:	f10d 031a 	add.w	r3, sp, #26
 80139dc:	aa06      	add	r2, sp, #24
 80139de:	a91a      	add	r1, sp, #104	@ 0x68
 80139e0:	4620      	mov	r0, r4
 80139e2:	f88d 6018 	strb.w	r6, [sp, #24]
 80139e6:	f000 f975 	bl	8013cd4 <uxr_read_session_header>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	d0dc      	beq.n	80139a8 <uxr_create_session+0x68>
 80139ee:	4631      	mov	r1, r6
 80139f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80139f4:	f000 fea4 	bl	8014740 <uxr_stream_id_from_raw>
 80139f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80139fc:	2e01      	cmp	r6, #1
 80139fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013a02:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8013a06:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013a0a:	d053      	beq.n	8013ab4 <uxr_create_session+0x174>
 8013a0c:	2e02      	cmp	r6, #2
 8013a0e:	d018      	beq.n	8013a42 <uxr_create_session+0x102>
 8013a10:	2e00      	cmp	r6, #0
 8013a12:	d1c9      	bne.n	80139a8 <uxr_create_session+0x68>
 8013a14:	4631      	mov	r1, r6
 8013a16:	4630      	mov	r0, r6
 8013a18:	f000 fe92 	bl	8014740 <uxr_stream_id_from_raw>
 8013a1c:	a91a      	add	r1, sp, #104	@ 0x68
 8013a1e:	4602      	mov	r2, r0
 8013a20:	900a      	str	r0, [sp, #40]	@ 0x28
 8013a22:	4620      	mov	r0, r4
 8013a24:	f7ff fac4 	bl	8012fb0 <read_submessage_list>
 8013a28:	e7be      	b.n	80139a8 <uxr_create_session+0x68>
 8013a2a:	9b03      	ldr	r3, [sp, #12]
 8013a2c:	3b01      	subs	r3, #1
 8013a2e:	9303      	str	r3, [sp, #12]
 8013a30:	d001      	beq.n	8013a36 <uxr_create_session+0xf6>
 8013a32:	2aff      	cmp	r2, #255	@ 0xff
 8013a34:	d0ac      	beq.n	8013990 <uxr_create_session+0x50>
 8013a36:	2a00      	cmp	r2, #0
 8013a38:	d051      	beq.n	8013ade <uxr_create_session+0x19e>
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	b02b      	add	sp, #172	@ 0xac
 8013a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a42:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013a46:	9304      	str	r3, [sp, #16]
 8013a48:	4639      	mov	r1, r7
 8013a4a:	4650      	mov	r0, sl
 8013a4c:	f000 ff66 	bl	801491c <uxr_get_input_reliable_stream>
 8013a50:	4680      	mov	r8, r0
 8013a52:	b348      	cbz	r0, 8013aa8 <uxr_create_session+0x168>
 8013a54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a56:	9205      	str	r2, [sp, #20]
 8013a58:	a81a      	add	r0, sp, #104	@ 0x68
 8013a5a:	f7fa ffa5 	bl	800e9a8 <ucdr_buffer_remaining>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	f10d 0019 	add.w	r0, sp, #25
 8013a64:	9000      	str	r0, [sp, #0]
 8013a66:	9a05      	ldr	r2, [sp, #20]
 8013a68:	4649      	mov	r1, r9
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	f006 fb7e 	bl	801a16c <uxr_receive_reliable_message>
 8013a70:	b1d0      	cbz	r0, 8013aa8 <uxr_create_session+0x168>
 8013a72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d038      	beq.n	8013aec <uxr_create_session+0x1ac>
 8013a7a:	9e04      	ldr	r6, [sp, #16]
 8013a7c:	e00a      	b.n	8013a94 <uxr_create_session+0x154>
 8013a7e:	f04f 0302 	mov.w	r3, #2
 8013a82:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8013a86:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8013a8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a90:	f7ff fa8e 	bl	8012fb0 <read_submessage_list>
 8013a94:	a922      	add	r1, sp, #136	@ 0x88
 8013a96:	2204      	movs	r2, #4
 8013a98:	4640      	mov	r0, r8
 8013a9a:	f006 fbe7 	bl	801a26c <uxr_next_input_reliable_buffer_available>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	a922      	add	r1, sp, #136	@ 0x88
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1ea      	bne.n	8013a7e <uxr_create_session+0x13e>
 8013aa8:	9904      	ldr	r1, [sp, #16]
 8013aaa:	463a      	mov	r2, r7
 8013aac:	4620      	mov	r0, r4
 8013aae:	f7ff f8e9 	bl	8012c84 <write_submessage_acknack.isra.0>
 8013ab2:	e779      	b.n	80139a8 <uxr_create_session+0x68>
 8013ab4:	4639      	mov	r1, r7
 8013ab6:	4650      	mov	r0, sl
 8013ab8:	f000 ff26 	bl	8014908 <uxr_get_input_best_effort_stream>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	f43f af73 	beq.w	80139a8 <uxr_create_session+0x68>
 8013ac2:	4649      	mov	r1, r9
 8013ac4:	f006 fabe 	bl	801a044 <uxr_receive_best_effort_message>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	f43f af6d 	beq.w	80139a8 <uxr_create_session+0x68>
 8013ace:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013ad2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ad4:	a91a      	add	r1, sp, #104	@ 0x68
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f7ff fa6a 	bl	8012fb0 <read_submessage_list>
 8013adc:	e764      	b.n	80139a8 <uxr_create_session+0x68>
 8013ade:	4650      	mov	r0, sl
 8013ae0:	f000 fe62 	bl	80147a8 <uxr_reset_stream_storage>
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	b02b      	add	sp, #172	@ 0xac
 8013ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aec:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013af0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013af2:	a91a      	add	r1, sp, #104	@ 0x68
 8013af4:	4620      	mov	r0, r4
 8013af6:	f7ff fa5b 	bl	8012fb0 <read_submessage_list>
 8013afa:	e7be      	b.n	8013a7a <uxr_create_session+0x13a>

08013afc <uxr_prepare_stream_to_write_submessage>:
 8013afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b00:	b082      	sub	sp, #8
 8013b02:	4682      	mov	sl, r0
 8013b04:	4610      	mov	r0, r2
 8013b06:	4615      	mov	r5, r2
 8013b08:	461e      	mov	r6, r3
 8013b0a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8013b0e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8013b12:	9101      	str	r1, [sp, #4]
 8013b14:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8013b18:	f000 ff60 	bl	80149dc <uxr_submessage_padding>
 8013b1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013b20:	f105 0904 	add.w	r9, r5, #4
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	4481      	add	r9, r0
 8013b28:	d01d      	beq.n	8013b66 <uxr_prepare_stream_to_write_submessage+0x6a>
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d116      	bne.n	8013b5c <uxr_prepare_stream_to_write_submessage+0x60>
 8013b2e:	4621      	mov	r1, r4
 8013b30:	f10a 0008 	add.w	r0, sl, #8
 8013b34:	f000 fede 	bl	80148f4 <uxr_get_output_reliable_stream>
 8013b38:	4604      	mov	r4, r0
 8013b3a:	b158      	cbz	r0, 8013b54 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b3c:	4649      	mov	r1, r9
 8013b3e:	4632      	mov	r2, r6
 8013b40:	f006 fd50 	bl	801a5e4 <uxr_prepare_reliable_buffer_to_write>
 8013b44:	4604      	mov	r4, r0
 8013b46:	b12c      	cbz	r4, 8013b54 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b48:	4643      	mov	r3, r8
 8013b4a:	b2aa      	uxth	r2, r5
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	4630      	mov	r0, r6
 8013b50:	f000 ff04 	bl	801495c <uxr_buffer_submessage_header>
 8013b54:	4620      	mov	r0, r4
 8013b56:	b002      	add	sp, #8
 8013b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b5c:	2400      	movs	r4, #0
 8013b5e:	4620      	mov	r0, r4
 8013b60:	b002      	add	sp, #8
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	4621      	mov	r1, r4
 8013b68:	f10a 0008 	add.w	r0, sl, #8
 8013b6c:	f000 feba 	bl	80148e4 <uxr_get_output_best_effort_stream>
 8013b70:	4604      	mov	r4, r0
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d0ee      	beq.n	8013b54 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b76:	4649      	mov	r1, r9
 8013b78:	4632      	mov	r2, r6
 8013b7a:	f006 fc63 	bl	801a444 <uxr_prepare_best_effort_buffer_to_write>
 8013b7e:	4604      	mov	r4, r0
 8013b80:	e7e1      	b.n	8013b46 <uxr_prepare_stream_to_write_submessage+0x4a>
 8013b82:	bf00      	nop

08013b84 <uxr_init_session_info>:
 8013b84:	0e13      	lsrs	r3, r2, #24
 8013b86:	7043      	strb	r3, [r0, #1]
 8013b88:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8013b8c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013b90:	7001      	strb	r1, [r0, #0]
 8013b92:	70c3      	strb	r3, [r0, #3]
 8013b94:	2109      	movs	r1, #9
 8013b96:	23ff      	movs	r3, #255	@ 0xff
 8013b98:	f880 c002 	strb.w	ip, [r0, #2]
 8013b9c:	7102      	strb	r2, [r0, #4]
 8013b9e:	80c1      	strh	r1, [r0, #6]
 8013ba0:	7143      	strb	r3, [r0, #5]
 8013ba2:	4770      	bx	lr

08013ba4 <uxr_buffer_create_session>:
 8013ba4:	b530      	push	{r4, r5, lr}
 8013ba6:	b089      	sub	sp, #36	@ 0x24
 8013ba8:	2300      	movs	r3, #0
 8013baa:	4d12      	ldr	r5, [pc, #72]	@ (8013bf4 <uxr_buffer_create_session+0x50>)
 8013bac:	9307      	str	r3, [sp, #28]
 8013bae:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	80c2      	strh	r2, [r0, #6]
 8013bb8:	f88d 2004 	strb.w	r2, [sp, #4]
 8013bbc:	682a      	ldr	r2, [r5, #0]
 8013bbe:	9200      	str	r2, [sp, #0]
 8013bc0:	88aa      	ldrh	r2, [r5, #4]
 8013bc2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013bc6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8013bca:	9202      	str	r2, [sp, #8]
 8013bcc:	460c      	mov	r4, r1
 8013bce:	7802      	ldrb	r2, [r0, #0]
 8013bd0:	9303      	str	r3, [sp, #12]
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	f88d 200c 	strb.w	r2, [sp, #12]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	2210      	movs	r2, #16
 8013bdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013be0:	9306      	str	r3, [sp, #24]
 8013be2:	f000 febb 	bl	801495c <uxr_buffer_submessage_header>
 8013be6:	4669      	mov	r1, sp
 8013be8:	4620      	mov	r0, r4
 8013bea:	f001 fe47 	bl	801587c <uxr_serialize_CREATE_CLIENT_Payload>
 8013bee:	b009      	add	sp, #36	@ 0x24
 8013bf0:	bd30      	pop	{r4, r5, pc}
 8013bf2:	bf00      	nop
 8013bf4:	0801d338 	.word	0x0801d338

08013bf8 <uxr_buffer_delete_session>:
 8013bf8:	b510      	push	{r4, lr}
 8013bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8013c2c <uxr_buffer_delete_session+0x34>)
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8013c02:	f8ad c006 	strh.w	ip, [sp, #6]
 8013c06:	460c      	mov	r4, r1
 8013c08:	2202      	movs	r2, #2
 8013c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c0e:	80c2      	strh	r2, [r0, #6]
 8013c10:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013c14:	2204      	movs	r2, #4
 8013c16:	2300      	movs	r3, #0
 8013c18:	2103      	movs	r1, #3
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 fe9e 	bl	801495c <uxr_buffer_submessage_header>
 8013c20:	a901      	add	r1, sp, #4
 8013c22:	4620      	mov	r0, r4
 8013c24:	f001 fed0 	bl	80159c8 <uxr_serialize_DELETE_Payload>
 8013c28:	b002      	add	sp, #8
 8013c2a:	bd10      	pop	{r4, pc}
 8013c2c:	0801d338 	.word	0x0801d338

08013c30 <uxr_read_create_session_status>:
 8013c30:	b510      	push	{r4, lr}
 8013c32:	b088      	sub	sp, #32
 8013c34:	4604      	mov	r4, r0
 8013c36:	4608      	mov	r0, r1
 8013c38:	a901      	add	r1, sp, #4
 8013c3a:	f001 fed5 	bl	80159e8 <uxr_deserialize_STATUS_AGENT_Payload>
 8013c3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c42:	7163      	strb	r3, [r4, #5]
 8013c44:	b008      	add	sp, #32
 8013c46:	bd10      	pop	{r4, pc}

08013c48 <uxr_read_delete_session_status>:
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	b084      	sub	sp, #16
 8013c4e:	4608      	mov	r0, r1
 8013c50:	a902      	add	r1, sp, #8
 8013c52:	f001 fef9 	bl	8015a48 <uxr_deserialize_STATUS_Payload>
 8013c56:	88e3      	ldrh	r3, [r4, #6]
 8013c58:	2b02      	cmp	r3, #2
 8013c5a:	d001      	beq.n	8013c60 <uxr_read_delete_session_status+0x18>
 8013c5c:	b004      	add	sp, #16
 8013c5e:	bd10      	pop	{r4, pc}
 8013c60:	f10d 000a 	add.w	r0, sp, #10
 8013c64:	f7fe fe64 	bl	8012930 <uxr_object_id_from_raw>
 8013c68:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013c6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013c70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	2b02      	cmp	r3, #2
 8013c78:	bf04      	itt	eq
 8013c7a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013c7e:	7163      	strbeq	r3, [r4, #5]
 8013c80:	b004      	add	sp, #16
 8013c82:	bd10      	pop	{r4, pc}

08013c84 <uxr_stamp_create_session_header>:
 8013c84:	b510      	push	{r4, lr}
 8013c86:	2208      	movs	r2, #8
 8013c88:	b08a      	sub	sp, #40	@ 0x28
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	eb0d 0002 	add.w	r0, sp, r2
 8013c90:	f7fa fe5a 	bl	800e948 <ucdr_init_buffer>
 8013c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c98:	9400      	str	r4, [sp, #0]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013ca2:	a802      	add	r0, sp, #8
 8013ca4:	f001 f854 	bl	8014d50 <uxr_serialize_message_header>
 8013ca8:	b00a      	add	sp, #40	@ 0x28
 8013caa:	bd10      	pop	{r4, pc}

08013cac <uxr_stamp_session_header>:
 8013cac:	b530      	push	{r4, r5, lr}
 8013cae:	b08d      	sub	sp, #52	@ 0x34
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	460d      	mov	r5, r1
 8013cb4:	9203      	str	r2, [sp, #12]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	a804      	add	r0, sp, #16
 8013cba:	2208      	movs	r2, #8
 8013cbc:	f7fa fe44 	bl	800e948 <ucdr_init_buffer>
 8013cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cc4:	9b03      	ldr	r3, [sp, #12]
 8013cc6:	9400      	str	r4, [sp, #0]
 8013cc8:	462a      	mov	r2, r5
 8013cca:	a804      	add	r0, sp, #16
 8013ccc:	f001 f840 	bl	8014d50 <uxr_serialize_message_header>
 8013cd0:	b00d      	add	sp, #52	@ 0x34
 8013cd2:	bd30      	pop	{r4, r5, pc}

08013cd4 <uxr_read_session_header>:
 8013cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd8:	4607      	mov	r7, r0
 8013cda:	b084      	sub	sp, #16
 8013cdc:	4608      	mov	r0, r1
 8013cde:	460c      	mov	r4, r1
 8013ce0:	4615      	mov	r5, r2
 8013ce2:	461e      	mov	r6, r3
 8013ce4:	f7fa fe60 	bl	800e9a8 <ucdr_buffer_remaining>
 8013ce8:	2808      	cmp	r0, #8
 8013cea:	d803      	bhi.n	8013cf4 <uxr_read_session_header+0x20>
 8013cec:	2000      	movs	r0, #0
 8013cee:	b004      	add	sp, #16
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf4:	f10d 080c 	add.w	r8, sp, #12
 8013cf8:	4633      	mov	r3, r6
 8013cfa:	462a      	mov	r2, r5
 8013cfc:	f8cd 8000 	str.w	r8, [sp]
 8013d00:	4620      	mov	r0, r4
 8013d02:	f10d 010b 	add.w	r1, sp, #11
 8013d06:	f001 f841 	bl	8014d8c <uxr_deserialize_message_header>
 8013d0a:	783a      	ldrb	r2, [r7, #0]
 8013d0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d1eb      	bne.n	8013cec <uxr_read_session_header+0x18>
 8013d14:	061b      	lsls	r3, r3, #24
 8013d16:	d41c      	bmi.n	8013d52 <uxr_read_session_header+0x7e>
 8013d18:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013d1c:	787b      	ldrb	r3, [r7, #1]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d003      	beq.n	8013d2a <uxr_read_session_header+0x56>
 8013d22:	2001      	movs	r0, #1
 8013d24:	f080 0001 	eor.w	r0, r0, #1
 8013d28:	e7e1      	b.n	8013cee <uxr_read_session_header+0x1a>
 8013d2a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013d2e:	78bb      	ldrb	r3, [r7, #2]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	f107 0102 	add.w	r1, r7, #2
 8013d36:	d1f4      	bne.n	8013d22 <uxr_read_session_header+0x4e>
 8013d38:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013d3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d1ee      	bne.n	8013d22 <uxr_read_session_header+0x4e>
 8013d44:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013d48:	784b      	ldrb	r3, [r1, #1]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d1e9      	bne.n	8013d22 <uxr_read_session_header+0x4e>
 8013d4e:	2000      	movs	r0, #0
 8013d50:	e7e8      	b.n	8013d24 <uxr_read_session_header+0x50>
 8013d52:	2001      	movs	r0, #1
 8013d54:	e7cb      	b.n	8013cee <uxr_read_session_header+0x1a>
 8013d56:	bf00      	nop

08013d58 <uxr_session_header_offset>:
 8013d58:	f990 3000 	ldrsb.w	r3, [r0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	bfac      	ite	ge
 8013d60:	2008      	movge	r0, #8
 8013d62:	2004      	movlt	r0, #4
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop

08013d68 <uxr_init_base_object_request>:
 8013d68:	b510      	push	{r4, lr}
 8013d6a:	88c3      	ldrh	r3, [r0, #6]
 8013d6c:	b082      	sub	sp, #8
 8013d6e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013d72:	9101      	str	r1, [sp, #4]
 8013d74:	f1a3 010a 	sub.w	r1, r3, #10
 8013d78:	b289      	uxth	r1, r1
 8013d7a:	42a1      	cmp	r1, r4
 8013d7c:	d80e      	bhi.n	8013d9c <uxr_init_base_object_request+0x34>
 8013d7e:	3301      	adds	r3, #1
 8013d80:	b29c      	uxth	r4, r3
 8013d82:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013d86:	b2db      	uxtb	r3, r3
 8013d88:	80c4      	strh	r4, [r0, #6]
 8013d8a:	9801      	ldr	r0, [sp, #4]
 8013d8c:	7011      	strb	r1, [r2, #0]
 8013d8e:	7053      	strb	r3, [r2, #1]
 8013d90:	1c91      	adds	r1, r2, #2
 8013d92:	f7fe fde1 	bl	8012958 <uxr_object_id_to_raw>
 8013d96:	4620      	mov	r0, r4
 8013d98:	b002      	add	sp, #8
 8013d9a:	bd10      	pop	{r4, pc}
 8013d9c:	230a      	movs	r3, #10
 8013d9e:	2100      	movs	r1, #0
 8013da0:	461c      	mov	r4, r3
 8013da2:	e7f1      	b.n	8013d88 <uxr_init_base_object_request+0x20>

08013da4 <uxr_parse_base_object_request>:
 8013da4:	b570      	push	{r4, r5, r6, lr}
 8013da6:	4604      	mov	r4, r0
 8013da8:	3002      	adds	r0, #2
 8013daa:	460d      	mov	r5, r1
 8013dac:	4616      	mov	r6, r2
 8013dae:	f7fe fdbf 	bl	8012930 <uxr_object_id_from_raw>
 8013db2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013db6:	8028      	strh	r0, [r5, #0]
 8013db8:	806b      	strh	r3, [r5, #2]
 8013dba:	7822      	ldrb	r2, [r4, #0]
 8013dbc:	7863      	ldrb	r3, [r4, #1]
 8013dbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013dc2:	8033      	strh	r3, [r6, #0]
 8013dc4:	bd70      	pop	{r4, r5, r6, pc}
 8013dc6:	bf00      	nop

08013dc8 <uxr_init_framing_io>:
 8013dc8:	2300      	movs	r3, #0
 8013dca:	7041      	strb	r1, [r0, #1]
 8013dcc:	7003      	strb	r3, [r0, #0]
 8013dce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013dd0:	4770      	bx	lr
 8013dd2:	bf00      	nop

08013dd4 <uxr_write_framed_msg>:
 8013dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd8:	4617      	mov	r7, r2
 8013dda:	7842      	ldrb	r2, [r0, #1]
 8013ddc:	b083      	sub	sp, #12
 8013dde:	460e      	mov	r6, r1
 8013de0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013de4:	469a      	mov	sl, r3
 8013de6:	2901      	cmp	r1, #1
 8013de8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8013dec:	4604      	mov	r4, r0
 8013dee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013df2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8013df6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013dfa:	f240 8137 	bls.w	801406c <uxr_write_framed_msg+0x298>
 8013dfe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013e02:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013e06:	2901      	cmp	r1, #1
 8013e08:	f04f 0202 	mov.w	r2, #2
 8013e0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e10:	f240 808f 	bls.w	8013f32 <uxr_write_framed_msg+0x15e>
 8013e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e16:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8013e1a:	b2dd      	uxtb	r5, r3
 8013e1c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013e20:	2203      	movs	r2, #3
 8013e22:	2901      	cmp	r1, #1
 8013e24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e28:	f240 809a 	bls.w	8013f60 <uxr_write_framed_msg+0x18c>
 8013e2c:	18a1      	adds	r1, r4, r2
 8013e2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e30:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013e34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013e38:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013e3c:	3201      	adds	r2, #1
 8013e3e:	2801      	cmp	r0, #1
 8013e40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e44:	f240 80a0 	bls.w	8013f88 <uxr_write_framed_msg+0x1b4>
 8013e48:	18a0      	adds	r0, r4, r2
 8013e4a:	3201      	adds	r2, #1
 8013e4c:	b2d2      	uxtb	r2, r2
 8013e4e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013e52:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f000 80a9 	beq.w	8013fae <uxr_write_framed_msg+0x1da>
 8013e5c:	f04f 0900 	mov.w	r9, #0
 8013e60:	46c8      	mov	r8, r9
 8013e62:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013e66:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013e6a:	2901      	cmp	r1, #1
 8013e6c:	f240 80c3 	bls.w	8013ff6 <uxr_write_framed_msg+0x222>
 8013e70:	2a29      	cmp	r2, #41	@ 0x29
 8013e72:	f200 809f 	bhi.w	8013fb4 <uxr_write_framed_msg+0x1e0>
 8013e76:	18a1      	adds	r1, r4, r2
 8013e78:	3201      	adds	r2, #1
 8013e7a:	b2d2      	uxtb	r2, r2
 8013e7c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013e80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013e84:	ea89 0303 	eor.w	r3, r9, r3
 8013e88:	498c      	ldr	r1, [pc, #560]	@ (80140bc <uxr_write_framed_msg+0x2e8>)
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	f108 0801 	add.w	r8, r8, #1
 8013e90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e94:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e9a:	4543      	cmp	r3, r8
 8013e9c:	d8e1      	bhi.n	8013e62 <uxr_write_framed_msg+0x8e>
 8013e9e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013ea2:	fa5f f889 	uxtb.w	r8, r9
 8013ea6:	9301      	str	r3, [sp, #4]
 8013ea8:	f04f 0900 	mov.w	r9, #0
 8013eac:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8013eb0:	fa5f f18a 	uxtb.w	r1, sl
 8013eb4:	2901      	cmp	r1, #1
 8013eb6:	d921      	bls.n	8013efc <uxr_write_framed_msg+0x128>
 8013eb8:	2a29      	cmp	r2, #41	@ 0x29
 8013eba:	f240 80af 	bls.w	801401c <uxr_write_framed_msg+0x248>
 8013ebe:	2500      	movs	r5, #0
 8013ec0:	e000      	b.n	8013ec4 <uxr_write_framed_msg+0xf0>
 8013ec2:	b160      	cbz	r0, 8013ede <uxr_write_framed_msg+0x10a>
 8013ec4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013ec8:	1b52      	subs	r2, r2, r5
 8013eca:	465b      	mov	r3, fp
 8013ecc:	4421      	add	r1, r4
 8013ece:	4638      	mov	r0, r7
 8013ed0:	47b0      	blx	r6
 8013ed2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013ed6:	4405      	add	r5, r0
 8013ed8:	4295      	cmp	r5, r2
 8013eda:	d3f2      	bcc.n	8013ec2 <uxr_write_framed_msg+0xee>
 8013edc:	d003      	beq.n	8013ee6 <uxr_write_framed_msg+0x112>
 8013ede:	2000      	movs	r0, #0
 8013ee0:	b003      	add	sp, #12
 8013ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ee6:	fa5f f18a 	uxtb.w	r1, sl
 8013eea:	f04f 0300 	mov.w	r3, #0
 8013eee:	2901      	cmp	r1, #1
 8013ef0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013ef4:	f04f 0200 	mov.w	r2, #0
 8013ef8:	f200 8090 	bhi.w	801401c <uxr_write_framed_msg+0x248>
 8013efc:	1c51      	adds	r1, r2, #1
 8013efe:	b2c9      	uxtb	r1, r1
 8013f00:	2929      	cmp	r1, #41	@ 0x29
 8013f02:	d8dc      	bhi.n	8013ebe <uxr_write_framed_msg+0xea>
 8013f04:	18a5      	adds	r5, r4, r2
 8013f06:	4421      	add	r1, r4
 8013f08:	3202      	adds	r2, #2
 8013f0a:	f088 0820 	eor.w	r8, r8, #32
 8013f0e:	4648      	mov	r0, r9
 8013f10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013f14:	b2d2      	uxtb	r2, r2
 8013f16:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8013f1a:	f04f 0901 	mov.w	r9, #1
 8013f1e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013f22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f26:	2800      	cmp	r0, #0
 8013f28:	f040 8085 	bne.w	8014036 <uxr_write_framed_msg+0x262>
 8013f2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013f30:	e7bc      	b.n	8013eac <uxr_write_framed_msg+0xd8>
 8013f32:	4611      	mov	r1, r2
 8013f34:	f04f 0c03 	mov.w	ip, #3
 8013f38:	2204      	movs	r2, #4
 8013f3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f3c:	4421      	add	r1, r4
 8013f3e:	b2dd      	uxtb	r5, r3
 8013f40:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013f44:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8013f48:	44a4      	add	ip, r4
 8013f4a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013f4e:	f080 0020 	eor.w	r0, r0, #32
 8013f52:	2901      	cmp	r1, #1
 8013f54:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013f58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f5c:	f63f af66 	bhi.w	8013e2c <uxr_write_framed_msg+0x58>
 8013f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f62:	18a0      	adds	r0, r4, r2
 8013f64:	f085 0520 	eor.w	r5, r5, #32
 8013f68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013f6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013f70:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013f74:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013f78:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013f7c:	3202      	adds	r2, #2
 8013f7e:	2801      	cmp	r0, #1
 8013f80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013f84:	f63f af60 	bhi.w	8013e48 <uxr_write_framed_msg+0x74>
 8013f88:	1c50      	adds	r0, r2, #1
 8013f8a:	18a5      	adds	r5, r4, r2
 8013f8c:	fa54 f080 	uxtab	r0, r4, r0
 8013f90:	3202      	adds	r2, #2
 8013f92:	f081 0120 	eor.w	r1, r1, #32
 8013f96:	b2d2      	uxtb	r2, r2
 8013f98:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013f9c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8013fa0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013fa4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	f47f af57 	bne.w	8013e5c <uxr_write_framed_msg+0x88>
 8013fae:	9301      	str	r3, [sp, #4]
 8013fb0:	4698      	mov	r8, r3
 8013fb2:	e779      	b.n	8013ea8 <uxr_write_framed_msg+0xd4>
 8013fb4:	2500      	movs	r5, #0
 8013fb6:	e001      	b.n	8013fbc <uxr_write_framed_msg+0x1e8>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d090      	beq.n	8013ede <uxr_write_framed_msg+0x10a>
 8013fbc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013fc0:	1b52      	subs	r2, r2, r5
 8013fc2:	465b      	mov	r3, fp
 8013fc4:	4421      	add	r1, r4
 8013fc6:	4638      	mov	r0, r7
 8013fc8:	47b0      	blx	r6
 8013fca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013fce:	4405      	add	r5, r0
 8013fd0:	4295      	cmp	r5, r2
 8013fd2:	d3f1      	bcc.n	8013fb8 <uxr_write_framed_msg+0x1e4>
 8013fd4:	d183      	bne.n	8013ede <uxr_write_framed_msg+0x10a>
 8013fd6:	f04f 0300 	mov.w	r3, #0
 8013fda:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013fe0:	4543      	cmp	r3, r8
 8013fe2:	d964      	bls.n	80140ae <uxr_write_framed_msg+0x2da>
 8013fe4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013fe8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8013fec:	2901      	cmp	r1, #1
 8013fee:	f04f 0200 	mov.w	r2, #0
 8013ff2:	f63f af3d 	bhi.w	8013e70 <uxr_write_framed_msg+0x9c>
 8013ff6:	1c51      	adds	r1, r2, #1
 8013ff8:	b2c9      	uxtb	r1, r1
 8013ffa:	2929      	cmp	r1, #41	@ 0x29
 8013ffc:	d8da      	bhi.n	8013fb4 <uxr_write_framed_msg+0x1e0>
 8013ffe:	18a0      	adds	r0, r4, r2
 8014000:	4421      	add	r1, r4
 8014002:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014006:	3202      	adds	r2, #2
 8014008:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801400c:	b2d2      	uxtb	r2, r2
 801400e:	f083 0020 	eor.w	r0, r3, #32
 8014012:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014016:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801401a:	e733      	b.n	8013e84 <uxr_write_framed_msg+0xb0>
 801401c:	18a1      	adds	r1, r4, r2
 801401e:	3201      	adds	r2, #1
 8014020:	4648      	mov	r0, r9
 8014022:	b2d2      	uxtb	r2, r2
 8014024:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014028:	f04f 0901 	mov.w	r9, #1
 801402c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014030:	2800      	cmp	r0, #0
 8014032:	f43f af7b 	beq.w	8013f2c <uxr_write_framed_msg+0x158>
 8014036:	2500      	movs	r5, #0
 8014038:	e002      	b.n	8014040 <uxr_write_framed_msg+0x26c>
 801403a:	2800      	cmp	r0, #0
 801403c:	f43f af4f 	beq.w	8013ede <uxr_write_framed_msg+0x10a>
 8014040:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014044:	1b52      	subs	r2, r2, r5
 8014046:	465b      	mov	r3, fp
 8014048:	4421      	add	r1, r4
 801404a:	4638      	mov	r0, r7
 801404c:	47b0      	blx	r6
 801404e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014052:	4405      	add	r5, r0
 8014054:	4295      	cmp	r5, r2
 8014056:	d3f0      	bcc.n	801403a <uxr_write_framed_msg+0x266>
 8014058:	f47f af41 	bne.w	8013ede <uxr_write_framed_msg+0x10a>
 801405c:	2300      	movs	r3, #0
 801405e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014064:	b298      	uxth	r0, r3
 8014066:	b003      	add	sp, #12
 8014068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406c:	217d      	movs	r1, #125	@ 0x7d
 801406e:	f082 0220 	eor.w	r2, r2, #32
 8014072:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014076:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801407a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801407e:	2901      	cmp	r1, #1
 8014080:	f04f 0203 	mov.w	r2, #3
 8014084:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014088:	d804      	bhi.n	8014094 <uxr_write_framed_msg+0x2c0>
 801408a:	4611      	mov	r1, r2
 801408c:	f04f 0c04 	mov.w	ip, #4
 8014090:	2205      	movs	r2, #5
 8014092:	e752      	b.n	8013f3a <uxr_write_framed_msg+0x166>
 8014094:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014096:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801409a:	b2dd      	uxtb	r5, r3
 801409c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80140a0:	2204      	movs	r2, #4
 80140a2:	2901      	cmp	r1, #1
 80140a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80140a8:	f63f aec0 	bhi.w	8013e2c <uxr_write_framed_msg+0x58>
 80140ac:	e758      	b.n	8013f60 <uxr_write_framed_msg+0x18c>
 80140ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80140b2:	fa5f f889 	uxtb.w	r8, r9
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	2200      	movs	r2, #0
 80140ba:	e6f5      	b.n	8013ea8 <uxr_write_framed_msg+0xd4>
 80140bc:	0801e15c 	.word	0x0801e15c

080140c0 <uxr_framing_read_transport>:
 80140c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c4:	4604      	mov	r4, r0
 80140c6:	b083      	sub	sp, #12
 80140c8:	461f      	mov	r7, r3
 80140ca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80140ce:	4689      	mov	r9, r1
 80140d0:	4692      	mov	sl, r2
 80140d2:	f000 fc89 	bl	80149e8 <uxr_millis>
 80140d6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80140da:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80140de:	42b3      	cmp	r3, r6
 80140e0:	4680      	mov	r8, r0
 80140e2:	d061      	beq.n	80141a8 <uxr_framing_read_transport+0xe8>
 80140e4:	d81c      	bhi.n	8014120 <uxr_framing_read_transport+0x60>
 80140e6:	1e75      	subs	r5, r6, #1
 80140e8:	1aed      	subs	r5, r5, r3
 80140ea:	b2ed      	uxtb	r5, r5
 80140ec:	2600      	movs	r6, #0
 80140ee:	455d      	cmp	r5, fp
 80140f0:	d81f      	bhi.n	8014132 <uxr_framing_read_transport+0x72>
 80140f2:	19ab      	adds	r3, r5, r6
 80140f4:	455b      	cmp	r3, fp
 80140f6:	bf84      	itt	hi
 80140f8:	ebab 0605 	subhi.w	r6, fp, r5
 80140fc:	b2f6      	uxtbhi	r6, r6
 80140fe:	b9ed      	cbnz	r5, 801413c <uxr_framing_read_transport+0x7c>
 8014100:	f04f 0b00 	mov.w	fp, #0
 8014104:	f000 fc70 	bl	80149e8 <uxr_millis>
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	eba0 0808 	sub.w	r8, r0, r8
 801410e:	eba3 0308 	sub.w	r3, r3, r8
 8014112:	4658      	mov	r0, fp
 8014114:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014118:	603b      	str	r3, [r7, #0]
 801411a:	b003      	add	sp, #12
 801411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014120:	2e00      	cmp	r6, #0
 8014122:	d049      	beq.n	80141b8 <uxr_framing_read_transport+0xf8>
 8014124:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014128:	b2ed      	uxtb	r5, r5
 801412a:	3e01      	subs	r6, #1
 801412c:	455d      	cmp	r5, fp
 801412e:	b2f6      	uxtb	r6, r6
 8014130:	d9df      	bls.n	80140f2 <uxr_framing_read_transport+0x32>
 8014132:	fa5f f58b 	uxtb.w	r5, fp
 8014136:	2600      	movs	r6, #0
 8014138:	2d00      	cmp	r5, #0
 801413a:	d0e1      	beq.n	8014100 <uxr_framing_read_transport+0x40>
 801413c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014140:	3102      	adds	r1, #2
 8014142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	4421      	add	r1, r4
 801414a:	462a      	mov	r2, r5
 801414c:	4650      	mov	r0, sl
 801414e:	47c8      	blx	r9
 8014150:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014154:	4a1a      	ldr	r2, [pc, #104]	@ (80141c0 <uxr_framing_read_transport+0x100>)
 8014156:	4403      	add	r3, r0
 8014158:	0859      	lsrs	r1, r3, #1
 801415a:	fba2 2101 	umull	r2, r1, r2, r1
 801415e:	0889      	lsrs	r1, r1, #2
 8014160:	222a      	movs	r2, #42	@ 0x2a
 8014162:	fb02 3111 	mls	r1, r2, r1, r3
 8014166:	4683      	mov	fp, r0
 8014168:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801416c:	2800      	cmp	r0, #0
 801416e:	d0c7      	beq.n	8014100 <uxr_framing_read_transport+0x40>
 8014170:	42a8      	cmp	r0, r5
 8014172:	d1c7      	bne.n	8014104 <uxr_framing_read_transport+0x44>
 8014174:	2e00      	cmp	r6, #0
 8014176:	d0c5      	beq.n	8014104 <uxr_framing_read_transport+0x44>
 8014178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801417a:	9300      	str	r3, [sp, #0]
 801417c:	3102      	adds	r1, #2
 801417e:	4632      	mov	r2, r6
 8014180:	4421      	add	r1, r4
 8014182:	2300      	movs	r3, #0
 8014184:	4650      	mov	r0, sl
 8014186:	47c8      	blx	r9
 8014188:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801418c:	4a0c      	ldr	r2, [pc, #48]	@ (80141c0 <uxr_framing_read_transport+0x100>)
 801418e:	180b      	adds	r3, r1, r0
 8014190:	0859      	lsrs	r1, r3, #1
 8014192:	fba2 1201 	umull	r1, r2, r2, r1
 8014196:	0892      	lsrs	r2, r2, #2
 8014198:	212a      	movs	r1, #42	@ 0x2a
 801419a:	fb01 3312 	mls	r3, r1, r2, r3
 801419e:	eb00 0b05 	add.w	fp, r0, r5
 80141a2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80141a6:	e7ad      	b.n	8014104 <uxr_framing_read_transport+0x44>
 80141a8:	2600      	movs	r6, #0
 80141aa:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80141ae:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80141b0:	d9bf      	bls.n	8014132 <uxr_framing_read_transport+0x72>
 80141b2:	2102      	movs	r1, #2
 80141b4:	2529      	movs	r5, #41	@ 0x29
 80141b6:	e7c4      	b.n	8014142 <uxr_framing_read_transport+0x82>
 80141b8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80141bc:	b2ed      	uxtb	r5, r5
 80141be:	e796      	b.n	80140ee <uxr_framing_read_transport+0x2e>
 80141c0:	30c30c31 	.word	0x30c30c31

080141c4 <uxr_read_framed_msg>:
 80141c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c8:	461e      	mov	r6, r3
 80141ca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80141ce:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80141d2:	429d      	cmp	r5, r3
 80141d4:	b083      	sub	sp, #12
 80141d6:	4604      	mov	r4, r0
 80141d8:	4688      	mov	r8, r1
 80141da:	4691      	mov	r9, r2
 80141dc:	f000 8188 	beq.w	80144f0 <uxr_read_framed_msg+0x32c>
 80141e0:	7823      	ldrb	r3, [r4, #0]
 80141e2:	4dc1      	ldr	r5, [pc, #772]	@ (80144e8 <uxr_read_framed_msg+0x324>)
 80141e4:	4fc1      	ldr	r7, [pc, #772]	@ (80144ec <uxr_read_framed_msg+0x328>)
 80141e6:	2b07      	cmp	r3, #7
 80141e8:	d8fd      	bhi.n	80141e6 <uxr_read_framed_msg+0x22>
 80141ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80141ee:	0115      	.short	0x0115
 80141f0:	00d600f6 	.word	0x00d600f6
 80141f4:	009000b9 	.word	0x009000b9
 80141f8:	0030004d 	.word	0x0030004d
 80141fc:	0008      	.short	0x0008
 80141fe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014202:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014206:	4299      	cmp	r1, r3
 8014208:	f000 814a 	beq.w	80144a0 <uxr_read_framed_msg+0x2dc>
 801420c:	18e2      	adds	r2, r4, r3
 801420e:	7892      	ldrb	r2, [r2, #2]
 8014210:	2a7d      	cmp	r2, #125	@ 0x7d
 8014212:	f000 8199 	beq.w	8014548 <uxr_read_framed_msg+0x384>
 8014216:	3301      	adds	r3, #1
 8014218:	0858      	lsrs	r0, r3, #1
 801421a:	fba5 1000 	umull	r1, r0, r5, r0
 801421e:	0880      	lsrs	r0, r0, #2
 8014220:	212a      	movs	r1, #42	@ 0x2a
 8014222:	fb01 3310 	mls	r3, r1, r0, r3
 8014226:	2a7e      	cmp	r2, #126	@ 0x7e
 8014228:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801422c:	f000 8252 	beq.w	80146d4 <uxr_read_framed_msg+0x510>
 8014230:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014232:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014234:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014238:	b29b      	uxth	r3, r3
 801423a:	2200      	movs	r2, #0
 801423c:	4299      	cmp	r1, r3
 801423e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014240:	7022      	strb	r2, [r4, #0]
 8014242:	f000 8179 	beq.w	8014538 <uxr_read_framed_msg+0x374>
 8014246:	2000      	movs	r0, #0
 8014248:	b003      	add	sp, #12
 801424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014252:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014256:	4299      	cmp	r1, r3
 8014258:	f000 8131 	beq.w	80144be <uxr_read_framed_msg+0x2fa>
 801425c:	18e2      	adds	r2, r4, r3
 801425e:	7890      	ldrb	r0, [r2, #2]
 8014260:	287d      	cmp	r0, #125	@ 0x7d
 8014262:	f000 8190 	beq.w	8014586 <uxr_read_framed_msg+0x3c2>
 8014266:	3301      	adds	r3, #1
 8014268:	085a      	lsrs	r2, r3, #1
 801426a:	fba5 1202 	umull	r1, r2, r5, r2
 801426e:	0892      	lsrs	r2, r2, #2
 8014270:	212a      	movs	r1, #42	@ 0x2a
 8014272:	fb01 3312 	mls	r3, r1, r2, r3
 8014276:	287e      	cmp	r0, #126	@ 0x7e
 8014278:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801427c:	f000 821a 	beq.w	80146b4 <uxr_read_framed_msg+0x4f0>
 8014280:	2307      	movs	r3, #7
 8014282:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014284:	7023      	strb	r3, [r4, #0]
 8014286:	e7ae      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 8014288:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801428a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801428e:	459e      	cmp	lr, r3
 8014290:	d938      	bls.n	8014304 <uxr_read_framed_msg+0x140>
 8014292:	ee07 8a90 	vmov	s15, r8
 8014296:	212a      	movs	r1, #42	@ 0x2a
 8014298:	e020      	b.n	80142dc <uxr_read_framed_msg+0x118>
 801429a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801429e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80142a2:	f000 80d4 	beq.w	801444e <uxr_read_framed_msg+0x28a>
 80142a6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80142aa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80142ae:	f000 8219 	beq.w	80146e4 <uxr_read_framed_msg+0x520>
 80142b2:	f806 c003 	strb.w	ip, [r6, r3]
 80142b6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80142ba:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80142bc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80142c0:	ea8a 000c 	eor.w	r0, sl, ip
 80142c4:	b2c0      	uxtb	r0, r0
 80142c6:	3301      	adds	r3, #1
 80142c8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80142d2:	4573      	cmp	r3, lr
 80142d4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80142d6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80142d8:	f080 8120 	bcs.w	801451c <uxr_read_framed_msg+0x358>
 80142dc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80142e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80142e4:	f100 0c01 	add.w	ip, r0, #1
 80142e8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80142ec:	fba5 8202 	umull	r8, r2, r5, r2
 80142f0:	0892      	lsrs	r2, r2, #2
 80142f2:	4582      	cmp	sl, r0
 80142f4:	eb04 0b00 	add.w	fp, r4, r0
 80142f8:	fb01 c212 	mls	r2, r1, r2, ip
 80142fc:	d1cd      	bne.n	801429a <uxr_read_framed_msg+0xd6>
 80142fe:	ee17 8a90 	vmov	r8, s15
 8014302:	459e      	cmp	lr, r3
 8014304:	f040 8111 	bne.w	801452a <uxr_read_framed_msg+0x366>
 8014308:	2306      	movs	r3, #6
 801430a:	7023      	strb	r3, [r4, #0]
 801430c:	e76b      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 801430e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014312:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014316:	4298      	cmp	r0, r3
 8014318:	f000 80c2 	beq.w	80144a0 <uxr_read_framed_msg+0x2dc>
 801431c:	18e2      	adds	r2, r4, r3
 801431e:	7891      	ldrb	r1, [r2, #2]
 8014320:	297d      	cmp	r1, #125	@ 0x7d
 8014322:	f000 814c 	beq.w	80145be <uxr_read_framed_msg+0x3fa>
 8014326:	3301      	adds	r3, #1
 8014328:	085a      	lsrs	r2, r3, #1
 801432a:	fba5 0202 	umull	r0, r2, r5, r2
 801432e:	0892      	lsrs	r2, r2, #2
 8014330:	202a      	movs	r0, #42	@ 0x2a
 8014332:	fb00 3312 	mls	r3, r0, r2, r3
 8014336:	297e      	cmp	r1, #126	@ 0x7e
 8014338:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801433c:	f000 81ca 	beq.w	80146d4 <uxr_read_framed_msg+0x510>
 8014340:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014342:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014346:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014348:	b29b      	uxth	r3, r3
 801434a:	2000      	movs	r0, #0
 801434c:	428b      	cmp	r3, r1
 801434e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014350:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014352:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014354:	f240 80df 	bls.w	8014516 <uxr_read_framed_msg+0x352>
 8014358:	7020      	strb	r0, [r4, #0]
 801435a:	b003      	add	sp, #12
 801435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014360:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014364:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014368:	4299      	cmp	r1, r3
 801436a:	f000 80a8 	beq.w	80144be <uxr_read_framed_msg+0x2fa>
 801436e:	18e2      	adds	r2, r4, r3
 8014370:	7890      	ldrb	r0, [r2, #2]
 8014372:	287d      	cmp	r0, #125	@ 0x7d
 8014374:	f000 8164 	beq.w	8014640 <uxr_read_framed_msg+0x47c>
 8014378:	3301      	adds	r3, #1
 801437a:	085a      	lsrs	r2, r3, #1
 801437c:	fba5 1202 	umull	r1, r2, r5, r2
 8014380:	0892      	lsrs	r2, r2, #2
 8014382:	212a      	movs	r1, #42	@ 0x2a
 8014384:	fb01 3312 	mls	r3, r1, r2, r3
 8014388:	287e      	cmp	r0, #126	@ 0x7e
 801438a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801438e:	f000 8191 	beq.w	80146b4 <uxr_read_framed_msg+0x4f0>
 8014392:	2304      	movs	r3, #4
 8014394:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014396:	7023      	strb	r3, [r4, #0]
 8014398:	e725      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 801439a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801439e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80143a2:	4290      	cmp	r0, r2
 80143a4:	f000 80b3 	beq.w	801450e <uxr_read_framed_msg+0x34a>
 80143a8:	18a3      	adds	r3, r4, r2
 80143aa:	7899      	ldrb	r1, [r3, #2]
 80143ac:	297d      	cmp	r1, #125	@ 0x7d
 80143ae:	f000 8164 	beq.w	801467a <uxr_read_framed_msg+0x4b6>
 80143b2:	3201      	adds	r2, #1
 80143b4:	0850      	lsrs	r0, r2, #1
 80143b6:	fba5 3000 	umull	r3, r0, r5, r0
 80143ba:	0880      	lsrs	r0, r0, #2
 80143bc:	232a      	movs	r3, #42	@ 0x2a
 80143be:	fb03 2210 	mls	r2, r3, r0, r2
 80143c2:	297e      	cmp	r1, #126	@ 0x7e
 80143c4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80143c8:	f000 8188 	beq.w	80146dc <uxr_read_framed_msg+0x518>
 80143cc:	7863      	ldrb	r3, [r4, #1]
 80143ce:	428b      	cmp	r3, r1
 80143d0:	bf0c      	ite	eq
 80143d2:	2303      	moveq	r3, #3
 80143d4:	2300      	movne	r3, #0
 80143d6:	7023      	strb	r3, [r4, #0]
 80143d8:	e705      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 80143da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80143de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80143e2:	2200      	movs	r2, #0
 80143e4:	4299      	cmp	r1, r3
 80143e6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80143ea:	d06c      	beq.n	80144c6 <uxr_read_framed_msg+0x302>
 80143ec:	18e2      	adds	r2, r4, r3
 80143ee:	7890      	ldrb	r0, [r2, #2]
 80143f0:	287d      	cmp	r0, #125	@ 0x7d
 80143f2:	f000 8101 	beq.w	80145f8 <uxr_read_framed_msg+0x434>
 80143f6:	3301      	adds	r3, #1
 80143f8:	085a      	lsrs	r2, r3, #1
 80143fa:	fba5 1202 	umull	r1, r2, r5, r2
 80143fe:	0892      	lsrs	r2, r2, #2
 8014400:	212a      	movs	r1, #42	@ 0x2a
 8014402:	fb01 3312 	mls	r3, r1, r2, r3
 8014406:	287e      	cmp	r0, #126	@ 0x7e
 8014408:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801440c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014410:	d059      	beq.n	80144c6 <uxr_read_framed_msg+0x302>
 8014412:	2302      	movs	r3, #2
 8014414:	7023      	strb	r3, [r4, #0]
 8014416:	e6e6      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 8014418:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801441c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014420:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014424:	1c51      	adds	r1, r2, #1
 8014426:	084b      	lsrs	r3, r1, #1
 8014428:	fba5 c303 	umull	ip, r3, r5, r3
 801442c:	089b      	lsrs	r3, r3, #2
 801442e:	fb0e 1313 	mls	r3, lr, r3, r1
 8014432:	4592      	cmp	sl, r2
 8014434:	eb04 0002 	add.w	r0, r4, r2
 8014438:	b2da      	uxtb	r2, r3
 801443a:	f43f af04 	beq.w	8014246 <uxr_read_framed_msg+0x82>
 801443e:	7883      	ldrb	r3, [r0, #2]
 8014440:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014444:	2b7e      	cmp	r3, #126	@ 0x7e
 8014446:	d1ed      	bne.n	8014424 <uxr_read_framed_msg+0x260>
 8014448:	2301      	movs	r3, #1
 801444a:	7023      	strb	r3, [r4, #0]
 801444c:	e6cb      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 801444e:	f100 0c01 	add.w	ip, r0, #1
 8014452:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014456:	fba5 8202 	umull	r8, r2, r5, r2
 801445a:	0892      	lsrs	r2, r2, #2
 801445c:	fb01 c212 	mls	r2, r1, r2, ip
 8014460:	eb04 0c02 	add.w	ip, r4, r2
 8014464:	b2d2      	uxtb	r2, r2
 8014466:	4592      	cmp	sl, r2
 8014468:	f100 0002 	add.w	r0, r0, #2
 801446c:	f43f af47 	beq.w	80142fe <uxr_read_framed_msg+0x13a>
 8014470:	0842      	lsrs	r2, r0, #1
 8014472:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014476:	fba5 8202 	umull	r8, r2, r5, r2
 801447a:	0892      	lsrs	r2, r2, #2
 801447c:	fb01 0012 	mls	r0, r1, r2, r0
 8014480:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014484:	f08a 0c20 	eor.w	ip, sl, #32
 8014488:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801448c:	f47f af11 	bne.w	80142b2 <uxr_read_framed_msg+0xee>
 8014490:	459e      	cmp	lr, r3
 8014492:	ee17 8a90 	vmov	r8, s15
 8014496:	f43f af37 	beq.w	8014308 <uxr_read_framed_msg+0x144>
 801449a:	2301      	movs	r3, #1
 801449c:	7023      	strb	r3, [r4, #0]
 801449e:	e6a2      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 80144a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	2301      	movs	r3, #1
 80144a6:	9301      	str	r3, [sp, #4]
 80144a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144aa:	464a      	mov	r2, r9
 80144ac:	4641      	mov	r1, r8
 80144ae:	4620      	mov	r0, r4
 80144b0:	f7ff fe06 	bl	80140c0 <uxr_framing_read_transport>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	f43f aec6 	beq.w	8014246 <uxr_read_framed_msg+0x82>
 80144ba:	7823      	ldrb	r3, [r4, #0]
 80144bc:	e693      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 80144be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c0:	9300      	str	r3, [sp, #0]
 80144c2:	2302      	movs	r3, #2
 80144c4:	e7ef      	b.n	80144a6 <uxr_read_framed_msg+0x2e2>
 80144c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	2304      	movs	r3, #4
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	464a      	mov	r2, r9
 80144d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144d2:	4641      	mov	r1, r8
 80144d4:	4620      	mov	r0, r4
 80144d6:	f7ff fdf3 	bl	80140c0 <uxr_framing_read_transport>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d1ed      	bne.n	80144ba <uxr_read_framed_msg+0x2f6>
 80144de:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80144e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80144e4:	d0e9      	beq.n	80144ba <uxr_read_framed_msg+0x2f6>
 80144e6:	e6ae      	b.n	8014246 <uxr_read_framed_msg+0x82>
 80144e8:	30c30c31 	.word	0x30c30c31
 80144ec:	0801e15c 	.word	0x0801e15c
 80144f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144f2:	9300      	str	r3, [sp, #0]
 80144f4:	2305      	movs	r3, #5
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144fa:	f7ff fde1 	bl	80140c0 <uxr_framing_read_transport>
 80144fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014502:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014506:	429a      	cmp	r2, r3
 8014508:	f43f ae9d 	beq.w	8014246 <uxr_read_framed_msg+0x82>
 801450c:	e668      	b.n	80141e0 <uxr_read_framed_msg+0x1c>
 801450e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	2303      	movs	r3, #3
 8014514:	e7c7      	b.n	80144a6 <uxr_read_framed_msg+0x2e2>
 8014516:	2305      	movs	r3, #5
 8014518:	7023      	strb	r3, [r4, #0]
 801451a:	e664      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 801451c:	ee17 8a90 	vmov	r8, s15
 8014520:	f43f aef2 	beq.w	8014308 <uxr_read_framed_msg+0x144>
 8014524:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014528:	d08e      	beq.n	8014448 <uxr_read_framed_msg+0x284>
 801452a:	ebae 0303 	sub.w	r3, lr, r3
 801452e:	3302      	adds	r3, #2
 8014530:	9301      	str	r3, [sp, #4]
 8014532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	e7b7      	b.n	80144a8 <uxr_read_framed_msg+0x2e4>
 8014538:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801453a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801453e:	7013      	strb	r3, [r2, #0]
 8014540:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014542:	b003      	add	sp, #12
 8014544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014548:	f103 0c01 	add.w	ip, r3, #1
 801454c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014550:	fba5 0202 	umull	r0, r2, r5, r2
 8014554:	0892      	lsrs	r2, r2, #2
 8014556:	202a      	movs	r0, #42	@ 0x2a
 8014558:	fb00 c212 	mls	r2, r0, r2, ip
 801455c:	fa5f fc82 	uxtb.w	ip, r2
 8014560:	4561      	cmp	r1, ip
 8014562:	d09d      	beq.n	80144a0 <uxr_read_framed_msg+0x2dc>
 8014564:	3302      	adds	r3, #2
 8014566:	4422      	add	r2, r4
 8014568:	0859      	lsrs	r1, r3, #1
 801456a:	7892      	ldrb	r2, [r2, #2]
 801456c:	fba5 c101 	umull	ip, r1, r5, r1
 8014570:	0889      	lsrs	r1, r1, #2
 8014572:	fb00 3311 	mls	r3, r0, r1, r3
 8014576:	2a7e      	cmp	r2, #126	@ 0x7e
 8014578:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801457c:	f000 80aa 	beq.w	80146d4 <uxr_read_framed_msg+0x510>
 8014580:	f082 0220 	eor.w	r2, r2, #32
 8014584:	e654      	b.n	8014230 <uxr_read_framed_msg+0x6c>
 8014586:	1c58      	adds	r0, r3, #1
 8014588:	0842      	lsrs	r2, r0, #1
 801458a:	fba5 c202 	umull	ip, r2, r5, r2
 801458e:	0892      	lsrs	r2, r2, #2
 8014590:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014594:	fb0c 0212 	mls	r2, ip, r2, r0
 8014598:	b2d0      	uxtb	r0, r2
 801459a:	4281      	cmp	r1, r0
 801459c:	d08f      	beq.n	80144be <uxr_read_framed_msg+0x2fa>
 801459e:	4422      	add	r2, r4
 80145a0:	3302      	adds	r3, #2
 80145a2:	7890      	ldrb	r0, [r2, #2]
 80145a4:	085a      	lsrs	r2, r3, #1
 80145a6:	fba5 1202 	umull	r1, r2, r5, r2
 80145aa:	0892      	lsrs	r2, r2, #2
 80145ac:	fb0c 3312 	mls	r3, ip, r2, r3
 80145b0:	287e      	cmp	r0, #126	@ 0x7e
 80145b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145b6:	d07d      	beq.n	80146b4 <uxr_read_framed_msg+0x4f0>
 80145b8:	f080 0020 	eor.w	r0, r0, #32
 80145bc:	e660      	b.n	8014280 <uxr_read_framed_msg+0xbc>
 80145be:	1c59      	adds	r1, r3, #1
 80145c0:	084a      	lsrs	r2, r1, #1
 80145c2:	fba5 c202 	umull	ip, r2, r5, r2
 80145c6:	0892      	lsrs	r2, r2, #2
 80145c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80145cc:	fb0c 1212 	mls	r2, ip, r2, r1
 80145d0:	b2d1      	uxtb	r1, r2
 80145d2:	4288      	cmp	r0, r1
 80145d4:	f43f af64 	beq.w	80144a0 <uxr_read_framed_msg+0x2dc>
 80145d8:	4422      	add	r2, r4
 80145da:	3302      	adds	r3, #2
 80145dc:	7891      	ldrb	r1, [r2, #2]
 80145de:	085a      	lsrs	r2, r3, #1
 80145e0:	fba5 0202 	umull	r0, r2, r5, r2
 80145e4:	0892      	lsrs	r2, r2, #2
 80145e6:	fb0c 3312 	mls	r3, ip, r2, r3
 80145ea:	297e      	cmp	r1, #126	@ 0x7e
 80145ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80145f0:	d070      	beq.n	80146d4 <uxr_read_framed_msg+0x510>
 80145f2:	f081 0120 	eor.w	r1, r1, #32
 80145f6:	e6a3      	b.n	8014340 <uxr_read_framed_msg+0x17c>
 80145f8:	f103 0c01 	add.w	ip, r3, #1
 80145fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014600:	fba5 0202 	umull	r0, r2, r5, r2
 8014604:	0892      	lsrs	r2, r2, #2
 8014606:	202a      	movs	r0, #42	@ 0x2a
 8014608:	fb00 c212 	mls	r2, r0, r2, ip
 801460c:	fa5f fc82 	uxtb.w	ip, r2
 8014610:	4561      	cmp	r1, ip
 8014612:	f43f af58 	beq.w	80144c6 <uxr_read_framed_msg+0x302>
 8014616:	4422      	add	r2, r4
 8014618:	3302      	adds	r3, #2
 801461a:	7891      	ldrb	r1, [r2, #2]
 801461c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014620:	085a      	lsrs	r2, r3, #1
 8014622:	fba5 c202 	umull	ip, r2, r5, r2
 8014626:	0892      	lsrs	r2, r2, #2
 8014628:	fb00 3312 	mls	r3, r0, r2, r3
 801462c:	297e      	cmp	r1, #126	@ 0x7e
 801462e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014632:	f43f af48 	beq.w	80144c6 <uxr_read_framed_msg+0x302>
 8014636:	f081 0120 	eor.w	r1, r1, #32
 801463a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801463e:	e6e8      	b.n	8014412 <uxr_read_framed_msg+0x24e>
 8014640:	1c58      	adds	r0, r3, #1
 8014642:	0842      	lsrs	r2, r0, #1
 8014644:	fba5 c202 	umull	ip, r2, r5, r2
 8014648:	0892      	lsrs	r2, r2, #2
 801464a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801464e:	fb0c 0212 	mls	r2, ip, r2, r0
 8014652:	b2d0      	uxtb	r0, r2
 8014654:	4281      	cmp	r1, r0
 8014656:	f43f af32 	beq.w	80144be <uxr_read_framed_msg+0x2fa>
 801465a:	4422      	add	r2, r4
 801465c:	3302      	adds	r3, #2
 801465e:	7890      	ldrb	r0, [r2, #2]
 8014660:	085a      	lsrs	r2, r3, #1
 8014662:	fba5 1202 	umull	r1, r2, r5, r2
 8014666:	0892      	lsrs	r2, r2, #2
 8014668:	fb0c 3312 	mls	r3, ip, r2, r3
 801466c:	287e      	cmp	r0, #126	@ 0x7e
 801466e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014672:	d01f      	beq.n	80146b4 <uxr_read_framed_msg+0x4f0>
 8014674:	f080 0020 	eor.w	r0, r0, #32
 8014678:	e68b      	b.n	8014392 <uxr_read_framed_msg+0x1ce>
 801467a:	1c51      	adds	r1, r2, #1
 801467c:	084b      	lsrs	r3, r1, #1
 801467e:	fba5 c303 	umull	ip, r3, r5, r3
 8014682:	089b      	lsrs	r3, r3, #2
 8014684:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014688:	fb0c 1313 	mls	r3, ip, r3, r1
 801468c:	b2d9      	uxtb	r1, r3
 801468e:	4288      	cmp	r0, r1
 8014690:	f43f af3d 	beq.w	801450e <uxr_read_framed_msg+0x34a>
 8014694:	3202      	adds	r2, #2
 8014696:	4423      	add	r3, r4
 8014698:	0850      	lsrs	r0, r2, #1
 801469a:	789b      	ldrb	r3, [r3, #2]
 801469c:	fba5 1000 	umull	r1, r0, r5, r0
 80146a0:	0880      	lsrs	r0, r0, #2
 80146a2:	fb0c 2210 	mls	r2, ip, r0, r2
 80146a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80146a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80146ac:	d016      	beq.n	80146dc <uxr_read_framed_msg+0x518>
 80146ae:	f083 0120 	eor.w	r1, r3, #32
 80146b2:	e68b      	b.n	80143cc <uxr_read_framed_msg+0x208>
 80146b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146b6:	9300      	str	r3, [sp, #0]
 80146b8:	2302      	movs	r3, #2
 80146ba:	9301      	str	r3, [sp, #4]
 80146bc:	464a      	mov	r2, r9
 80146be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80146c0:	4641      	mov	r1, r8
 80146c2:	4620      	mov	r0, r4
 80146c4:	f7ff fcfc 	bl	80140c0 <uxr_framing_read_transport>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	f47f aef6 	bne.w	80144ba <uxr_read_framed_msg+0x2f6>
 80146ce:	2301      	movs	r3, #1
 80146d0:	7023      	strb	r3, [r4, #0]
 80146d2:	e588      	b.n	80141e6 <uxr_read_framed_msg+0x22>
 80146d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	2301      	movs	r3, #1
 80146da:	e7ee      	b.n	80146ba <uxr_read_framed_msg+0x4f6>
 80146dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	2303      	movs	r3, #3
 80146e2:	e7ea      	b.n	80146ba <uxr_read_framed_msg+0x4f6>
 80146e4:	ee17 8a90 	vmov	r8, s15
 80146e8:	e6ae      	b.n	8014448 <uxr_read_framed_msg+0x284>
 80146ea:	bf00      	nop

080146ec <uxr_stream_id>:
 80146ec:	2901      	cmp	r1, #1
 80146ee:	b082      	sub	sp, #8
 80146f0:	d01d      	beq.n	801472e <uxr_stream_id+0x42>
 80146f2:	2902      	cmp	r1, #2
 80146f4:	f04f 0c00 	mov.w	ip, #0
 80146f8:	d01e      	beq.n	8014738 <uxr_stream_id+0x4c>
 80146fa:	2300      	movs	r3, #0
 80146fc:	f36c 0307 	bfi	r3, ip, #0, #8
 8014700:	f360 230f 	bfi	r3, r0, #8, #8
 8014704:	f361 4317 	bfi	r3, r1, #16, #8
 8014708:	f362 631f 	bfi	r3, r2, #24, #8
 801470c:	b2da      	uxtb	r2, r3
 801470e:	2000      	movs	r0, #0
 8014710:	f362 0007 	bfi	r0, r2, #0, #8
 8014714:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014718:	f362 200f 	bfi	r0, r2, #8, #8
 801471c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014720:	f362 4017 	bfi	r0, r2, #16, #8
 8014724:	0e1b      	lsrs	r3, r3, #24
 8014726:	f363 601f 	bfi	r0, r3, #24, #8
 801472a:	b002      	add	sp, #8
 801472c:	4770      	bx	lr
 801472e:	f100 0c01 	add.w	ip, r0, #1
 8014732:	fa5f fc8c 	uxtb.w	ip, ip
 8014736:	e7e0      	b.n	80146fa <uxr_stream_id+0xe>
 8014738:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801473c:	e7dd      	b.n	80146fa <uxr_stream_id+0xe>
 801473e:	bf00      	nop

08014740 <uxr_stream_id_from_raw>:
 8014740:	b082      	sub	sp, #8
 8014742:	b130      	cbz	r0, 8014752 <uxr_stream_id_from_raw+0x12>
 8014744:	0603      	lsls	r3, r0, #24
 8014746:	d420      	bmi.n	801478a <uxr_stream_id_from_raw+0x4a>
 8014748:	1e42      	subs	r2, r0, #1
 801474a:	b2d2      	uxtb	r2, r2
 801474c:	f04f 0c01 	mov.w	ip, #1
 8014750:	e001      	b.n	8014756 <uxr_stream_id_from_raw+0x16>
 8014752:	4684      	mov	ip, r0
 8014754:	4602      	mov	r2, r0
 8014756:	2300      	movs	r3, #0
 8014758:	f360 0307 	bfi	r3, r0, #0, #8
 801475c:	f362 230f 	bfi	r3, r2, #8, #8
 8014760:	f36c 4317 	bfi	r3, ip, #16, #8
 8014764:	f361 631f 	bfi	r3, r1, #24, #8
 8014768:	b2da      	uxtb	r2, r3
 801476a:	2000      	movs	r0, #0
 801476c:	f362 0007 	bfi	r0, r2, #0, #8
 8014770:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014774:	f362 200f 	bfi	r0, r2, #8, #8
 8014778:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801477c:	f362 4017 	bfi	r0, r2, #16, #8
 8014780:	0e1b      	lsrs	r3, r3, #24
 8014782:	f363 601f 	bfi	r0, r3, #24, #8
 8014786:	b002      	add	sp, #8
 8014788:	4770      	bx	lr
 801478a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801478e:	f04f 0c02 	mov.w	ip, #2
 8014792:	e7e0      	b.n	8014756 <uxr_stream_id_from_raw+0x16>

08014794 <uxr_init_stream_storage>:
 8014794:	2300      	movs	r3, #0
 8014796:	7403      	strb	r3, [r0, #16]
 8014798:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801479c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80147a0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop

080147a8 <uxr_reset_stream_storage>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	7c03      	ldrb	r3, [r0, #16]
 80147ac:	4604      	mov	r4, r0
 80147ae:	b153      	cbz	r3, 80147c6 <uxr_reset_stream_storage+0x1e>
 80147b0:	4606      	mov	r6, r0
 80147b2:	2500      	movs	r5, #0
 80147b4:	4630      	mov	r0, r6
 80147b6:	f005 fe3f 	bl	801a438 <uxr_reset_output_best_effort_stream>
 80147ba:	7c23      	ldrb	r3, [r4, #16]
 80147bc:	3501      	adds	r5, #1
 80147be:	42ab      	cmp	r3, r5
 80147c0:	f106 0610 	add.w	r6, r6, #16
 80147c4:	d8f6      	bhi.n	80147b4 <uxr_reset_stream_storage+0xc>
 80147c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80147ca:	b163      	cbz	r3, 80147e6 <uxr_reset_stream_storage+0x3e>
 80147cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80147d0:	2500      	movs	r5, #0
 80147d2:	4630      	mov	r0, r6
 80147d4:	f005 fc32 	bl	801a03c <uxr_reset_input_best_effort_stream>
 80147d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80147dc:	3501      	adds	r5, #1
 80147de:	42ab      	cmp	r3, r5
 80147e0:	f106 0602 	add.w	r6, r6, #2
 80147e4:	d8f5      	bhi.n	80147d2 <uxr_reset_stream_storage+0x2a>
 80147e6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80147ea:	b163      	cbz	r3, 8014806 <uxr_reset_stream_storage+0x5e>
 80147ec:	f104 0618 	add.w	r6, r4, #24
 80147f0:	2500      	movs	r5, #0
 80147f2:	4630      	mov	r0, r6
 80147f4:	f005 fecc 	bl	801a590 <uxr_reset_output_reliable_stream>
 80147f8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80147fc:	3501      	adds	r5, #1
 80147fe:	42ab      	cmp	r3, r5
 8014800:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8014804:	d8f5      	bhi.n	80147f2 <uxr_reset_stream_storage+0x4a>
 8014806:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801480a:	b163      	cbz	r3, 8014826 <uxr_reset_stream_storage+0x7e>
 801480c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014810:	2500      	movs	r5, #0
 8014812:	4630      	mov	r0, r6
 8014814:	f005 fc86 	bl	801a124 <uxr_reset_input_reliable_stream>
 8014818:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801481c:	3501      	adds	r5, #1
 801481e:	42ab      	cmp	r3, r5
 8014820:	f106 0618 	add.w	r6, r6, #24
 8014824:	d8f5      	bhi.n	8014812 <uxr_reset_stream_storage+0x6a>
 8014826:	bd70      	pop	{r4, r5, r6, pc}

08014828 <uxr_add_output_best_effort_buffer>:
 8014828:	b510      	push	{r4, lr}
 801482a:	7c04      	ldrb	r4, [r0, #16]
 801482c:	f104 0c01 	add.w	ip, r4, #1
 8014830:	b082      	sub	sp, #8
 8014832:	f880 c010 	strb.w	ip, [r0, #16]
 8014836:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801483a:	f005 fdf3 	bl	801a424 <uxr_init_output_best_effort_stream>
 801483e:	2201      	movs	r2, #1
 8014840:	4611      	mov	r1, r2
 8014842:	4620      	mov	r0, r4
 8014844:	b002      	add	sp, #8
 8014846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801484a:	f7ff bf4f 	b.w	80146ec <uxr_stream_id>
 801484e:	bf00      	nop

08014850 <uxr_add_output_reliable_buffer>:
 8014850:	b510      	push	{r4, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	4684      	mov	ip, r0
 8014856:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801485a:	9000      	str	r0, [sp, #0]
 801485c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014860:	2028      	movs	r0, #40	@ 0x28
 8014862:	fb00 c004 	mla	r0, r0, r4, ip
 8014866:	f104 0e01 	add.w	lr, r4, #1
 801486a:	3018      	adds	r0, #24
 801486c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014870:	f005 fe56 	bl	801a520 <uxr_init_output_reliable_stream>
 8014874:	2201      	movs	r2, #1
 8014876:	2102      	movs	r1, #2
 8014878:	4620      	mov	r0, r4
 801487a:	b004      	add	sp, #16
 801487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014880:	f7ff bf34 	b.w	80146ec <uxr_stream_id>

08014884 <uxr_add_input_best_effort_buffer>:
 8014884:	b510      	push	{r4, lr}
 8014886:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801488a:	4603      	mov	r3, r0
 801488c:	1c62      	adds	r2, r4, #1
 801488e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8014892:	b082      	sub	sp, #8
 8014894:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801489c:	f005 fbca 	bl	801a034 <uxr_init_input_best_effort_stream>
 80148a0:	2200      	movs	r2, #0
 80148a2:	2101      	movs	r1, #1
 80148a4:	4620      	mov	r0, r4
 80148a6:	b002      	add	sp, #8
 80148a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148ac:	f7ff bf1e 	b.w	80146ec <uxr_stream_id>

080148b0 <uxr_add_input_reliable_buffer>:
 80148b0:	b510      	push	{r4, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	4684      	mov	ip, r0
 80148b6:	9806      	ldr	r0, [sp, #24]
 80148b8:	9000      	str	r0, [sp, #0]
 80148ba:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80148be:	2018      	movs	r0, #24
 80148c0:	fb00 c004 	mla	r0, r0, r4, ip
 80148c4:	f104 0e01 	add.w	lr, r4, #1
 80148c8:	3048      	adds	r0, #72	@ 0x48
 80148ca:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80148ce:	f005 fbfd 	bl	801a0cc <uxr_init_input_reliable_stream>
 80148d2:	2200      	movs	r2, #0
 80148d4:	2102      	movs	r1, #2
 80148d6:	4620      	mov	r0, r4
 80148d8:	b004      	add	sp, #16
 80148da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148de:	f7ff bf05 	b.w	80146ec <uxr_stream_id>
 80148e2:	bf00      	nop

080148e4 <uxr_get_output_best_effort_stream>:
 80148e4:	7c03      	ldrb	r3, [r0, #16]
 80148e6:	428b      	cmp	r3, r1
 80148e8:	bf8c      	ite	hi
 80148ea:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80148ee:	2000      	movls	r0, #0
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop

080148f4 <uxr_get_output_reliable_stream>:
 80148f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80148f8:	428b      	cmp	r3, r1
 80148fa:	bf83      	ittte	hi
 80148fc:	2328      	movhi	r3, #40	@ 0x28
 80148fe:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014902:	3018      	addhi	r0, #24
 8014904:	2000      	movls	r0, #0
 8014906:	4770      	bx	lr

08014908 <uxr_get_input_best_effort_stream>:
 8014908:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801490c:	428b      	cmp	r3, r1
 801490e:	bf86      	itte	hi
 8014910:	3121      	addhi	r1, #33	@ 0x21
 8014912:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014916:	2000      	movls	r0, #0
 8014918:	4770      	bx	lr
 801491a:	bf00      	nop

0801491c <uxr_get_input_reliable_stream>:
 801491c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014920:	428b      	cmp	r3, r1
 8014922:	bf83      	ittte	hi
 8014924:	2318      	movhi	r3, #24
 8014926:	fb03 0001 	mlahi	r0, r3, r1, r0
 801492a:	3048      	addhi	r0, #72	@ 0x48
 801492c:	2000      	movls	r0, #0
 801492e:	4770      	bx	lr

08014930 <uxr_output_streams_confirmed>:
 8014930:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014934:	b183      	cbz	r3, 8014958 <uxr_output_streams_confirmed+0x28>
 8014936:	b570      	push	{r4, r5, r6, lr}
 8014938:	4606      	mov	r6, r0
 801493a:	f100 0518 	add.w	r5, r0, #24
 801493e:	2400      	movs	r4, #0
 8014940:	e001      	b.n	8014946 <uxr_output_streams_confirmed+0x16>
 8014942:	3528      	adds	r5, #40	@ 0x28
 8014944:	b138      	cbz	r0, 8014956 <uxr_output_streams_confirmed+0x26>
 8014946:	4628      	mov	r0, r5
 8014948:	f006 f892 	bl	801aa70 <uxr_is_output_up_to_date>
 801494c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014950:	3401      	adds	r4, #1
 8014952:	42a3      	cmp	r3, r4
 8014954:	d8f5      	bhi.n	8014942 <uxr_output_streams_confirmed+0x12>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	2001      	movs	r0, #1
 801495a:	4770      	bx	lr

0801495c <uxr_buffer_submessage_header>:
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495e:	4604      	mov	r4, r0
 8014960:	460e      	mov	r6, r1
 8014962:	2104      	movs	r1, #4
 8014964:	4615      	mov	r5, r2
 8014966:	461f      	mov	r7, r3
 8014968:	f7fa f808 	bl	800e97c <ucdr_align_to>
 801496c:	2301      	movs	r3, #1
 801496e:	ea47 0203 	orr.w	r2, r7, r3
 8014972:	4631      	mov	r1, r6
 8014974:	7523      	strb	r3, [r4, #20]
 8014976:	4620      	mov	r0, r4
 8014978:	462b      	mov	r3, r5
 801497a:	f000 fa27 	bl	8014dcc <uxr_serialize_submessage_header>
 801497e:	4620      	mov	r0, r4
 8014980:	f7fa f812 	bl	800e9a8 <ucdr_buffer_remaining>
 8014984:	42a8      	cmp	r0, r5
 8014986:	bf34      	ite	cc
 8014988:	2000      	movcc	r0, #0
 801498a:	2001      	movcs	r0, #1
 801498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801498e:	bf00      	nop

08014990 <uxr_read_submessage_header>:
 8014990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014994:	4604      	mov	r4, r0
 8014996:	460d      	mov	r5, r1
 8014998:	2104      	movs	r1, #4
 801499a:	4616      	mov	r6, r2
 801499c:	4698      	mov	r8, r3
 801499e:	f7f9 ffed 	bl	800e97c <ucdr_align_to>
 80149a2:	4620      	mov	r0, r4
 80149a4:	f7fa f800 	bl	800e9a8 <ucdr_buffer_remaining>
 80149a8:	2803      	cmp	r0, #3
 80149aa:	bf8c      	ite	hi
 80149ac:	2701      	movhi	r7, #1
 80149ae:	2700      	movls	r7, #0
 80149b0:	d802      	bhi.n	80149b8 <uxr_read_submessage_header+0x28>
 80149b2:	4638      	mov	r0, r7
 80149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b8:	4633      	mov	r3, r6
 80149ba:	4642      	mov	r2, r8
 80149bc:	4620      	mov	r0, r4
 80149be:	4629      	mov	r1, r5
 80149c0:	f000 fa18 	bl	8014df4 <uxr_deserialize_submessage_header>
 80149c4:	f898 3000 	ldrb.w	r3, [r8]
 80149c8:	f003 0201 	and.w	r2, r3, #1
 80149cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80149d0:	f888 3000 	strb.w	r3, [r8]
 80149d4:	7522      	strb	r2, [r4, #20]
 80149d6:	4638      	mov	r0, r7
 80149d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149dc <uxr_submessage_padding>:
 80149dc:	f010 0003 	ands.w	r0, r0, #3
 80149e0:	bf18      	it	ne
 80149e2:	f1c0 0004 	rsbne	r0, r0, #4
 80149e6:	4770      	bx	lr

080149e8 <uxr_millis>:
 80149e8:	b510      	push	{r4, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	4669      	mov	r1, sp
 80149ee:	2001      	movs	r0, #1
 80149f0:	f7ed fe02 	bl	80025f8 <clock_gettime>
 80149f4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80149f8:	4906      	ldr	r1, [pc, #24]	@ (8014a14 <uxr_millis+0x2c>)
 80149fa:	fba0 0301 	umull	r0, r3, r0, r1
 80149fe:	1900      	adds	r0, r0, r4
 8014a00:	fb01 3102 	mla	r1, r1, r2, r3
 8014a04:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014a08:	4a03      	ldr	r2, [pc, #12]	@ (8014a18 <uxr_millis+0x30>)
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	f7ec f8dc 	bl	8000bc8 <__aeabi_ldivmod>
 8014a10:	b004      	add	sp, #16
 8014a12:	bd10      	pop	{r4, pc}
 8014a14:	3b9aca00 	.word	0x3b9aca00
 8014a18:	000f4240 	.word	0x000f4240

08014a1c <uxr_nanos>:
 8014a1c:	b510      	push	{r4, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	4669      	mov	r1, sp
 8014a22:	2001      	movs	r0, #1
 8014a24:	f7ed fde8 	bl	80025f8 <clock_gettime>
 8014a28:	4a06      	ldr	r2, [pc, #24]	@ (8014a44 <uxr_nanos+0x28>)
 8014a2a:	9800      	ldr	r0, [sp, #0]
 8014a2c:	9902      	ldr	r1, [sp, #8]
 8014a2e:	9c01      	ldr	r4, [sp, #4]
 8014a30:	fba0 0302 	umull	r0, r3, r0, r2
 8014a34:	1840      	adds	r0, r0, r1
 8014a36:	fb02 3304 	mla	r3, r2, r4, r3
 8014a3a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8014a3e:	b004      	add	sp, #16
 8014a40:	bd10      	pop	{r4, pc}
 8014a42:	bf00      	nop
 8014a44:	3b9aca00 	.word	0x3b9aca00

08014a48 <on_full_output_buffer_fragmented>:
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	b08a      	sub	sp, #40	@ 0x28
 8014a50:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014a54:	4606      	mov	r6, r0
 8014a56:	f104 0008 	add.w	r0, r4, #8
 8014a5a:	f7ff ff4b 	bl	80148f4 <uxr_get_output_reliable_stream>
 8014a5e:	4605      	mov	r5, r0
 8014a60:	f006 f810 	bl	801aa84 <get_available_free_slots>
 8014a64:	b968      	cbnz	r0, 8014a82 <on_full_output_buffer_fragmented+0x3a>
 8014a66:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	4798      	blx	r3
 8014a6e:	b918      	cbnz	r0, 8014a78 <on_full_output_buffer_fragmented+0x30>
 8014a70:	2001      	movs	r0, #1
 8014a72:	b00a      	add	sp, #40	@ 0x28
 8014a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a78:	4628      	mov	r0, r5
 8014a7a:	f006 f803 	bl	801aa84 <get_available_free_slots>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d0f6      	beq.n	8014a70 <on_full_output_buffer_fragmented+0x28>
 8014a82:	8929      	ldrh	r1, [r5, #8]
 8014a84:	89eb      	ldrh	r3, [r5, #14]
 8014a86:	7b28      	ldrb	r0, [r5, #12]
 8014a88:	686a      	ldr	r2, [r5, #4]
 8014a8a:	fbb2 f8f1 	udiv	r8, r2, r1
 8014a8e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a92:	fb01 3112 	mls	r1, r1, r2, r3
 8014a96:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8014a9a:	b289      	uxth	r1, r1
 8014a9c:	fb08 f101 	mul.w	r1, r8, r1
 8014aa0:	30fc      	adds	r0, #252	@ 0xfc
 8014aa2:	f1a8 0804 	sub.w	r8, r8, #4
 8014aa6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014aaa:	4440      	add	r0, r8
 8014aac:	b287      	uxth	r7, r0
 8014aae:	1bdb      	subs	r3, r3, r7
 8014ab0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8014ab4:	682b      	ldr	r3, [r5, #0]
 8014ab6:	3104      	adds	r1, #4
 8014ab8:	4419      	add	r1, r3
 8014aba:	4642      	mov	r2, r8
 8014abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	a802      	add	r0, sp, #8
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f7f9 ff2d 	bl	800e924 <ucdr_init_buffer_origin_offset>
 8014aca:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014ace:	f102 0308 	add.w	r3, r2, #8
 8014ad2:	4543      	cmp	r3, r8
 8014ad4:	d928      	bls.n	8014b28 <on_full_output_buffer_fragmented+0xe0>
 8014ad6:	463a      	mov	r2, r7
 8014ad8:	2300      	movs	r3, #0
 8014ada:	210d      	movs	r1, #13
 8014adc:	a802      	add	r0, sp, #8
 8014ade:	f7ff ff3d 	bl	801495c <uxr_buffer_submessage_header>
 8014ae2:	8929      	ldrh	r1, [r5, #8]
 8014ae4:	89eb      	ldrh	r3, [r5, #14]
 8014ae6:	fbb3 f2f1 	udiv	r2, r3, r1
 8014aea:	fb01 3312 	mls	r3, r1, r2, r3
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	686a      	ldr	r2, [r5, #4]
 8014af2:	fbb2 f2f1 	udiv	r2, r2, r1
 8014af6:	fb02 f303 	mul.w	r3, r2, r3
 8014afa:	682a      	ldr	r2, [r5, #0]
 8014afc:	f842 8003 	str.w	r8, [r2, r3]
 8014b00:	89e8      	ldrh	r0, [r5, #14]
 8014b02:	2101      	movs	r1, #1
 8014b04:	f005 ffde 	bl	801aac4 <uxr_seq_num_add>
 8014b08:	9904      	ldr	r1, [sp, #16]
 8014b0a:	9a03      	ldr	r2, [sp, #12]
 8014b0c:	81e8      	strh	r0, [r5, #14]
 8014b0e:	1a52      	subs	r2, r2, r1
 8014b10:	4630      	mov	r0, r6
 8014b12:	f7f9 ff19 	bl	800e948 <ucdr_init_buffer>
 8014b16:	4630      	mov	r0, r6
 8014b18:	490f      	ldr	r1, [pc, #60]	@ (8014b58 <on_full_output_buffer_fragmented+0x110>)
 8014b1a:	4622      	mov	r2, r4
 8014b1c:	f7f9 fee8 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8014b20:	2000      	movs	r0, #0
 8014b22:	b00a      	add	sp, #40	@ 0x28
 8014b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b28:	b292      	uxth	r2, r2
 8014b2a:	2302      	movs	r3, #2
 8014b2c:	210d      	movs	r1, #13
 8014b2e:	a802      	add	r0, sp, #8
 8014b30:	f7ff ff14 	bl	801495c <uxr_buffer_submessage_header>
 8014b34:	8928      	ldrh	r0, [r5, #8]
 8014b36:	89eb      	ldrh	r3, [r5, #14]
 8014b38:	fbb3 f1f0 	udiv	r1, r3, r0
 8014b3c:	fb00 3311 	mls	r3, r0, r1, r3
 8014b40:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014b44:	6869      	ldr	r1, [r5, #4]
 8014b46:	fbb1 f1f0 	udiv	r1, r1, r0
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	fb01 f303 	mul.w	r3, r1, r3
 8014b50:	6829      	ldr	r1, [r5, #0]
 8014b52:	3208      	adds	r2, #8
 8014b54:	50ca      	str	r2, [r1, r3]
 8014b56:	e7d3      	b.n	8014b00 <on_full_output_buffer_fragmented+0xb8>
 8014b58:	08014a49 	.word	0x08014a49

08014b5c <uxr_prepare_output_stream>:
 8014b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b5e:	b087      	sub	sp, #28
 8014b60:	2707      	movs	r7, #7
 8014b62:	9202      	str	r2, [sp, #8]
 8014b64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014b66:	9103      	str	r1, [sp, #12]
 8014b68:	2500      	movs	r5, #0
 8014b6a:	3204      	adds	r2, #4
 8014b6c:	e9cd 7500 	strd	r7, r5, [sp]
 8014b70:	461c      	mov	r4, r3
 8014b72:	4606      	mov	r6, r0
 8014b74:	f7fe ffc2 	bl	8013afc <uxr_prepare_stream_to_write_submessage>
 8014b78:	f080 0201 	eor.w	r2, r0, #1
 8014b7c:	b2d2      	uxtb	r2, r2
 8014b7e:	75a2      	strb	r2, [r4, #22]
 8014b80:	b112      	cbz	r2, 8014b88 <uxr_prepare_output_stream+0x2c>
 8014b82:	4628      	mov	r0, r5
 8014b84:	b007      	add	sp, #28
 8014b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b88:	aa05      	add	r2, sp, #20
 8014b8a:	9902      	ldr	r1, [sp, #8]
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f7ff f8eb 	bl	8013d68 <uxr_init_base_object_request>
 8014b92:	a905      	add	r1, sp, #20
 8014b94:	4605      	mov	r5, r0
 8014b96:	4620      	mov	r0, r4
 8014b98:	f000 ffd4 	bl	8015b44 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014b9c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014ba0:	69a6      	ldr	r6, [r4, #24]
 8014ba2:	69e7      	ldr	r7, [r4, #28]
 8014ba4:	1a52      	subs	r2, r2, r1
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f7f9 fece 	bl	800e948 <ucdr_init_buffer>
 8014bac:	4620      	mov	r0, r4
 8014bae:	463a      	mov	r2, r7
 8014bb0:	4631      	mov	r1, r6
 8014bb2:	f7f9 fe9d 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	b007      	add	sp, #28
 8014bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014bbc <uxr_prepare_output_stream_fragmented>:
 8014bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc0:	b091      	sub	sp, #68	@ 0x44
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	9105      	str	r1, [sp, #20]
 8014bc6:	3008      	adds	r0, #8
 8014bc8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014bcc:	461e      	mov	r6, r3
 8014bce:	9204      	str	r2, [sp, #16]
 8014bd0:	f7ff fe90 	bl	80148f4 <uxr_get_output_reliable_stream>
 8014bd4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	f000 8091 	beq.w	8014d00 <uxr_prepare_output_stream_fragmented+0x144>
 8014bde:	4604      	mov	r4, r0
 8014be0:	2800      	cmp	r0, #0
 8014be2:	f000 808d 	beq.w	8014d00 <uxr_prepare_output_stream_fragmented+0x144>
 8014be6:	f005 ff4d 	bl	801aa84 <get_available_free_slots>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	f000 8083 	beq.w	8014cf6 <uxr_prepare_output_stream_fragmented+0x13a>
 8014bf0:	8922      	ldrh	r2, [r4, #8]
 8014bf2:	89e7      	ldrh	r7, [r4, #14]
 8014bf4:	fbb7 f9f2 	udiv	r9, r7, r2
 8014bf8:	fb02 7919 	mls	r9, r2, r9, r7
 8014bfc:	fa1f f989 	uxth.w	r9, r9
 8014c00:	6863      	ldr	r3, [r4, #4]
 8014c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8014c06:	6823      	ldr	r3, [r4, #0]
 8014c08:	9203      	str	r2, [sp, #12]
 8014c0a:	fb02 f909 	mul.w	r9, r2, r9
 8014c0e:	f109 0904 	add.w	r9, r9, #4
 8014c12:	4499      	add	r9, r3
 8014c14:	7b23      	ldrb	r3, [r4, #12]
 8014c16:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014c1a:	4543      	cmp	r3, r8
 8014c1c:	f1a2 0b04 	sub.w	fp, r2, #4
 8014c20:	d37a      	bcc.n	8014d18 <uxr_prepare_output_stream_fragmented+0x15c>
 8014c22:	f1ab 0a04 	sub.w	sl, fp, #4
 8014c26:	ebaa 0a03 	sub.w	sl, sl, r3
 8014c2a:	465a      	mov	r2, fp
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	4649      	mov	r1, r9
 8014c30:	a808      	add	r0, sp, #32
 8014c32:	f8cd 8000 	str.w	r8, [sp]
 8014c36:	f7f9 fe75 	bl	800e924 <ucdr_init_buffer_origin_offset>
 8014c3a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014c3c:	fa1f fa8a 	uxth.w	sl, sl
 8014c40:	4652      	mov	r2, sl
 8014c42:	f103 0a08 	add.w	sl, r3, #8
 8014c46:	45da      	cmp	sl, fp
 8014c48:	bf34      	ite	cc
 8014c4a:	2302      	movcc	r3, #2
 8014c4c:	2300      	movcs	r3, #0
 8014c4e:	210d      	movs	r1, #13
 8014c50:	a808      	add	r0, sp, #32
 8014c52:	f7ff fe83 	bl	801495c <uxr_buffer_submessage_header>
 8014c56:	8921      	ldrh	r1, [r4, #8]
 8014c58:	fbb7 f2f1 	udiv	r2, r7, r1
 8014c5c:	fb01 7212 	mls	r2, r1, r2, r7
 8014c60:	b292      	uxth	r2, r2
 8014c62:	6863      	ldr	r3, [r4, #4]
 8014c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c68:	fb02 f303 	mul.w	r3, r2, r3
 8014c6c:	6822      	ldr	r2, [r4, #0]
 8014c6e:	4638      	mov	r0, r7
 8014c70:	f842 b003 	str.w	fp, [r2, r3]
 8014c74:	2101      	movs	r1, #1
 8014c76:	f005 ff25 	bl	801aac4 <uxr_seq_num_add>
 8014c7a:	9b03      	ldr	r3, [sp, #12]
 8014c7c:	f108 0104 	add.w	r1, r8, #4
 8014c80:	f1a3 0208 	sub.w	r2, r3, #8
 8014c84:	eba2 0208 	sub.w	r2, r2, r8
 8014c88:	4449      	add	r1, r9
 8014c8a:	4607      	mov	r7, r0
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f7f9 fe5b 	bl	800e948 <ucdr_init_buffer>
 8014c92:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014c94:	81e7      	strh	r7, [r4, #14]
 8014c96:	1d1a      	adds	r2, r3, #4
 8014c98:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014c9c:	bf28      	it	cs
 8014c9e:	2200      	movcs	r2, #0
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	b292      	uxth	r2, r2
 8014ca4:	2107      	movs	r1, #7
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f7ff fe58 	bl	801495c <uxr_buffer_submessage_header>
 8014cac:	9904      	ldr	r1, [sp, #16]
 8014cae:	aa07      	add	r2, sp, #28
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	f7ff f859 	bl	8013d68 <uxr_init_base_object_request>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	b318      	cbz	r0, 8014d02 <uxr_prepare_output_stream_fragmented+0x146>
 8014cba:	a907      	add	r1, sp, #28
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f000 ff41 	bl	8015b44 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014cc2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	1a52      	subs	r2, r2, r1
 8014cca:	f7f9 fe3d 	bl	800e948 <ucdr_init_buffer>
 8014cce:	9b05      	ldr	r3, [sp, #20]
 8014cd0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014cd4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014cd6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014cda:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014cdc:	491b      	ldr	r1, [pc, #108]	@ (8014d4c <uxr_prepare_output_stream_fragmented+0x190>)
 8014cde:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8014ce8:	462a      	mov	r2, r5
 8014cea:	f7f9 fe01 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 8014cee:	4620      	mov	r0, r4
 8014cf0:	b011      	add	sp, #68	@ 0x44
 8014cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014cf8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	4798      	blx	r3
 8014cfe:	b920      	cbnz	r0, 8014d0a <uxr_prepare_output_stream_fragmented+0x14e>
 8014d00:	2400      	movs	r4, #0
 8014d02:	4620      	mov	r0, r4
 8014d04:	b011      	add	sp, #68	@ 0x44
 8014d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f005 feba 	bl	801aa84 <get_available_free_slots>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	f47f af6d 	bne.w	8014bf0 <uxr_prepare_output_stream_fragmented+0x34>
 8014d16:	e7f3      	b.n	8014d00 <uxr_prepare_output_stream_fragmented+0x144>
 8014d18:	4638      	mov	r0, r7
 8014d1a:	2101      	movs	r1, #1
 8014d1c:	f005 fed2 	bl	801aac4 <uxr_seq_num_add>
 8014d20:	8921      	ldrh	r1, [r4, #8]
 8014d22:	fbb0 f2f1 	udiv	r2, r0, r1
 8014d26:	fb01 0912 	mls	r9, r1, r2, r0
 8014d2a:	fa1f f289 	uxth.w	r2, r9
 8014d2e:	6863      	ldr	r3, [r4, #4]
 8014d30:	fbb3 f9f1 	udiv	r9, r3, r1
 8014d34:	6823      	ldr	r3, [r4, #0]
 8014d36:	fb02 f909 	mul.w	r9, r2, r9
 8014d3a:	f109 0904 	add.w	r9, r9, #4
 8014d3e:	4499      	add	r9, r3
 8014d40:	4607      	mov	r7, r0
 8014d42:	7b23      	ldrb	r3, [r4, #12]
 8014d44:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014d48:	e76b      	b.n	8014c22 <uxr_prepare_output_stream_fragmented+0x66>
 8014d4a:	bf00      	nop
 8014d4c:	08014a49 	.word	0x08014a49

08014d50 <uxr_serialize_message_header>:
 8014d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d52:	b083      	sub	sp, #12
 8014d54:	4616      	mov	r6, r2
 8014d56:	4604      	mov	r4, r0
 8014d58:	9301      	str	r3, [sp, #4]
 8014d5a:	460d      	mov	r5, r1
 8014d5c:	9f08      	ldr	r7, [sp, #32]
 8014d5e:	f7f8 fb11 	bl	800d384 <ucdr_serialize_uint8_t>
 8014d62:	4631      	mov	r1, r6
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7f8 fb0d 	bl	800d384 <ucdr_serialize_uint8_t>
 8014d6a:	9a01      	ldr	r2, [sp, #4]
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7f8 fbb4 	bl	800d4dc <ucdr_serialize_endian_uint16_t>
 8014d74:	062b      	lsls	r3, r5, #24
 8014d76:	d501      	bpl.n	8014d7c <uxr_serialize_message_header+0x2c>
 8014d78:	b003      	add	sp, #12
 8014d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d7c:	2204      	movs	r2, #4
 8014d7e:	4639      	mov	r1, r7
 8014d80:	4620      	mov	r0, r4
 8014d82:	b003      	add	sp, #12
 8014d84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d88:	f7fd b9a4 	b.w	80120d4 <ucdr_serialize_array_uint8_t>

08014d8c <uxr_deserialize_message_header>:
 8014d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	4616      	mov	r6, r2
 8014d92:	4604      	mov	r4, r0
 8014d94:	9301      	str	r3, [sp, #4]
 8014d96:	460d      	mov	r5, r1
 8014d98:	9f08      	ldr	r7, [sp, #32]
 8014d9a:	f7f8 fb09 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8014d9e:	4631      	mov	r1, r6
 8014da0:	4620      	mov	r0, r4
 8014da2:	f7f8 fb05 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8014da6:	9a01      	ldr	r2, [sp, #4]
 8014da8:	2101      	movs	r1, #1
 8014daa:	4620      	mov	r0, r4
 8014dac:	f7f8 fc8a 	bl	800d6c4 <ucdr_deserialize_endian_uint16_t>
 8014db0:	f995 3000 	ldrsb.w	r3, [r5]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	da01      	bge.n	8014dbc <uxr_deserialize_message_header+0x30>
 8014db8:	b003      	add	sp, #12
 8014dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dbc:	2204      	movs	r2, #4
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	b003      	add	sp, #12
 8014dc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014dc8:	f7fd b9e8 	b.w	801219c <ucdr_deserialize_array_uint8_t>

08014dcc <uxr_serialize_submessage_header>:
 8014dcc:	b530      	push	{r4, r5, lr}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	4615      	mov	r5, r2
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	9301      	str	r3, [sp, #4]
 8014dd6:	f7f8 fad5 	bl	800d384 <ucdr_serialize_uint8_t>
 8014dda:	4629      	mov	r1, r5
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f7f8 fad1 	bl	800d384 <ucdr_serialize_uint8_t>
 8014de2:	9a01      	ldr	r2, [sp, #4]
 8014de4:	2101      	movs	r1, #1
 8014de6:	4620      	mov	r0, r4
 8014de8:	b003      	add	sp, #12
 8014dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dee:	f7f8 bb75 	b.w	800d4dc <ucdr_serialize_endian_uint16_t>
 8014df2:	bf00      	nop

08014df4 <uxr_deserialize_submessage_header>:
 8014df4:	b530      	push	{r4, r5, lr}
 8014df6:	b083      	sub	sp, #12
 8014df8:	4615      	mov	r5, r2
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	9301      	str	r3, [sp, #4]
 8014dfe:	f7f8 fad7 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8014e02:	4629      	mov	r1, r5
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7f8 fad3 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8014e0a:	9a01      	ldr	r2, [sp, #4]
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	4620      	mov	r0, r4
 8014e10:	b003      	add	sp, #12
 8014e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e16:	f7f8 bc55 	b.w	800d6c4 <ucdr_deserialize_endian_uint16_t>
 8014e1a:	bf00      	nop

08014e1c <uxr_serialize_CLIENT_Representation>:
 8014e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e20:	2204      	movs	r2, #4
 8014e22:	460e      	mov	r6, r1
 8014e24:	4605      	mov	r5, r0
 8014e26:	f7fd f955 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	4607      	mov	r7, r0
 8014e2e:	1d31      	adds	r1, r6, #4
 8014e30:	4628      	mov	r0, r5
 8014e32:	f7fd f94f 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014e36:	4038      	ands	r0, r7
 8014e38:	2202      	movs	r2, #2
 8014e3a:	1db1      	adds	r1, r6, #6
 8014e3c:	b2c7      	uxtb	r7, r0
 8014e3e:	4628      	mov	r0, r5
 8014e40:	f7fd f948 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014e44:	2204      	movs	r2, #4
 8014e46:	4007      	ands	r7, r0
 8014e48:	f106 0108 	add.w	r1, r6, #8
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f7fd f941 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014e52:	7b31      	ldrb	r1, [r6, #12]
 8014e54:	4007      	ands	r7, r0
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7f8 fa94 	bl	800d384 <ucdr_serialize_uint8_t>
 8014e5c:	7b71      	ldrb	r1, [r6, #13]
 8014e5e:	4007      	ands	r7, r0
 8014e60:	4628      	mov	r0, r5
 8014e62:	f7f8 fa61 	bl	800d328 <ucdr_serialize_bool>
 8014e66:	7b73      	ldrb	r3, [r6, #13]
 8014e68:	ea07 0800 	and.w	r8, r7, r0
 8014e6c:	b93b      	cbnz	r3, 8014e7e <uxr_serialize_CLIENT_Representation+0x62>
 8014e6e:	8bb1      	ldrh	r1, [r6, #28]
 8014e70:	4628      	mov	r0, r5
 8014e72:	f7f8 fab3 	bl	800d3dc <ucdr_serialize_uint16_t>
 8014e76:	ea08 0000 	and.w	r0, r8, r0
 8014e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e7e:	6931      	ldr	r1, [r6, #16]
 8014e80:	4628      	mov	r0, r5
 8014e82:	f7f8 fc95 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8014e86:	6933      	ldr	r3, [r6, #16]
 8014e88:	b1e3      	cbz	r3, 8014ec4 <uxr_serialize_CLIENT_Representation+0xa8>
 8014e8a:	b1c0      	cbz	r0, 8014ebe <uxr_serialize_CLIENT_Representation+0xa2>
 8014e8c:	4637      	mov	r7, r6
 8014e8e:	f04f 0900 	mov.w	r9, #0
 8014e92:	e001      	b.n	8014e98 <uxr_serialize_CLIENT_Representation+0x7c>
 8014e94:	3708      	adds	r7, #8
 8014e96:	b194      	cbz	r4, 8014ebe <uxr_serialize_CLIENT_Representation+0xa2>
 8014e98:	6979      	ldr	r1, [r7, #20]
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	f005 f8b2 	bl	801a004 <ucdr_serialize_string>
 8014ea0:	69b9      	ldr	r1, [r7, #24]
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	f005 f8ad 	bl	801a004 <ucdr_serialize_string>
 8014eaa:	6933      	ldr	r3, [r6, #16]
 8014eac:	f109 0901 	add.w	r9, r9, #1
 8014eb0:	4004      	ands	r4, r0
 8014eb2:	4599      	cmp	r9, r3
 8014eb4:	b2e4      	uxtb	r4, r4
 8014eb6:	d3ed      	bcc.n	8014e94 <uxr_serialize_CLIENT_Representation+0x78>
 8014eb8:	ea08 0804 	and.w	r8, r8, r4
 8014ebc:	e7d7      	b.n	8014e6e <uxr_serialize_CLIENT_Representation+0x52>
 8014ebe:	f04f 0800 	mov.w	r8, #0
 8014ec2:	e7d4      	b.n	8014e6e <uxr_serialize_CLIENT_Representation+0x52>
 8014ec4:	ea08 0800 	and.w	r8, r8, r0
 8014ec8:	e7d1      	b.n	8014e6e <uxr_serialize_CLIENT_Representation+0x52>
 8014eca:	bf00      	nop

08014ecc <uxr_deserialize_CLIENT_Representation>:
 8014ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ed0:	2204      	movs	r2, #4
 8014ed2:	460c      	mov	r4, r1
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	f7fd f961 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8014eda:	2202      	movs	r2, #2
 8014edc:	4607      	mov	r7, r0
 8014ede:	1d21      	adds	r1, r4, #4
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	f7fd f95b 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8014ee6:	4038      	ands	r0, r7
 8014ee8:	2202      	movs	r2, #2
 8014eea:	1da1      	adds	r1, r4, #6
 8014eec:	b2c6      	uxtb	r6, r0
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7fd f954 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8014ef4:	2204      	movs	r2, #4
 8014ef6:	4006      	ands	r6, r0
 8014ef8:	f104 0108 	add.w	r1, r4, #8
 8014efc:	4628      	mov	r0, r5
 8014efe:	f7fd f94d 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8014f02:	f104 010c 	add.w	r1, r4, #12
 8014f06:	4006      	ands	r6, r0
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f7f8 fa51 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8014f0e:	f104 010d 	add.w	r1, r4, #13
 8014f12:	ea06 0700 	and.w	r7, r6, r0
 8014f16:	4628      	mov	r0, r5
 8014f18:	f7f8 fa1c 	bl	800d354 <ucdr_deserialize_bool>
 8014f1c:	7b63      	ldrb	r3, [r4, #13]
 8014f1e:	4007      	ands	r7, r0
 8014f20:	b93b      	cbnz	r3, 8014f32 <uxr_deserialize_CLIENT_Representation+0x66>
 8014f22:	f104 011c 	add.w	r1, r4, #28
 8014f26:	4628      	mov	r0, r5
 8014f28:	f7f8 fb58 	bl	800d5dc <ucdr_deserialize_uint16_t>
 8014f2c:	4038      	ands	r0, r7
 8014f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f32:	f104 0110 	add.w	r1, r4, #16
 8014f36:	4628      	mov	r0, r5
 8014f38:	f7f8 fd6a 	bl	800da10 <ucdr_deserialize_uint32_t>
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	d903      	bls.n	8014f4a <uxr_deserialize_CLIENT_Representation+0x7e>
 8014f42:	2301      	movs	r3, #1
 8014f44:	75ab      	strb	r3, [r5, #22]
 8014f46:	2700      	movs	r7, #0
 8014f48:	e7eb      	b.n	8014f22 <uxr_deserialize_CLIENT_Representation+0x56>
 8014f4a:	b30b      	cbz	r3, 8014f90 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d0fa      	beq.n	8014f46 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014f50:	46a0      	mov	r8, r4
 8014f52:	f04f 0900 	mov.w	r9, #0
 8014f56:	e001      	b.n	8014f5c <uxr_deserialize_CLIENT_Representation+0x90>
 8014f58:	2e00      	cmp	r6, #0
 8014f5a:	d0f4      	beq.n	8014f46 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014f5c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f64:	4628      	mov	r0, r5
 8014f66:	f005 f85d 	bl	801a024 <ucdr_deserialize_string>
 8014f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f6e:	4606      	mov	r6, r0
 8014f70:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014f74:	4628      	mov	r0, r5
 8014f76:	f005 f855 	bl	801a024 <ucdr_deserialize_string>
 8014f7a:	6923      	ldr	r3, [r4, #16]
 8014f7c:	f109 0901 	add.w	r9, r9, #1
 8014f80:	4006      	ands	r6, r0
 8014f82:	4599      	cmp	r9, r3
 8014f84:	f108 0808 	add.w	r8, r8, #8
 8014f88:	b2f6      	uxtb	r6, r6
 8014f8a:	d3e5      	bcc.n	8014f58 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014f8c:	4037      	ands	r7, r6
 8014f8e:	e7c8      	b.n	8014f22 <uxr_deserialize_CLIENT_Representation+0x56>
 8014f90:	4007      	ands	r7, r0
 8014f92:	e7c6      	b.n	8014f22 <uxr_deserialize_CLIENT_Representation+0x56>

08014f94 <uxr_serialize_AGENT_Representation>:
 8014f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f98:	2204      	movs	r2, #4
 8014f9a:	460f      	mov	r7, r1
 8014f9c:	4605      	mov	r5, r0
 8014f9e:	f7fd f899 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014fa2:	2202      	movs	r2, #2
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	1d39      	adds	r1, r7, #4
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f7fd f893 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014fae:	4020      	ands	r0, r4
 8014fb0:	2202      	movs	r2, #2
 8014fb2:	1db9      	adds	r1, r7, #6
 8014fb4:	b2c4      	uxtb	r4, r0
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	f7fd f88c 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8014fbc:	7a39      	ldrb	r1, [r7, #8]
 8014fbe:	4004      	ands	r4, r0
 8014fc0:	4628      	mov	r0, r5
 8014fc2:	f7f8 f9b1 	bl	800d328 <ucdr_serialize_bool>
 8014fc6:	7a3b      	ldrb	r3, [r7, #8]
 8014fc8:	ea00 0804 	and.w	r8, r0, r4
 8014fcc:	b913      	cbnz	r3, 8014fd4 <uxr_serialize_AGENT_Representation+0x40>
 8014fce:	4640      	mov	r0, r8
 8014fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fd4:	68f9      	ldr	r1, [r7, #12]
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	f7f8 fbea 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	b303      	cbz	r3, 8015022 <uxr_serialize_AGENT_Representation+0x8e>
 8014fe0:	b1d0      	cbz	r0, 8015018 <uxr_serialize_AGENT_Representation+0x84>
 8014fe2:	463e      	mov	r6, r7
 8014fe4:	f04f 0900 	mov.w	r9, #0
 8014fe8:	e001      	b.n	8014fee <uxr_serialize_AGENT_Representation+0x5a>
 8014fea:	3608      	adds	r6, #8
 8014fec:	b1a4      	cbz	r4, 8015018 <uxr_serialize_AGENT_Representation+0x84>
 8014fee:	6931      	ldr	r1, [r6, #16]
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f005 f807 	bl	801a004 <ucdr_serialize_string>
 8014ff6:	6971      	ldr	r1, [r6, #20]
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f005 f802 	bl	801a004 <ucdr_serialize_string>
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f109 0901 	add.w	r9, r9, #1
 8015006:	4004      	ands	r4, r0
 8015008:	4599      	cmp	r9, r3
 801500a:	b2e4      	uxtb	r4, r4
 801500c:	d3ed      	bcc.n	8014fea <uxr_serialize_AGENT_Representation+0x56>
 801500e:	ea08 0804 	and.w	r8, r8, r4
 8015012:	4640      	mov	r0, r8
 8015014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015018:	f04f 0800 	mov.w	r8, #0
 801501c:	4640      	mov	r0, r8
 801501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015022:	ea08 0800 	and.w	r8, r8, r0
 8015026:	e7d2      	b.n	8014fce <uxr_serialize_AGENT_Representation+0x3a>

08015028 <uxr_serialize_DATAWRITER_Representation>:
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	460d      	mov	r5, r1
 801502c:	7809      	ldrb	r1, [r1, #0]
 801502e:	4606      	mov	r6, r0
 8015030:	f7f8 f9a8 	bl	800d384 <ucdr_serialize_uint8_t>
 8015034:	4604      	mov	r4, r0
 8015036:	b130      	cbz	r0, 8015046 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015038:	782b      	ldrb	r3, [r5, #0]
 801503a:	2b02      	cmp	r3, #2
 801503c:	d00c      	beq.n	8015058 <uxr_serialize_DATAWRITER_Representation+0x30>
 801503e:	2b03      	cmp	r3, #3
 8015040:	d010      	beq.n	8015064 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015042:	2b01      	cmp	r3, #1
 8015044:	d008      	beq.n	8015058 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015046:	2202      	movs	r2, #2
 8015048:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801504c:	4630      	mov	r0, r6
 801504e:	f7fd f841 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015052:	4020      	ands	r0, r4
 8015054:	b2c0      	uxtb	r0, r0
 8015056:	bd70      	pop	{r4, r5, r6, pc}
 8015058:	6869      	ldr	r1, [r5, #4]
 801505a:	4630      	mov	r0, r6
 801505c:	f004 ffd2 	bl	801a004 <ucdr_serialize_string>
 8015060:	4604      	mov	r4, r0
 8015062:	e7f0      	b.n	8015046 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015064:	4629      	mov	r1, r5
 8015066:	4630      	mov	r0, r6
 8015068:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801506c:	3104      	adds	r1, #4
 801506e:	f7fd f9cf 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 8015072:	4604      	mov	r4, r0
 8015074:	e7e7      	b.n	8015046 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015076:	bf00      	nop

08015078 <uxr_serialize_ObjectVariant.part.0>:
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	780b      	ldrb	r3, [r1, #0]
 801507c:	3b01      	subs	r3, #1
 801507e:	460c      	mov	r4, r1
 8015080:	4605      	mov	r5, r0
 8015082:	2b0d      	cmp	r3, #13
 8015084:	d854      	bhi.n	8015130 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015086:	e8df f003 	tbb	[pc, r3]
 801508a:	0730      	.short	0x0730
 801508c:	07071b1b 	.word	0x07071b1b
 8015090:	0c530707 	.word	0x0c530707
 8015094:	494e0c0c 	.word	0x494e0c0c
 8015098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801509c:	3104      	adds	r1, #4
 801509e:	f7ff bfc3 	b.w	8015028 <uxr_serialize_DATAWRITER_Representation>
 80150a2:	7909      	ldrb	r1, [r1, #4]
 80150a4:	f7f8 f96e 	bl	800d384 <ucdr_serialize_uint8_t>
 80150a8:	b1e8      	cbz	r0, 80150e6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80150aa:	7923      	ldrb	r3, [r4, #4]
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d001      	beq.n	80150b4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80150b0:	2b02      	cmp	r3, #2
 80150b2:	d13d      	bne.n	8015130 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80150b4:	68a1      	ldr	r1, [r4, #8]
 80150b6:	4628      	mov	r0, r5
 80150b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150bc:	f004 bfa2 	b.w	801a004 <ucdr_serialize_string>
 80150c0:	7909      	ldrb	r1, [r1, #4]
 80150c2:	f7f8 f95f 	bl	800d384 <ucdr_serialize_uint8_t>
 80150c6:	4606      	mov	r6, r0
 80150c8:	b120      	cbz	r0, 80150d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80150ca:	7923      	ldrb	r3, [r4, #4]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d039      	beq.n	8015144 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80150d0:	2b03      	cmp	r3, #3
 80150d2:	d02f      	beq.n	8015134 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80150d4:	2202      	movs	r2, #2
 80150d6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80150da:	4628      	mov	r0, r5
 80150dc:	f7fc fffa 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 80150e0:	4030      	ands	r0, r6
 80150e2:	b2c0      	uxtb	r0, r0
 80150e4:	bd70      	pop	{r4, r5, r6, pc}
 80150e6:	2000      	movs	r0, #0
 80150e8:	bd70      	pop	{r4, r5, r6, pc}
 80150ea:	7909      	ldrb	r1, [r1, #4]
 80150ec:	f7f8 f94a 	bl	800d384 <ucdr_serialize_uint8_t>
 80150f0:	4606      	mov	r6, r0
 80150f2:	b158      	cbz	r0, 801510c <uxr_serialize_ObjectVariant.part.0+0x94>
 80150f4:	7923      	ldrb	r3, [r4, #4]
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	d003      	beq.n	8015102 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80150fa:	2b03      	cmp	r3, #3
 80150fc:	d028      	beq.n	8015150 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d104      	bne.n	801510c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015102:	68a1      	ldr	r1, [r4, #8]
 8015104:	4628      	mov	r0, r5
 8015106:	f004 ff7d 	bl	801a004 <ucdr_serialize_string>
 801510a:	4606      	mov	r6, r0
 801510c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015110:	4628      	mov	r0, r5
 8015112:	f7f8 fe73 	bl	800ddfc <ucdr_serialize_int16_t>
 8015116:	4030      	ands	r0, r6
 8015118:	b2c0      	uxtb	r0, r0
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015120:	3104      	adds	r1, #4
 8015122:	f7ff be7b 	b.w	8014e1c <uxr_serialize_CLIENT_Representation>
 8015126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801512a:	3104      	adds	r1, #4
 801512c:	f7ff bf32 	b.w	8014f94 <uxr_serialize_AGENT_Representation>
 8015130:	2001      	movs	r0, #1
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	68a2      	ldr	r2, [r4, #8]
 8015136:	f104 010c 	add.w	r1, r4, #12
 801513a:	4628      	mov	r0, r5
 801513c:	f7fd f968 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 8015140:	4606      	mov	r6, r0
 8015142:	e7c7      	b.n	80150d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015144:	68a1      	ldr	r1, [r4, #8]
 8015146:	4628      	mov	r0, r5
 8015148:	f004 ff5c 	bl	801a004 <ucdr_serialize_string>
 801514c:	4606      	mov	r6, r0
 801514e:	e7c1      	b.n	80150d4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015150:	68a2      	ldr	r2, [r4, #8]
 8015152:	f104 010c 	add.w	r1, r4, #12
 8015156:	4628      	mov	r0, r5
 8015158:	f7fd f95a 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 801515c:	4606      	mov	r6, r0
 801515e:	e7d5      	b.n	801510c <uxr_serialize_ObjectVariant.part.0+0x94>

08015160 <uxr_deserialize_DATAWRITER_Representation>:
 8015160:	b570      	push	{r4, r5, r6, lr}
 8015162:	4606      	mov	r6, r0
 8015164:	460d      	mov	r5, r1
 8015166:	f7f8 f923 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 801516a:	4604      	mov	r4, r0
 801516c:	b130      	cbz	r0, 801517c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801516e:	782b      	ldrb	r3, [r5, #0]
 8015170:	2b02      	cmp	r3, #2
 8015172:	d00c      	beq.n	801518e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015174:	2b03      	cmp	r3, #3
 8015176:	d012      	beq.n	801519e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015178:	2b01      	cmp	r3, #1
 801517a:	d008      	beq.n	801518e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801517c:	2202      	movs	r2, #2
 801517e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015182:	4630      	mov	r0, r6
 8015184:	f7fd f80a 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015188:	4020      	ands	r0, r4
 801518a:	b2c0      	uxtb	r0, r0
 801518c:	bd70      	pop	{r4, r5, r6, pc}
 801518e:	6869      	ldr	r1, [r5, #4]
 8015190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015194:	4630      	mov	r0, r6
 8015196:	f004 ff45 	bl	801a024 <ucdr_deserialize_string>
 801519a:	4604      	mov	r4, r0
 801519c:	e7ee      	b.n	801517c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801519e:	1d2b      	adds	r3, r5, #4
 80151a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151a4:	f105 0108 	add.w	r1, r5, #8
 80151a8:	4630      	mov	r0, r6
 80151aa:	f7fd f943 	bl	8012434 <ucdr_deserialize_sequence_uint8_t>
 80151ae:	4604      	mov	r4, r0
 80151b0:	e7e4      	b.n	801517c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80151b2:	bf00      	nop

080151b4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	460d      	mov	r5, r1
 80151b8:	7809      	ldrb	r1, [r1, #0]
 80151ba:	4606      	mov	r6, r0
 80151bc:	f7f8 f8b4 	bl	800d328 <ucdr_serialize_bool>
 80151c0:	782b      	ldrb	r3, [r5, #0]
 80151c2:	4604      	mov	r4, r0
 80151c4:	b94b      	cbnz	r3, 80151da <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80151c6:	7a29      	ldrb	r1, [r5, #8]
 80151c8:	4630      	mov	r0, r6
 80151ca:	f7f8 f8ad 	bl	800d328 <ucdr_serialize_bool>
 80151ce:	7a2b      	ldrb	r3, [r5, #8]
 80151d0:	4004      	ands	r4, r0
 80151d2:	b2e4      	uxtb	r4, r4
 80151d4:	b943      	cbnz	r3, 80151e8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80151d6:	4620      	mov	r0, r4
 80151d8:	bd70      	pop	{r4, r5, r6, pc}
 80151da:	6869      	ldr	r1, [r5, #4]
 80151dc:	4630      	mov	r0, r6
 80151de:	f004 ff11 	bl	801a004 <ucdr_serialize_string>
 80151e2:	4004      	ands	r4, r0
 80151e4:	b2e4      	uxtb	r4, r4
 80151e6:	e7ee      	b.n	80151c6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80151e8:	68e9      	ldr	r1, [r5, #12]
 80151ea:	4630      	mov	r0, r6
 80151ec:	f004 ff0a 	bl	801a004 <ucdr_serialize_string>
 80151f0:	4004      	ands	r4, r0
 80151f2:	4620      	mov	r0, r4
 80151f4:	bd70      	pop	{r4, r5, r6, pc}
 80151f6:	bf00      	nop

080151f8 <uxr_serialize_OBJK_Topic_Binary>:
 80151f8:	b570      	push	{r4, r5, r6, lr}
 80151fa:	460d      	mov	r5, r1
 80151fc:	6809      	ldr	r1, [r1, #0]
 80151fe:	4606      	mov	r6, r0
 8015200:	f004 ff00 	bl	801a004 <ucdr_serialize_string>
 8015204:	7929      	ldrb	r1, [r5, #4]
 8015206:	4604      	mov	r4, r0
 8015208:	4630      	mov	r0, r6
 801520a:	f7f8 f88d 	bl	800d328 <ucdr_serialize_bool>
 801520e:	792b      	ldrb	r3, [r5, #4]
 8015210:	4004      	ands	r4, r0
 8015212:	b2e4      	uxtb	r4, r4
 8015214:	b943      	cbnz	r3, 8015228 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015216:	7b29      	ldrb	r1, [r5, #12]
 8015218:	4630      	mov	r0, r6
 801521a:	f7f8 f885 	bl	800d328 <ucdr_serialize_bool>
 801521e:	7b2b      	ldrb	r3, [r5, #12]
 8015220:	4004      	ands	r4, r0
 8015222:	b93b      	cbnz	r3, 8015234 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015224:	4620      	mov	r0, r4
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	68a9      	ldr	r1, [r5, #8]
 801522a:	4630      	mov	r0, r6
 801522c:	f004 feea 	bl	801a004 <ucdr_serialize_string>
 8015230:	4004      	ands	r4, r0
 8015232:	e7f0      	b.n	8015216 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015234:	6929      	ldr	r1, [r5, #16]
 8015236:	4630      	mov	r0, r6
 8015238:	f004 fee4 	bl	801a004 <ucdr_serialize_string>
 801523c:	4004      	ands	r4, r0
 801523e:	b2e4      	uxtb	r4, r4
 8015240:	4620      	mov	r0, r4
 8015242:	bd70      	pop	{r4, r5, r6, pc}

08015244 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015248:	460c      	mov	r4, r1
 801524a:	7809      	ldrb	r1, [r1, #0]
 801524c:	4606      	mov	r6, r0
 801524e:	f7f8 f86b 	bl	800d328 <ucdr_serialize_bool>
 8015252:	7823      	ldrb	r3, [r4, #0]
 8015254:	4605      	mov	r5, r0
 8015256:	b96b      	cbnz	r3, 8015274 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015258:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801525c:	4630      	mov	r0, r6
 801525e:	f7f8 f863 	bl	800d328 <ucdr_serialize_bool>
 8015262:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015266:	4005      	ands	r5, r0
 8015268:	b2ed      	uxtb	r5, r5
 801526a:	2b00      	cmp	r3, #0
 801526c:	d169      	bne.n	8015342 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801526e:	4628      	mov	r0, r5
 8015270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015274:	6861      	ldr	r1, [r4, #4]
 8015276:	4630      	mov	r0, r6
 8015278:	f7f8 fa9a 	bl	800d7b0 <ucdr_serialize_uint32_t>
 801527c:	6863      	ldr	r3, [r4, #4]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d06b      	beq.n	801535a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015282:	2800      	cmp	r0, #0
 8015284:	d067      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015286:	68a1      	ldr	r1, [r4, #8]
 8015288:	4630      	mov	r0, r6
 801528a:	f004 febb 	bl	801a004 <ucdr_serialize_string>
 801528e:	6863      	ldr	r3, [r4, #4]
 8015290:	2b01      	cmp	r3, #1
 8015292:	d953      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015294:	2800      	cmp	r0, #0
 8015296:	d05e      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015298:	68e1      	ldr	r1, [r4, #12]
 801529a:	4630      	mov	r0, r6
 801529c:	f004 feb2 	bl	801a004 <ucdr_serialize_string>
 80152a0:	6863      	ldr	r3, [r4, #4]
 80152a2:	2b02      	cmp	r3, #2
 80152a4:	d94a      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d055      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152aa:	6921      	ldr	r1, [r4, #16]
 80152ac:	4630      	mov	r0, r6
 80152ae:	f004 fea9 	bl	801a004 <ucdr_serialize_string>
 80152b2:	6863      	ldr	r3, [r4, #4]
 80152b4:	2b03      	cmp	r3, #3
 80152b6:	d941      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d04c      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152bc:	6961      	ldr	r1, [r4, #20]
 80152be:	4630      	mov	r0, r6
 80152c0:	f004 fea0 	bl	801a004 <ucdr_serialize_string>
 80152c4:	6863      	ldr	r3, [r4, #4]
 80152c6:	2b04      	cmp	r3, #4
 80152c8:	d938      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152ca:	2800      	cmp	r0, #0
 80152cc:	d043      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152ce:	69a1      	ldr	r1, [r4, #24]
 80152d0:	4630      	mov	r0, r6
 80152d2:	f004 fe97 	bl	801a004 <ucdr_serialize_string>
 80152d6:	6863      	ldr	r3, [r4, #4]
 80152d8:	2b05      	cmp	r3, #5
 80152da:	d92f      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152dc:	2800      	cmp	r0, #0
 80152de:	d03a      	beq.n	8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152e0:	69e1      	ldr	r1, [r4, #28]
 80152e2:	4630      	mov	r0, r6
 80152e4:	f004 fe8e 	bl	801a004 <ucdr_serialize_string>
 80152e8:	6863      	ldr	r3, [r4, #4]
 80152ea:	2b06      	cmp	r3, #6
 80152ec:	d926      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152ee:	b390      	cbz	r0, 8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152f0:	6a21      	ldr	r1, [r4, #32]
 80152f2:	4630      	mov	r0, r6
 80152f4:	f004 fe86 	bl	801a004 <ucdr_serialize_string>
 80152f8:	6863      	ldr	r3, [r4, #4]
 80152fa:	2b07      	cmp	r3, #7
 80152fc:	d91e      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152fe:	b350      	cbz	r0, 8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015300:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015302:	4630      	mov	r0, r6
 8015304:	f004 fe7e 	bl	801a004 <ucdr_serialize_string>
 8015308:	6863      	ldr	r3, [r4, #4]
 801530a:	2b08      	cmp	r3, #8
 801530c:	d916      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801530e:	b310      	cbz	r0, 8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015310:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015312:	4630      	mov	r0, r6
 8015314:	f004 fe76 	bl	801a004 <ucdr_serialize_string>
 8015318:	6863      	ldr	r3, [r4, #4]
 801531a:	2b09      	cmp	r3, #9
 801531c:	d90e      	bls.n	801533c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801531e:	b1d0      	cbz	r0, 8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015320:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015324:	2709      	movs	r7, #9
 8015326:	e000      	b.n	801532a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015328:	b1a8      	cbz	r0, 8015356 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801532a:	f858 1b04 	ldr.w	r1, [r8], #4
 801532e:	4630      	mov	r0, r6
 8015330:	f004 fe68 	bl	801a004 <ucdr_serialize_string>
 8015334:	6862      	ldr	r2, [r4, #4]
 8015336:	3701      	adds	r7, #1
 8015338:	4297      	cmp	r7, r2
 801533a:	d3f5      	bcc.n	8015328 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801533c:	4005      	ands	r5, r0
 801533e:	b2ed      	uxtb	r5, r5
 8015340:	e78a      	b.n	8015258 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015342:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015344:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015348:	4630      	mov	r0, r6
 801534a:	f7fd f861 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 801534e:	4005      	ands	r5, r0
 8015350:	4628      	mov	r0, r5
 8015352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015356:	2500      	movs	r5, #0
 8015358:	e77e      	b.n	8015258 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801535a:	4028      	ands	r0, r5
 801535c:	b2c5      	uxtb	r5, r0
 801535e:	e77b      	b.n	8015258 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015360 <uxr_serialize_OBJK_Publisher_Binary>:
 8015360:	b570      	push	{r4, r5, r6, lr}
 8015362:	460d      	mov	r5, r1
 8015364:	7809      	ldrb	r1, [r1, #0]
 8015366:	4606      	mov	r6, r0
 8015368:	f7f7 ffde 	bl	800d328 <ucdr_serialize_bool>
 801536c:	782b      	ldrb	r3, [r5, #0]
 801536e:	4604      	mov	r4, r0
 8015370:	b94b      	cbnz	r3, 8015386 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015372:	7a29      	ldrb	r1, [r5, #8]
 8015374:	4630      	mov	r0, r6
 8015376:	f7f7 ffd7 	bl	800d328 <ucdr_serialize_bool>
 801537a:	7a2b      	ldrb	r3, [r5, #8]
 801537c:	4004      	ands	r4, r0
 801537e:	b2e4      	uxtb	r4, r4
 8015380:	b943      	cbnz	r3, 8015394 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015382:	4620      	mov	r0, r4
 8015384:	bd70      	pop	{r4, r5, r6, pc}
 8015386:	6869      	ldr	r1, [r5, #4]
 8015388:	4630      	mov	r0, r6
 801538a:	f004 fe3b 	bl	801a004 <ucdr_serialize_string>
 801538e:	4004      	ands	r4, r0
 8015390:	b2e4      	uxtb	r4, r4
 8015392:	e7ee      	b.n	8015372 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015394:	f105 010c 	add.w	r1, r5, #12
 8015398:	4630      	mov	r0, r6
 801539a:	f7ff ff53 	bl	8015244 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801539e:	4004      	ands	r4, r0
 80153a0:	4620      	mov	r0, r4
 80153a2:	bd70      	pop	{r4, r5, r6, pc}

080153a4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80153a4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80153a8:	4688      	mov	r8, r1
 80153aa:	8809      	ldrh	r1, [r1, #0]
 80153ac:	4681      	mov	r9, r0
 80153ae:	f7f8 f815 	bl	800d3dc <ucdr_serialize_uint16_t>
 80153b2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80153b6:	4606      	mov	r6, r0
 80153b8:	4648      	mov	r0, r9
 80153ba:	f7f7 ffb5 	bl	800d328 <ucdr_serialize_bool>
 80153be:	f898 3002 	ldrb.w	r3, [r8, #2]
 80153c2:	4006      	ands	r6, r0
 80153c4:	b2f5      	uxtb	r5, r6
 80153c6:	b9eb      	cbnz	r3, 8015404 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80153c8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80153cc:	4648      	mov	r0, r9
 80153ce:	f7f7 ffab 	bl	800d328 <ucdr_serialize_bool>
 80153d2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80153d6:	4005      	ands	r5, r0
 80153d8:	bb7b      	cbnz	r3, 801543a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80153da:	f898 100c 	ldrb.w	r1, [r8, #12]
 80153de:	4648      	mov	r0, r9
 80153e0:	f7f7 ffa2 	bl	800d328 <ucdr_serialize_bool>
 80153e4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80153e8:	4005      	ands	r5, r0
 80153ea:	b9f3      	cbnz	r3, 801542a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80153ec:	f898 1014 	ldrb.w	r1, [r8, #20]
 80153f0:	4648      	mov	r0, r9
 80153f2:	f7f7 ff99 	bl	800d328 <ucdr_serialize_bool>
 80153f6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80153fa:	4005      	ands	r5, r0
 80153fc:	b94b      	cbnz	r3, 8015412 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80153fe:	4628      	mov	r0, r5
 8015400:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015404:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015408:	4648      	mov	r0, r9
 801540a:	f7f7 ffe7 	bl	800d3dc <ucdr_serialize_uint16_t>
 801540e:	4005      	ands	r5, r0
 8015410:	e7da      	b.n	80153c8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015412:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015416:	f108 011c 	add.w	r1, r8, #28
 801541a:	4648      	mov	r0, r9
 801541c:	f7fc fff8 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 8015420:	4028      	ands	r0, r5
 8015422:	b2c5      	uxtb	r5, r0
 8015424:	4628      	mov	r0, r5
 8015426:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801542a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801542e:	4648      	mov	r0, r9
 8015430:	f7f8 f9be 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8015434:	4028      	ands	r0, r5
 8015436:	b2c5      	uxtb	r5, r0
 8015438:	e7d8      	b.n	80153ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801543a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801543e:	4648      	mov	r0, r9
 8015440:	f7f8 f9b6 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8015444:	4028      	ands	r0, r5
 8015446:	b2c5      	uxtb	r5, r0
 8015448:	e7c7      	b.n	80153da <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801544a:	bf00      	nop

0801544c <uxr_serialize_OBJK_DataWriter_Binary>:
 801544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801544e:	2202      	movs	r2, #2
 8015450:	460d      	mov	r5, r1
 8015452:	4606      	mov	r6, r0
 8015454:	f7fc fe3e 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015458:	78a9      	ldrb	r1, [r5, #2]
 801545a:	4604      	mov	r4, r0
 801545c:	4630      	mov	r0, r6
 801545e:	f7f7 ff63 	bl	800d328 <ucdr_serialize_bool>
 8015462:	78ab      	ldrb	r3, [r5, #2]
 8015464:	4004      	ands	r4, r0
 8015466:	b2e4      	uxtb	r4, r4
 8015468:	b90b      	cbnz	r3, 801546e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801546a:	4620      	mov	r0, r4
 801546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801546e:	f105 0108 	add.w	r1, r5, #8
 8015472:	4630      	mov	r0, r6
 8015474:	f7ff ff96 	bl	80153a4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015478:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801547c:	4607      	mov	r7, r0
 801547e:	4630      	mov	r0, r6
 8015480:	f7f7 ff52 	bl	800d328 <ucdr_serialize_bool>
 8015484:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015488:	4038      	ands	r0, r7
 801548a:	b2c7      	uxtb	r7, r0
 801548c:	b913      	cbnz	r3, 8015494 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801548e:	403c      	ands	r4, r7
 8015490:	4620      	mov	r0, r4
 8015492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015494:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8015498:	4630      	mov	r0, r6
 801549a:	f7f8 fbdf 	bl	800dc5c <ucdr_serialize_uint64_t>
 801549e:	4007      	ands	r7, r0
 80154a0:	e7f5      	b.n	801548e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80154a2:	bf00      	nop

080154a4 <uxr_serialize_OBJK_Replier_Binary>:
 80154a4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80154a8:	460f      	mov	r7, r1
 80154aa:	6809      	ldr	r1, [r1, #0]
 80154ac:	4680      	mov	r8, r0
 80154ae:	f004 fda9 	bl	801a004 <ucdr_serialize_string>
 80154b2:	6879      	ldr	r1, [r7, #4]
 80154b4:	4605      	mov	r5, r0
 80154b6:	4640      	mov	r0, r8
 80154b8:	f004 fda4 	bl	801a004 <ucdr_serialize_string>
 80154bc:	68b9      	ldr	r1, [r7, #8]
 80154be:	4005      	ands	r5, r0
 80154c0:	4640      	mov	r0, r8
 80154c2:	f004 fd9f 	bl	801a004 <ucdr_serialize_string>
 80154c6:	b2ec      	uxtb	r4, r5
 80154c8:	4004      	ands	r4, r0
 80154ca:	7b39      	ldrb	r1, [r7, #12]
 80154cc:	4640      	mov	r0, r8
 80154ce:	f7f7 ff2b 	bl	800d328 <ucdr_serialize_bool>
 80154d2:	7b3b      	ldrb	r3, [r7, #12]
 80154d4:	4004      	ands	r4, r0
 80154d6:	b94b      	cbnz	r3, 80154ec <uxr_serialize_OBJK_Replier_Binary+0x48>
 80154d8:	7d39      	ldrb	r1, [r7, #20]
 80154da:	4640      	mov	r0, r8
 80154dc:	f7f7 ff24 	bl	800d328 <ucdr_serialize_bool>
 80154e0:	7d3b      	ldrb	r3, [r7, #20]
 80154e2:	4004      	ands	r4, r0
 80154e4:	b943      	cbnz	r3, 80154f8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 80154e6:	4620      	mov	r0, r4
 80154e8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80154ec:	6939      	ldr	r1, [r7, #16]
 80154ee:	4640      	mov	r0, r8
 80154f0:	f004 fd88 	bl	801a004 <ucdr_serialize_string>
 80154f4:	4004      	ands	r4, r0
 80154f6:	e7ef      	b.n	80154d8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 80154f8:	69b9      	ldr	r1, [r7, #24]
 80154fa:	4640      	mov	r0, r8
 80154fc:	f004 fd82 	bl	801a004 <ucdr_serialize_string>
 8015500:	4004      	ands	r4, r0
 8015502:	b2e4      	uxtb	r4, r4
 8015504:	4620      	mov	r0, r4
 8015506:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801550a:	bf00      	nop

0801550c <uxr_deserialize_ObjectVariant>:
 801550c:	b570      	push	{r4, r5, r6, lr}
 801550e:	4605      	mov	r5, r0
 8015510:	460e      	mov	r6, r1
 8015512:	f7f7 ff4d 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015516:	b168      	cbz	r0, 8015534 <uxr_deserialize_ObjectVariant+0x28>
 8015518:	7833      	ldrb	r3, [r6, #0]
 801551a:	3b01      	subs	r3, #1
 801551c:	4604      	mov	r4, r0
 801551e:	2b0d      	cmp	r3, #13
 8015520:	d809      	bhi.n	8015536 <uxr_deserialize_ObjectVariant+0x2a>
 8015522:	e8df f003 	tbb	[pc, r3]
 8015526:	0a41      	.short	0x0a41
 8015528:	0a0a2323 	.word	0x0a0a2323
 801552c:	10080a0a 	.word	0x10080a0a
 8015530:	565c1010 	.word	0x565c1010
 8015534:	2400      	movs	r4, #0
 8015536:	4620      	mov	r0, r4
 8015538:	bd70      	pop	{r4, r5, r6, pc}
 801553a:	1d31      	adds	r1, r6, #4
 801553c:	4628      	mov	r0, r5
 801553e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015542:	f7ff be0d 	b.w	8015160 <uxr_deserialize_DATAWRITER_Representation>
 8015546:	1d31      	adds	r1, r6, #4
 8015548:	4628      	mov	r0, r5
 801554a:	f7f7 ff31 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 801554e:	2800      	cmp	r0, #0
 8015550:	d0f0      	beq.n	8015534 <uxr_deserialize_ObjectVariant+0x28>
 8015552:	7933      	ldrb	r3, [r6, #4]
 8015554:	2b01      	cmp	r3, #1
 8015556:	d001      	beq.n	801555c <uxr_deserialize_ObjectVariant+0x50>
 8015558:	2b02      	cmp	r3, #2
 801555a:	d1ec      	bne.n	8015536 <uxr_deserialize_ObjectVariant+0x2a>
 801555c:	68b1      	ldr	r1, [r6, #8]
 801555e:	4628      	mov	r0, r5
 8015560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015568:	f004 bd5c 	b.w	801a024 <ucdr_deserialize_string>
 801556c:	1d31      	adds	r1, r6, #4
 801556e:	4628      	mov	r0, r5
 8015570:	f7f7 ff1e 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015574:	4604      	mov	r4, r0
 8015576:	b170      	cbz	r0, 8015596 <uxr_deserialize_ObjectVariant+0x8a>
 8015578:	7933      	ldrb	r3, [r6, #4]
 801557a:	2b02      	cmp	r3, #2
 801557c:	d04c      	beq.n	8015618 <uxr_deserialize_ObjectVariant+0x10c>
 801557e:	2b03      	cmp	r3, #3
 8015580:	d109      	bne.n	8015596 <uxr_deserialize_ObjectVariant+0x8a>
 8015582:	f106 0308 	add.w	r3, r6, #8
 8015586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801558a:	f106 010c 	add.w	r1, r6, #12
 801558e:	4628      	mov	r0, r5
 8015590:	f7fc ff50 	bl	8012434 <ucdr_deserialize_sequence_uint8_t>
 8015594:	4604      	mov	r4, r0
 8015596:	2202      	movs	r2, #2
 8015598:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801559c:	4628      	mov	r0, r5
 801559e:	f7fc fdfd 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80155a2:	4020      	ands	r0, r4
 80155a4:	b2c4      	uxtb	r4, r0
 80155a6:	e7c6      	b.n	8015536 <uxr_deserialize_ObjectVariant+0x2a>
 80155a8:	1d31      	adds	r1, r6, #4
 80155aa:	4628      	mov	r0, r5
 80155ac:	f7f7 ff00 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 80155b0:	4604      	mov	r4, r0
 80155b2:	b130      	cbz	r0, 80155c2 <uxr_deserialize_ObjectVariant+0xb6>
 80155b4:	7933      	ldrb	r3, [r6, #4]
 80155b6:	2b02      	cmp	r3, #2
 80155b8:	d036      	beq.n	8015628 <uxr_deserialize_ObjectVariant+0x11c>
 80155ba:	2b03      	cmp	r3, #3
 80155bc:	d03c      	beq.n	8015638 <uxr_deserialize_ObjectVariant+0x12c>
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d032      	beq.n	8015628 <uxr_deserialize_ObjectVariant+0x11c>
 80155c2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80155c6:	4628      	mov	r0, r5
 80155c8:	f7f8 fc98 	bl	800defc <ucdr_deserialize_int16_t>
 80155cc:	4020      	ands	r0, r4
 80155ce:	b2c4      	uxtb	r4, r0
 80155d0:	e7b1      	b.n	8015536 <uxr_deserialize_ObjectVariant+0x2a>
 80155d2:	1d31      	adds	r1, r6, #4
 80155d4:	4628      	mov	r0, r5
 80155d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155da:	f7ff bc77 	b.w	8014ecc <uxr_deserialize_CLIENT_Representation>
 80155de:	2204      	movs	r2, #4
 80155e0:	18b1      	adds	r1, r6, r2
 80155e2:	4628      	mov	r0, r5
 80155e4:	f7fc fdda 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80155e8:	2202      	movs	r2, #2
 80155ea:	f106 0108 	add.w	r1, r6, #8
 80155ee:	4604      	mov	r4, r0
 80155f0:	4628      	mov	r0, r5
 80155f2:	f7fc fdd3 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80155f6:	2202      	movs	r2, #2
 80155f8:	4004      	ands	r4, r0
 80155fa:	f106 010a 	add.w	r1, r6, #10
 80155fe:	4628      	mov	r0, r5
 8015600:	f7fc fdcc 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015604:	b2e4      	uxtb	r4, r4
 8015606:	4603      	mov	r3, r0
 8015608:	f106 010c 	add.w	r1, r6, #12
 801560c:	4628      	mov	r0, r5
 801560e:	401c      	ands	r4, r3
 8015610:	f7f7 fea0 	bl	800d354 <ucdr_deserialize_bool>
 8015614:	4004      	ands	r4, r0
 8015616:	e78e      	b.n	8015536 <uxr_deserialize_ObjectVariant+0x2a>
 8015618:	68b1      	ldr	r1, [r6, #8]
 801561a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801561e:	4628      	mov	r0, r5
 8015620:	f004 fd00 	bl	801a024 <ucdr_deserialize_string>
 8015624:	4604      	mov	r4, r0
 8015626:	e7b6      	b.n	8015596 <uxr_deserialize_ObjectVariant+0x8a>
 8015628:	68b1      	ldr	r1, [r6, #8]
 801562a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801562e:	4628      	mov	r0, r5
 8015630:	f004 fcf8 	bl	801a024 <ucdr_deserialize_string>
 8015634:	4604      	mov	r4, r0
 8015636:	e7c4      	b.n	80155c2 <uxr_deserialize_ObjectVariant+0xb6>
 8015638:	f106 0308 	add.w	r3, r6, #8
 801563c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015640:	f106 010c 	add.w	r1, r6, #12
 8015644:	4628      	mov	r0, r5
 8015646:	f7fc fef5 	bl	8012434 <ucdr_deserialize_sequence_uint8_t>
 801564a:	4604      	mov	r4, r0
 801564c:	e7b9      	b.n	80155c2 <uxr_deserialize_ObjectVariant+0xb6>
 801564e:	bf00      	nop

08015650 <uxr_deserialize_BaseObjectRequest>:
 8015650:	b570      	push	{r4, r5, r6, lr}
 8015652:	2202      	movs	r2, #2
 8015654:	4605      	mov	r5, r0
 8015656:	460e      	mov	r6, r1
 8015658:	f7fc fda0 	bl	801219c <ucdr_deserialize_array_uint8_t>
 801565c:	2202      	movs	r2, #2
 801565e:	4604      	mov	r4, r0
 8015660:	18b1      	adds	r1, r6, r2
 8015662:	4628      	mov	r0, r5
 8015664:	f7fc fd9a 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015668:	4020      	ands	r0, r4
 801566a:	b2c0      	uxtb	r0, r0
 801566c:	bd70      	pop	{r4, r5, r6, pc}
 801566e:	bf00      	nop

08015670 <uxr_serialize_ActivityInfoVariant>:
 8015670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015674:	460d      	mov	r5, r1
 8015676:	7809      	ldrb	r1, [r1, #0]
 8015678:	4607      	mov	r7, r0
 801567a:	f7f7 fe83 	bl	800d384 <ucdr_serialize_uint8_t>
 801567e:	4681      	mov	r9, r0
 8015680:	b138      	cbz	r0, 8015692 <uxr_serialize_ActivityInfoVariant+0x22>
 8015682:	782b      	ldrb	r3, [r5, #0]
 8015684:	2b06      	cmp	r3, #6
 8015686:	f000 8082 	beq.w	801578e <uxr_serialize_ActivityInfoVariant+0x11e>
 801568a:	2b0d      	cmp	r3, #13
 801568c:	d016      	beq.n	80156bc <uxr_serialize_ActivityInfoVariant+0x4c>
 801568e:	2b05      	cmp	r3, #5
 8015690:	d002      	beq.n	8015698 <uxr_serialize_ActivityInfoVariant+0x28>
 8015692:	4648      	mov	r0, r9
 8015694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015698:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801569c:	4638      	mov	r0, r7
 801569e:	f7f8 fbad 	bl	800ddfc <ucdr_serialize_int16_t>
 80156a2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80156a6:	4681      	mov	r9, r0
 80156a8:	4638      	mov	r0, r7
 80156aa:	f7f8 fad7 	bl	800dc5c <ucdr_serialize_uint64_t>
 80156ae:	ea09 0000 	and.w	r0, r9, r0
 80156b2:	fa5f f980 	uxtb.w	r9, r0
 80156b6:	4648      	mov	r0, r9
 80156b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156bc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80156c0:	4638      	mov	r0, r7
 80156c2:	f7f8 fb9b 	bl	800ddfc <ucdr_serialize_int16_t>
 80156c6:	68e9      	ldr	r1, [r5, #12]
 80156c8:	4681      	mov	r9, r0
 80156ca:	4638      	mov	r0, r7
 80156cc:	f7f8 f870 	bl	800d7b0 <ucdr_serialize_uint32_t>
 80156d0:	68eb      	ldr	r3, [r5, #12]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d0eb      	beq.n	80156ae <uxr_serialize_ActivityInfoVariant+0x3e>
 80156d6:	b320      	cbz	r0, 8015722 <uxr_serialize_ActivityInfoVariant+0xb2>
 80156d8:	f105 080c 	add.w	r8, r5, #12
 80156dc:	2600      	movs	r6, #0
 80156de:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80156e2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80156e6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80156ea:	4638      	mov	r0, r7
 80156ec:	f7f7 fe4a 	bl	800d384 <ucdr_serialize_uint8_t>
 80156f0:	2800      	cmp	r0, #0
 80156f2:	d053      	beq.n	801579c <uxr_serialize_ActivityInfoVariant+0x12c>
 80156f4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80156f8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80156fc:	0074      	lsls	r4, r6, #1
 80156fe:	00c9      	lsls	r1, r1, #3
 8015700:	2b03      	cmp	r3, #3
 8015702:	d854      	bhi.n	80157ae <uxr_serialize_ActivityInfoVariant+0x13e>
 8015704:	e8df f003 	tbb	[pc, r3]
 8015708:	02102132 	.word	0x02102132
 801570c:	4441      	add	r1, r8
 801570e:	4638      	mov	r0, r7
 8015710:	6889      	ldr	r1, [r1, #8]
 8015712:	f004 fc77 	bl	801a004 <ucdr_serialize_string>
 8015716:	68ea      	ldr	r2, [r5, #12]
 8015718:	3601      	adds	r6, #1
 801571a:	4296      	cmp	r6, r2
 801571c:	d242      	bcs.n	80157a4 <uxr_serialize_ActivityInfoVariant+0x134>
 801571e:	2800      	cmp	r0, #0
 8015720:	d1dd      	bne.n	80156de <uxr_serialize_ActivityInfoVariant+0x6e>
 8015722:	f04f 0900 	mov.w	r9, #0
 8015726:	e7b4      	b.n	8015692 <uxr_serialize_ActivityInfoVariant+0x22>
 8015728:	3108      	adds	r1, #8
 801572a:	4441      	add	r1, r8
 801572c:	2210      	movs	r2, #16
 801572e:	4638      	mov	r0, r7
 8015730:	f7fc fcd0 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015734:	4434      	add	r4, r6
 8015736:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801573a:	4604      	mov	r4, r0
 801573c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801573e:	4638      	mov	r0, r7
 8015740:	f7f8 f836 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8015744:	4020      	ands	r0, r4
 8015746:	b2c0      	uxtb	r0, r0
 8015748:	e7e5      	b.n	8015716 <uxr_serialize_ActivityInfoVariant+0xa6>
 801574a:	3108      	adds	r1, #8
 801574c:	4441      	add	r1, r8
 801574e:	2204      	movs	r2, #4
 8015750:	4638      	mov	r0, r7
 8015752:	f7fc fcbf 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015756:	4434      	add	r4, r6
 8015758:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801575c:	4604      	mov	r4, r0
 801575e:	8b19      	ldrh	r1, [r3, #24]
 8015760:	4638      	mov	r0, r7
 8015762:	f7f7 fe3b 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015766:	4020      	ands	r0, r4
 8015768:	b2c0      	uxtb	r0, r0
 801576a:	e7d4      	b.n	8015716 <uxr_serialize_ActivityInfoVariant+0xa6>
 801576c:	3108      	adds	r1, #8
 801576e:	4441      	add	r1, r8
 8015770:	2202      	movs	r2, #2
 8015772:	4638      	mov	r0, r7
 8015774:	f7fc fcae 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015778:	4434      	add	r4, r6
 801577a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801577e:	4604      	mov	r4, r0
 8015780:	7d99      	ldrb	r1, [r3, #22]
 8015782:	4638      	mov	r0, r7
 8015784:	f7f7 fdfe 	bl	800d384 <ucdr_serialize_uint8_t>
 8015788:	4020      	ands	r0, r4
 801578a:	b2c0      	uxtb	r0, r0
 801578c:	e7c3      	b.n	8015716 <uxr_serialize_ActivityInfoVariant+0xa6>
 801578e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015792:	4638      	mov	r0, r7
 8015794:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015798:	f7f8 bb30 	b.w	800ddfc <ucdr_serialize_int16_t>
 801579c:	68ea      	ldr	r2, [r5, #12]
 801579e:	3601      	adds	r6, #1
 80157a0:	42b2      	cmp	r2, r6
 80157a2:	d8be      	bhi.n	8015722 <uxr_serialize_ActivityInfoVariant+0xb2>
 80157a4:	ea09 0900 	and.w	r9, r9, r0
 80157a8:	fa5f f989 	uxtb.w	r9, r9
 80157ac:	e771      	b.n	8015692 <uxr_serialize_ActivityInfoVariant+0x22>
 80157ae:	68eb      	ldr	r3, [r5, #12]
 80157b0:	3601      	adds	r6, #1
 80157b2:	429e      	cmp	r6, r3
 80157b4:	f10a 0a18 	add.w	sl, sl, #24
 80157b8:	d395      	bcc.n	80156e6 <uxr_serialize_ActivityInfoVariant+0x76>
 80157ba:	e76a      	b.n	8015692 <uxr_serialize_ActivityInfoVariant+0x22>

080157bc <uxr_deserialize_BaseObjectReply>:
 80157bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c0:	2202      	movs	r2, #2
 80157c2:	4606      	mov	r6, r0
 80157c4:	460f      	mov	r7, r1
 80157c6:	f7fc fce9 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80157ca:	2202      	movs	r2, #2
 80157cc:	18b9      	adds	r1, r7, r2
 80157ce:	4605      	mov	r5, r0
 80157d0:	4630      	mov	r0, r6
 80157d2:	f7fc fce3 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80157d6:	1d39      	adds	r1, r7, #4
 80157d8:	4680      	mov	r8, r0
 80157da:	4630      	mov	r0, r6
 80157dc:	f7f7 fde8 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 80157e0:	1d79      	adds	r1, r7, #5
 80157e2:	4604      	mov	r4, r0
 80157e4:	4630      	mov	r0, r6
 80157e6:	f7f7 fde3 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 80157ea:	ea05 0508 	and.w	r5, r5, r8
 80157ee:	402c      	ands	r4, r5
 80157f0:	4020      	ands	r0, r4
 80157f2:	b2c0      	uxtb	r0, r0
 80157f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157f8 <uxr_serialize_ReadSpecification>:
 80157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fc:	460e      	mov	r6, r1
 80157fe:	7809      	ldrb	r1, [r1, #0]
 8015800:	4607      	mov	r7, r0
 8015802:	f7f7 fdbf 	bl	800d384 <ucdr_serialize_uint8_t>
 8015806:	7871      	ldrb	r1, [r6, #1]
 8015808:	4604      	mov	r4, r0
 801580a:	4638      	mov	r0, r7
 801580c:	f7f7 fdba 	bl	800d384 <ucdr_serialize_uint8_t>
 8015810:	78b1      	ldrb	r1, [r6, #2]
 8015812:	4004      	ands	r4, r0
 8015814:	4638      	mov	r0, r7
 8015816:	f7f7 fd87 	bl	800d328 <ucdr_serialize_bool>
 801581a:	78b3      	ldrb	r3, [r6, #2]
 801581c:	b2e4      	uxtb	r4, r4
 801581e:	4004      	ands	r4, r0
 8015820:	b94b      	cbnz	r3, 8015836 <uxr_serialize_ReadSpecification+0x3e>
 8015822:	7a31      	ldrb	r1, [r6, #8]
 8015824:	4638      	mov	r0, r7
 8015826:	f7f7 fd7f 	bl	800d328 <ucdr_serialize_bool>
 801582a:	7a33      	ldrb	r3, [r6, #8]
 801582c:	4004      	ands	r4, r0
 801582e:	b943      	cbnz	r3, 8015842 <uxr_serialize_ReadSpecification+0x4a>
 8015830:	4620      	mov	r0, r4
 8015832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015836:	6871      	ldr	r1, [r6, #4]
 8015838:	4638      	mov	r0, r7
 801583a:	f004 fbe3 	bl	801a004 <ucdr_serialize_string>
 801583e:	4004      	ands	r4, r0
 8015840:	e7ef      	b.n	8015822 <uxr_serialize_ReadSpecification+0x2a>
 8015842:	8971      	ldrh	r1, [r6, #10]
 8015844:	4638      	mov	r0, r7
 8015846:	f7f7 fdc9 	bl	800d3dc <ucdr_serialize_uint16_t>
 801584a:	89b1      	ldrh	r1, [r6, #12]
 801584c:	4605      	mov	r5, r0
 801584e:	4638      	mov	r0, r7
 8015850:	f7f7 fdc4 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015854:	89f1      	ldrh	r1, [r6, #14]
 8015856:	4005      	ands	r5, r0
 8015858:	4638      	mov	r0, r7
 801585a:	f7f7 fdbf 	bl	800d3dc <ucdr_serialize_uint16_t>
 801585e:	8a31      	ldrh	r1, [r6, #16]
 8015860:	4680      	mov	r8, r0
 8015862:	4638      	mov	r0, r7
 8015864:	f7f7 fdba 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015868:	b2ed      	uxtb	r5, r5
 801586a:	4025      	ands	r5, r4
 801586c:	ea08 0505 	and.w	r5, r8, r5
 8015870:	ea00 0405 	and.w	r4, r0, r5
 8015874:	4620      	mov	r0, r4
 8015876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801587a:	bf00      	nop

0801587c <uxr_serialize_CREATE_CLIENT_Payload>:
 801587c:	f7ff bace 	b.w	8014e1c <uxr_serialize_CLIENT_Representation>

08015880 <uxr_serialize_CREATE_Payload>:
 8015880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015882:	2202      	movs	r2, #2
 8015884:	4607      	mov	r7, r0
 8015886:	460e      	mov	r6, r1
 8015888:	f7fc fc24 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 801588c:	2202      	movs	r2, #2
 801588e:	18b1      	adds	r1, r6, r2
 8015890:	4605      	mov	r5, r0
 8015892:	4638      	mov	r0, r7
 8015894:	f7fc fc1e 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015898:	7931      	ldrb	r1, [r6, #4]
 801589a:	4604      	mov	r4, r0
 801589c:	4638      	mov	r0, r7
 801589e:	f7f7 fd71 	bl	800d384 <ucdr_serialize_uint8_t>
 80158a2:	b170      	cbz	r0, 80158c2 <uxr_serialize_CREATE_Payload+0x42>
 80158a4:	7933      	ldrb	r3, [r6, #4]
 80158a6:	402c      	ands	r4, r5
 80158a8:	3b01      	subs	r3, #1
 80158aa:	b2e4      	uxtb	r4, r4
 80158ac:	2b0d      	cmp	r3, #13
 80158ae:	d809      	bhi.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 80158b0:	e8df f003 	tbb	[pc, r3]
 80158b4:	23230a4c 	.word	0x23230a4c
 80158b8:	0a0a0a0a 	.word	0x0a0a0a0a
 80158bc:	12121208 	.word	0x12121208
 80158c0:	3e45      	.short	0x3e45
 80158c2:	2400      	movs	r4, #0
 80158c4:	4620      	mov	r0, r4
 80158c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c8:	f106 0108 	add.w	r1, r6, #8
 80158cc:	4638      	mov	r0, r7
 80158ce:	f7ff fbab 	bl	8015028 <uxr_serialize_DATAWRITER_Representation>
 80158d2:	4004      	ands	r4, r0
 80158d4:	4620      	mov	r0, r4
 80158d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158d8:	7a31      	ldrb	r1, [r6, #8]
 80158da:	4638      	mov	r0, r7
 80158dc:	f7f7 fd52 	bl	800d384 <ucdr_serialize_uint8_t>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d0ee      	beq.n	80158c2 <uxr_serialize_CREATE_Payload+0x42>
 80158e4:	7a33      	ldrb	r3, [r6, #8]
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d001      	beq.n	80158ee <uxr_serialize_CREATE_Payload+0x6e>
 80158ea:	2b02      	cmp	r3, #2
 80158ec:	d1ea      	bne.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 80158ee:	68f1      	ldr	r1, [r6, #12]
 80158f0:	4638      	mov	r0, r7
 80158f2:	f004 fb87 	bl	801a004 <ucdr_serialize_string>
 80158f6:	4004      	ands	r4, r0
 80158f8:	e7e4      	b.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 80158fa:	7a31      	ldrb	r1, [r6, #8]
 80158fc:	4638      	mov	r0, r7
 80158fe:	f7f7 fd41 	bl	800d384 <ucdr_serialize_uint8_t>
 8015902:	4605      	mov	r5, r0
 8015904:	b158      	cbz	r0, 801591e <uxr_serialize_CREATE_Payload+0x9e>
 8015906:	7a33      	ldrb	r3, [r6, #8]
 8015908:	2b02      	cmp	r3, #2
 801590a:	d034      	beq.n	8015976 <uxr_serialize_CREATE_Payload+0xf6>
 801590c:	2b03      	cmp	r3, #3
 801590e:	d106      	bne.n	801591e <uxr_serialize_CREATE_Payload+0x9e>
 8015910:	68f2      	ldr	r2, [r6, #12]
 8015912:	f106 0110 	add.w	r1, r6, #16
 8015916:	4638      	mov	r0, r7
 8015918:	f7fc fd7a 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 801591c:	4605      	mov	r5, r0
 801591e:	2202      	movs	r2, #2
 8015920:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015924:	4638      	mov	r0, r7
 8015926:	f7fc fbd5 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 801592a:	4028      	ands	r0, r5
 801592c:	4004      	ands	r4, r0
 801592e:	e7c9      	b.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 8015930:	f106 0108 	add.w	r1, r6, #8
 8015934:	4638      	mov	r0, r7
 8015936:	f7ff fa71 	bl	8014e1c <uxr_serialize_CLIENT_Representation>
 801593a:	4004      	ands	r4, r0
 801593c:	e7c2      	b.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 801593e:	f106 0108 	add.w	r1, r6, #8
 8015942:	4638      	mov	r0, r7
 8015944:	f7ff fb26 	bl	8014f94 <uxr_serialize_AGENT_Representation>
 8015948:	4004      	ands	r4, r0
 801594a:	e7bb      	b.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 801594c:	7a31      	ldrb	r1, [r6, #8]
 801594e:	4638      	mov	r0, r7
 8015950:	f7f7 fd18 	bl	800d384 <ucdr_serialize_uint8_t>
 8015954:	4605      	mov	r5, r0
 8015956:	b130      	cbz	r0, 8015966 <uxr_serialize_CREATE_Payload+0xe6>
 8015958:	7a33      	ldrb	r3, [r6, #8]
 801595a:	2b02      	cmp	r3, #2
 801595c:	d011      	beq.n	8015982 <uxr_serialize_CREATE_Payload+0x102>
 801595e:	2b03      	cmp	r3, #3
 8015960:	d015      	beq.n	801598e <uxr_serialize_CREATE_Payload+0x10e>
 8015962:	2b01      	cmp	r3, #1
 8015964:	d00d      	beq.n	8015982 <uxr_serialize_CREATE_Payload+0x102>
 8015966:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801596a:	4638      	mov	r0, r7
 801596c:	f7f8 fa46 	bl	800ddfc <ucdr_serialize_int16_t>
 8015970:	4028      	ands	r0, r5
 8015972:	4004      	ands	r4, r0
 8015974:	e7a6      	b.n	80158c4 <uxr_serialize_CREATE_Payload+0x44>
 8015976:	68f1      	ldr	r1, [r6, #12]
 8015978:	4638      	mov	r0, r7
 801597a:	f004 fb43 	bl	801a004 <ucdr_serialize_string>
 801597e:	4605      	mov	r5, r0
 8015980:	e7cd      	b.n	801591e <uxr_serialize_CREATE_Payload+0x9e>
 8015982:	68f1      	ldr	r1, [r6, #12]
 8015984:	4638      	mov	r0, r7
 8015986:	f004 fb3d 	bl	801a004 <ucdr_serialize_string>
 801598a:	4605      	mov	r5, r0
 801598c:	e7eb      	b.n	8015966 <uxr_serialize_CREATE_Payload+0xe6>
 801598e:	68f2      	ldr	r2, [r6, #12]
 8015990:	f106 0110 	add.w	r1, r6, #16
 8015994:	4638      	mov	r0, r7
 8015996:	f7fc fd3b 	bl	8012410 <ucdr_serialize_sequence_uint8_t>
 801599a:	4605      	mov	r5, r0
 801599c:	e7e3      	b.n	8015966 <uxr_serialize_CREATE_Payload+0xe6>
 801599e:	bf00      	nop

080159a0 <uxr_deserialize_GET_INFO_Payload>:
 80159a0:	b570      	push	{r4, r5, r6, lr}
 80159a2:	2202      	movs	r2, #2
 80159a4:	4605      	mov	r5, r0
 80159a6:	460e      	mov	r6, r1
 80159a8:	f7fc fbf8 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80159ac:	2202      	movs	r2, #2
 80159ae:	18b1      	adds	r1, r6, r2
 80159b0:	4604      	mov	r4, r0
 80159b2:	4628      	mov	r0, r5
 80159b4:	f7fc fbf2 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80159b8:	1d31      	adds	r1, r6, #4
 80159ba:	4004      	ands	r4, r0
 80159bc:	4628      	mov	r0, r5
 80159be:	f7f8 f827 	bl	800da10 <ucdr_deserialize_uint32_t>
 80159c2:	b2e4      	uxtb	r4, r4
 80159c4:	4020      	ands	r0, r4
 80159c6:	bd70      	pop	{r4, r5, r6, pc}

080159c8 <uxr_serialize_DELETE_Payload>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	2202      	movs	r2, #2
 80159cc:	4605      	mov	r5, r0
 80159ce:	460e      	mov	r6, r1
 80159d0:	f7fc fb80 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 80159d4:	2202      	movs	r2, #2
 80159d6:	4604      	mov	r4, r0
 80159d8:	18b1      	adds	r1, r6, r2
 80159da:	4628      	mov	r0, r5
 80159dc:	f7fc fb7a 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 80159e0:	4020      	ands	r0, r4
 80159e2:	b2c0      	uxtb	r0, r0
 80159e4:	bd70      	pop	{r4, r5, r6, pc}
 80159e6:	bf00      	nop

080159e8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80159e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ec:	4605      	mov	r5, r0
 80159ee:	460e      	mov	r6, r1
 80159f0:	f7f7 fcde 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 80159f4:	1c71      	adds	r1, r6, #1
 80159f6:	4604      	mov	r4, r0
 80159f8:	4628      	mov	r0, r5
 80159fa:	f7f7 fcd9 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 80159fe:	2204      	movs	r2, #4
 8015a00:	18b1      	adds	r1, r6, r2
 8015a02:	4680      	mov	r8, r0
 8015a04:	4628      	mov	r0, r5
 8015a06:	f7fc fbc9 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015a0a:	f106 0108 	add.w	r1, r6, #8
 8015a0e:	4607      	mov	r7, r0
 8015a10:	2202      	movs	r2, #2
 8015a12:	4628      	mov	r0, r5
 8015a14:	f7fc fbc2 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015a18:	ea04 0308 	and.w	r3, r4, r8
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	ea03 0407 	and.w	r4, r3, r7
 8015a22:	2202      	movs	r2, #2
 8015a24:	4607      	mov	r7, r0
 8015a26:	f106 010a 	add.w	r1, r6, #10
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f7fc fbb6 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015a30:	f106 010c 	add.w	r1, r6, #12
 8015a34:	4603      	mov	r3, r0
 8015a36:	4628      	mov	r0, r5
 8015a38:	461d      	mov	r5, r3
 8015a3a:	f7f7 fc8b 	bl	800d354 <ucdr_deserialize_bool>
 8015a3e:	403c      	ands	r4, r7
 8015a40:	4025      	ands	r5, r4
 8015a42:	4028      	ands	r0, r5
 8015a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a48 <uxr_deserialize_STATUS_Payload>:
 8015a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a4c:	2202      	movs	r2, #2
 8015a4e:	4606      	mov	r6, r0
 8015a50:	460f      	mov	r7, r1
 8015a52:	f7fc fba3 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015a56:	2202      	movs	r2, #2
 8015a58:	18b9      	adds	r1, r7, r2
 8015a5a:	4605      	mov	r5, r0
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f7fc fb9d 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015a62:	1d39      	adds	r1, r7, #4
 8015a64:	4680      	mov	r8, r0
 8015a66:	4630      	mov	r0, r6
 8015a68:	f7f7 fca2 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015a6c:	1d79      	adds	r1, r7, #5
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4630      	mov	r0, r6
 8015a72:	f7f7 fc9d 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015a76:	ea05 0508 	and.w	r5, r5, r8
 8015a7a:	402c      	ands	r4, r5
 8015a7c:	4020      	ands	r0, r4
 8015a7e:	b2c0      	uxtb	r0, r0
 8015a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a84 <uxr_serialize_INFO_Payload>:
 8015a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a88:	2202      	movs	r2, #2
 8015a8a:	460c      	mov	r4, r1
 8015a8c:	4605      	mov	r5, r0
 8015a8e:	f7fc fb21 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015a92:	2202      	movs	r2, #2
 8015a94:	18a1      	adds	r1, r4, r2
 8015a96:	4680      	mov	r8, r0
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f7fc fb1b 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015a9e:	7921      	ldrb	r1, [r4, #4]
 8015aa0:	4607      	mov	r7, r0
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f7f7 fc6e 	bl	800d384 <ucdr_serialize_uint8_t>
 8015aa8:	7961      	ldrb	r1, [r4, #5]
 8015aaa:	4606      	mov	r6, r0
 8015aac:	4628      	mov	r0, r5
 8015aae:	f7f7 fc69 	bl	800d384 <ucdr_serialize_uint8_t>
 8015ab2:	ea08 0807 	and.w	r8, r8, r7
 8015ab6:	ea06 0608 	and.w	r6, r6, r8
 8015aba:	4006      	ands	r6, r0
 8015abc:	7a21      	ldrb	r1, [r4, #8]
 8015abe:	4628      	mov	r0, r5
 8015ac0:	f7f7 fc32 	bl	800d328 <ucdr_serialize_bool>
 8015ac4:	7a23      	ldrb	r3, [r4, #8]
 8015ac6:	b2f7      	uxtb	r7, r6
 8015ac8:	4606      	mov	r6, r0
 8015aca:	b96b      	cbnz	r3, 8015ae8 <uxr_serialize_INFO_Payload+0x64>
 8015acc:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	f7f7 fc29 	bl	800d328 <ucdr_serialize_bool>
 8015ad6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015ada:	4030      	ands	r0, r6
 8015adc:	b2c6      	uxtb	r6, r0
 8015ade:	b983      	cbnz	r3, 8015b02 <uxr_serialize_INFO_Payload+0x7e>
 8015ae0:	ea06 0007 	and.w	r0, r6, r7
 8015ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae8:	7b21      	ldrb	r1, [r4, #12]
 8015aea:	4628      	mov	r0, r5
 8015aec:	f7f7 fc4a 	bl	800d384 <ucdr_serialize_uint8_t>
 8015af0:	b188      	cbz	r0, 8015b16 <uxr_serialize_INFO_Payload+0x92>
 8015af2:	f104 010c 	add.w	r1, r4, #12
 8015af6:	4628      	mov	r0, r5
 8015af8:	f7ff fabe 	bl	8015078 <uxr_serialize_ObjectVariant.part.0>
 8015afc:	4030      	ands	r0, r6
 8015afe:	b2c6      	uxtb	r6, r0
 8015b00:	e7e4      	b.n	8015acc <uxr_serialize_INFO_Payload+0x48>
 8015b02:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015b06:	4628      	mov	r0, r5
 8015b08:	f7ff fdb2 	bl	8015670 <uxr_serialize_ActivityInfoVariant>
 8015b0c:	4006      	ands	r6, r0
 8015b0e:	ea06 0007 	and.w	r0, r6, r7
 8015b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b16:	4606      	mov	r6, r0
 8015b18:	e7d8      	b.n	8015acc <uxr_serialize_INFO_Payload+0x48>
 8015b1a:	bf00      	nop

08015b1c <uxr_serialize_READ_DATA_Payload>:
 8015b1c:	b570      	push	{r4, r5, r6, lr}
 8015b1e:	2202      	movs	r2, #2
 8015b20:	4605      	mov	r5, r0
 8015b22:	460e      	mov	r6, r1
 8015b24:	f7fc fad6 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015b28:	2202      	movs	r2, #2
 8015b2a:	18b1      	adds	r1, r6, r2
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	4628      	mov	r0, r5
 8015b30:	f7fc fad0 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015b34:	1d31      	adds	r1, r6, #4
 8015b36:	4004      	ands	r4, r0
 8015b38:	4628      	mov	r0, r5
 8015b3a:	f7ff fe5d 	bl	80157f8 <uxr_serialize_ReadSpecification>
 8015b3e:	b2e4      	uxtb	r4, r4
 8015b40:	4020      	ands	r0, r4
 8015b42:	bd70      	pop	{r4, r5, r6, pc}

08015b44 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015b44:	b570      	push	{r4, r5, r6, lr}
 8015b46:	2202      	movs	r2, #2
 8015b48:	4605      	mov	r5, r0
 8015b4a:	460e      	mov	r6, r1
 8015b4c:	f7fc fac2 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015b50:	2202      	movs	r2, #2
 8015b52:	4604      	mov	r4, r0
 8015b54:	18b1      	adds	r1, r6, r2
 8015b56:	4628      	mov	r0, r5
 8015b58:	f7fc fabc 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015b5c:	4020      	ands	r0, r4
 8015b5e:	b2c0      	uxtb	r0, r0
 8015b60:	bd70      	pop	{r4, r5, r6, pc}
 8015b62:	bf00      	nop

08015b64 <uxr_serialize_ACKNACK_Payload>:
 8015b64:	b570      	push	{r4, r5, r6, lr}
 8015b66:	460c      	mov	r4, r1
 8015b68:	460e      	mov	r6, r1
 8015b6a:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015b6e:	4605      	mov	r5, r0
 8015b70:	f7f7 fc34 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015b74:	2202      	movs	r2, #2
 8015b76:	4621      	mov	r1, r4
 8015b78:	4604      	mov	r4, r0
 8015b7a:	4628      	mov	r0, r5
 8015b7c:	f7fc faaa 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015b80:	7931      	ldrb	r1, [r6, #4]
 8015b82:	4004      	ands	r4, r0
 8015b84:	4628      	mov	r0, r5
 8015b86:	f7f7 fbfd 	bl	800d384 <ucdr_serialize_uint8_t>
 8015b8a:	b2e4      	uxtb	r4, r4
 8015b8c:	4020      	ands	r0, r4
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}

08015b90 <uxr_deserialize_ACKNACK_Payload>:
 8015b90:	b570      	push	{r4, r5, r6, lr}
 8015b92:	4605      	mov	r5, r0
 8015b94:	460e      	mov	r6, r1
 8015b96:	f7f7 fd21 	bl	800d5dc <ucdr_deserialize_uint16_t>
 8015b9a:	2202      	movs	r2, #2
 8015b9c:	18b1      	adds	r1, r6, r2
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	f7fc fafb 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015ba6:	1d31      	adds	r1, r6, #4
 8015ba8:	4004      	ands	r4, r0
 8015baa:	4628      	mov	r0, r5
 8015bac:	f7f7 fc00 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015bb0:	b2e4      	uxtb	r4, r4
 8015bb2:	4020      	ands	r0, r4
 8015bb4:	bd70      	pop	{r4, r5, r6, pc}
 8015bb6:	bf00      	nop

08015bb8 <uxr_serialize_HEARTBEAT_Payload>:
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	460d      	mov	r5, r1
 8015bbc:	8809      	ldrh	r1, [r1, #0]
 8015bbe:	4606      	mov	r6, r0
 8015bc0:	f7f7 fc0c 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015bc4:	8869      	ldrh	r1, [r5, #2]
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	4630      	mov	r0, r6
 8015bca:	f7f7 fc07 	bl	800d3dc <ucdr_serialize_uint16_t>
 8015bce:	7929      	ldrb	r1, [r5, #4]
 8015bd0:	4004      	ands	r4, r0
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	f7f7 fbd6 	bl	800d384 <ucdr_serialize_uint8_t>
 8015bd8:	b2e4      	uxtb	r4, r4
 8015bda:	4020      	ands	r0, r4
 8015bdc:	bd70      	pop	{r4, r5, r6, pc}
 8015bde:	bf00      	nop

08015be0 <uxr_deserialize_HEARTBEAT_Payload>:
 8015be0:	b570      	push	{r4, r5, r6, lr}
 8015be2:	4605      	mov	r5, r0
 8015be4:	460e      	mov	r6, r1
 8015be6:	f7f7 fcf9 	bl	800d5dc <ucdr_deserialize_uint16_t>
 8015bea:	1cb1      	adds	r1, r6, #2
 8015bec:	4604      	mov	r4, r0
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f7f7 fcf4 	bl	800d5dc <ucdr_deserialize_uint16_t>
 8015bf4:	1d31      	adds	r1, r6, #4
 8015bf6:	4004      	ands	r4, r0
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	f7f7 fbd9 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015bfe:	b2e4      	uxtb	r4, r4
 8015c00:	4020      	ands	r0, r4
 8015c02:	bd70      	pop	{r4, r5, r6, pc}

08015c04 <uxr_serialize_TIMESTAMP_Payload>:
 8015c04:	b570      	push	{r4, r5, r6, lr}
 8015c06:	460d      	mov	r5, r1
 8015c08:	6809      	ldr	r1, [r1, #0]
 8015c0a:	4606      	mov	r6, r0
 8015c0c:	f7f8 f9ea 	bl	800dfe4 <ucdr_serialize_int32_t>
 8015c10:	6869      	ldr	r1, [r5, #4]
 8015c12:	4604      	mov	r4, r0
 8015c14:	4630      	mov	r0, r6
 8015c16:	f7f7 fdcb 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8015c1a:	4020      	ands	r0, r4
 8015c1c:	b2c0      	uxtb	r0, r0
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}

08015c20 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c24:	4605      	mov	r5, r0
 8015c26:	460e      	mov	r6, r1
 8015c28:	f7f8 fa74 	bl	800e114 <ucdr_deserialize_int32_t>
 8015c2c:	1d31      	adds	r1, r6, #4
 8015c2e:	4607      	mov	r7, r0
 8015c30:	4628      	mov	r0, r5
 8015c32:	f7f7 feed 	bl	800da10 <ucdr_deserialize_uint32_t>
 8015c36:	f106 0108 	add.w	r1, r6, #8
 8015c3a:	4680      	mov	r8, r0
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	f7f8 fa69 	bl	800e114 <ucdr_deserialize_int32_t>
 8015c42:	f106 010c 	add.w	r1, r6, #12
 8015c46:	4604      	mov	r4, r0
 8015c48:	4628      	mov	r0, r5
 8015c4a:	f7f7 fee1 	bl	800da10 <ucdr_deserialize_uint32_t>
 8015c4e:	ea07 0708 	and.w	r7, r7, r8
 8015c52:	403c      	ands	r4, r7
 8015c54:	f106 0110 	add.w	r1, r6, #16
 8015c58:	4004      	ands	r4, r0
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	f7f8 fa5a 	bl	800e114 <ucdr_deserialize_int32_t>
 8015c60:	f106 0114 	add.w	r1, r6, #20
 8015c64:	4607      	mov	r7, r0
 8015c66:	4628      	mov	r0, r5
 8015c68:	f7f7 fed2 	bl	800da10 <ucdr_deserialize_uint32_t>
 8015c6c:	b2e4      	uxtb	r4, r4
 8015c6e:	403c      	ands	r4, r7
 8015c70:	4020      	ands	r0, r4
 8015c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c76:	bf00      	nop

08015c78 <uxr_serialize_SampleIdentity>:
 8015c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7c:	220c      	movs	r2, #12
 8015c7e:	4604      	mov	r4, r0
 8015c80:	460d      	mov	r5, r1
 8015c82:	f7fc fa27 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015c86:	2203      	movs	r2, #3
 8015c88:	f105 010c 	add.w	r1, r5, #12
 8015c8c:	4607      	mov	r7, r0
 8015c8e:	4620      	mov	r0, r4
 8015c90:	f7fc fa20 	bl	80120d4 <ucdr_serialize_array_uint8_t>
 8015c94:	7be9      	ldrb	r1, [r5, #15]
 8015c96:	4680      	mov	r8, r0
 8015c98:	4620      	mov	r0, r4
 8015c9a:	f7f7 fb73 	bl	800d384 <ucdr_serialize_uint8_t>
 8015c9e:	6929      	ldr	r1, [r5, #16]
 8015ca0:	4606      	mov	r6, r0
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f7f8 f99e 	bl	800dfe4 <ucdr_serialize_int32_t>
 8015ca8:	6969      	ldr	r1, [r5, #20]
 8015caa:	4603      	mov	r3, r0
 8015cac:	4620      	mov	r0, r4
 8015cae:	ea07 0708 	and.w	r7, r7, r8
 8015cb2:	461c      	mov	r4, r3
 8015cb4:	f7f7 fd7c 	bl	800d7b0 <ucdr_serialize_uint32_t>
 8015cb8:	403e      	ands	r6, r7
 8015cba:	4034      	ands	r4, r6
 8015cbc:	4020      	ands	r0, r4
 8015cbe:	b2c0      	uxtb	r0, r0
 8015cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cc4 <uxr_deserialize_SampleIdentity>:
 8015cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc8:	220c      	movs	r2, #12
 8015cca:	4604      	mov	r4, r0
 8015ccc:	460d      	mov	r5, r1
 8015cce:	f7fc fa65 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015cd2:	2203      	movs	r2, #3
 8015cd4:	f105 010c 	add.w	r1, r5, #12
 8015cd8:	4607      	mov	r7, r0
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f7fc fa5e 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8015ce0:	f105 010f 	add.w	r1, r5, #15
 8015ce4:	4680      	mov	r8, r0
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f7f7 fb62 	bl	800d3b0 <ucdr_deserialize_uint8_t>
 8015cec:	f105 0110 	add.w	r1, r5, #16
 8015cf0:	4606      	mov	r6, r0
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f7f8 fa0e 	bl	800e114 <ucdr_deserialize_int32_t>
 8015cf8:	f105 0114 	add.w	r1, r5, #20
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	4620      	mov	r0, r4
 8015d00:	ea07 0708 	and.w	r7, r7, r8
 8015d04:	461c      	mov	r4, r3
 8015d06:	f7f7 fe83 	bl	800da10 <ucdr_deserialize_uint32_t>
 8015d0a:	403e      	ands	r6, r7
 8015d0c:	4034      	ands	r4, r6
 8015d0e:	4020      	ands	r0, r4
 8015d10:	b2c0      	uxtb	r0, r0
 8015d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d16:	bf00      	nop

08015d18 <rcl_client_get_rmw_handle>:
 8015d18:	b118      	cbz	r0, 8015d22 <rcl_client_get_rmw_handle+0xa>
 8015d1a:	6800      	ldr	r0, [r0, #0]
 8015d1c:	b108      	cbz	r0, 8015d22 <rcl_client_get_rmw_handle+0xa>
 8015d1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015d22:	4770      	bx	lr

08015d24 <rcl_send_request>:
 8015d24:	b570      	push	{r4, r5, r6, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	b1e8      	cbz	r0, 8015d66 <rcl_send_request+0x42>
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	6800      	ldr	r0, [r0, #0]
 8015d2e:	b1d0      	cbz	r0, 8015d66 <rcl_send_request+0x42>
 8015d30:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015d34:	b1bb      	cbz	r3, 8015d66 <rcl_send_request+0x42>
 8015d36:	460e      	mov	r6, r1
 8015d38:	b1d1      	cbz	r1, 8015d70 <rcl_send_request+0x4c>
 8015d3a:	4615      	mov	r5, r2
 8015d3c:	b1c2      	cbz	r2, 8015d70 <rcl_send_request+0x4c>
 8015d3e:	2105      	movs	r1, #5
 8015d40:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015d44:	f002 fe58 	bl	80189f8 <__atomic_load_8>
 8015d48:	6823      	ldr	r3, [r4, #0]
 8015d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8015d4e:	462a      	mov	r2, r5
 8015d50:	4631      	mov	r1, r6
 8015d52:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015d56:	f003 fd43 	bl	80197e0 <rmw_send_request>
 8015d5a:	4606      	mov	r6, r0
 8015d5c:	b160      	cbz	r0, 8015d78 <rcl_send_request+0x54>
 8015d5e:	2601      	movs	r6, #1
 8015d60:	4630      	mov	r0, r6
 8015d62:	b002      	add	sp, #8
 8015d64:	bd70      	pop	{r4, r5, r6, pc}
 8015d66:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	b002      	add	sp, #8
 8015d6e:	bd70      	pop	{r4, r5, r6, pc}
 8015d70:	260b      	movs	r6, #11
 8015d72:	4630      	mov	r0, r6
 8015d74:	b002      	add	sp, #8
 8015d76:	bd70      	pop	{r4, r5, r6, pc}
 8015d78:	6820      	ldr	r0, [r4, #0]
 8015d7a:	2105      	movs	r1, #5
 8015d7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d80:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015d84:	9100      	str	r1, [sp, #0]
 8015d86:	f002 fea3 	bl	8018ad0 <__atomic_exchange_8>
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	b002      	add	sp, #8
 8015d8e:	bd70      	pop	{r4, r5, r6, pc}

08015d90 <rcl_take_response>:
 8015d90:	b570      	push	{r4, r5, r6, lr}
 8015d92:	468e      	mov	lr, r1
 8015d94:	460c      	mov	r4, r1
 8015d96:	4616      	mov	r6, r2
 8015d98:	4605      	mov	r5, r0
 8015d9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d9e:	b08c      	sub	sp, #48	@ 0x30
 8015da0:	f10d 0c18 	add.w	ip, sp, #24
 8015da4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015da8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015dac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015db0:	b35d      	cbz	r5, 8015e0a <rcl_take_response+0x7a>
 8015db2:	682b      	ldr	r3, [r5, #0]
 8015db4:	b34b      	cbz	r3, 8015e0a <rcl_take_response+0x7a>
 8015db6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015dba:	b330      	cbz	r0, 8015e0a <rcl_take_response+0x7a>
 8015dbc:	b346      	cbz	r6, 8015e10 <rcl_take_response+0x80>
 8015dbe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015e18 <rcl_take_response+0x88>
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8015dc8:	4632      	mov	r2, r6
 8015dca:	f10d 0307 	add.w	r3, sp, #7
 8015dce:	a902      	add	r1, sp, #8
 8015dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015dd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015dd8:	f003 fe0a 	bl	80199f0 <rmw_take_response>
 8015ddc:	4605      	mov	r5, r0
 8015dde:	b9c8      	cbnz	r0, 8015e14 <rcl_take_response+0x84>
 8015de0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015de4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015de8:	2a00      	cmp	r2, #0
 8015dea:	bf08      	it	eq
 8015dec:	461d      	moveq	r5, r3
 8015dee:	f10d 0e18 	add.w	lr, sp, #24
 8015df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015df6:	46a4      	mov	ip, r4
 8015df8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dfc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015e00:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e04:	4628      	mov	r0, r5
 8015e06:	b00c      	add	sp, #48	@ 0x30
 8015e08:	bd70      	pop	{r4, r5, r6, pc}
 8015e0a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015e0e:	e7ee      	b.n	8015dee <rcl_take_response+0x5e>
 8015e10:	250b      	movs	r5, #11
 8015e12:	e7ec      	b.n	8015dee <rcl_take_response+0x5e>
 8015e14:	2501      	movs	r5, #1
 8015e16:	e7ea      	b.n	8015dee <rcl_take_response+0x5e>
	...

08015e20 <rcl_client_is_valid>:
 8015e20:	b130      	cbz	r0, 8015e30 <rcl_client_is_valid+0x10>
 8015e22:	6800      	ldr	r0, [r0, #0]
 8015e24:	b120      	cbz	r0, 8015e30 <rcl_client_is_valid+0x10>
 8015e26:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015e2a:	3800      	subs	r0, #0
 8015e2c:	bf18      	it	ne
 8015e2e:	2001      	movne	r0, #1
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop

08015e34 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015e34:	280b      	cmp	r0, #11
 8015e36:	dc0d      	bgt.n	8015e54 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	db09      	blt.n	8015e50 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015e3c:	280b      	cmp	r0, #11
 8015e3e:	d807      	bhi.n	8015e50 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015e40:	e8df f000 	tbb	[pc, r0]
 8015e44:	07060607 	.word	0x07060607
 8015e48:	06060606 	.word	0x06060606
 8015e4c:	07070606 	.word	0x07070606
 8015e50:	2001      	movs	r0, #1
 8015e52:	4770      	bx	lr
 8015e54:	28cb      	cmp	r0, #203	@ 0xcb
 8015e56:	bf18      	it	ne
 8015e58:	2001      	movne	r0, #1
 8015e5a:	4770      	bx	lr

08015e5c <rcl_get_zero_initialized_context>:
 8015e5c:	4a03      	ldr	r2, [pc, #12]	@ (8015e6c <rcl_get_zero_initialized_context+0x10>)
 8015e5e:	4603      	mov	r3, r0
 8015e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e64:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	4770      	bx	lr
 8015e6c:	0801e35c 	.word	0x0801e35c

08015e70 <rcl_context_is_valid>:
 8015e70:	b118      	cbz	r0, 8015e7a <rcl_context_is_valid+0xa>
 8015e72:	6840      	ldr	r0, [r0, #4]
 8015e74:	3800      	subs	r0, #0
 8015e76:	bf18      	it	ne
 8015e78:	2001      	movne	r0, #1
 8015e7a:	4770      	bx	lr

08015e7c <__cleanup_context>:
 8015e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e80:	4606      	mov	r6, r0
 8015e82:	6800      	ldr	r0, [r0, #0]
 8015e84:	2300      	movs	r3, #0
 8015e86:	6073      	str	r3, [r6, #4]
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d049      	beq.n	8015f20 <__cleanup_context+0xa4>
 8015e8c:	6947      	ldr	r7, [r0, #20]
 8015e8e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015e92:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015e96:	b137      	cbz	r7, 8015ea6 <__cleanup_context+0x2a>
 8015e98:	3014      	adds	r0, #20
 8015e9a:	f7f8 fe2d 	bl	800eaf8 <rcl_init_options_fini>
 8015e9e:	4607      	mov	r7, r0
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d144      	bne.n	8015f2e <__cleanup_context+0xb2>
 8015ea4:	6830      	ldr	r0, [r6, #0]
 8015ea6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ea8:	b143      	cbz	r3, 8015ebc <__cleanup_context+0x40>
 8015eaa:	3028      	adds	r0, #40	@ 0x28
 8015eac:	f7fa fa90 	bl	80103d0 <rmw_context_fini>
 8015eb0:	b118      	cbz	r0, 8015eba <__cleanup_context+0x3e>
 8015eb2:	2f00      	cmp	r7, #0
 8015eb4:	d03e      	beq.n	8015f34 <__cleanup_context+0xb8>
 8015eb6:	f7f9 ffc3 	bl	800fe40 <rcutils_reset_error>
 8015eba:	6830      	ldr	r0, [r6, #0]
 8015ebc:	6a03      	ldr	r3, [r0, #32]
 8015ebe:	b1db      	cbz	r3, 8015ef8 <__cleanup_context+0x7c>
 8015ec0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015ec4:	2a01      	cmp	r2, #1
 8015ec6:	f17c 0100 	sbcs.w	r1, ip, #0
 8015eca:	db11      	blt.n	8015ef0 <__cleanup_context+0x74>
 8015ecc:	2400      	movs	r4, #0
 8015ece:	4625      	mov	r5, r4
 8015ed0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ed4:	4649      	mov	r1, r9
 8015ed6:	b1b8      	cbz	r0, 8015f08 <__cleanup_context+0x8c>
 8015ed8:	47c0      	blx	r8
 8015eda:	6833      	ldr	r3, [r6, #0]
 8015edc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015ee0:	3401      	adds	r4, #1
 8015ee2:	f145 0500 	adc.w	r5, r5, #0
 8015ee6:	4294      	cmp	r4, r2
 8015ee8:	eb75 010c 	sbcs.w	r1, r5, ip
 8015eec:	6a1b      	ldr	r3, [r3, #32]
 8015eee:	dbef      	blt.n	8015ed0 <__cleanup_context+0x54>
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	4649      	mov	r1, r9
 8015ef4:	47c0      	blx	r8
 8015ef6:	6830      	ldr	r0, [r6, #0]
 8015ef8:	4649      	mov	r1, r9
 8015efa:	47c0      	blx	r8
 8015efc:	2300      	movs	r3, #0
 8015efe:	e9c6 3300 	strd	r3, r3, [r6]
 8015f02:	4638      	mov	r0, r7
 8015f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f08:	3401      	adds	r4, #1
 8015f0a:	f145 0500 	adc.w	r5, r5, #0
 8015f0e:	4294      	cmp	r4, r2
 8015f10:	eb75 010c 	sbcs.w	r1, r5, ip
 8015f14:	dbdc      	blt.n	8015ed0 <__cleanup_context+0x54>
 8015f16:	4618      	mov	r0, r3
 8015f18:	4649      	mov	r1, r9
 8015f1a:	47c0      	blx	r8
 8015f1c:	6830      	ldr	r0, [r6, #0]
 8015f1e:	e7eb      	b.n	8015ef8 <__cleanup_context+0x7c>
 8015f20:	4607      	mov	r7, r0
 8015f22:	2300      	movs	r3, #0
 8015f24:	e9c6 3300 	strd	r3, r3, [r6]
 8015f28:	4638      	mov	r0, r7
 8015f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f2e:	f7f9 ff87 	bl	800fe40 <rcutils_reset_error>
 8015f32:	e7b7      	b.n	8015ea4 <__cleanup_context+0x28>
 8015f34:	f7ff ff7e 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f38:	4607      	mov	r7, r0
 8015f3a:	e7bc      	b.n	8015eb6 <__cleanup_context+0x3a>

08015f3c <rcl_init>:
 8015f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f40:	1e05      	subs	r5, r0, #0
 8015f42:	b09e      	sub	sp, #120	@ 0x78
 8015f44:	460e      	mov	r6, r1
 8015f46:	4690      	mov	r8, r2
 8015f48:	461f      	mov	r7, r3
 8015f4a:	f340 809c 	ble.w	8016086 <rcl_init+0x14a>
 8015f4e:	2900      	cmp	r1, #0
 8015f50:	f000 809c 	beq.w	801608c <rcl_init+0x150>
 8015f54:	f1a1 0e04 	sub.w	lr, r1, #4
 8015f58:	f04f 0c00 	mov.w	ip, #0
 8015f5c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015f60:	f10c 0c01 	add.w	ip, ip, #1
 8015f64:	2c00      	cmp	r4, #0
 8015f66:	f000 8091 	beq.w	801608c <rcl_init+0x150>
 8015f6a:	4565      	cmp	r5, ip
 8015f6c:	d1f6      	bne.n	8015f5c <rcl_init+0x20>
 8015f6e:	f1b8 0f00 	cmp.w	r8, #0
 8015f72:	f000 808b 	beq.w	801608c <rcl_init+0x150>
 8015f76:	f8d8 4000 	ldr.w	r4, [r8]
 8015f7a:	2c00      	cmp	r4, #0
 8015f7c:	f000 8086 	beq.w	801608c <rcl_init+0x150>
 8015f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f82:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8015f86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f8a:	6823      	ldr	r3, [r4, #0]
 8015f8c:	f8cc 3000 	str.w	r3, [ip]
 8015f90:	a819      	add	r0, sp, #100	@ 0x64
 8015f92:	f7f9 ff2f 	bl	800fdf4 <rcutils_allocator_is_valid>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d078      	beq.n	801608c <rcl_init+0x150>
 8015f9a:	2f00      	cmp	r7, #0
 8015f9c:	d076      	beq.n	801608c <rcl_init+0x150>
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d178      	bne.n	8016096 <rcl_init+0x15a>
 8015fa4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015fa8:	2178      	movs	r1, #120	@ 0x78
 8015faa:	2001      	movs	r0, #1
 8015fac:	4798      	blx	r3
 8015fae:	4604      	mov	r4, r0
 8015fb0:	6038      	str	r0, [r7, #0]
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	f000 80b6 	beq.w	8016124 <rcl_init+0x1e8>
 8015fb8:	a802      	add	r0, sp, #8
 8015fba:	f003 f86d 	bl	8019098 <rmw_get_zero_initialized_context>
 8015fbe:	a902      	add	r1, sp, #8
 8015fc0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015fc4:	2250      	movs	r2, #80	@ 0x50
 8015fc6:	ac19      	add	r4, sp, #100	@ 0x64
 8015fc8:	f005 ff5d 	bl	801be86 <memcpy>
 8015fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fce:	f8d7 e000 	ldr.w	lr, [r7]
 8015fd2:	46f4      	mov	ip, lr
 8015fd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fd8:	6823      	ldr	r3, [r4, #0]
 8015fda:	f8cc 3000 	str.w	r3, [ip]
 8015fde:	f10e 0114 	add.w	r1, lr, #20
 8015fe2:	4640      	mov	r0, r8
 8015fe4:	f7f8 fdb2 	bl	800eb4c <rcl_init_options_copy>
 8015fe8:	4604      	mov	r4, r0
 8015fea:	2800      	cmp	r0, #0
 8015fec:	d144      	bne.n	8016078 <rcl_init+0x13c>
 8015fee:	f8d7 9000 	ldr.w	r9, [r7]
 8015ff2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015ff6:	f8c9 0020 	str.w	r0, [r9, #32]
 8015ffa:	f8c9 5018 	str.w	r5, [r9, #24]
 8015ffe:	f8c9 801c 	str.w	r8, [r9, #28]
 8016002:	2d00      	cmp	r5, #0
 8016004:	d04e      	beq.n	80160a4 <rcl_init+0x168>
 8016006:	2e00      	cmp	r6, #0
 8016008:	d04c      	beq.n	80160a4 <rcl_init+0x168>
 801600a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801600e:	2104      	movs	r1, #4
 8016010:	4628      	mov	r0, r5
 8016012:	4798      	blx	r3
 8016014:	f8c9 0020 	str.w	r0, [r9, #32]
 8016018:	f8d7 9000 	ldr.w	r9, [r7]
 801601c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016020:	46ca      	mov	sl, r9
 8016022:	b343      	cbz	r3, 8016076 <rcl_init+0x13a>
 8016024:	2d01      	cmp	r5, #1
 8016026:	f178 0300 	sbcs.w	r3, r8, #0
 801602a:	db3b      	blt.n	80160a4 <rcl_init+0x168>
 801602c:	2400      	movs	r4, #0
 801602e:	3e04      	subs	r6, #4
 8016030:	46a1      	mov	r9, r4
 8016032:	e00b      	b.n	801604c <rcl_init+0x110>
 8016034:	6831      	ldr	r1, [r6, #0]
 8016036:	f005 ff26 	bl	801be86 <memcpy>
 801603a:	3401      	adds	r4, #1
 801603c:	f149 0900 	adc.w	r9, r9, #0
 8016040:	45c8      	cmp	r8, r9
 8016042:	bf08      	it	eq
 8016044:	42a5      	cmpeq	r5, r4
 8016046:	d02b      	beq.n	80160a0 <rcl_init+0x164>
 8016048:	f8d7 a000 	ldr.w	sl, [r7]
 801604c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016050:	f7ea f8f0 	bl	8000234 <strlen>
 8016054:	1c42      	adds	r2, r0, #1
 8016056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016058:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801605a:	f8da a020 	ldr.w	sl, [sl, #32]
 801605e:	9201      	str	r2, [sp, #4]
 8016060:	4610      	mov	r0, r2
 8016062:	4798      	blx	r3
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801606a:	6a1b      	ldr	r3, [r3, #32]
 801606c:	9a01      	ldr	r2, [sp, #4]
 801606e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016072:	2800      	cmp	r0, #0
 8016074:	d1de      	bne.n	8016034 <rcl_init+0xf8>
 8016076:	240a      	movs	r4, #10
 8016078:	4638      	mov	r0, r7
 801607a:	f7ff feff 	bl	8015e7c <__cleanup_context>
 801607e:	4620      	mov	r0, r4
 8016080:	b01e      	add	sp, #120	@ 0x78
 8016082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016086:	2900      	cmp	r1, #0
 8016088:	f43f af71 	beq.w	8015f6e <rcl_init+0x32>
 801608c:	240b      	movs	r4, #11
 801608e:	4620      	mov	r0, r4
 8016090:	b01e      	add	sp, #120	@ 0x78
 8016092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016096:	2464      	movs	r4, #100	@ 0x64
 8016098:	4620      	mov	r0, r4
 801609a:	b01e      	add	sp, #120	@ 0x78
 801609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160a0:	f8d7 9000 	ldr.w	r9, [r7]
 80160a4:	4926      	ldr	r1, [pc, #152]	@ (8016140 <rcl_init+0x204>)
 80160a6:	680b      	ldr	r3, [r1, #0]
 80160a8:	3301      	adds	r3, #1
 80160aa:	d036      	beq.n	801611a <rcl_init+0x1de>
 80160ac:	600b      	str	r3, [r1, #0]
 80160ae:	461a      	mov	r2, r3
 80160b0:	2400      	movs	r4, #0
 80160b2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80160b6:	607b      	str	r3, [r7, #4]
 80160b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80160ba:	3301      	adds	r3, #1
 80160bc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80160c0:	d034      	beq.n	801612c <rcl_init+0x1f0>
 80160c2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80160c6:	b93b      	cbnz	r3, 80160d8 <rcl_init+0x19c>
 80160c8:	3030      	adds	r0, #48	@ 0x30
 80160ca:	f000 f83b 	bl	8016144 <rcl_get_localhost_only>
 80160ce:	4604      	mov	r4, r0
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d1d1      	bne.n	8016078 <rcl_init+0x13c>
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	6958      	ldr	r0, [r3, #20]
 80160d8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80160da:	aa18      	add	r2, sp, #96	@ 0x60
 80160dc:	a917      	add	r1, sp, #92	@ 0x5c
 80160de:	f001 f925 	bl	801732c <rcl_validate_enclave_name>
 80160e2:	4604      	mov	r4, r0
 80160e4:	2800      	cmp	r0, #0
 80160e6:	d1c7      	bne.n	8016078 <rcl_init+0x13c>
 80160e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80160ea:	b9eb      	cbnz	r3, 8016128 <rcl_init+0x1ec>
 80160ec:	6839      	ldr	r1, [r7, #0]
 80160ee:	694b      	ldr	r3, [r1, #20]
 80160f0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80160f2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80160f6:	f000 fb3f 	bl	8016778 <rcl_get_security_options_from_environment>
 80160fa:	4604      	mov	r4, r0
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d1bb      	bne.n	8016078 <rcl_init+0x13c>
 8016100:	6839      	ldr	r1, [r7, #0]
 8016102:	6948      	ldr	r0, [r1, #20]
 8016104:	3128      	adds	r1, #40	@ 0x28
 8016106:	3018      	adds	r0, #24
 8016108:	f7fa f82c 	bl	8010164 <rmw_init>
 801610c:	4604      	mov	r4, r0
 801610e:	2800      	cmp	r0, #0
 8016110:	d0bd      	beq.n	801608e <rcl_init+0x152>
 8016112:	f7ff fe8f 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 8016116:	4604      	mov	r4, r0
 8016118:	e7ae      	b.n	8016078 <rcl_init+0x13c>
 801611a:	2201      	movs	r2, #1
 801611c:	461c      	mov	r4, r3
 801611e:	600a      	str	r2, [r1, #0]
 8016120:	4613      	mov	r3, r2
 8016122:	e7c6      	b.n	80160b2 <rcl_init+0x176>
 8016124:	240a      	movs	r4, #10
 8016126:	e7b2      	b.n	801608e <rcl_init+0x152>
 8016128:	2401      	movs	r4, #1
 801612a:	e7a5      	b.n	8016078 <rcl_init+0x13c>
 801612c:	3024      	adds	r0, #36	@ 0x24
 801612e:	f004 fce9 	bl	801ab04 <rcl_get_default_domain_id>
 8016132:	4604      	mov	r4, r0
 8016134:	2800      	cmp	r0, #0
 8016136:	d19f      	bne.n	8016078 <rcl_init+0x13c>
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	6958      	ldr	r0, [r3, #20]
 801613c:	e7c1      	b.n	80160c2 <rcl_init+0x186>
 801613e:	bf00      	nop
 8016140:	2000bd00 	.word	0x2000bd00

08016144 <rcl_get_localhost_only>:
 8016144:	b510      	push	{r4, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	2300      	movs	r3, #0
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	b1b8      	cbz	r0, 801617e <rcl_get_localhost_only+0x3a>
 801614e:	4604      	mov	r4, r0
 8016150:	a901      	add	r1, sp, #4
 8016152:	480c      	ldr	r0, [pc, #48]	@ (8016184 <rcl_get_localhost_only+0x40>)
 8016154:	f002 fcf4 	bl	8018b40 <rcutils_get_env>
 8016158:	b110      	cbz	r0, 8016160 <rcl_get_localhost_only+0x1c>
 801615a:	2001      	movs	r0, #1
 801615c:	b002      	add	sp, #8
 801615e:	bd10      	pop	{r4, pc}
 8016160:	9b01      	ldr	r3, [sp, #4]
 8016162:	b113      	cbz	r3, 801616a <rcl_get_localhost_only+0x26>
 8016164:	781a      	ldrb	r2, [r3, #0]
 8016166:	2a31      	cmp	r2, #49	@ 0x31
 8016168:	d004      	beq.n	8016174 <rcl_get_localhost_only+0x30>
 801616a:	2302      	movs	r3, #2
 801616c:	2000      	movs	r0, #0
 801616e:	7023      	strb	r3, [r4, #0]
 8016170:	b002      	add	sp, #8
 8016172:	bd10      	pop	{r4, pc}
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d1f7      	bne.n	801616a <rcl_get_localhost_only+0x26>
 801617a:	2301      	movs	r3, #1
 801617c:	e7f6      	b.n	801616c <rcl_get_localhost_only+0x28>
 801617e:	200b      	movs	r0, #11
 8016180:	b002      	add	sp, #8
 8016182:	bd10      	pop	{r4, pc}
 8016184:	0801e364 	.word	0x0801e364

08016188 <rcl_get_zero_initialized_node>:
 8016188:	4a03      	ldr	r2, [pc, #12]	@ (8016198 <rcl_get_zero_initialized_node+0x10>)
 801618a:	4603      	mov	r3, r0
 801618c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016190:	e883 0003 	stmia.w	r3, {r0, r1}
 8016194:	4618      	mov	r0, r3
 8016196:	4770      	bx	lr
 8016198:	0801e380 	.word	0x0801e380

0801619c <rcl_node_init>:
 801619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a0:	b0a9      	sub	sp, #164	@ 0xa4
 80161a2:	4604      	mov	r4, r0
 80161a4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80161a8:	a823      	add	r0, sp, #140	@ 0x8c
 80161aa:	460e      	mov	r6, r1
 80161ac:	4615      	mov	r5, r2
 80161ae:	461f      	mov	r7, r3
 80161b0:	f004 ff1c 	bl	801afec <rcl_guard_condition_get_default_options>
 80161b4:	f1b8 0f00 	cmp.w	r8, #0
 80161b8:	f000 80e6 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161bc:	4640      	mov	r0, r8
 80161be:	f7f9 fe19 	bl	800fdf4 <rcutils_allocator_is_valid>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	f000 80e0 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161c8:	2e00      	cmp	r6, #0
 80161ca:	f000 80dd 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161ce:	2d00      	cmp	r5, #0
 80161d0:	f000 80da 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161d4:	2c00      	cmp	r4, #0
 80161d6:	f000 80d7 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80161de:	f1b9 0f00 	cmp.w	r9, #0
 80161e2:	f040 80fd 	bne.w	80163e0 <rcl_node_init+0x244>
 80161e6:	2f00      	cmp	r7, #0
 80161e8:	f000 80ce 	beq.w	8016388 <rcl_node_init+0x1ec>
 80161ec:	4638      	mov	r0, r7
 80161ee:	f7ff fe3f 	bl	8015e70 <rcl_context_is_valid>
 80161f2:	4682      	mov	sl, r0
 80161f4:	2800      	cmp	r0, #0
 80161f6:	f000 80cd 	beq.w	8016394 <rcl_node_init+0x1f8>
 80161fa:	464a      	mov	r2, r9
 80161fc:	a922      	add	r1, sp, #136	@ 0x88
 80161fe:	4630      	mov	r0, r6
 8016200:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8016204:	f003 f8c6 	bl	8019394 <rmw_validate_node_name>
 8016208:	4681      	mov	r9, r0
 801620a:	2800      	cmp	r0, #0
 801620c:	f040 80be 	bne.w	801638c <rcl_node_init+0x1f0>
 8016210:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016212:	2800      	cmp	r0, #0
 8016214:	f040 80f0 	bne.w	80163f8 <rcl_node_init+0x25c>
 8016218:	4628      	mov	r0, r5
 801621a:	f7ea f80b 	bl	8000234 <strlen>
 801621e:	2800      	cmp	r0, #0
 8016220:	f040 80bb 	bne.w	801639a <rcl_node_init+0x1fe>
 8016224:	4d7c      	ldr	r5, [pc, #496]	@ (8016418 <rcl_node_init+0x27c>)
 8016226:	a922      	add	r1, sp, #136	@ 0x88
 8016228:	2200      	movs	r2, #0
 801622a:	4628      	mov	r0, r5
 801622c:	f003 f894 	bl	8019358 <rmw_validate_namespace>
 8016230:	4681      	mov	r9, r0
 8016232:	2800      	cmp	r0, #0
 8016234:	f040 80aa 	bne.w	801638c <rcl_node_init+0x1f0>
 8016238:	4682      	mov	sl, r0
 801623a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801623c:	2800      	cmp	r0, #0
 801623e:	f040 80e0 	bne.w	8016402 <rcl_node_init+0x266>
 8016242:	f8d8 3000 	ldr.w	r3, [r8]
 8016246:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801624a:	2078      	movs	r0, #120	@ 0x78
 801624c:	4798      	blx	r3
 801624e:	4681      	mov	r9, r0
 8016250:	6060      	str	r0, [r4, #4]
 8016252:	2800      	cmp	r0, #0
 8016254:	f000 80ca 	beq.w	80163ec <rcl_node_init+0x250>
 8016258:	2200      	movs	r2, #0
 801625a:	2300      	movs	r3, #0
 801625c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8016260:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8016264:	a808      	add	r0, sp, #32
 8016266:	f000 f907 	bl	8016478 <rcl_node_get_default_options>
 801626a:	a908      	add	r1, sp, #32
 801626c:	4648      	mov	r0, r9
 801626e:	2268      	movs	r2, #104	@ 0x68
 8016270:	f005 fe09 	bl	801be86 <memcpy>
 8016274:	6861      	ldr	r1, [r4, #4]
 8016276:	6027      	str	r7, [r4, #0]
 8016278:	4640      	mov	r0, r8
 801627a:	f000 f90b 	bl	8016494 <rcl_node_options_copy>
 801627e:	2800      	cmp	r0, #0
 8016280:	d158      	bne.n	8016334 <rcl_node_init+0x198>
 8016282:	4628      	mov	r0, r5
 8016284:	f7e9 ffd6 	bl	8000234 <strlen>
 8016288:	4428      	add	r0, r5
 801628a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801628e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016292:	2b2f      	cmp	r3, #47	@ 0x2f
 8016294:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	bf0c      	ite	eq
 801629c:	4b5f      	ldreq	r3, [pc, #380]	@ (801641c <rcl_node_init+0x280>)
 801629e:	4b60      	ldrne	r3, [pc, #384]	@ (8016420 <rcl_node_init+0x284>)
 80162a0:	9302      	str	r3, [sp, #8]
 80162a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80162a6:	9301      	str	r3, [sp, #4]
 80162a8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80162ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80162b0:	f002 fc6e 	bl	8018b90 <rcutils_format_string_limit>
 80162b4:	6823      	ldr	r3, [r4, #0]
 80162b6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80162ba:	6818      	ldr	r0, [r3, #0]
 80162bc:	4631      	mov	r1, r6
 80162be:	3028      	adds	r0, #40	@ 0x28
 80162c0:	462a      	mov	r2, r5
 80162c2:	6866      	ldr	r6, [r4, #4]
 80162c4:	f7fa f930 	bl	8010528 <rmw_create_node>
 80162c8:	6863      	ldr	r3, [r4, #4]
 80162ca:	66b0      	str	r0, [r6, #104]	@ 0x68
 80162cc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d032      	beq.n	8016338 <rcl_node_init+0x19c>
 80162d2:	f7fa f9bd 	bl	8010650 <rmw_node_get_graph_guard_condition>
 80162d6:	4681      	mov	r9, r0
 80162d8:	b360      	cbz	r0, 8016334 <rcl_node_init+0x198>
 80162da:	f8d8 3000 	ldr.w	r3, [r8]
 80162de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162e2:	6866      	ldr	r6, [r4, #4]
 80162e4:	2008      	movs	r0, #8
 80162e6:	4798      	blx	r3
 80162e8:	6863      	ldr	r3, [r4, #4]
 80162ea:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80162ec:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80162f0:	f1bb 0f00 	cmp.w	fp, #0
 80162f4:	d020      	beq.n	8016338 <rcl_node_init+0x19c>
 80162f6:	a806      	add	r0, sp, #24
 80162f8:	f004 fd9c 	bl	801ae34 <rcl_get_zero_initialized_guard_condition>
 80162fc:	a806      	add	r0, sp, #24
 80162fe:	c803      	ldmia	r0, {r0, r1}
 8016300:	6863      	ldr	r3, [r4, #4]
 8016302:	46c4      	mov	ip, r8
 8016304:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016308:	e88b 0003 	stmia.w	fp, {r0, r1}
 801630c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016310:	ae23      	add	r6, sp, #140	@ 0x8c
 8016312:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016314:	f8dc 3000 	ldr.w	r3, [ip]
 8016318:	6033      	str	r3, [r6, #0]
 801631a:	ab28      	add	r3, sp, #160	@ 0xa0
 801631c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016320:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016324:	4649      	mov	r1, r9
 8016326:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016328:	463a      	mov	r2, r7
 801632a:	4670      	mov	r0, lr
 801632c:	f004 fdd8 	bl	801aee0 <rcl_guard_condition_init_from_rmw>
 8016330:	4681      	mov	r9, r0
 8016332:	b328      	cbz	r0, 8016380 <rcl_node_init+0x1e4>
 8016334:	6863      	ldr	r3, [r4, #4]
 8016336:	b1f3      	cbz	r3, 8016376 <rcl_node_init+0x1da>
 8016338:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801633a:	b128      	cbz	r0, 8016348 <rcl_node_init+0x1ac>
 801633c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016340:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016344:	4798      	blx	r3
 8016346:	6863      	ldr	r3, [r4, #4]
 8016348:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801634a:	b110      	cbz	r0, 8016352 <rcl_node_init+0x1b6>
 801634c:	f7fa f904 	bl	8010558 <rmw_destroy_node>
 8016350:	6863      	ldr	r3, [r4, #4]
 8016352:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016354:	b148      	cbz	r0, 801636a <rcl_node_init+0x1ce>
 8016356:	f004 fe23 	bl	801afa0 <rcl_guard_condition_fini>
 801635a:	6863      	ldr	r3, [r4, #4]
 801635c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016360:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016362:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016366:	4798      	blx	r3
 8016368:	6863      	ldr	r3, [r4, #4]
 801636a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801636e:	4618      	mov	r0, r3
 8016370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016374:	4798      	blx	r3
 8016376:	2300      	movs	r3, #0
 8016378:	e9c4 3300 	strd	r3, r3, [r4]
 801637c:	f04f 0901 	mov.w	r9, #1
 8016380:	f1ba 0f00 	cmp.w	sl, #0
 8016384:	d125      	bne.n	80163d2 <rcl_node_init+0x236>
 8016386:	e001      	b.n	801638c <rcl_node_init+0x1f0>
 8016388:	f04f 090b 	mov.w	r9, #11
 801638c:	4648      	mov	r0, r9
 801638e:	b029      	add	sp, #164	@ 0xa4
 8016390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016394:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8016398:	e7f8      	b.n	801638c <rcl_node_init+0x1f0>
 801639a:	782b      	ldrb	r3, [r5, #0]
 801639c:	2b2f      	cmp	r3, #47	@ 0x2f
 801639e:	f43f af42 	beq.w	8016226 <rcl_node_init+0x8a>
 80163a2:	9503      	str	r5, [sp, #12]
 80163a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163a8:	9300      	str	r3, [sp, #0]
 80163aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016424 <rcl_node_init+0x288>)
 80163ac:	9302      	str	r3, [sp, #8]
 80163ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163b2:	9301      	str	r3, [sp, #4]
 80163b4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80163b8:	f002 fbea 	bl	8018b90 <rcutils_format_string_limit>
 80163bc:	4605      	mov	r5, r0
 80163be:	b340      	cbz	r0, 8016412 <rcl_node_init+0x276>
 80163c0:	2200      	movs	r2, #0
 80163c2:	a922      	add	r1, sp, #136	@ 0x88
 80163c4:	9222      	str	r2, [sp, #136]	@ 0x88
 80163c6:	f002 ffc7 	bl	8019358 <rmw_validate_namespace>
 80163ca:	4681      	mov	r9, r0
 80163cc:	2800      	cmp	r0, #0
 80163ce:	f43f af34 	beq.w	801623a <rcl_node_init+0x9e>
 80163d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80163d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80163da:	4628      	mov	r0, r5
 80163dc:	4798      	blx	r3
 80163de:	e7d5      	b.n	801638c <rcl_node_init+0x1f0>
 80163e0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80163e4:	4648      	mov	r0, r9
 80163e6:	b029      	add	sp, #164	@ 0xa4
 80163e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ec:	f04f 090a 	mov.w	r9, #10
 80163f0:	f1ba 0f00 	cmp.w	sl, #0
 80163f4:	d1ed      	bne.n	80163d2 <rcl_node_init+0x236>
 80163f6:	e7c9      	b.n	801638c <rcl_node_init+0x1f0>
 80163f8:	f003 f81e 	bl	8019438 <rmw_node_name_validation_result_string>
 80163fc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8016400:	e7c4      	b.n	801638c <rcl_node_init+0x1f0>
 8016402:	f002 ffbb 	bl	801937c <rmw_namespace_validation_result_string>
 8016406:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801640a:	f1ba 0f00 	cmp.w	sl, #0
 801640e:	d1e0      	bne.n	80163d2 <rcl_node_init+0x236>
 8016410:	e7bc      	b.n	801638c <rcl_node_init+0x1f0>
 8016412:	f04f 090a 	mov.w	r9, #10
 8016416:	e7b9      	b.n	801638c <rcl_node_init+0x1f0>
 8016418:	0801db2c 	.word	0x0801db2c
 801641c:	0801db54 	.word	0x0801db54
 8016420:	0801db30 	.word	0x0801db30
 8016424:	0801e37c 	.word	0x0801e37c

08016428 <rcl_node_is_valid>:
 8016428:	b130      	cbz	r0, 8016438 <rcl_node_is_valid+0x10>
 801642a:	6843      	ldr	r3, [r0, #4]
 801642c:	b123      	cbz	r3, 8016438 <rcl_node_is_valid+0x10>
 801642e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016430:	b113      	cbz	r3, 8016438 <rcl_node_is_valid+0x10>
 8016432:	6800      	ldr	r0, [r0, #0]
 8016434:	f7ff bd1c 	b.w	8015e70 <rcl_context_is_valid>
 8016438:	2000      	movs	r0, #0
 801643a:	4770      	bx	lr

0801643c <rcl_node_get_name>:
 801643c:	b120      	cbz	r0, 8016448 <rcl_node_get_name+0xc>
 801643e:	6840      	ldr	r0, [r0, #4]
 8016440:	b110      	cbz	r0, 8016448 <rcl_node_get_name+0xc>
 8016442:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016444:	b100      	cbz	r0, 8016448 <rcl_node_get_name+0xc>
 8016446:	6880      	ldr	r0, [r0, #8]
 8016448:	4770      	bx	lr
 801644a:	bf00      	nop

0801644c <rcl_node_get_namespace>:
 801644c:	b120      	cbz	r0, 8016458 <rcl_node_get_namespace+0xc>
 801644e:	6840      	ldr	r0, [r0, #4]
 8016450:	b110      	cbz	r0, 8016458 <rcl_node_get_namespace+0xc>
 8016452:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016454:	b100      	cbz	r0, 8016458 <rcl_node_get_namespace+0xc>
 8016456:	68c0      	ldr	r0, [r0, #12]
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop

0801645c <rcl_node_get_options>:
 801645c:	b128      	cbz	r0, 801646a <rcl_node_get_options+0xe>
 801645e:	6840      	ldr	r0, [r0, #4]
 8016460:	b118      	cbz	r0, 801646a <rcl_node_get_options+0xe>
 8016462:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016464:	2b00      	cmp	r3, #0
 8016466:	bf08      	it	eq
 8016468:	2000      	moveq	r0, #0
 801646a:	4770      	bx	lr

0801646c <rcl_node_get_rmw_handle>:
 801646c:	b110      	cbz	r0, 8016474 <rcl_node_get_rmw_handle+0x8>
 801646e:	6840      	ldr	r0, [r0, #4]
 8016470:	b100      	cbz	r0, 8016474 <rcl_node_get_rmw_handle+0x8>
 8016472:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop

08016478 <rcl_node_get_default_options>:
 8016478:	b510      	push	{r4, lr}
 801647a:	2268      	movs	r2, #104	@ 0x68
 801647c:	4604      	mov	r4, r0
 801647e:	2100      	movs	r1, #0
 8016480:	f005 fc38 	bl	801bcf4 <memset>
 8016484:	4620      	mov	r0, r4
 8016486:	f7f9 fca7 	bl	800fdd8 <rcutils_get_default_allocator>
 801648a:	2301      	movs	r3, #1
 801648c:	7523      	strb	r3, [r4, #20]
 801648e:	4620      	mov	r0, r4
 8016490:	bd10      	pop	{r4, pc}
 8016492:	bf00      	nop

08016494 <rcl_node_options_copy>:
 8016494:	b1d0      	cbz	r0, 80164cc <rcl_node_options_copy+0x38>
 8016496:	b570      	push	{r4, r5, r6, lr}
 8016498:	460c      	mov	r4, r1
 801649a:	b1a9      	cbz	r1, 80164c8 <rcl_node_options_copy+0x34>
 801649c:	4288      	cmp	r0, r1
 801649e:	4684      	mov	ip, r0
 80164a0:	d012      	beq.n	80164c8 <rcl_node_options_copy+0x34>
 80164a2:	4605      	mov	r5, r0
 80164a4:	8a86      	ldrh	r6, [r0, #20]
 80164a6:	468e      	mov	lr, r1
 80164a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80164ae:	682b      	ldr	r3, [r5, #0]
 80164b0:	f8ce 3000 	str.w	r3, [lr]
 80164b4:	f10c 0118 	add.w	r1, ip, #24
 80164b8:	2250      	movs	r2, #80	@ 0x50
 80164ba:	82a6      	strh	r6, [r4, #20]
 80164bc:	f104 0018 	add.w	r0, r4, #24
 80164c0:	f005 fce1 	bl	801be86 <memcpy>
 80164c4:	2000      	movs	r0, #0
 80164c6:	bd70      	pop	{r4, r5, r6, pc}
 80164c8:	200b      	movs	r0, #11
 80164ca:	bd70      	pop	{r4, r5, r6, pc}
 80164cc:	200b      	movs	r0, #11
 80164ce:	4770      	bx	lr

080164d0 <rcl_node_resolve_name>:
 80164d0:	b082      	sub	sp, #8
 80164d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d6:	b091      	sub	sp, #68	@ 0x44
 80164d8:	ac1a      	add	r4, sp, #104	@ 0x68
 80164da:	e884 000c 	stmia.w	r4, {r2, r3}
 80164de:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d03b      	beq.n	801655e <rcl_node_resolve_name+0x8e>
 80164e6:	460c      	mov	r4, r1
 80164e8:	4605      	mov	r5, r0
 80164ea:	f7ff ffb7 	bl	801645c <rcl_node_get_options>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d037      	beq.n	8016562 <rcl_node_resolve_name+0x92>
 80164f2:	4628      	mov	r0, r5
 80164f4:	f7ff ffa2 	bl	801643c <rcl_node_get_name>
 80164f8:	4606      	mov	r6, r0
 80164fa:	4628      	mov	r0, r5
 80164fc:	f7ff ffa6 	bl	801644c <rcl_node_get_namespace>
 8016500:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016504:	4681      	mov	r9, r0
 8016506:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801650a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801650c:	46ac      	mov	ip, r5
 801650e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016512:	f8de 3000 	ldr.w	r3, [lr]
 8016516:	f8cc 3000 	str.w	r3, [ip]
 801651a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801651c:	b1fb      	cbz	r3, 801655e <rcl_node_resolve_name+0x8e>
 801651e:	468a      	mov	sl, r1
 8016520:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016524:	f002 fc8c 	bl	8018e40 <rcutils_get_zero_initialized_string_map>
 8016528:	ab10      	add	r3, sp, #64	@ 0x40
 801652a:	9008      	str	r0, [sp, #32]
 801652c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016530:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016534:	2100      	movs	r1, #0
 8016536:	e895 000c 	ldmia.w	r5, {r2, r3}
 801653a:	a808      	add	r0, sp, #32
 801653c:	f002 fcf8 	bl	8018f30 <rcutils_string_map_init>
 8016540:	4607      	mov	r7, r0
 8016542:	b180      	cbz	r0, 8016566 <rcl_node_resolve_name+0x96>
 8016544:	f7f9 fc64 	bl	800fe10 <rcutils_get_error_string>
 8016548:	f7f9 fc7a 	bl	800fe40 <rcutils_reset_error>
 801654c:	2f0a      	cmp	r7, #10
 801654e:	bf18      	it	ne
 8016550:	2701      	movne	r7, #1
 8016552:	4638      	mov	r0, r7
 8016554:	b011      	add	sp, #68	@ 0x44
 8016556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801655a:	b002      	add	sp, #8
 801655c:	4770      	bx	lr
 801655e:	270b      	movs	r7, #11
 8016560:	e7f7      	b.n	8016552 <rcl_node_resolve_name+0x82>
 8016562:	2701      	movs	r7, #1
 8016564:	e7f5      	b.n	8016552 <rcl_node_resolve_name+0x82>
 8016566:	9009      	str	r0, [sp, #36]	@ 0x24
 8016568:	9007      	str	r0, [sp, #28]
 801656a:	a808      	add	r0, sp, #32
 801656c:	f004 fc5c 	bl	801ae28 <rcl_get_default_topic_name_substitutions>
 8016570:	4607      	mov	r7, r0
 8016572:	b1a8      	cbz	r0, 80165a0 <rcl_node_resolve_name+0xd0>
 8016574:	280a      	cmp	r0, #10
 8016576:	9c07      	ldr	r4, [sp, #28]
 8016578:	d000      	beq.n	801657c <rcl_node_resolve_name+0xac>
 801657a:	2701      	movs	r7, #1
 801657c:	a808      	add	r0, sp, #32
 801657e:	f002 fd17 	bl	8018fb0 <rcutils_string_map_fini>
 8016582:	2800      	cmp	r0, #0
 8016584:	d13d      	bne.n	8016602 <rcl_node_resolve_name+0x132>
 8016586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016588:	4659      	mov	r1, fp
 801658a:	47d0      	blx	sl
 801658c:	4659      	mov	r1, fp
 801658e:	4620      	mov	r0, r4
 8016590:	47d0      	blx	sl
 8016592:	f1b8 0f00 	cmp.w	r8, #0
 8016596:	d0dc      	beq.n	8016552 <rcl_node_resolve_name+0x82>
 8016598:	2f67      	cmp	r7, #103	@ 0x67
 801659a:	bf08      	it	eq
 801659c:	2768      	moveq	r7, #104	@ 0x68
 801659e:	e7d8      	b.n	8016552 <rcl_node_resolve_name+0x82>
 80165a0:	ab09      	add	r3, sp, #36	@ 0x24
 80165a2:	9305      	str	r3, [sp, #20]
 80165a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165a6:	46ec      	mov	ip, sp
 80165a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	f8cc 3000 	str.w	r3, [ip]
 80165b2:	464a      	mov	r2, r9
 80165b4:	4631      	mov	r1, r6
 80165b6:	4620      	mov	r0, r4
 80165b8:	ab08      	add	r3, sp, #32
 80165ba:	f004 fad7 	bl	801ab6c <rcl_expand_topic_name>
 80165be:	4607      	mov	r7, r0
 80165c0:	b9b8      	cbnz	r0, 80165f2 <rcl_node_resolve_name+0x122>
 80165c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80165c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80165c6:	4602      	mov	r2, r0
 80165c8:	a90a      	add	r1, sp, #40	@ 0x28
 80165ca:	4620      	mov	r0, r4
 80165cc:	f002 fe00 	bl	80191d0 <rmw_validate_full_topic_name>
 80165d0:	b988      	cbnz	r0, 80165f6 <rcl_node_resolve_name+0x126>
 80165d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80165d4:	b9d5      	cbnz	r5, 801660c <rcl_node_resolve_name+0x13c>
 80165d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80165d8:	a808      	add	r0, sp, #32
 80165da:	601c      	str	r4, [r3, #0]
 80165dc:	f002 fce8 	bl	8018fb0 <rcutils_string_map_fini>
 80165e0:	4607      	mov	r7, r0
 80165e2:	b1a8      	cbz	r0, 8016610 <rcl_node_resolve_name+0x140>
 80165e4:	f7f9 fc14 	bl	800fe10 <rcutils_get_error_string>
 80165e8:	462c      	mov	r4, r5
 80165ea:	f7f9 fc29 	bl	800fe40 <rcutils_reset_error>
 80165ee:	2701      	movs	r7, #1
 80165f0:	e7c9      	b.n	8016586 <rcl_node_resolve_name+0xb6>
 80165f2:	9c07      	ldr	r4, [sp, #28]
 80165f4:	e7c2      	b.n	801657c <rcl_node_resolve_name+0xac>
 80165f6:	f7f9 fc0b 	bl	800fe10 <rcutils_get_error_string>
 80165fa:	2701      	movs	r7, #1
 80165fc:	f7f9 fc20 	bl	800fe40 <rcutils_reset_error>
 8016600:	e7bc      	b.n	801657c <rcl_node_resolve_name+0xac>
 8016602:	f7f9 fc05 	bl	800fe10 <rcutils_get_error_string>
 8016606:	f7f9 fc1b 	bl	800fe40 <rcutils_reset_error>
 801660a:	e7bc      	b.n	8016586 <rcl_node_resolve_name+0xb6>
 801660c:	2767      	movs	r7, #103	@ 0x67
 801660e:	e7b5      	b.n	801657c <rcl_node_resolve_name+0xac>
 8016610:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016612:	4659      	mov	r1, fp
 8016614:	47d0      	blx	sl
 8016616:	4659      	mov	r1, fp
 8016618:	4638      	mov	r0, r7
 801661a:	47d0      	blx	sl
 801661c:	e799      	b.n	8016552 <rcl_node_resolve_name+0x82>
 801661e:	bf00      	nop

08016620 <exact_match_lookup>:
 8016620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016622:	f102 0708 	add.w	r7, r2, #8
 8016626:	460b      	mov	r3, r1
 8016628:	4614      	mov	r4, r2
 801662a:	4606      	mov	r6, r0
 801662c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016630:	b085      	sub	sp, #20
 8016632:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016636:	4618      	mov	r0, r3
 8016638:	4919      	ldr	r1, [pc, #100]	@ (80166a0 <exact_match_lookup+0x80>)
 801663a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801663e:	f002 fa99 	bl	8018b74 <rcutils_join_path>
 8016642:	7833      	ldrb	r3, [r6, #0]
 8016644:	2b2f      	cmp	r3, #47	@ 0x2f
 8016646:	4605      	mov	r5, r0
 8016648:	d023      	beq.n	8016692 <exact_match_lookup+0x72>
 801664a:	f104 030c 	add.w	r3, r4, #12
 801664e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016652:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016656:	1c70      	adds	r0, r6, #1
 8016658:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801665c:	f002 fa90 	bl	8018b80 <rcutils_to_native_path>
 8016660:	4606      	mov	r6, r0
 8016662:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016666:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801666a:	4631      	mov	r1, r6
 801666c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016670:	4628      	mov	r0, r5
 8016672:	f002 fa7f 	bl	8018b74 <rcutils_join_path>
 8016676:	6862      	ldr	r2, [r4, #4]
 8016678:	6921      	ldr	r1, [r4, #16]
 801667a:	4603      	mov	r3, r0
 801667c:	4630      	mov	r0, r6
 801667e:	461e      	mov	r6, r3
 8016680:	4790      	blx	r2
 8016682:	4628      	mov	r0, r5
 8016684:	6863      	ldr	r3, [r4, #4]
 8016686:	6921      	ldr	r1, [r4, #16]
 8016688:	4798      	blx	r3
 801668a:	4635      	mov	r5, r6
 801668c:	4628      	mov	r0, r5
 801668e:	b005      	add	sp, #20
 8016690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016692:	7873      	ldrb	r3, [r6, #1]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1d8      	bne.n	801664a <exact_match_lookup+0x2a>
 8016698:	4628      	mov	r0, r5
 801669a:	b005      	add	sp, #20
 801669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669e:	bf00      	nop
 80166a0:	0801e3c4 	.word	0x0801e3c4

080166a4 <rcl_get_secure_root>:
 80166a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166a8:	b085      	sub	sp, #20
 80166aa:	b168      	cbz	r0, 80166c8 <rcl_get_secure_root+0x24>
 80166ac:	4607      	mov	r7, r0
 80166ae:	4608      	mov	r0, r1
 80166b0:	460c      	mov	r4, r1
 80166b2:	f7f9 fb9f 	bl	800fdf4 <rcutils_allocator_is_valid>
 80166b6:	b138      	cbz	r0, 80166c8 <rcl_get_secure_root+0x24>
 80166b8:	2300      	movs	r3, #0
 80166ba:	482d      	ldr	r0, [pc, #180]	@ (8016770 <rcl_get_secure_root+0xcc>)
 80166bc:	9303      	str	r3, [sp, #12]
 80166be:	a903      	add	r1, sp, #12
 80166c0:	f002 fa3e 	bl	8018b40 <rcutils_get_env>
 80166c4:	4605      	mov	r5, r0
 80166c6:	b120      	cbz	r0, 80166d2 <rcl_get_secure_root+0x2e>
 80166c8:	2500      	movs	r5, #0
 80166ca:	4628      	mov	r0, r5
 80166cc:	b005      	add	sp, #20
 80166ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	781a      	ldrb	r2, [r3, #0]
 80166d6:	2a00      	cmp	r2, #0
 80166d8:	d0f6      	beq.n	80166c8 <rcl_get_secure_root+0x24>
 80166da:	f104 090c 	add.w	r9, r4, #12
 80166de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80166e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80166e6:	4618      	mov	r0, r3
 80166e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80166ec:	f002 fb6a 	bl	8018dc4 <rcutils_strdup>
 80166f0:	4680      	mov	r8, r0
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d0e8      	beq.n	80166c8 <rcl_get_secure_root+0x24>
 80166f6:	481f      	ldr	r0, [pc, #124]	@ (8016774 <rcl_get_secure_root+0xd0>)
 80166f8:	9503      	str	r5, [sp, #12]
 80166fa:	a903      	add	r1, sp, #12
 80166fc:	f002 fa20 	bl	8018b40 <rcutils_get_env>
 8016700:	b160      	cbz	r0, 801671c <rcl_get_secure_root+0x78>
 8016702:	2600      	movs	r6, #0
 8016704:	6863      	ldr	r3, [r4, #4]
 8016706:	6921      	ldr	r1, [r4, #16]
 8016708:	4630      	mov	r0, r6
 801670a:	4798      	blx	r3
 801670c:	4640      	mov	r0, r8
 801670e:	6863      	ldr	r3, [r4, #4]
 8016710:	6921      	ldr	r1, [r4, #16]
 8016712:	4798      	blx	r3
 8016714:	4628      	mov	r0, r5
 8016716:	b005      	add	sp, #20
 8016718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801671c:	9b03      	ldr	r3, [sp, #12]
 801671e:	781e      	ldrb	r6, [r3, #0]
 8016720:	b1f6      	cbz	r6, 8016760 <rcl_get_secure_root+0xbc>
 8016722:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016726:	e88d 0003 	stmia.w	sp, {r0, r1}
 801672a:	4618      	mov	r0, r3
 801672c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016730:	f002 fb48 	bl	8018dc4 <rcutils_strdup>
 8016734:	4606      	mov	r6, r0
 8016736:	2800      	cmp	r0, #0
 8016738:	d0e3      	beq.n	8016702 <rcl_get_secure_root+0x5e>
 801673a:	4622      	mov	r2, r4
 801673c:	4641      	mov	r1, r8
 801673e:	f7ff ff6f 	bl	8016620 <exact_match_lookup>
 8016742:	4605      	mov	r5, r0
 8016744:	2d00      	cmp	r5, #0
 8016746:	d0dd      	beq.n	8016704 <rcl_get_secure_root+0x60>
 8016748:	4628      	mov	r0, r5
 801674a:	f002 fa11 	bl	8018b70 <rcutils_is_directory>
 801674e:	4603      	mov	r3, r0
 8016750:	2800      	cmp	r0, #0
 8016752:	d1d7      	bne.n	8016704 <rcl_get_secure_root+0x60>
 8016754:	4628      	mov	r0, r5
 8016756:	6921      	ldr	r1, [r4, #16]
 8016758:	461d      	mov	r5, r3
 801675a:	6863      	ldr	r3, [r4, #4]
 801675c:	4798      	blx	r3
 801675e:	e7d1      	b.n	8016704 <rcl_get_secure_root+0x60>
 8016760:	4622      	mov	r2, r4
 8016762:	4638      	mov	r0, r7
 8016764:	4641      	mov	r1, r8
 8016766:	f7ff ff5b 	bl	8016620 <exact_match_lookup>
 801676a:	4605      	mov	r5, r0
 801676c:	e7ea      	b.n	8016744 <rcl_get_secure_root+0xa0>
 801676e:	bf00      	nop
 8016770:	0801e3d0 	.word	0x0801e3d0
 8016774:	0801e3e8 	.word	0x0801e3e8

08016778 <rcl_get_security_options_from_environment>:
 8016778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801677c:	b082      	sub	sp, #8
 801677e:	2300      	movs	r3, #0
 8016780:	4606      	mov	r6, r0
 8016782:	460f      	mov	r7, r1
 8016784:	4820      	ldr	r0, [pc, #128]	@ (8016808 <rcl_get_security_options_from_environment+0x90>)
 8016786:	9301      	str	r3, [sp, #4]
 8016788:	a901      	add	r1, sp, #4
 801678a:	4690      	mov	r8, r2
 801678c:	f002 f9d8 	bl	8018b40 <rcutils_get_env>
 8016790:	b120      	cbz	r0, 801679c <rcl_get_security_options_from_environment+0x24>
 8016792:	2501      	movs	r5, #1
 8016794:	4628      	mov	r0, r5
 8016796:	b002      	add	sp, #8
 8016798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801679c:	491b      	ldr	r1, [pc, #108]	@ (801680c <rcl_get_security_options_from_environment+0x94>)
 801679e:	4604      	mov	r4, r0
 80167a0:	9801      	ldr	r0, [sp, #4]
 80167a2:	f7e9 fd3d 	bl	8000220 <strcmp>
 80167a6:	4605      	mov	r5, r0
 80167a8:	b9e8      	cbnz	r0, 80167e6 <rcl_get_security_options_from_environment+0x6e>
 80167aa:	9001      	str	r0, [sp, #4]
 80167ac:	f1b8 0f00 	cmp.w	r8, #0
 80167b0:	d020      	beq.n	80167f4 <rcl_get_security_options_from_environment+0x7c>
 80167b2:	4817      	ldr	r0, [pc, #92]	@ (8016810 <rcl_get_security_options_from_environment+0x98>)
 80167b4:	a901      	add	r1, sp, #4
 80167b6:	f002 f9c3 	bl	8018b40 <rcutils_get_env>
 80167ba:	2800      	cmp	r0, #0
 80167bc:	d1e9      	bne.n	8016792 <rcl_get_security_options_from_environment+0x1a>
 80167be:	4915      	ldr	r1, [pc, #84]	@ (8016814 <rcl_get_security_options_from_environment+0x9c>)
 80167c0:	9801      	ldr	r0, [sp, #4]
 80167c2:	f7e9 fd2d 	bl	8000220 <strcmp>
 80167c6:	fab0 f080 	clz	r0, r0
 80167ca:	0940      	lsrs	r0, r0, #5
 80167cc:	f888 0000 	strb.w	r0, [r8]
 80167d0:	4639      	mov	r1, r7
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7ff ff66 	bl	80166a4 <rcl_get_secure_root>
 80167d8:	b170      	cbz	r0, 80167f8 <rcl_get_security_options_from_environment+0x80>
 80167da:	f8c8 0004 	str.w	r0, [r8, #4]
 80167de:	4628      	mov	r0, r5
 80167e0:	b002      	add	sp, #8
 80167e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e6:	4625      	mov	r5, r4
 80167e8:	4628      	mov	r0, r5
 80167ea:	f888 4000 	strb.w	r4, [r8]
 80167ee:	b002      	add	sp, #8
 80167f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f4:	250b      	movs	r5, #11
 80167f6:	e7cd      	b.n	8016794 <rcl_get_security_options_from_environment+0x1c>
 80167f8:	f898 5000 	ldrb.w	r5, [r8]
 80167fc:	f1a5 0501 	sub.w	r5, r5, #1
 8016800:	fab5 f585 	clz	r5, r5
 8016804:	096d      	lsrs	r5, r5, #5
 8016806:	e7c5      	b.n	8016794 <rcl_get_security_options_from_environment+0x1c>
 8016808:	0801e388 	.word	0x0801e388
 801680c:	0801e39c 	.word	0x0801e39c
 8016810:	0801e3a4 	.word	0x0801e3a4
 8016814:	0801e3bc 	.word	0x0801e3bc

08016818 <rcl_get_zero_initialized_service>:
 8016818:	4b01      	ldr	r3, [pc, #4]	@ (8016820 <rcl_get_zero_initialized_service+0x8>)
 801681a:	6818      	ldr	r0, [r3, #0]
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	0801e408 	.word	0x0801e408

08016824 <rcl_service_init>:
 8016824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016828:	b089      	sub	sp, #36	@ 0x24
 801682a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801682c:	b1c5      	cbz	r5, 8016860 <rcl_service_init+0x3c>
 801682e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8016832:	4604      	mov	r4, r0
 8016834:	4648      	mov	r0, r9
 8016836:	4688      	mov	r8, r1
 8016838:	4617      	mov	r7, r2
 801683a:	461e      	mov	r6, r3
 801683c:	f7f9 fada 	bl	800fdf4 <rcutils_allocator_is_valid>
 8016840:	b170      	cbz	r0, 8016860 <rcl_service_init+0x3c>
 8016842:	b16c      	cbz	r4, 8016860 <rcl_service_init+0x3c>
 8016844:	4640      	mov	r0, r8
 8016846:	f7ff fdef 	bl	8016428 <rcl_node_is_valid>
 801684a:	2800      	cmp	r0, #0
 801684c:	d058      	beq.n	8016900 <rcl_service_init+0xdc>
 801684e:	b13f      	cbz	r7, 8016860 <rcl_service_init+0x3c>
 8016850:	b136      	cbz	r6, 8016860 <rcl_service_init+0x3c>
 8016852:	6823      	ldr	r3, [r4, #0]
 8016854:	b14b      	cbz	r3, 801686a <rcl_service_init+0x46>
 8016856:	2664      	movs	r6, #100	@ 0x64
 8016858:	4630      	mov	r0, r6
 801685a:	b009      	add	sp, #36	@ 0x24
 801685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016860:	260b      	movs	r6, #11
 8016862:	4630      	mov	r0, r6
 8016864:	b009      	add	sp, #36	@ 0x24
 8016866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801686a:	aa07      	add	r2, sp, #28
 801686c:	9205      	str	r2, [sp, #20]
 801686e:	2201      	movs	r2, #1
 8016870:	9304      	str	r3, [sp, #16]
 8016872:	9203      	str	r2, [sp, #12]
 8016874:	9307      	str	r3, [sp, #28]
 8016876:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801687a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801687e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016882:	4631      	mov	r1, r6
 8016884:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016888:	4640      	mov	r0, r8
 801688a:	f7ff fe21 	bl	80164d0 <rcl_node_resolve_name>
 801688e:	2800      	cmp	r0, #0
 8016890:	d145      	bne.n	801691e <rcl_service_init+0xfa>
 8016892:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8016894:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016896:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801689a:	4798      	blx	r3
 801689c:	6020      	str	r0, [r4, #0]
 801689e:	2800      	cmp	r0, #0
 80168a0:	d043      	beq.n	801692a <rcl_service_init+0x106>
 80168a2:	4640      	mov	r0, r8
 80168a4:	f7ff fde2 	bl	801646c <rcl_node_get_rmw_handle>
 80168a8:	462b      	mov	r3, r5
 80168aa:	9a07      	ldr	r2, [sp, #28]
 80168ac:	6826      	ldr	r6, [r4, #0]
 80168ae:	4639      	mov	r1, r7
 80168b0:	f7fa f878 	bl	80109a4 <rmw_create_service>
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 80168ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80168be:	b330      	cbz	r0, 801690e <rcl_service_init+0xea>
 80168c0:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80168c4:	f7fa f994 	bl	8010bf0 <rmw_service_request_subscription_get_actual_qos>
 80168c8:	b9f8      	cbnz	r0, 801690a <rcl_service_init+0xe6>
 80168ca:	6821      	ldr	r1, [r4, #0]
 80168cc:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 80168d0:	31b8      	adds	r1, #184	@ 0xb8
 80168d2:	f7fa f97d 	bl	8010bd0 <rmw_service_response_publisher_get_actual_qos>
 80168d6:	4606      	mov	r6, r0
 80168d8:	b9b8      	cbnz	r0, 801690a <rcl_service_init+0xe6>
 80168da:	6820      	ldr	r0, [r4, #0]
 80168dc:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 80168e0:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 80168e4:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80168e8:	2268      	movs	r2, #104	@ 0x68
 80168ea:	4629      	mov	r1, r5
 80168ec:	f005 facb 	bl	801be86 <memcpy>
 80168f0:	9807      	ldr	r0, [sp, #28]
 80168f2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80168f4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80168f6:	4798      	blx	r3
 80168f8:	4630      	mov	r0, r6
 80168fa:	b009      	add	sp, #36	@ 0x24
 80168fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016900:	26c8      	movs	r6, #200	@ 0xc8
 8016902:	4630      	mov	r0, r6
 8016904:	b009      	add	sp, #36	@ 0x24
 8016906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	b12b      	cbz	r3, 801691a <rcl_service_init+0xf6>
 801690e:	4618      	mov	r0, r3
 8016910:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8016912:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016914:	4790      	blx	r2
 8016916:	2300      	movs	r3, #0
 8016918:	6023      	str	r3, [r4, #0]
 801691a:	2601      	movs	r6, #1
 801691c:	e7e8      	b.n	80168f0 <rcl_service_init+0xcc>
 801691e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8016922:	2b01      	cmp	r3, #1
 8016924:	d903      	bls.n	801692e <rcl_service_init+0x10a>
 8016926:	280a      	cmp	r0, #10
 8016928:	d1f7      	bne.n	801691a <rcl_service_init+0xf6>
 801692a:	260a      	movs	r6, #10
 801692c:	e7e0      	b.n	80168f0 <rcl_service_init+0xcc>
 801692e:	2668      	movs	r6, #104	@ 0x68
 8016930:	e7de      	b.n	80168f0 <rcl_service_init+0xcc>
 8016932:	bf00      	nop

08016934 <rcl_service_get_default_options>:
 8016934:	b530      	push	{r4, r5, lr}
 8016936:	4d0f      	ldr	r5, [pc, #60]	@ (8016974 <rcl_service_get_default_options+0x40>)
 8016938:	490f      	ldr	r1, [pc, #60]	@ (8016978 <rcl_service_get_default_options+0x44>)
 801693a:	b087      	sub	sp, #28
 801693c:	4604      	mov	r4, r0
 801693e:	2250      	movs	r2, #80	@ 0x50
 8016940:	4628      	mov	r0, r5
 8016942:	f005 faa0 	bl	801be86 <memcpy>
 8016946:	4668      	mov	r0, sp
 8016948:	f7f9 fa46 	bl	800fdd8 <rcutils_get_default_allocator>
 801694c:	46ec      	mov	ip, sp
 801694e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016952:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016956:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801695a:	2268      	movs	r2, #104	@ 0x68
 801695c:	f8dc 3000 	ldr.w	r3, [ip]
 8016960:	f8ce 3000 	str.w	r3, [lr]
 8016964:	4629      	mov	r1, r5
 8016966:	4620      	mov	r0, r4
 8016968:	f005 fa8d 	bl	801be86 <memcpy>
 801696c:	4620      	mov	r0, r4
 801696e:	b007      	add	sp, #28
 8016970:	bd30      	pop	{r4, r5, pc}
 8016972:	bf00      	nop
 8016974:	2000bd08 	.word	0x2000bd08
 8016978:	0801e410 	.word	0x0801e410

0801697c <rcl_service_get_rmw_handle>:
 801697c:	b118      	cbz	r0, 8016986 <rcl_service_get_rmw_handle+0xa>
 801697e:	6800      	ldr	r0, [r0, #0]
 8016980:	b108      	cbz	r0, 8016986 <rcl_service_get_rmw_handle+0xa>
 8016982:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016986:	4770      	bx	lr

08016988 <rcl_take_request>:
 8016988:	b570      	push	{r4, r5, r6, lr}
 801698a:	468e      	mov	lr, r1
 801698c:	460c      	mov	r4, r1
 801698e:	4616      	mov	r6, r2
 8016990:	4605      	mov	r5, r0
 8016992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016996:	b08c      	sub	sp, #48	@ 0x30
 8016998:	f10d 0c18 	add.w	ip, sp, #24
 801699c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80169a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80169a8:	b30d      	cbz	r5, 80169ee <rcl_take_request+0x66>
 80169aa:	682b      	ldr	r3, [r5, #0]
 80169ac:	b1fb      	cbz	r3, 80169ee <rcl_take_request+0x66>
 80169ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80169b2:	b1e0      	cbz	r0, 80169ee <rcl_take_request+0x66>
 80169b4:	b336      	cbz	r6, 8016a04 <rcl_take_request+0x7c>
 80169b6:	2300      	movs	r3, #0
 80169b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80169bc:	4632      	mov	r2, r6
 80169be:	f10d 0307 	add.w	r3, sp, #7
 80169c2:	a902      	add	r1, sp, #8
 80169c4:	f002 ff5a 	bl	801987c <rmw_take_request>
 80169c8:	4605      	mov	r5, r0
 80169ca:	b198      	cbz	r0, 80169f4 <rcl_take_request+0x6c>
 80169cc:	280a      	cmp	r0, #10
 80169ce:	bf18      	it	ne
 80169d0:	2501      	movne	r5, #1
 80169d2:	f10d 0e18 	add.w	lr, sp, #24
 80169d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169da:	46a4      	mov	ip, r4
 80169dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80169e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80169e8:	4628      	mov	r0, r5
 80169ea:	b00c      	add	sp, #48	@ 0x30
 80169ec:	bd70      	pop	{r4, r5, r6, pc}
 80169ee:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80169f2:	e7ee      	b.n	80169d2 <rcl_take_request+0x4a>
 80169f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80169f8:	f240 2359 	movw	r3, #601	@ 0x259
 80169fc:	2a00      	cmp	r2, #0
 80169fe:	bf08      	it	eq
 8016a00:	461d      	moveq	r5, r3
 8016a02:	e7e6      	b.n	80169d2 <rcl_take_request+0x4a>
 8016a04:	250b      	movs	r5, #11
 8016a06:	e7e4      	b.n	80169d2 <rcl_take_request+0x4a>

08016a08 <rcl_send_response>:
 8016a08:	b170      	cbz	r0, 8016a28 <rcl_send_response+0x20>
 8016a0a:	6800      	ldr	r0, [r0, #0]
 8016a0c:	b160      	cbz	r0, 8016a28 <rcl_send_response+0x20>
 8016a0e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016a12:	b148      	cbz	r0, 8016a28 <rcl_send_response+0x20>
 8016a14:	b159      	cbz	r1, 8016a2e <rcl_send_response+0x26>
 8016a16:	b510      	push	{r4, lr}
 8016a18:	b15a      	cbz	r2, 8016a32 <rcl_send_response+0x2a>
 8016a1a:	f002 ff8d 	bl	8019938 <rmw_send_response>
 8016a1e:	b110      	cbz	r0, 8016a26 <rcl_send_response+0x1e>
 8016a20:	2802      	cmp	r0, #2
 8016a22:	bf18      	it	ne
 8016a24:	2001      	movne	r0, #1
 8016a26:	bd10      	pop	{r4, pc}
 8016a28:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016a2c:	4770      	bx	lr
 8016a2e:	200b      	movs	r0, #11
 8016a30:	4770      	bx	lr
 8016a32:	200b      	movs	r0, #11
 8016a34:	bd10      	pop	{r4, pc}
 8016a36:	bf00      	nop

08016a38 <rcl_service_is_valid>:
 8016a38:	b130      	cbz	r0, 8016a48 <rcl_service_is_valid+0x10>
 8016a3a:	6800      	ldr	r0, [r0, #0]
 8016a3c:	b120      	cbz	r0, 8016a48 <rcl_service_is_valid+0x10>
 8016a3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016a42:	3800      	subs	r0, #0
 8016a44:	bf18      	it	ne
 8016a46:	2001      	movne	r0, #1
 8016a48:	4770      	bx	lr
 8016a4a:	bf00      	nop

08016a4c <rcl_take>:
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d04a      	beq.n	8016ae6 <rcl_take+0x9a>
 8016a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a54:	4604      	mov	r4, r0
 8016a56:	6800      	ldr	r0, [r0, #0]
 8016a58:	b0a4      	sub	sp, #144	@ 0x90
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d03b      	beq.n	8016ad6 <rcl_take+0x8a>
 8016a5e:	461f      	mov	r7, r3
 8016a60:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d036      	beq.n	8016ad6 <rcl_take+0x8a>
 8016a68:	460e      	mov	r6, r1
 8016a6a:	2900      	cmp	r1, #0
 8016a6c:	d039      	beq.n	8016ae2 <rcl_take+0x96>
 8016a6e:	4615      	mov	r5, r2
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	d03c      	beq.n	8016aee <rcl_take+0xa2>
 8016a74:	a802      	add	r0, sp, #8
 8016a76:	f002 fba3 	bl	80191c0 <rmw_get_zero_initialized_message_info>
 8016a7a:	f10d 0c08 	add.w	ip, sp, #8
 8016a7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a82:	46ae      	mov	lr, r5
 8016a84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a98:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8016a9c:	f04f 0800 	mov.w	r8, #0
 8016aa0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8016aa4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8016aa8:	6822      	ldr	r2, [r4, #0]
 8016aaa:	462b      	mov	r3, r5
 8016aac:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8016ab0:	9700      	str	r7, [sp, #0]
 8016ab2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8016ab6:	4631      	mov	r1, r6
 8016ab8:	f002 ffe4 	bl	8019a84 <rmw_take_with_info>
 8016abc:	4603      	mov	r3, r0
 8016abe:	b9c0      	cbnz	r0, 8016af2 <rcl_take+0xa6>
 8016ac0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016ac4:	f240 1291 	movw	r2, #401	@ 0x191
 8016ac8:	2900      	cmp	r1, #0
 8016aca:	bf08      	it	eq
 8016acc:	4613      	moveq	r3, r2
 8016ace:	4618      	mov	r0, r3
 8016ad0:	b024      	add	sp, #144	@ 0x90
 8016ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016ada:	4618      	mov	r0, r3
 8016adc:	b024      	add	sp, #144	@ 0x90
 8016ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ae2:	230b      	movs	r3, #11
 8016ae4:	e7f3      	b.n	8016ace <rcl_take+0x82>
 8016ae6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016aea:	4618      	mov	r0, r3
 8016aec:	4770      	bx	lr
 8016aee:	ad14      	add	r5, sp, #80	@ 0x50
 8016af0:	e7c0      	b.n	8016a74 <rcl_take+0x28>
 8016af2:	f7ff f99f 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 8016af6:	4603      	mov	r3, r0
 8016af8:	e7e9      	b.n	8016ace <rcl_take+0x82>
 8016afa:	bf00      	nop

08016afc <rcl_subscription_get_rmw_handle>:
 8016afc:	b118      	cbz	r0, 8016b06 <rcl_subscription_get_rmw_handle+0xa>
 8016afe:	6800      	ldr	r0, [r0, #0]
 8016b00:	b108      	cbz	r0, 8016b06 <rcl_subscription_get_rmw_handle+0xa>
 8016b02:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016b06:	4770      	bx	lr

08016b08 <rcl_subscription_is_valid>:
 8016b08:	b130      	cbz	r0, 8016b18 <rcl_subscription_is_valid+0x10>
 8016b0a:	6800      	ldr	r0, [r0, #0]
 8016b0c:	b120      	cbz	r0, 8016b18 <rcl_subscription_is_valid+0x10>
 8016b0e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016b12:	3800      	subs	r0, #0
 8016b14:	bf18      	it	ne
 8016b16:	2001      	movne	r0, #1
 8016b18:	4770      	bx	lr
 8016b1a:	bf00      	nop

08016b1c <rcl_get_system_time>:
 8016b1c:	4608      	mov	r0, r1
 8016b1e:	f7f9 b9ab 	b.w	800fe78 <rcutils_system_time_now>
 8016b22:	bf00      	nop

08016b24 <rcl_get_steady_time>:
 8016b24:	4608      	mov	r0, r1
 8016b26:	f7f9 b9cf 	b.w	800fec8 <rcutils_steady_time_now>
 8016b2a:	bf00      	nop

08016b2c <rcl_get_ros_time>:
 8016b2c:	7a03      	ldrb	r3, [r0, #8]
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	460c      	mov	r4, r1
 8016b32:	b133      	cbz	r3, 8016b42 <rcl_get_ros_time+0x16>
 8016b34:	2105      	movs	r1, #5
 8016b36:	f001 ff5f 	bl	80189f8 <__atomic_load_8>
 8016b3a:	e9c4 0100 	strd	r0, r1, [r4]
 8016b3e:	2000      	movs	r0, #0
 8016b40:	bd10      	pop	{r4, pc}
 8016b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b46:	4608      	mov	r0, r1
 8016b48:	f7f9 b996 	b.w	800fe78 <rcutils_system_time_now>

08016b4c <rcl_clock_init>:
 8016b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4e:	4605      	mov	r5, r0
 8016b50:	4610      	mov	r0, r2
 8016b52:	4614      	mov	r4, r2
 8016b54:	460e      	mov	r6, r1
 8016b56:	f7f9 f94d 	bl	800fdf4 <rcutils_allocator_is_valid>
 8016b5a:	b128      	cbz	r0, 8016b68 <rcl_clock_init+0x1c>
 8016b5c:	2d03      	cmp	r5, #3
 8016b5e:	d803      	bhi.n	8016b68 <rcl_clock_init+0x1c>
 8016b60:	e8df f005 	tbb	[pc, r5]
 8016b64:	06532e1d 	.word	0x06532e1d
 8016b68:	f04f 0c0b 	mov.w	ip, #11
 8016b6c:	4660      	mov	r0, ip
 8016b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b70:	2e00      	cmp	r6, #0
 8016b72:	d0f9      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016b74:	2c00      	cmp	r4, #0
 8016b76:	d0f7      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016b7e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8016c34 <rcl_clock_init+0xe8>
 8016b82:	6133      	str	r3, [r6, #16]
 8016b84:	f106 0514 	add.w	r5, r6, #20
 8016b88:	469c      	mov	ip, r3
 8016b8a:	2703      	movs	r7, #3
 8016b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016b90:	6823      	ldr	r3, [r4, #0]
 8016b92:	602b      	str	r3, [r5, #0]
 8016b94:	7037      	strb	r7, [r6, #0]
 8016b96:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016b9a:	4660      	mov	r0, ip
 8016b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b9e:	2e00      	cmp	r6, #0
 8016ba0:	d0e2      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	7033      	strb	r3, [r6, #0]
 8016ba6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016baa:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016bae:	469c      	mov	ip, r3
 8016bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bb2:	f106 0514 	add.w	r5, r6, #20
 8016bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016bb8:	6823      	ldr	r3, [r4, #0]
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	4660      	mov	r0, ip
 8016bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc0:	2e00      	cmp	r6, #0
 8016bc2:	d0d1      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016bc4:	2c00      	cmp	r4, #0
 8016bc6:	d0cf      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016bc8:	2700      	movs	r7, #0
 8016bca:	7037      	strb	r7, [r6, #0]
 8016bcc:	46a4      	mov	ip, r4
 8016bce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016bd2:	f106 0514 	add.w	r5, r6, #20
 8016bd6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016bda:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8016bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016be0:	f8dc 3000 	ldr.w	r3, [ip]
 8016be4:	602b      	str	r3, [r5, #0]
 8016be6:	6921      	ldr	r1, [r4, #16]
 8016be8:	6823      	ldr	r3, [r4, #0]
 8016bea:	2010      	movs	r0, #16
 8016bec:	4798      	blx	r3
 8016bee:	6130      	str	r0, [r6, #16]
 8016bf0:	b1d0      	cbz	r0, 8016c28 <rcl_clock_init+0xdc>
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	e9c0 2300 	strd	r2, r3, [r0]
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	7207      	strb	r7, [r0, #8]
 8016bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8016c30 <rcl_clock_init+0xe4>)
 8016c00:	7033      	strb	r3, [r6, #0]
 8016c02:	46bc      	mov	ip, r7
 8016c04:	60f2      	str	r2, [r6, #12]
 8016c06:	4660      	mov	r0, ip
 8016c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c0a:	2e00      	cmp	r6, #0
 8016c0c:	d0ac      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016c0e:	2c00      	cmp	r4, #0
 8016c10:	d0aa      	beq.n	8016b68 <rcl_clock_init+0x1c>
 8016c12:	2300      	movs	r3, #0
 8016c14:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016c18:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8016c38 <rcl_clock_init+0xec>
 8016c1c:	6133      	str	r3, [r6, #16]
 8016c1e:	f106 0514 	add.w	r5, r6, #20
 8016c22:	469c      	mov	ip, r3
 8016c24:	2702      	movs	r7, #2
 8016c26:	e7b1      	b.n	8016b8c <rcl_clock_init+0x40>
 8016c28:	f04f 0c0a 	mov.w	ip, #10
 8016c2c:	e79e      	b.n	8016b6c <rcl_clock_init+0x20>
 8016c2e:	bf00      	nop
 8016c30:	08016b2d 	.word	0x08016b2d
 8016c34:	08016b25 	.word	0x08016b25
 8016c38:	08016b1d 	.word	0x08016b1d

08016c3c <rcl_clock_get_now>:
 8016c3c:	b140      	cbz	r0, 8016c50 <rcl_clock_get_now+0x14>
 8016c3e:	b139      	cbz	r1, 8016c50 <rcl_clock_get_now+0x14>
 8016c40:	7803      	ldrb	r3, [r0, #0]
 8016c42:	b11b      	cbz	r3, 8016c4c <rcl_clock_get_now+0x10>
 8016c44:	68c3      	ldr	r3, [r0, #12]
 8016c46:	b10b      	cbz	r3, 8016c4c <rcl_clock_get_now+0x10>
 8016c48:	6900      	ldr	r0, [r0, #16]
 8016c4a:	4718      	bx	r3
 8016c4c:	2001      	movs	r0, #1
 8016c4e:	4770      	bx	lr
 8016c50:	200b      	movs	r0, #11
 8016c52:	4770      	bx	lr

08016c54 <rcl_clock_add_jump_callback>:
 8016c54:	b082      	sub	sp, #8
 8016c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5a:	a906      	add	r1, sp, #24
 8016c5c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016c60:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8016c64:	b320      	cbz	r0, 8016cb0 <rcl_clock_add_jump_callback+0x5c>
 8016c66:	4604      	mov	r4, r0
 8016c68:	3014      	adds	r0, #20
 8016c6a:	f7f9 f8c3 	bl	800fdf4 <rcutils_allocator_is_valid>
 8016c6e:	b1f8      	cbz	r0, 8016cb0 <rcl_clock_add_jump_callback+0x5c>
 8016c70:	b1f6      	cbz	r6, 8016cb0 <rcl_clock_add_jump_callback+0x5c>
 8016c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	db1b      	blt.n	8016cb0 <rcl_clock_add_jump_callback+0x5c>
 8016c78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016c7c:	2a01      	cmp	r2, #1
 8016c7e:	f173 0300 	sbcs.w	r3, r3, #0
 8016c82:	da15      	bge.n	8016cb0 <rcl_clock_add_jump_callback+0x5c>
 8016c84:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016c88:	2f00      	cmp	r7, #0
 8016c8a:	d042      	beq.n	8016d12 <rcl_clock_add_jump_callback+0xbe>
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	4602      	mov	r2, r0
 8016c90:	e003      	b.n	8016c9a <rcl_clock_add_jump_callback+0x46>
 8016c92:	42bb      	cmp	r3, r7
 8016c94:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8016c98:	d011      	beq.n	8016cbe <rcl_clock_add_jump_callback+0x6a>
 8016c9a:	6811      	ldr	r1, [r2, #0]
 8016c9c:	42b1      	cmp	r1, r6
 8016c9e:	f103 0301 	add.w	r3, r3, #1
 8016ca2:	d1f6      	bne.n	8016c92 <rcl_clock_add_jump_callback+0x3e>
 8016ca4:	6a11      	ldr	r1, [r2, #32]
 8016ca6:	42a9      	cmp	r1, r5
 8016ca8:	d1f3      	bne.n	8016c92 <rcl_clock_add_jump_callback+0x3e>
 8016caa:	f04f 0e01 	mov.w	lr, #1
 8016cae:	e001      	b.n	8016cb4 <rcl_clock_add_jump_callback+0x60>
 8016cb0:	f04f 0e0b 	mov.w	lr, #11
 8016cb4:	4670      	mov	r0, lr
 8016cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cba:	b002      	add	sp, #8
 8016cbc:	4770      	bx	lr
 8016cbe:	3301      	adds	r3, #1
 8016cc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016cc4:	00d9      	lsls	r1, r3, #3
 8016cc6:	69e3      	ldr	r3, [r4, #28]
 8016cc8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016cca:	4798      	blx	r3
 8016ccc:	b1f0      	cbz	r0, 8016d0c <rcl_clock_add_jump_callback+0xb8>
 8016cce:	68a3      	ldr	r3, [r4, #8]
 8016cd0:	6060      	str	r0, [r4, #4]
 8016cd2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016cd6:	f10d 0c18 	add.w	ip, sp, #24
 8016cda:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8016cde:	f103 0801 	add.w	r8, r3, #1
 8016ce2:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8016ce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016cea:	f106 0708 	add.w	r7, r6, #8
 8016cee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016cf0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016cf4:	f04f 0e00 	mov.w	lr, #0
 8016cf8:	e887 0003 	stmia.w	r7, {r0, r1}
 8016cfc:	6235      	str	r5, [r6, #32]
 8016cfe:	4670      	mov	r0, lr
 8016d00:	f8c4 8008 	str.w	r8, [r4, #8]
 8016d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d08:	b002      	add	sp, #8
 8016d0a:	4770      	bx	lr
 8016d0c:	f04f 0e0a 	mov.w	lr, #10
 8016d10:	e7d0      	b.n	8016cb4 <rcl_clock_add_jump_callback+0x60>
 8016d12:	2128      	movs	r1, #40	@ 0x28
 8016d14:	e7d7      	b.n	8016cc6 <rcl_clock_add_jump_callback+0x72>
 8016d16:	bf00      	nop

08016d18 <rcl_clock_remove_jump_callback>:
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	d057      	beq.n	8016dcc <rcl_clock_remove_jump_callback+0xb4>
 8016d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d20:	4605      	mov	r5, r0
 8016d22:	3014      	adds	r0, #20
 8016d24:	4688      	mov	r8, r1
 8016d26:	4692      	mov	sl, r2
 8016d28:	f7f9 f864 	bl	800fdf4 <rcutils_allocator_is_valid>
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	d03b      	beq.n	8016da8 <rcl_clock_remove_jump_callback+0x90>
 8016d30:	f1b8 0f00 	cmp.w	r8, #0
 8016d34:	d038      	beq.n	8016da8 <rcl_clock_remove_jump_callback+0x90>
 8016d36:	68ae      	ldr	r6, [r5, #8]
 8016d38:	b166      	cbz	r6, 8016d54 <rcl_clock_remove_jump_callback+0x3c>
 8016d3a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016d3e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8016d42:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8016d46:	464c      	mov	r4, r9
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	4543      	cmp	r3, r8
 8016d4c:	d005      	beq.n	8016d5a <rcl_clock_remove_jump_callback+0x42>
 8016d4e:	3428      	adds	r4, #40	@ 0x28
 8016d50:	42a7      	cmp	r7, r4
 8016d52:	d1f9      	bne.n	8016d48 <rcl_clock_remove_jump_callback+0x30>
 8016d54:	2001      	movs	r0, #1
 8016d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d5a:	6a23      	ldr	r3, [r4, #32]
 8016d5c:	3428      	adds	r4, #40	@ 0x28
 8016d5e:	42bc      	cmp	r4, r7
 8016d60:	d02d      	beq.n	8016dbe <rcl_clock_remove_jump_callback+0xa6>
 8016d62:	4553      	cmp	r3, sl
 8016d64:	d1f0      	bne.n	8016d48 <rcl_clock_remove_jump_callback+0x30>
 8016d66:	46a6      	mov	lr, r4
 8016d68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d6c:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8016d70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016d80:	3428      	adds	r4, #40	@ 0x28
 8016d82:	42a7      	cmp	r7, r4
 8016d84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016d88:	d1ed      	bne.n	8016d66 <rcl_clock_remove_jump_callback+0x4e>
 8016d8a:	3e01      	subs	r6, #1
 8016d8c:	60ae      	str	r6, [r5, #8]
 8016d8e:	b176      	cbz	r6, 8016dae <rcl_clock_remove_jump_callback+0x96>
 8016d90:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8016d94:	69eb      	ldr	r3, [r5, #28]
 8016d96:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8016d98:	00f1      	lsls	r1, r6, #3
 8016d9a:	4648      	mov	r0, r9
 8016d9c:	4798      	blx	r3
 8016d9e:	b1b8      	cbz	r0, 8016dd0 <rcl_clock_remove_jump_callback+0xb8>
 8016da0:	6068      	str	r0, [r5, #4]
 8016da2:	2000      	movs	r0, #0
 8016da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016da8:	200b      	movs	r0, #11
 8016daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dae:	4648      	mov	r0, r9
 8016db0:	69ab      	ldr	r3, [r5, #24]
 8016db2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8016db4:	4798      	blx	r3
 8016db6:	606e      	str	r6, [r5, #4]
 8016db8:	4630      	mov	r0, r6
 8016dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dbe:	4553      	cmp	r3, sl
 8016dc0:	d1c8      	bne.n	8016d54 <rcl_clock_remove_jump_callback+0x3c>
 8016dc2:	3e01      	subs	r6, #1
 8016dc4:	60ae      	str	r6, [r5, #8]
 8016dc6:	2e00      	cmp	r6, #0
 8016dc8:	d1e2      	bne.n	8016d90 <rcl_clock_remove_jump_callback+0x78>
 8016dca:	e7f0      	b.n	8016dae <rcl_clock_remove_jump_callback+0x96>
 8016dcc:	200b      	movs	r0, #11
 8016dce:	4770      	bx	lr
 8016dd0:	200a      	movs	r0, #10
 8016dd2:	e7ea      	b.n	8016daa <rcl_clock_remove_jump_callback+0x92>

08016dd4 <_rcl_timer_time_jump>:
 8016dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dd8:	4605      	mov	r5, r0
 8016dda:	b084      	sub	sp, #16
 8016ddc:	4614      	mov	r4, r2
 8016dde:	b131      	cbz	r1, 8016dee <_rcl_timer_time_jump+0x1a>
 8016de0:	7803      	ldrb	r3, [r0, #0]
 8016de2:	3b02      	subs	r3, #2
 8016de4:	2b01      	cmp	r3, #1
 8016de6:	d93f      	bls.n	8016e68 <_rcl_timer_time_jump+0x94>
 8016de8:	b004      	add	sp, #16
 8016dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dee:	6813      	ldr	r3, [r2, #0]
 8016df0:	a902      	add	r1, sp, #8
 8016df2:	6818      	ldr	r0, [r3, #0]
 8016df4:	f7ff ff22 	bl	8016c3c <rcl_clock_get_now>
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d1f5      	bne.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016dfc:	6820      	ldr	r0, [r4, #0]
 8016dfe:	2105      	movs	r1, #5
 8016e00:	3020      	adds	r0, #32
 8016e02:	f001 fdf9 	bl	80189f8 <__atomic_load_8>
 8016e06:	6823      	ldr	r3, [r4, #0]
 8016e08:	4681      	mov	r9, r0
 8016e0a:	4688      	mov	r8, r1
 8016e0c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8016e10:	2105      	movs	r1, #5
 8016e12:	f001 fdf1 	bl	80189f8 <__atomic_load_8>
 8016e16:	4607      	mov	r7, r0
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	460e      	mov	r6, r1
 8016e1c:	3018      	adds	r0, #24
 8016e1e:	2105      	movs	r1, #5
 8016e20:	f001 fdea 	bl	80189f8 <__atomic_load_8>
 8016e24:	782b      	ldrb	r3, [r5, #0]
 8016e26:	9a02      	ldr	r2, [sp, #8]
 8016e28:	3b02      	subs	r3, #2
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	460d      	mov	r5, r1
 8016e2e:	9b03      	ldr	r3, [sp, #12]
 8016e30:	4682      	mov	sl, r0
 8016e32:	d937      	bls.n	8016ea4 <_rcl_timer_time_jump+0xd0>
 8016e34:	42ba      	cmp	r2, r7
 8016e36:	eb73 0106 	sbcs.w	r1, r3, r6
 8016e3a:	da5f      	bge.n	8016efc <_rcl_timer_time_jump+0x128>
 8016e3c:	454a      	cmp	r2, r9
 8016e3e:	eb73 0108 	sbcs.w	r1, r3, r8
 8016e42:	dad1      	bge.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e44:	6820      	ldr	r0, [r4, #0]
 8016e46:	eb1a 0202 	adds.w	r2, sl, r2
 8016e4a:	eb43 0305 	adc.w	r3, r3, r5
 8016e4e:	2505      	movs	r5, #5
 8016e50:	3028      	adds	r0, #40	@ 0x28
 8016e52:	9500      	str	r5, [sp, #0]
 8016e54:	f001 fe06 	bl	8018a64 <__atomic_store_8>
 8016e58:	6820      	ldr	r0, [r4, #0]
 8016e5a:	9500      	str	r5, [sp, #0]
 8016e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e60:	3020      	adds	r0, #32
 8016e62:	f001 fdff 	bl	8018a64 <__atomic_store_8>
 8016e66:	e7bf      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e68:	6813      	ldr	r3, [r2, #0]
 8016e6a:	a902      	add	r1, sp, #8
 8016e6c:	6818      	ldr	r0, [r3, #0]
 8016e6e:	f7ff fee5 	bl	8016c3c <rcl_clock_get_now>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d1b8      	bne.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e7a:	4313      	orrs	r3, r2
 8016e7c:	d0b4      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016e7e:	6820      	ldr	r0, [r4, #0]
 8016e80:	2105      	movs	r1, #5
 8016e82:	3028      	adds	r0, #40	@ 0x28
 8016e84:	f001 fdb8 	bl	80189f8 <__atomic_load_8>
 8016e88:	9d02      	ldr	r5, [sp, #8]
 8016e8a:	9b03      	ldr	r3, [sp, #12]
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	6820      	ldr	r0, [r4, #0]
 8016e90:	1b52      	subs	r2, r2, r5
 8016e92:	f04f 0405 	mov.w	r4, #5
 8016e96:	9400      	str	r4, [sp, #0]
 8016e98:	eb61 0303 	sbc.w	r3, r1, r3
 8016e9c:	3030      	adds	r0, #48	@ 0x30
 8016e9e:	f001 fde1 	bl	8018a64 <__atomic_store_8>
 8016ea2:	e7a1      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ea4:	4313      	orrs	r3, r2
 8016ea6:	d09f      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	f04f 0805 	mov.w	r8, #5
 8016eae:	2300      	movs	r3, #0
 8016eb0:	f8cd 8000 	str.w	r8, [sp]
 8016eb4:	3030      	adds	r0, #48	@ 0x30
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	f001 fe0a 	bl	8018ad0 <__atomic_exchange_8>
 8016ebc:	ea51 0300 	orrs.w	r3, r1, r0
 8016ec0:	4606      	mov	r6, r0
 8016ec2:	460f      	mov	r7, r1
 8016ec4:	d090      	beq.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016ec6:	9a02      	ldr	r2, [sp, #8]
 8016ec8:	9b03      	ldr	r3, [sp, #12]
 8016eca:	f8cd 8000 	str.w	r8, [sp]
 8016ece:	1a12      	subs	r2, r2, r0
 8016ed0:	6820      	ldr	r0, [r4, #0]
 8016ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8016ed6:	eb12 020a 	adds.w	r2, r2, sl
 8016eda:	eb43 0305 	adc.w	r3, r3, r5
 8016ede:	3028      	adds	r0, #40	@ 0x28
 8016ee0:	f001 fdc0 	bl	8018a64 <__atomic_store_8>
 8016ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ee8:	f8cd 8000 	str.w	r8, [sp]
 8016eec:	6820      	ldr	r0, [r4, #0]
 8016eee:	1b92      	subs	r2, r2, r6
 8016ef0:	eb63 0307 	sbc.w	r3, r3, r7
 8016ef4:	3020      	adds	r0, #32
 8016ef6:	f001 fdb5 	bl	8018a64 <__atomic_store_8>
 8016efa:	e775      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016efc:	6820      	ldr	r0, [r4, #0]
 8016efe:	3008      	adds	r0, #8
 8016f00:	f004 f890 	bl	801b024 <rcl_trigger_guard_condition>
 8016f04:	e770      	b.n	8016de8 <_rcl_timer_time_jump+0x14>
 8016f06:	bf00      	nop

08016f08 <rcl_get_zero_initialized_timer>:
 8016f08:	4b01      	ldr	r3, [pc, #4]	@ (8016f10 <rcl_get_zero_initialized_timer+0x8>)
 8016f0a:	6818      	ldr	r0, [r3, #0]
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop
 8016f10:	0801e460 	.word	0x0801e460
 8016f14:	00000000 	.word	0x00000000

08016f18 <rcl_timer_init>:
 8016f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f1c:	b0aa      	sub	sp, #168	@ 0xa8
 8016f1e:	4604      	mov	r4, r0
 8016f20:	a835      	add	r0, sp, #212	@ 0xd4
 8016f22:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8016f26:	460d      	mov	r5, r1
 8016f28:	4692      	mov	sl, r2
 8016f2a:	f7f8 ff63 	bl	800fdf4 <rcutils_allocator_is_valid>
 8016f2e:	2800      	cmp	r0, #0
 8016f30:	d064      	beq.n	8016ffc <rcl_timer_init+0xe4>
 8016f32:	2c00      	cmp	r4, #0
 8016f34:	d062      	beq.n	8016ffc <rcl_timer_init+0xe4>
 8016f36:	2d00      	cmp	r5, #0
 8016f38:	d060      	beq.n	8016ffc <rcl_timer_init+0xe4>
 8016f3a:	2f00      	cmp	r7, #0
 8016f3c:	db5e      	blt.n	8016ffc <rcl_timer_init+0xe4>
 8016f3e:	6823      	ldr	r3, [r4, #0]
 8016f40:	b123      	cbz	r3, 8016f4c <rcl_timer_init+0x34>
 8016f42:	2664      	movs	r6, #100	@ 0x64
 8016f44:	4630      	mov	r0, r6
 8016f46:	b02a      	add	sp, #168	@ 0xa8
 8016f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f4c:	a908      	add	r1, sp, #32
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f7ff fe74 	bl	8016c3c <rcl_clock_get_now>
 8016f54:	4606      	mov	r6, r0
 8016f56:	2800      	cmp	r0, #0
 8016f58:	d1f4      	bne.n	8016f44 <rcl_timer_init+0x2c>
 8016f5a:	ae06      	add	r6, sp, #24
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8016f62:	f003 ff67 	bl	801ae34 <rcl_get_zero_initialized_guard_condition>
 8016f66:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016f6a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8016f6e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8016f70:	e889 0003 	stmia.w	r9, {r0, r1}
 8016f74:	4630      	mov	r0, r6
 8016f76:	f004 f839 	bl	801afec <rcl_guard_condition_get_default_options>
 8016f7a:	ab0d      	add	r3, sp, #52	@ 0x34
 8016f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f84:	4651      	mov	r1, sl
 8016f86:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016f8a:	4648      	mov	r0, r9
 8016f8c:	f003 ff5c 	bl	801ae48 <rcl_guard_condition_init>
 8016f90:	4606      	mov	r6, r0
 8016f92:	2800      	cmp	r0, #0
 8016f94:	d1d6      	bne.n	8016f44 <rcl_timer_init+0x2c>
 8016f96:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d033      	beq.n	8017006 <rcl_timer_init+0xee>
 8016f9e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8016fa0:	911a      	str	r1, [sp, #104]	@ 0x68
 8016fa2:	4642      	mov	r2, r8
 8016fa4:	463b      	mov	r3, r7
 8016fa6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8016faa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fae:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017060 <rcl_timer_init+0x148>
 8016fb2:	eb12 0008 	adds.w	r0, r2, r8
 8016fb6:	eb47 0103 	adc.w	r1, r7, r3
 8016fba:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8016fbe:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016fc2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8016fc6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8016fca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fce:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8016fd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fd6:	f8de 3000 	ldr.w	r3, [lr]
 8016fda:	f8cc 3000 	str.w	r3, [ip]
 8016fde:	f04f 0a00 	mov.w	sl, #0
 8016fe2:	4619      	mov	r1, r3
 8016fe4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016fe8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8016fea:	2050      	movs	r0, #80	@ 0x50
 8016fec:	4798      	blx	r3
 8016fee:	6020      	str	r0, [r4, #0]
 8016ff0:	b358      	cbz	r0, 801704a <rcl_timer_init+0x132>
 8016ff2:	2250      	movs	r2, #80	@ 0x50
 8016ff4:	a916      	add	r1, sp, #88	@ 0x58
 8016ff6:	f004 ff46 	bl	801be86 <memcpy>
 8016ffa:	e7a3      	b.n	8016f44 <rcl_timer_init+0x2c>
 8016ffc:	260b      	movs	r6, #11
 8016ffe:	4630      	mov	r0, r6
 8017000:	b02a      	add	sp, #168	@ 0xa8
 8017002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017006:	2001      	movs	r0, #1
 8017008:	2100      	movs	r1, #0
 801700a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801700e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017012:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017016:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801701a:	4a13      	ldr	r2, [pc, #76]	@ (8017068 <rcl_timer_init+0x150>)
 801701c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017020:	9405      	str	r4, [sp, #20]
 8017022:	9204      	str	r2, [sp, #16]
 8017024:	ab12      	add	r3, sp, #72	@ 0x48
 8017026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017028:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801702c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017030:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8017034:	4628      	mov	r0, r5
 8017036:	f7ff fe0d 	bl	8016c54 <rcl_clock_add_jump_callback>
 801703a:	4682      	mov	sl, r0
 801703c:	2800      	cmp	r0, #0
 801703e:	d0ae      	beq.n	8016f9e <rcl_timer_init+0x86>
 8017040:	4648      	mov	r0, r9
 8017042:	f003 ffad 	bl	801afa0 <rcl_guard_condition_fini>
 8017046:	4656      	mov	r6, sl
 8017048:	e77c      	b.n	8016f44 <rcl_timer_init+0x2c>
 801704a:	4648      	mov	r0, r9
 801704c:	f003 ffa8 	bl	801afa0 <rcl_guard_condition_fini>
 8017050:	4905      	ldr	r1, [pc, #20]	@ (8017068 <rcl_timer_init+0x150>)
 8017052:	4622      	mov	r2, r4
 8017054:	4628      	mov	r0, r5
 8017056:	f7ff fe5f 	bl	8016d18 <rcl_clock_remove_jump_callback>
 801705a:	260a      	movs	r6, #10
 801705c:	e772      	b.n	8016f44 <rcl_timer_init+0x2c>
 801705e:	bf00      	nop
	...
 8017068:	08016dd5 	.word	0x08016dd5

0801706c <rcl_timer_call>:
 801706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017070:	b087      	sub	sp, #28
 8017072:	2800      	cmp	r0, #0
 8017074:	d06d      	beq.n	8017152 <rcl_timer_call+0xe6>
 8017076:	6803      	ldr	r3, [r0, #0]
 8017078:	4604      	mov	r4, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d063      	beq.n	8017146 <rcl_timer_call+0xda>
 801707e:	f3bf 8f5b 	dmb	ish
 8017082:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017086:	f3bf 8f5b 	dmb	ish
 801708a:	2b00      	cmp	r3, #0
 801708c:	d150      	bne.n	8017130 <rcl_timer_call+0xc4>
 801708e:	6803      	ldr	r3, [r0, #0]
 8017090:	a904      	add	r1, sp, #16
 8017092:	6818      	ldr	r0, [r3, #0]
 8017094:	f7ff fdd2 	bl	8016c3c <rcl_clock_get_now>
 8017098:	4605      	mov	r5, r0
 801709a:	2800      	cmp	r0, #0
 801709c:	d14a      	bne.n	8017134 <rcl_timer_call+0xc8>
 801709e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	db4a      	blt.n	801713c <rcl_timer_call+0xd0>
 80170a6:	6820      	ldr	r0, [r4, #0]
 80170a8:	f04f 0a05 	mov.w	sl, #5
 80170ac:	f8cd a000 	str.w	sl, [sp]
 80170b0:	3020      	adds	r0, #32
 80170b2:	f001 fd0d 	bl	8018ad0 <__atomic_exchange_8>
 80170b6:	6823      	ldr	r3, [r4, #0]
 80170b8:	f3bf 8f5b 	dmb	ish
 80170bc:	4680      	mov	r8, r0
 80170be:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80170c2:	f3bf 8f5b 	dmb	ish
 80170c6:	6820      	ldr	r0, [r4, #0]
 80170c8:	4689      	mov	r9, r1
 80170ca:	3028      	adds	r0, #40	@ 0x28
 80170cc:	4651      	mov	r1, sl
 80170ce:	f001 fc93 	bl	80189f8 <__atomic_load_8>
 80170d2:	4606      	mov	r6, r0
 80170d4:	6820      	ldr	r0, [r4, #0]
 80170d6:	460f      	mov	r7, r1
 80170d8:	3018      	adds	r0, #24
 80170da:	4651      	mov	r1, sl
 80170dc:	f001 fc8c 	bl	80189f8 <__atomic_load_8>
 80170e0:	1836      	adds	r6, r6, r0
 80170e2:	4602      	mov	r2, r0
 80170e4:	4682      	mov	sl, r0
 80170e6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80170ea:	eb47 0701 	adc.w	r7, r7, r1
 80170ee:	4286      	cmp	r6, r0
 80170f0:	460b      	mov	r3, r1
 80170f2:	eb77 010c 	sbcs.w	r1, r7, ip
 80170f6:	da04      	bge.n	8017102 <rcl_timer_call+0x96>
 80170f8:	ea53 0102 	orrs.w	r1, r3, r2
 80170fc:	d12e      	bne.n	801715c <rcl_timer_call+0xf0>
 80170fe:	4606      	mov	r6, r0
 8017100:	4667      	mov	r7, ip
 8017102:	6820      	ldr	r0, [r4, #0]
 8017104:	2105      	movs	r1, #5
 8017106:	4632      	mov	r2, r6
 8017108:	463b      	mov	r3, r7
 801710a:	3028      	adds	r0, #40	@ 0x28
 801710c:	9100      	str	r1, [sp, #0]
 801710e:	f001 fca9 	bl	8018a64 <__atomic_store_8>
 8017112:	f1bb 0f00 	cmp.w	fp, #0
 8017116:	d00d      	beq.n	8017134 <rcl_timer_call+0xc8>
 8017118:	9a04      	ldr	r2, [sp, #16]
 801711a:	9b05      	ldr	r3, [sp, #20]
 801711c:	ebb2 0208 	subs.w	r2, r2, r8
 8017120:	4620      	mov	r0, r4
 8017122:	eb63 0309 	sbc.w	r3, r3, r9
 8017126:	47d8      	blx	fp
 8017128:	4628      	mov	r0, r5
 801712a:	b007      	add	sp, #28
 801712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017130:	f240 3521 	movw	r5, #801	@ 0x321
 8017134:	4628      	mov	r0, r5
 8017136:	b007      	add	sp, #28
 8017138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713c:	2501      	movs	r5, #1
 801713e:	4628      	mov	r0, r5
 8017140:	b007      	add	sp, #28
 8017142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017146:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801714a:	4628      	mov	r0, r5
 801714c:	b007      	add	sp, #28
 801714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017152:	250b      	movs	r5, #11
 8017154:	4628      	mov	r0, r5
 8017156:	b007      	add	sp, #28
 8017158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801715c:	1b80      	subs	r0, r0, r6
 801715e:	eb6c 0107 	sbc.w	r1, ip, r7
 8017162:	3801      	subs	r0, #1
 8017164:	f161 0100 	sbc.w	r1, r1, #0
 8017168:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801716c:	f7e9 fd2c 	bl	8000bc8 <__aeabi_ldivmod>
 8017170:	9b02      	ldr	r3, [sp, #8]
 8017172:	3001      	adds	r0, #1
 8017174:	f141 0100 	adc.w	r1, r1, #0
 8017178:	fb00 f303 	mul.w	r3, r0, r3
 801717c:	fb01 330a 	mla	r3, r1, sl, r3
 8017180:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017184:	1986      	adds	r6, r0, r6
 8017186:	4453      	add	r3, sl
 8017188:	eb43 0707 	adc.w	r7, r3, r7
 801718c:	e7b9      	b.n	8017102 <rcl_timer_call+0x96>
 801718e:	bf00      	nop

08017190 <rcl_timer_is_ready>:
 8017190:	b570      	push	{r4, r5, r6, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	b378      	cbz	r0, 80171f6 <rcl_timer_is_ready+0x66>
 8017196:	6803      	ldr	r3, [r0, #0]
 8017198:	4604      	mov	r4, r0
 801719a:	b383      	cbz	r3, 80171fe <rcl_timer_is_ready+0x6e>
 801719c:	460d      	mov	r5, r1
 801719e:	b351      	cbz	r1, 80171f6 <rcl_timer_is_ready+0x66>
 80171a0:	f3bf 8f5b 	dmb	ish
 80171a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80171a8:	f3bf 8f5b 	dmb	ish
 80171ac:	b953      	cbnz	r3, 80171c4 <rcl_timer_is_ready+0x34>
 80171ae:	6803      	ldr	r3, [r0, #0]
 80171b0:	4669      	mov	r1, sp
 80171b2:	6818      	ldr	r0, [r3, #0]
 80171b4:	f7ff fd42 	bl	8016c3c <rcl_clock_get_now>
 80171b8:	4606      	mov	r6, r0
 80171ba:	b140      	cbz	r0, 80171ce <rcl_timer_is_ready+0x3e>
 80171bc:	f240 3321 	movw	r3, #801	@ 0x321
 80171c0:	4298      	cmp	r0, r3
 80171c2:	d101      	bne.n	80171c8 <rcl_timer_is_ready+0x38>
 80171c4:	2600      	movs	r6, #0
 80171c6:	702e      	strb	r6, [r5, #0]
 80171c8:	4630      	mov	r0, r6
 80171ca:	b002      	add	sp, #8
 80171cc:	bd70      	pop	{r4, r5, r6, pc}
 80171ce:	6820      	ldr	r0, [r4, #0]
 80171d0:	2105      	movs	r1, #5
 80171d2:	3028      	adds	r0, #40	@ 0x28
 80171d4:	f001 fc10 	bl	80189f8 <__atomic_load_8>
 80171d8:	9b00      	ldr	r3, [sp, #0]
 80171da:	1ac0      	subs	r0, r0, r3
 80171dc:	9b01      	ldr	r3, [sp, #4]
 80171de:	eb61 0103 	sbc.w	r1, r1, r3
 80171e2:	2801      	cmp	r0, #1
 80171e4:	f171 0300 	sbcs.w	r3, r1, #0
 80171e8:	bfb4      	ite	lt
 80171ea:	2301      	movlt	r3, #1
 80171ec:	2300      	movge	r3, #0
 80171ee:	4630      	mov	r0, r6
 80171f0:	702b      	strb	r3, [r5, #0]
 80171f2:	b002      	add	sp, #8
 80171f4:	bd70      	pop	{r4, r5, r6, pc}
 80171f6:	260b      	movs	r6, #11
 80171f8:	4630      	mov	r0, r6
 80171fa:	b002      	add	sp, #8
 80171fc:	bd70      	pop	{r4, r5, r6, pc}
 80171fe:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017202:	e7e1      	b.n	80171c8 <rcl_timer_is_ready+0x38>

08017204 <rcl_timer_get_time_until_next_call>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	b330      	cbz	r0, 8017258 <rcl_timer_get_time_until_next_call+0x54>
 801720a:	6803      	ldr	r3, [r0, #0]
 801720c:	4604      	mov	r4, r0
 801720e:	b33b      	cbz	r3, 8017260 <rcl_timer_get_time_until_next_call+0x5c>
 8017210:	460d      	mov	r5, r1
 8017212:	b309      	cbz	r1, 8017258 <rcl_timer_get_time_until_next_call+0x54>
 8017214:	f3bf 8f5b 	dmb	ish
 8017218:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801721c:	f3bf 8f5b 	dmb	ish
 8017220:	b9ab      	cbnz	r3, 801724e <rcl_timer_get_time_until_next_call+0x4a>
 8017222:	6803      	ldr	r3, [r0, #0]
 8017224:	4669      	mov	r1, sp
 8017226:	6818      	ldr	r0, [r3, #0]
 8017228:	f7ff fd08 	bl	8016c3c <rcl_clock_get_now>
 801722c:	4606      	mov	r6, r0
 801722e:	b958      	cbnz	r0, 8017248 <rcl_timer_get_time_until_next_call+0x44>
 8017230:	6820      	ldr	r0, [r4, #0]
 8017232:	2105      	movs	r1, #5
 8017234:	3028      	adds	r0, #40	@ 0x28
 8017236:	f001 fbdf 	bl	80189f8 <__atomic_load_8>
 801723a:	9b00      	ldr	r3, [sp, #0]
 801723c:	1ac0      	subs	r0, r0, r3
 801723e:	9b01      	ldr	r3, [sp, #4]
 8017240:	6028      	str	r0, [r5, #0]
 8017242:	eb61 0103 	sbc.w	r1, r1, r3
 8017246:	6069      	str	r1, [r5, #4]
 8017248:	4630      	mov	r0, r6
 801724a:	b002      	add	sp, #8
 801724c:	bd70      	pop	{r4, r5, r6, pc}
 801724e:	f240 3621 	movw	r6, #801	@ 0x321
 8017252:	4630      	mov	r0, r6
 8017254:	b002      	add	sp, #8
 8017256:	bd70      	pop	{r4, r5, r6, pc}
 8017258:	260b      	movs	r6, #11
 801725a:	4630      	mov	r0, r6
 801725c:	b002      	add	sp, #8
 801725e:	bd70      	pop	{r4, r5, r6, pc}
 8017260:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017264:	e7f0      	b.n	8017248 <rcl_timer_get_time_until_next_call+0x44>
 8017266:	bf00      	nop

08017268 <rcl_timer_get_guard_condition>:
 8017268:	b130      	cbz	r0, 8017278 <rcl_timer_get_guard_condition+0x10>
 801726a:	6800      	ldr	r0, [r0, #0]
 801726c:	b120      	cbz	r0, 8017278 <rcl_timer_get_guard_condition+0x10>
 801726e:	68c3      	ldr	r3, [r0, #12]
 8017270:	b10b      	cbz	r3, 8017276 <rcl_timer_get_guard_condition+0xe>
 8017272:	3008      	adds	r0, #8
 8017274:	4770      	bx	lr
 8017276:	4618      	mov	r0, r3
 8017278:	4770      	bx	lr
 801727a:	bf00      	nop

0801727c <rcl_validate_enclave_name_with_size>:
 801727c:	b378      	cbz	r0, 80172de <rcl_validate_enclave_name_with_size+0x62>
 801727e:	b570      	push	{r4, r5, r6, lr}
 8017280:	4615      	mov	r5, r2
 8017282:	b0c2      	sub	sp, #264	@ 0x108
 8017284:	b302      	cbz	r2, 80172c8 <rcl_validate_enclave_name_with_size+0x4c>
 8017286:	461e      	mov	r6, r3
 8017288:	466a      	mov	r2, sp
 801728a:	ab01      	add	r3, sp, #4
 801728c:	460c      	mov	r4, r1
 801728e:	f002 f815 	bl	80192bc <rmw_validate_namespace_with_size>
 8017292:	4684      	mov	ip, r0
 8017294:	b9e8      	cbnz	r0, 80172d2 <rcl_validate_enclave_name_with_size+0x56>
 8017296:	9b00      	ldr	r3, [sp, #0]
 8017298:	b923      	cbnz	r3, 80172a4 <rcl_validate_enclave_name_with_size+0x28>
 801729a:	2300      	movs	r3, #0
 801729c:	602b      	str	r3, [r5, #0]
 801729e:	4660      	mov	r0, ip
 80172a0:	b042      	add	sp, #264	@ 0x108
 80172a2:	bd70      	pop	{r4, r5, r6, pc}
 80172a4:	2b07      	cmp	r3, #7
 80172a6:	d007      	beq.n	80172b8 <rcl_validate_enclave_name_with_size+0x3c>
 80172a8:	1e5a      	subs	r2, r3, #1
 80172aa:	2a05      	cmp	r2, #5
 80172ac:	d833      	bhi.n	8017316 <rcl_validate_enclave_name_with_size+0x9a>
 80172ae:	e8df f002 	tbb	[pc, r2]
 80172b2:	2c2f      	.short	0x2c2f
 80172b4:	1a232629 	.word	0x1a232629
 80172b8:	2cff      	cmp	r4, #255	@ 0xff
 80172ba:	d9ee      	bls.n	801729a <rcl_validate_enclave_name_with_size+0x1e>
 80172bc:	602b      	str	r3, [r5, #0]
 80172be:	2e00      	cmp	r6, #0
 80172c0:	d0ed      	beq.n	801729e <rcl_validate_enclave_name_with_size+0x22>
 80172c2:	23fe      	movs	r3, #254	@ 0xfe
 80172c4:	6033      	str	r3, [r6, #0]
 80172c6:	e7ea      	b.n	801729e <rcl_validate_enclave_name_with_size+0x22>
 80172c8:	f04f 0c0b 	mov.w	ip, #11
 80172cc:	4660      	mov	r0, ip
 80172ce:	b042      	add	sp, #264	@ 0x108
 80172d0:	bd70      	pop	{r4, r5, r6, pc}
 80172d2:	f7fe fdaf 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 80172d6:	4684      	mov	ip, r0
 80172d8:	4660      	mov	r0, ip
 80172da:	b042      	add	sp, #264	@ 0x108
 80172dc:	bd70      	pop	{r4, r5, r6, pc}
 80172de:	f04f 0c0b 	mov.w	ip, #11
 80172e2:	4660      	mov	r0, ip
 80172e4:	4770      	bx	lr
 80172e6:	2306      	movs	r3, #6
 80172e8:	602b      	str	r3, [r5, #0]
 80172ea:	2e00      	cmp	r6, #0
 80172ec:	d0d7      	beq.n	801729e <rcl_validate_enclave_name_with_size+0x22>
 80172ee:	9b01      	ldr	r3, [sp, #4]
 80172f0:	6033      	str	r3, [r6, #0]
 80172f2:	4660      	mov	r0, ip
 80172f4:	b042      	add	sp, #264	@ 0x108
 80172f6:	bd70      	pop	{r4, r5, r6, pc}
 80172f8:	2305      	movs	r3, #5
 80172fa:	602b      	str	r3, [r5, #0]
 80172fc:	e7f5      	b.n	80172ea <rcl_validate_enclave_name_with_size+0x6e>
 80172fe:	2304      	movs	r3, #4
 8017300:	602b      	str	r3, [r5, #0]
 8017302:	e7f2      	b.n	80172ea <rcl_validate_enclave_name_with_size+0x6e>
 8017304:	2303      	movs	r3, #3
 8017306:	602b      	str	r3, [r5, #0]
 8017308:	e7ef      	b.n	80172ea <rcl_validate_enclave_name_with_size+0x6e>
 801730a:	2302      	movs	r3, #2
 801730c:	602b      	str	r3, [r5, #0]
 801730e:	e7ec      	b.n	80172ea <rcl_validate_enclave_name_with_size+0x6e>
 8017310:	2301      	movs	r3, #1
 8017312:	602b      	str	r3, [r5, #0]
 8017314:	e7e9      	b.n	80172ea <rcl_validate_enclave_name_with_size+0x6e>
 8017316:	4a04      	ldr	r2, [pc, #16]	@ (8017328 <rcl_validate_enclave_name_with_size+0xac>)
 8017318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801731c:	a802      	add	r0, sp, #8
 801731e:	f001 fd25 	bl	8018d6c <rcutils_snprintf>
 8017322:	f04f 0c01 	mov.w	ip, #1
 8017326:	e7ba      	b.n	801729e <rcl_validate_enclave_name_with_size+0x22>
 8017328:	0801e464 	.word	0x0801e464

0801732c <rcl_validate_enclave_name>:
 801732c:	b168      	cbz	r0, 801734a <rcl_validate_enclave_name+0x1e>
 801732e:	b570      	push	{r4, r5, r6, lr}
 8017330:	460d      	mov	r5, r1
 8017332:	4616      	mov	r6, r2
 8017334:	4604      	mov	r4, r0
 8017336:	f7e8 ff7d 	bl	8000234 <strlen>
 801733a:	4633      	mov	r3, r6
 801733c:	4601      	mov	r1, r0
 801733e:	462a      	mov	r2, r5
 8017340:	4620      	mov	r0, r4
 8017342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017346:	f7ff bf99 	b.w	801727c <rcl_validate_enclave_name_with_size>
 801734a:	200b      	movs	r0, #11
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop

08017350 <rcl_get_zero_initialized_wait_set>:
 8017350:	b510      	push	{r4, lr}
 8017352:	4c08      	ldr	r4, [pc, #32]	@ (8017374 <rcl_get_zero_initialized_wait_set+0x24>)
 8017354:	4686      	mov	lr, r0
 8017356:	4684      	mov	ip, r0
 8017358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801735a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801735e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	f8cc 3000 	str.w	r3, [ip]
 8017370:	4670      	mov	r0, lr
 8017372:	bd10      	pop	{r4, pc}
 8017374:	0801e4c4 	.word	0x0801e4c4

08017378 <rcl_wait_set_is_valid>:
 8017378:	b118      	cbz	r0, 8017382 <rcl_wait_set_is_valid+0xa>
 801737a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801737c:	3800      	subs	r0, #0
 801737e:	bf18      	it	ne
 8017380:	2001      	movne	r0, #1
 8017382:	4770      	bx	lr

08017384 <rcl_wait_set_fini>:
 8017384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017388:	b082      	sub	sp, #8
 801738a:	2800      	cmp	r0, #0
 801738c:	f000 8095 	beq.w	80174ba <rcl_wait_set_fini+0x136>
 8017390:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017392:	4604      	mov	r4, r0
 8017394:	2e00      	cmp	r6, #0
 8017396:	f000 808c 	beq.w	80174b2 <rcl_wait_set_fini+0x12e>
 801739a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801739c:	f002 fd48 	bl	8019e30 <rmw_destroy_wait_set>
 80173a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80173a2:	1e06      	subs	r6, r0, #0
 80173a4:	bf18      	it	ne
 80173a6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80173aa:	2d00      	cmp	r5, #0
 80173ac:	f000 8081 	beq.w	80174b2 <rcl_wait_set_fini+0x12e>
 80173b0:	6820      	ldr	r0, [r4, #0]
 80173b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80173b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80173b8:	2700      	movs	r7, #0
 80173ba:	6067      	str	r7, [r4, #4]
 80173bc:	602f      	str	r7, [r5, #0]
 80173be:	b120      	cbz	r0, 80173ca <rcl_wait_set_fini+0x46>
 80173c0:	9101      	str	r1, [sp, #4]
 80173c2:	47c0      	blx	r8
 80173c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80173c6:	9901      	ldr	r1, [sp, #4]
 80173c8:	6027      	str	r7, [r4, #0]
 80173ca:	68a8      	ldr	r0, [r5, #8]
 80173cc:	b120      	cbz	r0, 80173d8 <rcl_wait_set_fini+0x54>
 80173ce:	47c0      	blx	r8
 80173d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80173d2:	2300      	movs	r3, #0
 80173d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80173d8:	68a0      	ldr	r0, [r4, #8]
 80173da:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80173dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80173de:	f04f 0800 	mov.w	r8, #0
 80173e2:	f8c4 800c 	str.w	r8, [r4, #12]
 80173e6:	f8c5 800c 	str.w	r8, [r5, #12]
 80173ea:	b128      	cbz	r0, 80173f8 <rcl_wait_set_fini+0x74>
 80173ec:	47b8      	blx	r7
 80173ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80173f0:	f8c4 8008 	str.w	r8, [r4, #8]
 80173f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80173f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80173f8:	6968      	ldr	r0, [r5, #20]
 80173fa:	f04f 0800 	mov.w	r8, #0
 80173fe:	f8c5 8010 	str.w	r8, [r5, #16]
 8017402:	b128      	cbz	r0, 8017410 <rcl_wait_set_fini+0x8c>
 8017404:	47b8      	blx	r7
 8017406:	f8c5 8014 	str.w	r8, [r5, #20]
 801740a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801740c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801740e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017410:	6920      	ldr	r0, [r4, #16]
 8017412:	f04f 0800 	mov.w	r8, #0
 8017416:	f8c4 8014 	str.w	r8, [r4, #20]
 801741a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801741e:	b128      	cbz	r0, 801742c <rcl_wait_set_fini+0xa8>
 8017420:	47b8      	blx	r7
 8017422:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017424:	f8c4 8010 	str.w	r8, [r4, #16]
 8017428:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801742a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801742c:	69a0      	ldr	r0, [r4, #24]
 801742e:	f04f 0800 	mov.w	r8, #0
 8017432:	f8c4 801c 	str.w	r8, [r4, #28]
 8017436:	f8c5 8018 	str.w	r8, [r5, #24]
 801743a:	b128      	cbz	r0, 8017448 <rcl_wait_set_fini+0xc4>
 801743c:	9101      	str	r1, [sp, #4]
 801743e:	47b8      	blx	r7
 8017440:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017442:	9901      	ldr	r1, [sp, #4]
 8017444:	f8c4 8018 	str.w	r8, [r4, #24]
 8017448:	6a28      	ldr	r0, [r5, #32]
 801744a:	b120      	cbz	r0, 8017456 <rcl_wait_set_fini+0xd2>
 801744c:	47b8      	blx	r7
 801744e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017450:	2300      	movs	r3, #0
 8017452:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017456:	6a20      	ldr	r0, [r4, #32]
 8017458:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801745c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801745e:	2700      	movs	r7, #0
 8017460:	6267      	str	r7, [r4, #36]	@ 0x24
 8017462:	626f      	str	r7, [r5, #36]	@ 0x24
 8017464:	b120      	cbz	r0, 8017470 <rcl_wait_set_fini+0xec>
 8017466:	9101      	str	r1, [sp, #4]
 8017468:	47c0      	blx	r8
 801746a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801746c:	9901      	ldr	r1, [sp, #4]
 801746e:	6227      	str	r7, [r4, #32]
 8017470:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017472:	b120      	cbz	r0, 801747e <rcl_wait_set_fini+0xfa>
 8017474:	47c0      	blx	r8
 8017476:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017478:	2300      	movs	r3, #0
 801747a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801747e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017480:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017484:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017486:	2700      	movs	r7, #0
 8017488:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801748a:	632f      	str	r7, [r5, #48]	@ 0x30
 801748c:	b120      	cbz	r0, 8017498 <rcl_wait_set_fini+0x114>
 801748e:	9101      	str	r1, [sp, #4]
 8017490:	47c0      	blx	r8
 8017492:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017494:	9901      	ldr	r1, [sp, #4]
 8017496:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017498:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801749a:	b120      	cbz	r0, 80174a6 <rcl_wait_set_fini+0x122>
 801749c:	47c0      	blx	r8
 801749e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80174a0:	2300      	movs	r3, #0
 80174a2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80174a6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80174a8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80174aa:	4628      	mov	r0, r5
 80174ac:	4798      	blx	r3
 80174ae:	2300      	movs	r3, #0
 80174b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80174b2:	4630      	mov	r0, r6
 80174b4:	b002      	add	sp, #8
 80174b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ba:	260b      	movs	r6, #11
 80174bc:	4630      	mov	r0, r6
 80174be:	b002      	add	sp, #8
 80174c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174c4 <rcl_wait_set_add_subscription>:
 80174c4:	b318      	cbz	r0, 801750e <rcl_wait_set_add_subscription+0x4a>
 80174c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80174c8:	b570      	push	{r4, r5, r6, lr}
 80174ca:	4604      	mov	r4, r0
 80174cc:	b30b      	cbz	r3, 8017512 <rcl_wait_set_add_subscription+0x4e>
 80174ce:	b319      	cbz	r1, 8017518 <rcl_wait_set_add_subscription+0x54>
 80174d0:	681d      	ldr	r5, [r3, #0]
 80174d2:	6840      	ldr	r0, [r0, #4]
 80174d4:	4285      	cmp	r5, r0
 80174d6:	d217      	bcs.n	8017508 <rcl_wait_set_add_subscription+0x44>
 80174d8:	6820      	ldr	r0, [r4, #0]
 80174da:	1c6e      	adds	r6, r5, #1
 80174dc:	601e      	str	r6, [r3, #0]
 80174de:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80174e2:	b102      	cbz	r2, 80174e6 <rcl_wait_set_add_subscription+0x22>
 80174e4:	6015      	str	r5, [r2, #0]
 80174e6:	4608      	mov	r0, r1
 80174e8:	f7ff fb08 	bl	8016afc <rcl_subscription_get_rmw_handle>
 80174ec:	b150      	cbz	r0, 8017504 <rcl_wait_set_add_subscription+0x40>
 80174ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80174f0:	6842      	ldr	r2, [r0, #4]
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80174f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80174fa:	6853      	ldr	r3, [r2, #4]
 80174fc:	3301      	adds	r3, #1
 80174fe:	2000      	movs	r0, #0
 8017500:	6053      	str	r3, [r2, #4]
 8017502:	bd70      	pop	{r4, r5, r6, pc}
 8017504:	2001      	movs	r0, #1
 8017506:	bd70      	pop	{r4, r5, r6, pc}
 8017508:	f240 3086 	movw	r0, #902	@ 0x386
 801750c:	bd70      	pop	{r4, r5, r6, pc}
 801750e:	200b      	movs	r0, #11
 8017510:	4770      	bx	lr
 8017512:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017516:	bd70      	pop	{r4, r5, r6, pc}
 8017518:	200b      	movs	r0, #11
 801751a:	bd70      	pop	{r4, r5, r6, pc}

0801751c <rcl_wait_set_clear>:
 801751c:	2800      	cmp	r0, #0
 801751e:	d073      	beq.n	8017608 <rcl_wait_set_clear+0xec>
 8017520:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017522:	b510      	push	{r4, lr}
 8017524:	4604      	mov	r4, r0
 8017526:	2b00      	cmp	r3, #0
 8017528:	d070      	beq.n	801760c <rcl_wait_set_clear+0xf0>
 801752a:	6800      	ldr	r0, [r0, #0]
 801752c:	b138      	cbz	r0, 801753e <rcl_wait_set_clear+0x22>
 801752e:	6862      	ldr	r2, [r4, #4]
 8017530:	2100      	movs	r1, #0
 8017532:	0092      	lsls	r2, r2, #2
 8017534:	f004 fbde 	bl	801bcf4 <memset>
 8017538:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801753a:	2200      	movs	r2, #0
 801753c:	601a      	str	r2, [r3, #0]
 801753e:	68a0      	ldr	r0, [r4, #8]
 8017540:	b138      	cbz	r0, 8017552 <rcl_wait_set_clear+0x36>
 8017542:	68e2      	ldr	r2, [r4, #12]
 8017544:	2100      	movs	r1, #0
 8017546:	0092      	lsls	r2, r2, #2
 8017548:	f004 fbd4 	bl	801bcf4 <memset>
 801754c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801754e:	2200      	movs	r2, #0
 8017550:	60da      	str	r2, [r3, #12]
 8017552:	69a0      	ldr	r0, [r4, #24]
 8017554:	b138      	cbz	r0, 8017566 <rcl_wait_set_clear+0x4a>
 8017556:	69e2      	ldr	r2, [r4, #28]
 8017558:	2100      	movs	r1, #0
 801755a:	0092      	lsls	r2, r2, #2
 801755c:	f004 fbca 	bl	801bcf4 <memset>
 8017560:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017562:	2200      	movs	r2, #0
 8017564:	619a      	str	r2, [r3, #24]
 8017566:	6a20      	ldr	r0, [r4, #32]
 8017568:	b138      	cbz	r0, 801757a <rcl_wait_set_clear+0x5e>
 801756a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801756c:	2100      	movs	r1, #0
 801756e:	0092      	lsls	r2, r2, #2
 8017570:	f004 fbc0 	bl	801bcf4 <memset>
 8017574:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017576:	2200      	movs	r2, #0
 8017578:	625a      	str	r2, [r3, #36]	@ 0x24
 801757a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801757c:	b138      	cbz	r0, 801758e <rcl_wait_set_clear+0x72>
 801757e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017580:	2100      	movs	r1, #0
 8017582:	0092      	lsls	r2, r2, #2
 8017584:	f004 fbb6 	bl	801bcf4 <memset>
 8017588:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801758a:	2200      	movs	r2, #0
 801758c:	631a      	str	r2, [r3, #48]	@ 0x30
 801758e:	6920      	ldr	r0, [r4, #16]
 8017590:	b138      	cbz	r0, 80175a2 <rcl_wait_set_clear+0x86>
 8017592:	6962      	ldr	r2, [r4, #20]
 8017594:	2100      	movs	r1, #0
 8017596:	0092      	lsls	r2, r2, #2
 8017598:	f004 fbac 	bl	801bcf4 <memset>
 801759c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801759e:	2200      	movs	r2, #0
 80175a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80175a2:	6898      	ldr	r0, [r3, #8]
 80175a4:	b138      	cbz	r0, 80175b6 <rcl_wait_set_clear+0x9a>
 80175a6:	685a      	ldr	r2, [r3, #4]
 80175a8:	2100      	movs	r1, #0
 80175aa:	0092      	lsls	r2, r2, #2
 80175ac:	f004 fba2 	bl	801bcf4 <memset>
 80175b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175b2:	2200      	movs	r2, #0
 80175b4:	605a      	str	r2, [r3, #4]
 80175b6:	6958      	ldr	r0, [r3, #20]
 80175b8:	b138      	cbz	r0, 80175ca <rcl_wait_set_clear+0xae>
 80175ba:	691a      	ldr	r2, [r3, #16]
 80175bc:	2100      	movs	r1, #0
 80175be:	0092      	lsls	r2, r2, #2
 80175c0:	f004 fb98 	bl	801bcf4 <memset>
 80175c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175c6:	2200      	movs	r2, #0
 80175c8:	611a      	str	r2, [r3, #16]
 80175ca:	6a18      	ldr	r0, [r3, #32]
 80175cc:	b138      	cbz	r0, 80175de <rcl_wait_set_clear+0xc2>
 80175ce:	69da      	ldr	r2, [r3, #28]
 80175d0:	2100      	movs	r1, #0
 80175d2:	0092      	lsls	r2, r2, #2
 80175d4:	f004 fb8e 	bl	801bcf4 <memset>
 80175d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175da:	2200      	movs	r2, #0
 80175dc:	61da      	str	r2, [r3, #28]
 80175de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80175e0:	b138      	cbz	r0, 80175f2 <rcl_wait_set_clear+0xd6>
 80175e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80175e4:	2100      	movs	r1, #0
 80175e6:	0092      	lsls	r2, r2, #2
 80175e8:	f004 fb84 	bl	801bcf4 <memset>
 80175ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175ee:	2200      	movs	r2, #0
 80175f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80175f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80175f4:	b138      	cbz	r0, 8017606 <rcl_wait_set_clear+0xea>
 80175f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175f8:	2100      	movs	r1, #0
 80175fa:	0092      	lsls	r2, r2, #2
 80175fc:	f004 fb7a 	bl	801bcf4 <memset>
 8017600:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017602:	2000      	movs	r0, #0
 8017604:	6358      	str	r0, [r3, #52]	@ 0x34
 8017606:	bd10      	pop	{r4, pc}
 8017608:	200b      	movs	r0, #11
 801760a:	4770      	bx	lr
 801760c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017610:	bd10      	pop	{r4, pc}
 8017612:	bf00      	nop

08017614 <rcl_wait_set_resize>:
 8017614:	2800      	cmp	r0, #0
 8017616:	f000 8185 	beq.w	8017924 <rcl_wait_set_resize+0x310>
 801761a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017620:	b083      	sub	sp, #12
 8017622:	4605      	mov	r5, r0
 8017624:	2c00      	cmp	r4, #0
 8017626:	f000 817f 	beq.w	8017928 <rcl_wait_set_resize+0x314>
 801762a:	f04f 0900 	mov.w	r9, #0
 801762e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8017632:	461f      	mov	r7, r3
 8017634:	4688      	mov	r8, r1
 8017636:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801763a:	4616      	mov	r6, r2
 801763c:	f8c0 9004 	str.w	r9, [r0, #4]
 8017640:	f8c4 9000 	str.w	r9, [r4]
 8017644:	2900      	cmp	r1, #0
 8017646:	f000 80bd 	beq.w	80177c4 <rcl_wait_set_resize+0x1b0>
 801764a:	008c      	lsls	r4, r1, #2
 801764c:	6800      	ldr	r0, [r0, #0]
 801764e:	9301      	str	r3, [sp, #4]
 8017650:	4652      	mov	r2, sl
 8017652:	4621      	mov	r1, r4
 8017654:	4798      	blx	r3
 8017656:	9b01      	ldr	r3, [sp, #4]
 8017658:	6028      	str	r0, [r5, #0]
 801765a:	2800      	cmp	r0, #0
 801765c:	f000 80cb 	beq.w	80177f6 <rcl_wait_set_resize+0x1e2>
 8017660:	4622      	mov	r2, r4
 8017662:	4649      	mov	r1, r9
 8017664:	9301      	str	r3, [sp, #4]
 8017666:	f004 fb45 	bl	801bcf4 <memset>
 801766a:	f8c5 8004 	str.w	r8, [r5, #4]
 801766e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8017672:	9b01      	ldr	r3, [sp, #4]
 8017674:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017678:	f8c8 9004 	str.w	r9, [r8, #4]
 801767c:	4652      	mov	r2, sl
 801767e:	4621      	mov	r1, r4
 8017680:	4798      	blx	r3
 8017682:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017684:	f8c8 0008 	str.w	r0, [r8, #8]
 8017688:	689b      	ldr	r3, [r3, #8]
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 80ac 	beq.w	80177e8 <rcl_wait_set_resize+0x1d4>
 8017690:	4622      	mov	r2, r4
 8017692:	4649      	mov	r1, r9
 8017694:	4618      	mov	r0, r3
 8017696:	f004 fb2d 	bl	801bcf4 <memset>
 801769a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801769c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80176a0:	f04f 0800 	mov.w	r8, #0
 80176a4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80176a8:	f8c5 800c 	str.w	r8, [r5, #12]
 80176ac:	f8c4 800c 	str.w	r8, [r4, #12]
 80176b0:	2e00      	cmp	r6, #0
 80176b2:	f040 80a4 	bne.w	80177fe <rcl_wait_set_resize+0x1ea>
 80176b6:	68a8      	ldr	r0, [r5, #8]
 80176b8:	b128      	cbz	r0, 80176c6 <rcl_wait_set_resize+0xb2>
 80176ba:	4649      	mov	r1, r9
 80176bc:	4790      	blx	r2
 80176be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80176c0:	60ae      	str	r6, [r5, #8]
 80176c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80176c6:	f04f 0800 	mov.w	r8, #0
 80176ca:	19f6      	adds	r6, r6, r7
 80176cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80176d0:	f040 80ac 	bne.w	801782c <rcl_wait_set_resize+0x218>
 80176d4:	6960      	ldr	r0, [r4, #20]
 80176d6:	b130      	cbz	r0, 80176e6 <rcl_wait_set_resize+0xd2>
 80176d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80176da:	4649      	mov	r1, r9
 80176dc:	4798      	blx	r3
 80176de:	6166      	str	r6, [r4, #20]
 80176e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80176e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80176e6:	2600      	movs	r6, #0
 80176e8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80176ec:	616e      	str	r6, [r5, #20]
 80176ee:	6426      	str	r6, [r4, #64]	@ 0x40
 80176f0:	2f00      	cmp	r7, #0
 80176f2:	f040 80ad 	bne.w	8017850 <rcl_wait_set_resize+0x23c>
 80176f6:	6928      	ldr	r0, [r5, #16]
 80176f8:	b138      	cbz	r0, 801770a <rcl_wait_set_resize+0xf6>
 80176fa:	4649      	mov	r1, r9
 80176fc:	47d0      	blx	sl
 80176fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017700:	612f      	str	r7, [r5, #16]
 8017702:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017706:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801770a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801770c:	2600      	movs	r6, #0
 801770e:	61ee      	str	r6, [r5, #28]
 8017710:	61a6      	str	r6, [r4, #24]
 8017712:	2b00      	cmp	r3, #0
 8017714:	f040 80af 	bne.w	8017876 <rcl_wait_set_resize+0x262>
 8017718:	69a8      	ldr	r0, [r5, #24]
 801771a:	b120      	cbz	r0, 8017726 <rcl_wait_set_resize+0x112>
 801771c:	4649      	mov	r1, r9
 801771e:	47d0      	blx	sl
 8017720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017722:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017724:	61ab      	str	r3, [r5, #24]
 8017726:	6a20      	ldr	r0, [r4, #32]
 8017728:	b128      	cbz	r0, 8017736 <rcl_wait_set_resize+0x122>
 801772a:	4649      	mov	r1, r9
 801772c:	47d0      	blx	sl
 801772e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017730:	2300      	movs	r3, #0
 8017732:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017738:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801773a:	2600      	movs	r6, #0
 801773c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017740:	626e      	str	r6, [r5, #36]	@ 0x24
 8017742:	6266      	str	r6, [r4, #36]	@ 0x24
 8017744:	2b00      	cmp	r3, #0
 8017746:	f000 80b6 	beq.w	80178b6 <rcl_wait_set_resize+0x2a2>
 801774a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801774e:	6a28      	ldr	r0, [r5, #32]
 8017750:	463a      	mov	r2, r7
 8017752:	4651      	mov	r1, sl
 8017754:	47c8      	blx	r9
 8017756:	6228      	str	r0, [r5, #32]
 8017758:	2800      	cmp	r0, #0
 801775a:	d04c      	beq.n	80177f6 <rcl_wait_set_resize+0x1e2>
 801775c:	4652      	mov	r2, sl
 801775e:	4631      	mov	r1, r6
 8017760:	f004 fac8 	bl	801bcf4 <memset>
 8017764:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017768:	626b      	str	r3, [r5, #36]	@ 0x24
 801776a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801776c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801776e:	463a      	mov	r2, r7
 8017770:	4651      	mov	r1, sl
 8017772:	47c8      	blx	r9
 8017774:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017776:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017778:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801777a:	2c00      	cmp	r4, #0
 801777c:	f000 80f0 	beq.w	8017960 <rcl_wait_set_resize+0x34c>
 8017780:	4620      	mov	r0, r4
 8017782:	4652      	mov	r2, sl
 8017784:	4631      	mov	r1, r6
 8017786:	f004 fab5 	bl	801bcf4 <memset>
 801778a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801778c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801778e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017790:	2600      	movs	r6, #0
 8017792:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017796:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017798:	6326      	str	r6, [r4, #48]	@ 0x30
 801779a:	2b00      	cmp	r3, #0
 801779c:	f040 809d 	bne.w	80178da <rcl_wait_set_resize+0x2c6>
 80177a0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80177a2:	b120      	cbz	r0, 80177ae <rcl_wait_set_resize+0x19a>
 80177a4:	4639      	mov	r1, r7
 80177a6:	47c0      	blx	r8
 80177a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80177ac:	62ab      	str	r3, [r5, #40]	@ 0x28
 80177ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80177b0:	b310      	cbz	r0, 80177f8 <rcl_wait_set_resize+0x1e4>
 80177b2:	4639      	mov	r1, r7
 80177b4:	47c0      	blx	r8
 80177b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80177b8:	2000      	movs	r0, #0
 80177ba:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80177be:	b003      	add	sp, #12
 80177c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c4:	6800      	ldr	r0, [r0, #0]
 80177c6:	b120      	cbz	r0, 80177d2 <rcl_wait_set_resize+0x1be>
 80177c8:	4651      	mov	r1, sl
 80177ca:	47d8      	blx	fp
 80177cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80177ce:	f8c5 8000 	str.w	r8, [r5]
 80177d2:	68a0      	ldr	r0, [r4, #8]
 80177d4:	2800      	cmp	r0, #0
 80177d6:	f43f af61 	beq.w	801769c <rcl_wait_set_resize+0x88>
 80177da:	4651      	mov	r1, sl
 80177dc:	47d8      	blx	fp
 80177de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80177e0:	2300      	movs	r3, #0
 80177e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80177e6:	e759      	b.n	801769c <rcl_wait_set_resize+0x88>
 80177e8:	6828      	ldr	r0, [r5, #0]
 80177ea:	9301      	str	r3, [sp, #4]
 80177ec:	4651      	mov	r1, sl
 80177ee:	47d8      	blx	fp
 80177f0:	9b01      	ldr	r3, [sp, #4]
 80177f2:	e9c5 3300 	strd	r3, r3, [r5]
 80177f6:	200a      	movs	r0, #10
 80177f8:	b003      	add	sp, #12
 80177fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fe:	00b4      	lsls	r4, r6, #2
 8017800:	68a8      	ldr	r0, [r5, #8]
 8017802:	464a      	mov	r2, r9
 8017804:	4621      	mov	r1, r4
 8017806:	4798      	blx	r3
 8017808:	60a8      	str	r0, [r5, #8]
 801780a:	2800      	cmp	r0, #0
 801780c:	d0f3      	beq.n	80177f6 <rcl_wait_set_resize+0x1e2>
 801780e:	4622      	mov	r2, r4
 8017810:	4641      	mov	r1, r8
 8017812:	f004 fa6f 	bl	801bcf4 <memset>
 8017816:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017818:	60ee      	str	r6, [r5, #12]
 801781a:	f04f 0800 	mov.w	r8, #0
 801781e:	19f6      	adds	r6, r6, r7
 8017820:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017824:	f8c4 8010 	str.w	r8, [r4, #16]
 8017828:	f43f af54 	beq.w	80176d4 <rcl_wait_set_resize+0xc0>
 801782c:	00b6      	lsls	r6, r6, #2
 801782e:	464a      	mov	r2, r9
 8017830:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017832:	6960      	ldr	r0, [r4, #20]
 8017834:	4631      	mov	r1, r6
 8017836:	4798      	blx	r3
 8017838:	4681      	mov	r9, r0
 801783a:	6160      	str	r0, [r4, #20]
 801783c:	2800      	cmp	r0, #0
 801783e:	d076      	beq.n	801792e <rcl_wait_set_resize+0x31a>
 8017840:	4632      	mov	r2, r6
 8017842:	4641      	mov	r1, r8
 8017844:	f004 fa56 	bl	801bcf4 <memset>
 8017848:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801784a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801784e:	e74a      	b.n	80176e6 <rcl_wait_set_resize+0xd2>
 8017850:	00bc      	lsls	r4, r7, #2
 8017852:	6928      	ldr	r0, [r5, #16]
 8017854:	464a      	mov	r2, r9
 8017856:	4621      	mov	r1, r4
 8017858:	47c0      	blx	r8
 801785a:	6128      	str	r0, [r5, #16]
 801785c:	2800      	cmp	r0, #0
 801785e:	d0ca      	beq.n	80177f6 <rcl_wait_set_resize+0x1e2>
 8017860:	4622      	mov	r2, r4
 8017862:	4631      	mov	r1, r6
 8017864:	f004 fa46 	bl	801bcf4 <memset>
 8017868:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801786a:	616f      	str	r7, [r5, #20]
 801786c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017870:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017874:	e749      	b.n	801770a <rcl_wait_set_resize+0xf6>
 8017876:	009c      	lsls	r4, r3, #2
 8017878:	69a8      	ldr	r0, [r5, #24]
 801787a:	464a      	mov	r2, r9
 801787c:	4621      	mov	r1, r4
 801787e:	47c0      	blx	r8
 8017880:	61a8      	str	r0, [r5, #24]
 8017882:	2800      	cmp	r0, #0
 8017884:	d0b7      	beq.n	80177f6 <rcl_wait_set_resize+0x1e2>
 8017886:	4622      	mov	r2, r4
 8017888:	4631      	mov	r1, r6
 801788a:	f004 fa33 	bl	801bcf4 <memset>
 801788e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017892:	61eb      	str	r3, [r5, #28]
 8017894:	6a38      	ldr	r0, [r7, #32]
 8017896:	61fe      	str	r6, [r7, #28]
 8017898:	464a      	mov	r2, r9
 801789a:	4621      	mov	r1, r4
 801789c:	47c0      	blx	r8
 801789e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80178a0:	6238      	str	r0, [r7, #32]
 80178a2:	6a1f      	ldr	r7, [r3, #32]
 80178a4:	2f00      	cmp	r7, #0
 80178a6:	d054      	beq.n	8017952 <rcl_wait_set_resize+0x33e>
 80178a8:	4622      	mov	r2, r4
 80178aa:	4631      	mov	r1, r6
 80178ac:	4638      	mov	r0, r7
 80178ae:	f004 fa21 	bl	801bcf4 <memset>
 80178b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178b4:	e73f      	b.n	8017736 <rcl_wait_set_resize+0x122>
 80178b6:	6a28      	ldr	r0, [r5, #32]
 80178b8:	b120      	cbz	r0, 80178c4 <rcl_wait_set_resize+0x2b0>
 80178ba:	4639      	mov	r1, r7
 80178bc:	47c0      	blx	r8
 80178be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80178c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178c2:	622b      	str	r3, [r5, #32]
 80178c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80178c6:	2800      	cmp	r0, #0
 80178c8:	f43f af60 	beq.w	801778c <rcl_wait_set_resize+0x178>
 80178cc:	4639      	mov	r1, r7
 80178ce:	47c0      	blx	r8
 80178d0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178d2:	2300      	movs	r3, #0
 80178d4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80178d8:	e758      	b.n	801778c <rcl_wait_set_resize+0x178>
 80178da:	009c      	lsls	r4, r3, #2
 80178dc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80178de:	463a      	mov	r2, r7
 80178e0:	4621      	mov	r1, r4
 80178e2:	47c8      	blx	r9
 80178e4:	62a8      	str	r0, [r5, #40]	@ 0x28
 80178e6:	2800      	cmp	r0, #0
 80178e8:	d085      	beq.n	80177f6 <rcl_wait_set_resize+0x1e2>
 80178ea:	4622      	mov	r2, r4
 80178ec:	4631      	mov	r1, r6
 80178ee:	f004 fa01 	bl	801bcf4 <memset>
 80178f2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80178f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80178fa:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80178fe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017902:	463a      	mov	r2, r7
 8017904:	4621      	mov	r1, r4
 8017906:	47c8      	blx	r9
 8017908:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801790a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017910:	b36b      	cbz	r3, 801796e <rcl_wait_set_resize+0x35a>
 8017912:	4622      	mov	r2, r4
 8017914:	4631      	mov	r1, r6
 8017916:	4618      	mov	r0, r3
 8017918:	f004 f9ec 	bl	801bcf4 <memset>
 801791c:	4630      	mov	r0, r6
 801791e:	b003      	add	sp, #12
 8017920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017924:	200b      	movs	r0, #11
 8017926:	4770      	bx	lr
 8017928:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801792c:	e764      	b.n	80177f8 <rcl_wait_set_resize+0x1e4>
 801792e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017930:	68a8      	ldr	r0, [r5, #8]
 8017932:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017936:	4798      	blx	r3
 8017938:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801793a:	6928      	ldr	r0, [r5, #16]
 801793c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801793e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017940:	f8c5 900c 	str.w	r9, [r5, #12]
 8017944:	f8c5 9008 	str.w	r9, [r5, #8]
 8017948:	4790      	blx	r2
 801794a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801794e:	200a      	movs	r0, #10
 8017950:	e752      	b.n	80177f8 <rcl_wait_set_resize+0x1e4>
 8017952:	69a8      	ldr	r0, [r5, #24]
 8017954:	4649      	mov	r1, r9
 8017956:	47d0      	blx	sl
 8017958:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801795c:	200a      	movs	r0, #10
 801795e:	e74b      	b.n	80177f8 <rcl_wait_set_resize+0x1e4>
 8017960:	6a28      	ldr	r0, [r5, #32]
 8017962:	4639      	mov	r1, r7
 8017964:	47c0      	blx	r8
 8017966:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801796a:	200a      	movs	r0, #10
 801796c:	e744      	b.n	80177f8 <rcl_wait_set_resize+0x1e4>
 801796e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017970:	9301      	str	r3, [sp, #4]
 8017972:	4639      	mov	r1, r7
 8017974:	47c0      	blx	r8
 8017976:	9b01      	ldr	r3, [sp, #4]
 8017978:	200a      	movs	r0, #10
 801797a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801797e:	e73b      	b.n	80177f8 <rcl_wait_set_resize+0x1e4>

08017980 <rcl_wait_set_init>:
 8017980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017984:	b084      	sub	sp, #16
 8017986:	4604      	mov	r4, r0
 8017988:	a810      	add	r0, sp, #64	@ 0x40
 801798a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801798e:	460f      	mov	r7, r1
 8017990:	4690      	mov	r8, r2
 8017992:	4699      	mov	r9, r3
 8017994:	f7f8 fa2e 	bl	800fdf4 <rcutils_allocator_is_valid>
 8017998:	2800      	cmp	r0, #0
 801799a:	d06b      	beq.n	8017a74 <rcl_wait_set_init+0xf4>
 801799c:	2c00      	cmp	r4, #0
 801799e:	d069      	beq.n	8017a74 <rcl_wait_set_init+0xf4>
 80179a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80179a2:	b125      	cbz	r5, 80179ae <rcl_wait_set_init+0x2e>
 80179a4:	2564      	movs	r5, #100	@ 0x64
 80179a6:	4628      	mov	r0, r5
 80179a8:	b004      	add	sp, #16
 80179aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ae:	f1ba 0f00 	cmp.w	sl, #0
 80179b2:	d05f      	beq.n	8017a74 <rcl_wait_set_init+0xf4>
 80179b4:	4650      	mov	r0, sl
 80179b6:	f7fe fa5b 	bl	8015e70 <rcl_context_is_valid>
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d067      	beq.n	8017a8e <rcl_wait_set_init+0x10e>
 80179be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80179c0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80179c2:	205c      	movs	r0, #92	@ 0x5c
 80179c4:	4798      	blx	r3
 80179c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d062      	beq.n	8017a92 <rcl_wait_set_init+0x112>
 80179cc:	4629      	mov	r1, r5
 80179ce:	225c      	movs	r2, #92	@ 0x5c
 80179d0:	f004 f990 	bl	801bcf4 <memset>
 80179d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80179d8:	eb03 0e02 	add.w	lr, r3, r2
 80179dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179de:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80179e0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80179e4:	449e      	add	lr, r3
 80179e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80179ea:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80179ee:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80179f2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80179f6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80179fa:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80179fe:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017a02:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017a06:	f8da a000 	ldr.w	sl, [sl]
 8017a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017a0c:	44c6      	add	lr, r8
 8017a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8017a12:	602b      	str	r3, [r5, #0]
 8017a14:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017a18:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8017a1c:	f002 f9fe 	bl	8019e1c <rmw_create_wait_set>
 8017a20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a22:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8017a24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017a26:	b350      	cbz	r0, 8017a7e <rcl_wait_set_init+0xfe>
 8017a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a2a:	9302      	str	r3, [sp, #8]
 8017a2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a2e:	9301      	str	r3, [sp, #4]
 8017a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a32:	9300      	str	r3, [sp, #0]
 8017a34:	4642      	mov	r2, r8
 8017a36:	464b      	mov	r3, r9
 8017a38:	4639      	mov	r1, r7
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	f7ff fdea 	bl	8017614 <rcl_wait_set_resize>
 8017a40:	4605      	mov	r5, r0
 8017a42:	2800      	cmp	r0, #0
 8017a44:	d0af      	beq.n	80179a6 <rcl_wait_set_init+0x26>
 8017a46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a48:	bb2b      	cbnz	r3, 8017a96 <rcl_wait_set_init+0x116>
 8017a4a:	2600      	movs	r6, #0
 8017a4c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017a50:	9600      	str	r6, [sp, #0]
 8017a52:	4633      	mov	r3, r6
 8017a54:	4632      	mov	r2, r6
 8017a56:	4631      	mov	r1, r6
 8017a58:	4620      	mov	r0, r4
 8017a5a:	f7ff fddb 	bl	8017614 <rcl_wait_set_resize>
 8017a5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d0a0      	beq.n	80179a6 <rcl_wait_set_init+0x26>
 8017a64:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017a66:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017a68:	4798      	blx	r3
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	6326      	str	r6, [r4, #48]	@ 0x30
 8017a6e:	b004      	add	sp, #16
 8017a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a74:	250b      	movs	r5, #11
 8017a76:	4628      	mov	r0, r5
 8017a78:	b004      	add	sp, #16
 8017a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7e:	2501      	movs	r5, #1
 8017a80:	f002 f9d6 	bl	8019e30 <rmw_destroy_wait_set>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	bf18      	it	ne
 8017a88:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8017a8c:	e7dd      	b.n	8017a4a <rcl_wait_set_init+0xca>
 8017a8e:	2565      	movs	r5, #101	@ 0x65
 8017a90:	e789      	b.n	80179a6 <rcl_wait_set_init+0x26>
 8017a92:	250a      	movs	r5, #10
 8017a94:	e787      	b.n	80179a6 <rcl_wait_set_init+0x26>
 8017a96:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017a98:	e7f2      	b.n	8017a80 <rcl_wait_set_init+0x100>
 8017a9a:	bf00      	nop

08017a9c <rcl_wait_set_add_guard_condition>:
 8017a9c:	b318      	cbz	r0, 8017ae6 <rcl_wait_set_add_guard_condition+0x4a>
 8017a9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	b30b      	cbz	r3, 8017aea <rcl_wait_set_add_guard_condition+0x4e>
 8017aa6:	b319      	cbz	r1, 8017af0 <rcl_wait_set_add_guard_condition+0x54>
 8017aa8:	68dd      	ldr	r5, [r3, #12]
 8017aaa:	68c0      	ldr	r0, [r0, #12]
 8017aac:	4285      	cmp	r5, r0
 8017aae:	d217      	bcs.n	8017ae0 <rcl_wait_set_add_guard_condition+0x44>
 8017ab0:	68a0      	ldr	r0, [r4, #8]
 8017ab2:	1c6e      	adds	r6, r5, #1
 8017ab4:	60de      	str	r6, [r3, #12]
 8017ab6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017aba:	b102      	cbz	r2, 8017abe <rcl_wait_set_add_guard_condition+0x22>
 8017abc:	6015      	str	r5, [r2, #0]
 8017abe:	4608      	mov	r0, r1
 8017ac0:	f003 fac0 	bl	801b044 <rcl_guard_condition_get_rmw_handle>
 8017ac4:	b150      	cbz	r0, 8017adc <rcl_wait_set_add_guard_condition+0x40>
 8017ac6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ac8:	6842      	ldr	r2, [r0, #4]
 8017aca:	695b      	ldr	r3, [r3, #20]
 8017acc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ad0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ad2:	6913      	ldr	r3, [r2, #16]
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	2000      	movs	r0, #0
 8017ad8:	6113      	str	r3, [r2, #16]
 8017ada:	bd70      	pop	{r4, r5, r6, pc}
 8017adc:	2001      	movs	r0, #1
 8017ade:	bd70      	pop	{r4, r5, r6, pc}
 8017ae0:	f240 3086 	movw	r0, #902	@ 0x386
 8017ae4:	bd70      	pop	{r4, r5, r6, pc}
 8017ae6:	200b      	movs	r0, #11
 8017ae8:	4770      	bx	lr
 8017aea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017aee:	bd70      	pop	{r4, r5, r6, pc}
 8017af0:	200b      	movs	r0, #11
 8017af2:	bd70      	pop	{r4, r5, r6, pc}

08017af4 <rcl_wait_set_add_timer>:
 8017af4:	b328      	cbz	r0, 8017b42 <rcl_wait_set_add_timer+0x4e>
 8017af6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017af8:	b570      	push	{r4, r5, r6, lr}
 8017afa:	4604      	mov	r4, r0
 8017afc:	b31b      	cbz	r3, 8017b46 <rcl_wait_set_add_timer+0x52>
 8017afe:	b329      	cbz	r1, 8017b4c <rcl_wait_set_add_timer+0x58>
 8017b00:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017b02:	6965      	ldr	r5, [r4, #20]
 8017b04:	42a8      	cmp	r0, r5
 8017b06:	d219      	bcs.n	8017b3c <rcl_wait_set_add_timer+0x48>
 8017b08:	6925      	ldr	r5, [r4, #16]
 8017b0a:	1c46      	adds	r6, r0, #1
 8017b0c:	641e      	str	r6, [r3, #64]	@ 0x40
 8017b0e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017b12:	b102      	cbz	r2, 8017b16 <rcl_wait_set_add_timer+0x22>
 8017b14:	6010      	str	r0, [r2, #0]
 8017b16:	4608      	mov	r0, r1
 8017b18:	f7ff fba6 	bl	8017268 <rcl_timer_get_guard_condition>
 8017b1c:	b168      	cbz	r0, 8017b3a <rcl_wait_set_add_timer+0x46>
 8017b1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b20:	68e3      	ldr	r3, [r4, #12]
 8017b22:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8017b24:	3b01      	subs	r3, #1
 8017b26:	441d      	add	r5, r3
 8017b28:	f003 fa8c 	bl	801b044 <rcl_guard_condition_get_rmw_handle>
 8017b2c:	b180      	cbz	r0, 8017b50 <rcl_wait_set_add_timer+0x5c>
 8017b2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b30:	6842      	ldr	r2, [r0, #4]
 8017b32:	695b      	ldr	r3, [r3, #20]
 8017b34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b38:	2000      	movs	r0, #0
 8017b3a:	bd70      	pop	{r4, r5, r6, pc}
 8017b3c:	f240 3086 	movw	r0, #902	@ 0x386
 8017b40:	bd70      	pop	{r4, r5, r6, pc}
 8017b42:	200b      	movs	r0, #11
 8017b44:	4770      	bx	lr
 8017b46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017b4a:	bd70      	pop	{r4, r5, r6, pc}
 8017b4c:	200b      	movs	r0, #11
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}
 8017b50:	2001      	movs	r0, #1
 8017b52:	bd70      	pop	{r4, r5, r6, pc}

08017b54 <rcl_wait_set_add_client>:
 8017b54:	b318      	cbz	r0, 8017b9e <rcl_wait_set_add_client+0x4a>
 8017b56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017b58:	b570      	push	{r4, r5, r6, lr}
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	b30b      	cbz	r3, 8017ba2 <rcl_wait_set_add_client+0x4e>
 8017b5e:	b319      	cbz	r1, 8017ba8 <rcl_wait_set_add_client+0x54>
 8017b60:	699d      	ldr	r5, [r3, #24]
 8017b62:	69c0      	ldr	r0, [r0, #28]
 8017b64:	4285      	cmp	r5, r0
 8017b66:	d217      	bcs.n	8017b98 <rcl_wait_set_add_client+0x44>
 8017b68:	69a0      	ldr	r0, [r4, #24]
 8017b6a:	1c6e      	adds	r6, r5, #1
 8017b6c:	619e      	str	r6, [r3, #24]
 8017b6e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017b72:	b102      	cbz	r2, 8017b76 <rcl_wait_set_add_client+0x22>
 8017b74:	6015      	str	r5, [r2, #0]
 8017b76:	4608      	mov	r0, r1
 8017b78:	f7fe f8ce 	bl	8015d18 <rcl_client_get_rmw_handle>
 8017b7c:	b150      	cbz	r0, 8017b94 <rcl_wait_set_add_client+0x40>
 8017b7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b80:	6842      	ldr	r2, [r0, #4]
 8017b82:	6a1b      	ldr	r3, [r3, #32]
 8017b84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b8a:	69d3      	ldr	r3, [r2, #28]
 8017b8c:	3301      	adds	r3, #1
 8017b8e:	2000      	movs	r0, #0
 8017b90:	61d3      	str	r3, [r2, #28]
 8017b92:	bd70      	pop	{r4, r5, r6, pc}
 8017b94:	2001      	movs	r0, #1
 8017b96:	bd70      	pop	{r4, r5, r6, pc}
 8017b98:	f240 3086 	movw	r0, #902	@ 0x386
 8017b9c:	bd70      	pop	{r4, r5, r6, pc}
 8017b9e:	200b      	movs	r0, #11
 8017ba0:	4770      	bx	lr
 8017ba2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
 8017ba8:	200b      	movs	r0, #11
 8017baa:	bd70      	pop	{r4, r5, r6, pc}

08017bac <rcl_wait_set_add_service>:
 8017bac:	b318      	cbz	r0, 8017bf6 <rcl_wait_set_add_service+0x4a>
 8017bae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017bb0:	b570      	push	{r4, r5, r6, lr}
 8017bb2:	4604      	mov	r4, r0
 8017bb4:	b30b      	cbz	r3, 8017bfa <rcl_wait_set_add_service+0x4e>
 8017bb6:	b319      	cbz	r1, 8017c00 <rcl_wait_set_add_service+0x54>
 8017bb8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017bba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017bbc:	4285      	cmp	r5, r0
 8017bbe:	d217      	bcs.n	8017bf0 <rcl_wait_set_add_service+0x44>
 8017bc0:	6a20      	ldr	r0, [r4, #32]
 8017bc2:	1c6e      	adds	r6, r5, #1
 8017bc4:	625e      	str	r6, [r3, #36]	@ 0x24
 8017bc6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017bca:	b102      	cbz	r2, 8017bce <rcl_wait_set_add_service+0x22>
 8017bcc:	6015      	str	r5, [r2, #0]
 8017bce:	4608      	mov	r0, r1
 8017bd0:	f7fe fed4 	bl	801697c <rcl_service_get_rmw_handle>
 8017bd4:	b150      	cbz	r0, 8017bec <rcl_wait_set_add_service+0x40>
 8017bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bd8:	6842      	ldr	r2, [r0, #4]
 8017bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bdc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017be0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017be2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017be4:	3301      	adds	r3, #1
 8017be6:	2000      	movs	r0, #0
 8017be8:	6293      	str	r3, [r2, #40]	@ 0x28
 8017bea:	bd70      	pop	{r4, r5, r6, pc}
 8017bec:	2001      	movs	r0, #1
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	f240 3086 	movw	r0, #902	@ 0x386
 8017bf4:	bd70      	pop	{r4, r5, r6, pc}
 8017bf6:	200b      	movs	r0, #11
 8017bf8:	4770      	bx	lr
 8017bfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017bfe:	bd70      	pop	{r4, r5, r6, pc}
 8017c00:	200b      	movs	r0, #11
 8017c02:	bd70      	pop	{r4, r5, r6, pc}
 8017c04:	0000      	movs	r0, r0
	...

08017c08 <rcl_wait>:
 8017c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0c:	ed2d 8b02 	vpush	{d8}
 8017c10:	b08d      	sub	sp, #52	@ 0x34
 8017c12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017c16:	2800      	cmp	r0, #0
 8017c18:	f000 8143 	beq.w	8017ea2 <rcl_wait+0x29a>
 8017c1c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017c1e:	4605      	mov	r5, r0
 8017c20:	2e00      	cmp	r6, #0
 8017c22:	f000 8112 	beq.w	8017e4a <rcl_wait+0x242>
 8017c26:	6843      	ldr	r3, [r0, #4]
 8017c28:	b983      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c2a:	68eb      	ldr	r3, [r5, #12]
 8017c2c:	b973      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c2e:	696b      	ldr	r3, [r5, #20]
 8017c30:	b963      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c32:	69eb      	ldr	r3, [r5, #28]
 8017c34:	b953      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017c38:	b943      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017c3c:	b933      	cbnz	r3, 8017c4c <rcl_wait+0x44>
 8017c3e:	f240 3085 	movw	r0, #901	@ 0x385
 8017c42:	b00d      	add	sp, #52	@ 0x34
 8017c44:	ecbd 8b02 	vpop	{d8}
 8017c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4c:	9b04      	ldr	r3, [sp, #16]
 8017c4e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	9b05      	ldr	r3, [sp, #20]
 8017c54:	f173 0300 	sbcs.w	r3, r3, #0
 8017c58:	f2c0 80f0 	blt.w	8017e3c <rcl_wait+0x234>
 8017c5c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017c60:	4643      	mov	r3, r8
 8017c62:	2a00      	cmp	r2, #0
 8017c64:	f000 8133 	beq.w	8017ece <rcl_wait+0x2c6>
 8017c68:	2400      	movs	r4, #0
 8017c6a:	4613      	mov	r3, r2
 8017c6c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8017ee0 <rcl_wait+0x2d8>
 8017c70:	46a2      	mov	sl, r4
 8017c72:	46a3      	mov	fp, r4
 8017c74:	f240 3921 	movw	r9, #801	@ 0x321
 8017c78:	4632      	mov	r2, r6
 8017c7a:	e014      	b.n	8017ca6 <rcl_wait+0x9e>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	d1e0      	bne.n	8017c42 <rcl_wait+0x3a>
 8017c80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017c84:	4542      	cmp	r2, r8
 8017c86:	eb73 0107 	sbcs.w	r1, r3, r7
 8017c8a:	da03      	bge.n	8017c94 <rcl_wait+0x8c>
 8017c8c:	4690      	mov	r8, r2
 8017c8e:	461f      	mov	r7, r3
 8017c90:	f04f 0b01 	mov.w	fp, #1
 8017c94:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017c96:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017c98:	3401      	adds	r4, #1
 8017c9a:	f14a 0a00 	adc.w	sl, sl, #0
 8017c9e:	429c      	cmp	r4, r3
 8017ca0:	f17a 0100 	sbcs.w	r1, sl, #0
 8017ca4:	d228      	bcs.n	8017cf8 <rcl_wait+0xf0>
 8017ca6:	6928      	ldr	r0, [r5, #16]
 8017ca8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017cac:	a908      	add	r1, sp, #32
 8017cae:	00a6      	lsls	r6, r4, #2
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	d0f1      	beq.n	8017c98 <rcl_wait+0x90>
 8017cb4:	68eb      	ldr	r3, [r5, #12]
 8017cb6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017cba:	4423      	add	r3, r4
 8017cbc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017cc0:	f1be 0f00 	cmp.w	lr, #0
 8017cc4:	d006      	beq.n	8017cd4 <rcl_wait+0xcc>
 8017cc6:	6913      	ldr	r3, [r2, #16]
 8017cc8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	6113      	str	r3, [r2, #16]
 8017cd0:	692b      	ldr	r3, [r5, #16]
 8017cd2:	5998      	ldr	r0, [r3, r6]
 8017cd4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017cd8:	f7ff fa94 	bl	8017204 <rcl_timer_get_time_until_next_call>
 8017cdc:	4548      	cmp	r0, r9
 8017cde:	d1cd      	bne.n	8017c7c <rcl_wait+0x74>
 8017ce0:	692b      	ldr	r3, [r5, #16]
 8017ce2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017ce4:	2100      	movs	r1, #0
 8017ce6:	5199      	str	r1, [r3, r6]
 8017ce8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017cea:	3401      	adds	r4, #1
 8017cec:	f14a 0a00 	adc.w	sl, sl, #0
 8017cf0:	429c      	cmp	r4, r3
 8017cf2:	f17a 0100 	sbcs.w	r1, sl, #0
 8017cf6:	d3d6      	bcc.n	8017ca6 <rcl_wait+0x9e>
 8017cf8:	4616      	mov	r6, r2
 8017cfa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017cfe:	4313      	orrs	r3, r2
 8017d00:	46d9      	mov	r9, fp
 8017d02:	f040 80a9 	bne.w	8017e58 <rcl_wait+0x250>
 8017d06:	2300      	movs	r3, #0
 8017d08:	2200      	movs	r2, #0
 8017d0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017d0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017d12:	ab08      	add	r3, sp, #32
 8017d14:	9302      	str	r3, [sp, #8]
 8017d16:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017d18:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017d1c:	e9cd 3200 	strd	r3, r2, [sp]
 8017d20:	f106 0110 	add.w	r1, r6, #16
 8017d24:	f106 031c 	add.w	r3, r6, #28
 8017d28:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017d2c:	1d30      	adds	r0, r6, #4
 8017d2e:	f001 fefd 	bl	8019b2c <rmw_wait>
 8017d32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017d36:	4680      	mov	r8, r0
 8017d38:	b1ca      	cbz	r2, 8017d6e <rcl_wait+0x166>
 8017d3a:	2400      	movs	r4, #0
 8017d3c:	4627      	mov	r7, r4
 8017d3e:	692a      	ldr	r2, [r5, #16]
 8017d40:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017d44:	f10d 011f 	add.w	r1, sp, #31
 8017d48:	00a6      	lsls	r6, r4, #2
 8017d4a:	b160      	cbz	r0, 8017d66 <rcl_wait+0x15e>
 8017d4c:	f88d 701f 	strb.w	r7, [sp, #31]
 8017d50:	f7ff fa1e 	bl	8017190 <rcl_timer_is_ready>
 8017d54:	2800      	cmp	r0, #0
 8017d56:	f47f af74 	bne.w	8017c42 <rcl_wait+0x3a>
 8017d5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017d5e:	b90b      	cbnz	r3, 8017d64 <rcl_wait+0x15c>
 8017d60:	692a      	ldr	r2, [r5, #16]
 8017d62:	5193      	str	r3, [r2, r6]
 8017d64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017d68:	3401      	adds	r4, #1
 8017d6a:	42a2      	cmp	r2, r4
 8017d6c:	d8e7      	bhi.n	8017d3e <rcl_wait+0x136>
 8017d6e:	f038 0002 	bics.w	r0, r8, #2
 8017d72:	f040 8090 	bne.w	8017e96 <rcl_wait+0x28e>
 8017d76:	686e      	ldr	r6, [r5, #4]
 8017d78:	4602      	mov	r2, r0
 8017d7a:	b91e      	cbnz	r6, 8017d84 <rcl_wait+0x17c>
 8017d7c:	e00d      	b.n	8017d9a <rcl_wait+0x192>
 8017d7e:	3201      	adds	r2, #1
 8017d80:	42b2      	cmp	r2, r6
 8017d82:	d00a      	beq.n	8017d9a <rcl_wait+0x192>
 8017d84:	6899      	ldr	r1, [r3, #8]
 8017d86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017d8a:	2900      	cmp	r1, #0
 8017d8c:	d1f7      	bne.n	8017d7e <rcl_wait+0x176>
 8017d8e:	682c      	ldr	r4, [r5, #0]
 8017d90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017d94:	3201      	adds	r2, #1
 8017d96:	42b2      	cmp	r2, r6
 8017d98:	d1f4      	bne.n	8017d84 <rcl_wait+0x17c>
 8017d9a:	68ee      	ldr	r6, [r5, #12]
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	b91e      	cbnz	r6, 8017da8 <rcl_wait+0x1a0>
 8017da0:	e00d      	b.n	8017dbe <rcl_wait+0x1b6>
 8017da2:	3201      	adds	r2, #1
 8017da4:	42b2      	cmp	r2, r6
 8017da6:	d00a      	beq.n	8017dbe <rcl_wait+0x1b6>
 8017da8:	6959      	ldr	r1, [r3, #20]
 8017daa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017dae:	2900      	cmp	r1, #0
 8017db0:	d1f7      	bne.n	8017da2 <rcl_wait+0x19a>
 8017db2:	68ac      	ldr	r4, [r5, #8]
 8017db4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017db8:	3201      	adds	r2, #1
 8017dba:	42b2      	cmp	r2, r6
 8017dbc:	d1f4      	bne.n	8017da8 <rcl_wait+0x1a0>
 8017dbe:	69ee      	ldr	r6, [r5, #28]
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	b91e      	cbnz	r6, 8017dcc <rcl_wait+0x1c4>
 8017dc4:	e00d      	b.n	8017de2 <rcl_wait+0x1da>
 8017dc6:	3201      	adds	r2, #1
 8017dc8:	42b2      	cmp	r2, r6
 8017dca:	d00a      	beq.n	8017de2 <rcl_wait+0x1da>
 8017dcc:	6a19      	ldr	r1, [r3, #32]
 8017dce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017dd2:	2900      	cmp	r1, #0
 8017dd4:	d1f7      	bne.n	8017dc6 <rcl_wait+0x1be>
 8017dd6:	69ac      	ldr	r4, [r5, #24]
 8017dd8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017ddc:	3201      	adds	r2, #1
 8017dde:	42b2      	cmp	r2, r6
 8017de0:	d1f4      	bne.n	8017dcc <rcl_wait+0x1c4>
 8017de2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8017de4:	2200      	movs	r2, #0
 8017de6:	b91e      	cbnz	r6, 8017df0 <rcl_wait+0x1e8>
 8017de8:	e00d      	b.n	8017e06 <rcl_wait+0x1fe>
 8017dea:	3201      	adds	r2, #1
 8017dec:	4296      	cmp	r6, r2
 8017dee:	d00a      	beq.n	8017e06 <rcl_wait+0x1fe>
 8017df0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017df2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017df6:	2900      	cmp	r1, #0
 8017df8:	d1f7      	bne.n	8017dea <rcl_wait+0x1e2>
 8017dfa:	6a2c      	ldr	r4, [r5, #32]
 8017dfc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017e00:	3201      	adds	r2, #1
 8017e02:	4296      	cmp	r6, r2
 8017e04:	d1f4      	bne.n	8017df0 <rcl_wait+0x1e8>
 8017e06:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8017e08:	2200      	movs	r2, #0
 8017e0a:	b91e      	cbnz	r6, 8017e14 <rcl_wait+0x20c>
 8017e0c:	e00d      	b.n	8017e2a <rcl_wait+0x222>
 8017e0e:	3201      	adds	r2, #1
 8017e10:	42b2      	cmp	r2, r6
 8017e12:	d00a      	beq.n	8017e2a <rcl_wait+0x222>
 8017e14:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017e16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e1a:	2900      	cmp	r1, #0
 8017e1c:	d1f7      	bne.n	8017e0e <rcl_wait+0x206>
 8017e1e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8017e20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017e24:	3201      	adds	r2, #1
 8017e26:	42b2      	cmp	r2, r6
 8017e28:	d1f4      	bne.n	8017e14 <rcl_wait+0x20c>
 8017e2a:	f1b8 0f02 	cmp.w	r8, #2
 8017e2e:	f47f af08 	bne.w	8017c42 <rcl_wait+0x3a>
 8017e32:	464b      	mov	r3, r9
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	bf08      	it	eq
 8017e38:	2002      	moveq	r0, #2
 8017e3a:	e702      	b.n	8017c42 <rcl_wait+0x3a>
 8017e3c:	2a00      	cmp	r2, #0
 8017e3e:	d03a      	beq.n	8017eb6 <rcl_wait+0x2ae>
 8017e40:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017e44:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017e48:	e70e      	b.n	8017c68 <rcl_wait+0x60>
 8017e4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017e4e:	b00d      	add	sp, #52	@ 0x34
 8017e50:	ecbd 8b02 	vpop	{d8}
 8017e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e58:	9b04      	ldr	r3, [sp, #16]
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	9b05      	ldr	r3, [sp, #20]
 8017e5e:	f173 0300 	sbcs.w	r3, r3, #0
 8017e62:	db24      	blt.n	8017eae <rcl_wait+0x2a6>
 8017e64:	2f00      	cmp	r7, #0
 8017e66:	bfbc      	itt	lt
 8017e68:	f04f 0800 	movlt.w	r8, #0
 8017e6c:	4647      	movlt	r7, r8
 8017e6e:	a31e      	add	r3, pc, #120	@ (adr r3, 8017ee8 <rcl_wait+0x2e0>)
 8017e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e74:	4640      	mov	r0, r8
 8017e76:	4639      	mov	r1, r7
 8017e78:	f7e8 fea6 	bl	8000bc8 <__aeabi_ldivmod>
 8017e7c:	a31a      	add	r3, pc, #104	@ (adr r3, 8017ee8 <rcl_wait+0x2e0>)
 8017e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017e86:	4640      	mov	r0, r8
 8017e88:	4639      	mov	r1, r7
 8017e8a:	f7e8 fe9d 	bl	8000bc8 <__aeabi_ldivmod>
 8017e8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017e92:	ab08      	add	r3, sp, #32
 8017e94:	e73e      	b.n	8017d14 <rcl_wait+0x10c>
 8017e96:	2001      	movs	r0, #1
 8017e98:	b00d      	add	sp, #52	@ 0x34
 8017e9a:	ecbd 8b02 	vpop	{d8}
 8017e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea2:	200b      	movs	r0, #11
 8017ea4:	b00d      	add	sp, #52	@ 0x34
 8017ea6:	ecbd 8b02 	vpop	{d8}
 8017eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eae:	465b      	mov	r3, fp
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d1d7      	bne.n	8017e64 <rcl_wait+0x25c>
 8017eb4:	e72e      	b.n	8017d14 <rcl_wait+0x10c>
 8017eb6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017eba:	430b      	orrs	r3, r1
 8017ebc:	bf08      	it	eq
 8017ebe:	4691      	moveq	r9, r2
 8017ec0:	f43f af21 	beq.w	8017d06 <rcl_wait+0xfe>
 8017ec4:	9b04      	ldr	r3, [sp, #16]
 8017ec6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017eca:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017ece:	2b01      	cmp	r3, #1
 8017ed0:	9b05      	ldr	r3, [sp, #20]
 8017ed2:	f173 0300 	sbcs.w	r3, r3, #0
 8017ed6:	f04f 0300 	mov.w	r3, #0
 8017eda:	4699      	mov	r9, r3
 8017edc:	dac2      	bge.n	8017e64 <rcl_wait+0x25c>
 8017ede:	e719      	b.n	8017d14 <rcl_wait+0x10c>
 8017ee0:	ffffffff 	.word	0xffffffff
 8017ee4:	7fffffff 	.word	0x7fffffff
 8017ee8:	3b9aca00 	.word	0x3b9aca00
 8017eec:	00000000 	.word	0x00000000

08017ef0 <rcl_action_take_goal_response>:
 8017ef0:	2800      	cmp	r0, #0
 8017ef2:	d039      	beq.n	8017f68 <rcl_action_take_goal_response+0x78>
 8017ef4:	b570      	push	{r4, r5, r6, lr}
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	6800      	ldr	r0, [r0, #0]
 8017efa:	b380      	cbz	r0, 8017f5e <rcl_action_take_goal_response+0x6e>
 8017efc:	460d      	mov	r5, r1
 8017efe:	4616      	mov	r6, r2
 8017f00:	f7fd ff8e 	bl	8015e20 <rcl_client_is_valid>
 8017f04:	b330      	cbz	r0, 8017f54 <rcl_action_take_goal_response+0x64>
 8017f06:	6820      	ldr	r0, [r4, #0]
 8017f08:	3004      	adds	r0, #4
 8017f0a:	f7fd ff89 	bl	8015e20 <rcl_client_is_valid>
 8017f0e:	b308      	cbz	r0, 8017f54 <rcl_action_take_goal_response+0x64>
 8017f10:	6820      	ldr	r0, [r4, #0]
 8017f12:	3008      	adds	r0, #8
 8017f14:	f7fd ff84 	bl	8015e20 <rcl_client_is_valid>
 8017f18:	b1e0      	cbz	r0, 8017f54 <rcl_action_take_goal_response+0x64>
 8017f1a:	6820      	ldr	r0, [r4, #0]
 8017f1c:	300c      	adds	r0, #12
 8017f1e:	f7fe fdf3 	bl	8016b08 <rcl_subscription_is_valid>
 8017f22:	b1b8      	cbz	r0, 8017f54 <rcl_action_take_goal_response+0x64>
 8017f24:	6820      	ldr	r0, [r4, #0]
 8017f26:	3010      	adds	r0, #16
 8017f28:	f7fe fdee 	bl	8016b08 <rcl_subscription_is_valid>
 8017f2c:	b190      	cbz	r0, 8017f54 <rcl_action_take_goal_response+0x64>
 8017f2e:	b1cd      	cbz	r5, 8017f64 <rcl_action_take_goal_response+0x74>
 8017f30:	b1c6      	cbz	r6, 8017f64 <rcl_action_take_goal_response+0x74>
 8017f32:	6820      	ldr	r0, [r4, #0]
 8017f34:	4632      	mov	r2, r6
 8017f36:	4629      	mov	r1, r5
 8017f38:	f7fd ff2a 	bl	8015d90 <rcl_take_response>
 8017f3c:	b148      	cbz	r0, 8017f52 <rcl_action_take_goal_response+0x62>
 8017f3e:	280a      	cmp	r0, #10
 8017f40:	d007      	beq.n	8017f52 <rcl_action_take_goal_response+0x62>
 8017f42:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017f46:	f640 0337 	movw	r3, #2103	@ 0x837
 8017f4a:	4290      	cmp	r0, r2
 8017f4c:	bf0c      	ite	eq
 8017f4e:	4618      	moveq	r0, r3
 8017f50:	2001      	movne	r0, #1
 8017f52:	bd70      	pop	{r4, r5, r6, pc}
 8017f54:	f7f7 ff74 	bl	800fe40 <rcutils_reset_error>
 8017f58:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f5c:	bd70      	pop	{r4, r5, r6, pc}
 8017f5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f62:	bd70      	pop	{r4, r5, r6, pc}
 8017f64:	200b      	movs	r0, #11
 8017f66:	bd70      	pop	{r4, r5, r6, pc}
 8017f68:	f640 0036 	movw	r0, #2102	@ 0x836
 8017f6c:	4770      	bx	lr
 8017f6e:	bf00      	nop

08017f70 <rcl_action_send_result_request>:
 8017f70:	b390      	cbz	r0, 8017fd8 <rcl_action_send_result_request+0x68>
 8017f72:	b570      	push	{r4, r5, r6, lr}
 8017f74:	4604      	mov	r4, r0
 8017f76:	6800      	ldr	r0, [r0, #0]
 8017f78:	b348      	cbz	r0, 8017fce <rcl_action_send_result_request+0x5e>
 8017f7a:	460d      	mov	r5, r1
 8017f7c:	4616      	mov	r6, r2
 8017f7e:	f7fd ff4f 	bl	8015e20 <rcl_client_is_valid>
 8017f82:	b1f8      	cbz	r0, 8017fc4 <rcl_action_send_result_request+0x54>
 8017f84:	6820      	ldr	r0, [r4, #0]
 8017f86:	3004      	adds	r0, #4
 8017f88:	f7fd ff4a 	bl	8015e20 <rcl_client_is_valid>
 8017f8c:	b1d0      	cbz	r0, 8017fc4 <rcl_action_send_result_request+0x54>
 8017f8e:	6820      	ldr	r0, [r4, #0]
 8017f90:	3008      	adds	r0, #8
 8017f92:	f7fd ff45 	bl	8015e20 <rcl_client_is_valid>
 8017f96:	b1a8      	cbz	r0, 8017fc4 <rcl_action_send_result_request+0x54>
 8017f98:	6820      	ldr	r0, [r4, #0]
 8017f9a:	300c      	adds	r0, #12
 8017f9c:	f7fe fdb4 	bl	8016b08 <rcl_subscription_is_valid>
 8017fa0:	b180      	cbz	r0, 8017fc4 <rcl_action_send_result_request+0x54>
 8017fa2:	6820      	ldr	r0, [r4, #0]
 8017fa4:	3010      	adds	r0, #16
 8017fa6:	f7fe fdaf 	bl	8016b08 <rcl_subscription_is_valid>
 8017faa:	b158      	cbz	r0, 8017fc4 <rcl_action_send_result_request+0x54>
 8017fac:	b195      	cbz	r5, 8017fd4 <rcl_action_send_result_request+0x64>
 8017fae:	b18e      	cbz	r6, 8017fd4 <rcl_action_send_result_request+0x64>
 8017fb0:	6820      	ldr	r0, [r4, #0]
 8017fb2:	4632      	mov	r2, r6
 8017fb4:	4629      	mov	r1, r5
 8017fb6:	3008      	adds	r0, #8
 8017fb8:	f7fd feb4 	bl	8015d24 <rcl_send_request>
 8017fbc:	3800      	subs	r0, #0
 8017fbe:	bf18      	it	ne
 8017fc0:	2001      	movne	r0, #1
 8017fc2:	bd70      	pop	{r4, r5, r6, pc}
 8017fc4:	f7f7 ff3c 	bl	800fe40 <rcutils_reset_error>
 8017fc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017fcc:	bd70      	pop	{r4, r5, r6, pc}
 8017fce:	f640 0036 	movw	r0, #2102	@ 0x836
 8017fd2:	bd70      	pop	{r4, r5, r6, pc}
 8017fd4:	200b      	movs	r0, #11
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
 8017fd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017fdc:	4770      	bx	lr
 8017fde:	bf00      	nop

08017fe0 <rcl_action_take_result_response>:
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	d03a      	beq.n	801805a <rcl_action_take_result_response+0x7a>
 8017fe4:	b570      	push	{r4, r5, r6, lr}
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	6800      	ldr	r0, [r0, #0]
 8017fea:	b388      	cbz	r0, 8018050 <rcl_action_take_result_response+0x70>
 8017fec:	460d      	mov	r5, r1
 8017fee:	4616      	mov	r6, r2
 8017ff0:	f7fd ff16 	bl	8015e20 <rcl_client_is_valid>
 8017ff4:	b338      	cbz	r0, 8018046 <rcl_action_take_result_response+0x66>
 8017ff6:	6820      	ldr	r0, [r4, #0]
 8017ff8:	3004      	adds	r0, #4
 8017ffa:	f7fd ff11 	bl	8015e20 <rcl_client_is_valid>
 8017ffe:	b310      	cbz	r0, 8018046 <rcl_action_take_result_response+0x66>
 8018000:	6820      	ldr	r0, [r4, #0]
 8018002:	3008      	adds	r0, #8
 8018004:	f7fd ff0c 	bl	8015e20 <rcl_client_is_valid>
 8018008:	b1e8      	cbz	r0, 8018046 <rcl_action_take_result_response+0x66>
 801800a:	6820      	ldr	r0, [r4, #0]
 801800c:	300c      	adds	r0, #12
 801800e:	f7fe fd7b 	bl	8016b08 <rcl_subscription_is_valid>
 8018012:	b1c0      	cbz	r0, 8018046 <rcl_action_take_result_response+0x66>
 8018014:	6820      	ldr	r0, [r4, #0]
 8018016:	3010      	adds	r0, #16
 8018018:	f7fe fd76 	bl	8016b08 <rcl_subscription_is_valid>
 801801c:	b198      	cbz	r0, 8018046 <rcl_action_take_result_response+0x66>
 801801e:	b1d5      	cbz	r5, 8018056 <rcl_action_take_result_response+0x76>
 8018020:	b1ce      	cbz	r6, 8018056 <rcl_action_take_result_response+0x76>
 8018022:	6820      	ldr	r0, [r4, #0]
 8018024:	4632      	mov	r2, r6
 8018026:	4629      	mov	r1, r5
 8018028:	3008      	adds	r0, #8
 801802a:	f7fd feb1 	bl	8015d90 <rcl_take_response>
 801802e:	b148      	cbz	r0, 8018044 <rcl_action_take_result_response+0x64>
 8018030:	280a      	cmp	r0, #10
 8018032:	d007      	beq.n	8018044 <rcl_action_take_result_response+0x64>
 8018034:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018038:	f640 0337 	movw	r3, #2103	@ 0x837
 801803c:	4290      	cmp	r0, r2
 801803e:	bf0c      	ite	eq
 8018040:	4618      	moveq	r0, r3
 8018042:	2001      	movne	r0, #1
 8018044:	bd70      	pop	{r4, r5, r6, pc}
 8018046:	f7f7 fefb 	bl	800fe40 <rcutils_reset_error>
 801804a:	f640 0036 	movw	r0, #2102	@ 0x836
 801804e:	bd70      	pop	{r4, r5, r6, pc}
 8018050:	f640 0036 	movw	r0, #2102	@ 0x836
 8018054:	bd70      	pop	{r4, r5, r6, pc}
 8018056:	200b      	movs	r0, #11
 8018058:	bd70      	pop	{r4, r5, r6, pc}
 801805a:	f640 0036 	movw	r0, #2102	@ 0x836
 801805e:	4770      	bx	lr

08018060 <rcl_action_take_cancel_response>:
 8018060:	2800      	cmp	r0, #0
 8018062:	d03a      	beq.n	80180da <rcl_action_take_cancel_response+0x7a>
 8018064:	b570      	push	{r4, r5, r6, lr}
 8018066:	4604      	mov	r4, r0
 8018068:	6800      	ldr	r0, [r0, #0]
 801806a:	b388      	cbz	r0, 80180d0 <rcl_action_take_cancel_response+0x70>
 801806c:	460d      	mov	r5, r1
 801806e:	4616      	mov	r6, r2
 8018070:	f7fd fed6 	bl	8015e20 <rcl_client_is_valid>
 8018074:	b338      	cbz	r0, 80180c6 <rcl_action_take_cancel_response+0x66>
 8018076:	6820      	ldr	r0, [r4, #0]
 8018078:	3004      	adds	r0, #4
 801807a:	f7fd fed1 	bl	8015e20 <rcl_client_is_valid>
 801807e:	b310      	cbz	r0, 80180c6 <rcl_action_take_cancel_response+0x66>
 8018080:	6820      	ldr	r0, [r4, #0]
 8018082:	3008      	adds	r0, #8
 8018084:	f7fd fecc 	bl	8015e20 <rcl_client_is_valid>
 8018088:	b1e8      	cbz	r0, 80180c6 <rcl_action_take_cancel_response+0x66>
 801808a:	6820      	ldr	r0, [r4, #0]
 801808c:	300c      	adds	r0, #12
 801808e:	f7fe fd3b 	bl	8016b08 <rcl_subscription_is_valid>
 8018092:	b1c0      	cbz	r0, 80180c6 <rcl_action_take_cancel_response+0x66>
 8018094:	6820      	ldr	r0, [r4, #0]
 8018096:	3010      	adds	r0, #16
 8018098:	f7fe fd36 	bl	8016b08 <rcl_subscription_is_valid>
 801809c:	b198      	cbz	r0, 80180c6 <rcl_action_take_cancel_response+0x66>
 801809e:	b1d5      	cbz	r5, 80180d6 <rcl_action_take_cancel_response+0x76>
 80180a0:	b1ce      	cbz	r6, 80180d6 <rcl_action_take_cancel_response+0x76>
 80180a2:	6820      	ldr	r0, [r4, #0]
 80180a4:	4632      	mov	r2, r6
 80180a6:	4629      	mov	r1, r5
 80180a8:	3004      	adds	r0, #4
 80180aa:	f7fd fe71 	bl	8015d90 <rcl_take_response>
 80180ae:	b148      	cbz	r0, 80180c4 <rcl_action_take_cancel_response+0x64>
 80180b0:	280a      	cmp	r0, #10
 80180b2:	d007      	beq.n	80180c4 <rcl_action_take_cancel_response+0x64>
 80180b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80180b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80180bc:	4290      	cmp	r0, r2
 80180be:	bf0c      	ite	eq
 80180c0:	4618      	moveq	r0, r3
 80180c2:	2001      	movne	r0, #1
 80180c4:	bd70      	pop	{r4, r5, r6, pc}
 80180c6:	f7f7 febb 	bl	800fe40 <rcutils_reset_error>
 80180ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80180ce:	bd70      	pop	{r4, r5, r6, pc}
 80180d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80180d4:	bd70      	pop	{r4, r5, r6, pc}
 80180d6:	200b      	movs	r0, #11
 80180d8:	bd70      	pop	{r4, r5, r6, pc}
 80180da:	f640 0036 	movw	r0, #2102	@ 0x836
 80180de:	4770      	bx	lr

080180e0 <rcl_action_take_feedback>:
 80180e0:	2800      	cmp	r0, #0
 80180e2:	d038      	beq.n	8018156 <rcl_action_take_feedback+0x76>
 80180e4:	b530      	push	{r4, r5, lr}
 80180e6:	4604      	mov	r4, r0
 80180e8:	6800      	ldr	r0, [r0, #0]
 80180ea:	b091      	sub	sp, #68	@ 0x44
 80180ec:	b378      	cbz	r0, 801814e <rcl_action_take_feedback+0x6e>
 80180ee:	460d      	mov	r5, r1
 80180f0:	f7fd fe96 	bl	8015e20 <rcl_client_is_valid>
 80180f4:	b328      	cbz	r0, 8018142 <rcl_action_take_feedback+0x62>
 80180f6:	6820      	ldr	r0, [r4, #0]
 80180f8:	3004      	adds	r0, #4
 80180fa:	f7fd fe91 	bl	8015e20 <rcl_client_is_valid>
 80180fe:	b300      	cbz	r0, 8018142 <rcl_action_take_feedback+0x62>
 8018100:	6820      	ldr	r0, [r4, #0]
 8018102:	3008      	adds	r0, #8
 8018104:	f7fd fe8c 	bl	8015e20 <rcl_client_is_valid>
 8018108:	b1d8      	cbz	r0, 8018142 <rcl_action_take_feedback+0x62>
 801810a:	6820      	ldr	r0, [r4, #0]
 801810c:	300c      	adds	r0, #12
 801810e:	f7fe fcfb 	bl	8016b08 <rcl_subscription_is_valid>
 8018112:	b1b0      	cbz	r0, 8018142 <rcl_action_take_feedback+0x62>
 8018114:	6820      	ldr	r0, [r4, #0]
 8018116:	3010      	adds	r0, #16
 8018118:	f7fe fcf6 	bl	8016b08 <rcl_subscription_is_valid>
 801811c:	b188      	cbz	r0, 8018142 <rcl_action_take_feedback+0x62>
 801811e:	b1ed      	cbz	r5, 801815c <rcl_action_take_feedback+0x7c>
 8018120:	6820      	ldr	r0, [r4, #0]
 8018122:	2300      	movs	r3, #0
 8018124:	466a      	mov	r2, sp
 8018126:	4629      	mov	r1, r5
 8018128:	300c      	adds	r0, #12
 801812a:	f7fe fc8f 	bl	8016a4c <rcl_take>
 801812e:	b160      	cbz	r0, 801814a <rcl_action_take_feedback+0x6a>
 8018130:	f240 1391 	movw	r3, #401	@ 0x191
 8018134:	4298      	cmp	r0, r3
 8018136:	d014      	beq.n	8018162 <rcl_action_take_feedback+0x82>
 8018138:	280a      	cmp	r0, #10
 801813a:	bf18      	it	ne
 801813c:	2001      	movne	r0, #1
 801813e:	b011      	add	sp, #68	@ 0x44
 8018140:	bd30      	pop	{r4, r5, pc}
 8018142:	f7f7 fe7d 	bl	800fe40 <rcutils_reset_error>
 8018146:	f640 0036 	movw	r0, #2102	@ 0x836
 801814a:	b011      	add	sp, #68	@ 0x44
 801814c:	bd30      	pop	{r4, r5, pc}
 801814e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018152:	b011      	add	sp, #68	@ 0x44
 8018154:	bd30      	pop	{r4, r5, pc}
 8018156:	f640 0036 	movw	r0, #2102	@ 0x836
 801815a:	4770      	bx	lr
 801815c:	200b      	movs	r0, #11
 801815e:	b011      	add	sp, #68	@ 0x44
 8018160:	bd30      	pop	{r4, r5, pc}
 8018162:	f640 0037 	movw	r0, #2103	@ 0x837
 8018166:	e7f0      	b.n	801814a <rcl_action_take_feedback+0x6a>

08018168 <rcl_action_wait_set_add_action_client>:
 8018168:	2800      	cmp	r0, #0
 801816a:	d048      	beq.n	80181fe <rcl_action_wait_set_add_action_client+0x96>
 801816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801816e:	460c      	mov	r4, r1
 8018170:	2900      	cmp	r1, #0
 8018172:	d03c      	beq.n	80181ee <rcl_action_wait_set_add_action_client+0x86>
 8018174:	4605      	mov	r5, r0
 8018176:	6808      	ldr	r0, [r1, #0]
 8018178:	2800      	cmp	r0, #0
 801817a:	d038      	beq.n	80181ee <rcl_action_wait_set_add_action_client+0x86>
 801817c:	4617      	mov	r7, r2
 801817e:	461e      	mov	r6, r3
 8018180:	f7fd fe4e 	bl	8015e20 <rcl_client_is_valid>
 8018184:	b3b0      	cbz	r0, 80181f4 <rcl_action_wait_set_add_action_client+0x8c>
 8018186:	6820      	ldr	r0, [r4, #0]
 8018188:	3004      	adds	r0, #4
 801818a:	f7fd fe49 	bl	8015e20 <rcl_client_is_valid>
 801818e:	b388      	cbz	r0, 80181f4 <rcl_action_wait_set_add_action_client+0x8c>
 8018190:	6820      	ldr	r0, [r4, #0]
 8018192:	3008      	adds	r0, #8
 8018194:	f7fd fe44 	bl	8015e20 <rcl_client_is_valid>
 8018198:	b360      	cbz	r0, 80181f4 <rcl_action_wait_set_add_action_client+0x8c>
 801819a:	6820      	ldr	r0, [r4, #0]
 801819c:	300c      	adds	r0, #12
 801819e:	f7fe fcb3 	bl	8016b08 <rcl_subscription_is_valid>
 80181a2:	b338      	cbz	r0, 80181f4 <rcl_action_wait_set_add_action_client+0x8c>
 80181a4:	6820      	ldr	r0, [r4, #0]
 80181a6:	3010      	adds	r0, #16
 80181a8:	f7fe fcae 	bl	8016b08 <rcl_subscription_is_valid>
 80181ac:	b310      	cbz	r0, 80181f4 <rcl_action_wait_set_add_action_client+0x8c>
 80181ae:	6821      	ldr	r1, [r4, #0]
 80181b0:	4628      	mov	r0, r5
 80181b2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80181b6:	f7ff fccd 	bl	8017b54 <rcl_wait_set_add_client>
 80181ba:	b9b8      	cbnz	r0, 80181ec <rcl_action_wait_set_add_action_client+0x84>
 80181bc:	6821      	ldr	r1, [r4, #0]
 80181be:	4628      	mov	r0, r5
 80181c0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80181c4:	3104      	adds	r1, #4
 80181c6:	f7ff fcc5 	bl	8017b54 <rcl_wait_set_add_client>
 80181ca:	b978      	cbnz	r0, 80181ec <rcl_action_wait_set_add_action_client+0x84>
 80181cc:	6821      	ldr	r1, [r4, #0]
 80181ce:	4628      	mov	r0, r5
 80181d0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80181d4:	3108      	adds	r1, #8
 80181d6:	f7ff fcbd 	bl	8017b54 <rcl_wait_set_add_client>
 80181da:	b938      	cbnz	r0, 80181ec <rcl_action_wait_set_add_action_client+0x84>
 80181dc:	6821      	ldr	r1, [r4, #0]
 80181de:	4628      	mov	r0, r5
 80181e0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80181e4:	310c      	adds	r1, #12
 80181e6:	f7ff f96d 	bl	80174c4 <rcl_wait_set_add_subscription>
 80181ea:	b158      	cbz	r0, 8018204 <rcl_action_wait_set_add_action_client+0x9c>
 80181ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80181f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181f4:	f7f7 fe24 	bl	800fe40 <rcutils_reset_error>
 80181f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80181fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018202:	4770      	bx	lr
 8018204:	6821      	ldr	r1, [r4, #0]
 8018206:	4628      	mov	r0, r5
 8018208:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801820c:	3110      	adds	r1, #16
 801820e:	f7ff f959 	bl	80174c4 <rcl_wait_set_add_subscription>
 8018212:	2800      	cmp	r0, #0
 8018214:	d1ea      	bne.n	80181ec <rcl_action_wait_set_add_action_client+0x84>
 8018216:	b11f      	cbz	r7, 8018220 <rcl_action_wait_set_add_action_client+0xb8>
 8018218:	6823      	ldr	r3, [r4, #0]
 801821a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801821e:	603b      	str	r3, [r7, #0]
 8018220:	2e00      	cmp	r6, #0
 8018222:	d0e3      	beq.n	80181ec <rcl_action_wait_set_add_action_client+0x84>
 8018224:	6823      	ldr	r3, [r4, #0]
 8018226:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801822a:	6033      	str	r3, [r6, #0]
 801822c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801822e:	bf00      	nop

08018230 <rcl_action_client_wait_set_get_entities_ready>:
 8018230:	2800      	cmp	r0, #0
 8018232:	f000 808d 	beq.w	8018350 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8018236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801823a:	460c      	mov	r4, r1
 801823c:	2900      	cmp	r1, #0
 801823e:	d077      	beq.n	8018330 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018240:	4605      	mov	r5, r0
 8018242:	6808      	ldr	r0, [r1, #0]
 8018244:	2800      	cmp	r0, #0
 8018246:	d073      	beq.n	8018330 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018248:	4616      	mov	r6, r2
 801824a:	461f      	mov	r7, r3
 801824c:	f7fd fde8 	bl	8015e20 <rcl_client_is_valid>
 8018250:	2800      	cmp	r0, #0
 8018252:	d071      	beq.n	8018338 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018254:	6820      	ldr	r0, [r4, #0]
 8018256:	3004      	adds	r0, #4
 8018258:	f7fd fde2 	bl	8015e20 <rcl_client_is_valid>
 801825c:	2800      	cmp	r0, #0
 801825e:	d06b      	beq.n	8018338 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018260:	6820      	ldr	r0, [r4, #0]
 8018262:	3008      	adds	r0, #8
 8018264:	f7fd fddc 	bl	8015e20 <rcl_client_is_valid>
 8018268:	2800      	cmp	r0, #0
 801826a:	d065      	beq.n	8018338 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801826c:	6820      	ldr	r0, [r4, #0]
 801826e:	300c      	adds	r0, #12
 8018270:	f7fe fc4a 	bl	8016b08 <rcl_subscription_is_valid>
 8018274:	2800      	cmp	r0, #0
 8018276:	d05f      	beq.n	8018338 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018278:	6820      	ldr	r0, [r4, #0]
 801827a:	3010      	adds	r0, #16
 801827c:	f7fe fc44 	bl	8016b08 <rcl_subscription_is_valid>
 8018280:	2800      	cmp	r0, #0
 8018282:	d059      	beq.n	8018338 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018284:	2e00      	cmp	r6, #0
 8018286:	d060      	beq.n	801834a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018288:	2f00      	cmp	r7, #0
 801828a:	d05e      	beq.n	801834a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801828c:	9b06      	ldr	r3, [sp, #24]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d05b      	beq.n	801834a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018292:	9b07      	ldr	r3, [sp, #28]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d058      	beq.n	801834a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018298:	9b08      	ldr	r3, [sp, #32]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d055      	beq.n	801834a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801829e:	6823      	ldr	r3, [r4, #0]
 80182a0:	686a      	ldr	r2, [r5, #4]
 80182a2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80182a6:	428a      	cmp	r2, r1
 80182a8:	d94c      	bls.n	8018344 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80182aa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80182ae:	4282      	cmp	r2, r0
 80182b0:	d948      	bls.n	8018344 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80182b2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80182b6:	69ea      	ldr	r2, [r5, #28]
 80182b8:	42a2      	cmp	r2, r4
 80182ba:	d943      	bls.n	8018344 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80182bc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80182c0:	4562      	cmp	r2, ip
 80182c2:	d93f      	bls.n	8018344 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80182c4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80182c8:	4572      	cmp	r2, lr
 80182ca:	d93b      	bls.n	8018344 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80182cc:	69aa      	ldr	r2, [r5, #24]
 80182ce:	682d      	ldr	r5, [r5, #0]
 80182d0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80182d4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80182d8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80182dc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80182e0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80182e4:	f103 0c0c 	add.w	ip, r3, #12
 80182e8:	eba5 050c 	sub.w	r5, r5, ip
 80182ec:	fab5 f585 	clz	r5, r5
 80182f0:	096d      	lsrs	r5, r5, #5
 80182f2:	7035      	strb	r5, [r6, #0]
 80182f4:	f103 0510 	add.w	r5, r3, #16
 80182f8:	1b64      	subs	r4, r4, r5
 80182fa:	fab4 f484 	clz	r4, r4
 80182fe:	0964      	lsrs	r4, r4, #5
 8018300:	703c      	strb	r4, [r7, #0]
 8018302:	eba3 0008 	sub.w	r0, r3, r8
 8018306:	1d1c      	adds	r4, r3, #4
 8018308:	3308      	adds	r3, #8
 801830a:	1ad3      	subs	r3, r2, r3
 801830c:	fab0 f080 	clz	r0, r0
 8018310:	9a06      	ldr	r2, [sp, #24]
 8018312:	0940      	lsrs	r0, r0, #5
 8018314:	1b09      	subs	r1, r1, r4
 8018316:	7010      	strb	r0, [r2, #0]
 8018318:	fab1 f181 	clz	r1, r1
 801831c:	9a07      	ldr	r2, [sp, #28]
 801831e:	0949      	lsrs	r1, r1, #5
 8018320:	7011      	strb	r1, [r2, #0]
 8018322:	fab3 f383 	clz	r3, r3
 8018326:	9a08      	ldr	r2, [sp, #32]
 8018328:	095b      	lsrs	r3, r3, #5
 801832a:	2000      	movs	r0, #0
 801832c:	7013      	strb	r3, [r2, #0]
 801832e:	e001      	b.n	8018334 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018330:	f640 0036 	movw	r0, #2102	@ 0x836
 8018334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018338:	f7f7 fd82 	bl	800fe40 <rcutils_reset_error>
 801833c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018344:	2001      	movs	r0, #1
 8018346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801834a:	200b      	movs	r0, #11
 801834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018350:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop

08018358 <rcl_action_take_goal_request>:
 8018358:	2800      	cmp	r0, #0
 801835a:	d039      	beq.n	80183d0 <rcl_action_take_goal_request+0x78>
 801835c:	b570      	push	{r4, r5, r6, lr}
 801835e:	4604      	mov	r4, r0
 8018360:	6800      	ldr	r0, [r0, #0]
 8018362:	b380      	cbz	r0, 80183c6 <rcl_action_take_goal_request+0x6e>
 8018364:	460d      	mov	r5, r1
 8018366:	4616      	mov	r6, r2
 8018368:	f7fe fb66 	bl	8016a38 <rcl_service_is_valid>
 801836c:	b330      	cbz	r0, 80183bc <rcl_action_take_goal_request+0x64>
 801836e:	6820      	ldr	r0, [r4, #0]
 8018370:	3004      	adds	r0, #4
 8018372:	f7fe fb61 	bl	8016a38 <rcl_service_is_valid>
 8018376:	b308      	cbz	r0, 80183bc <rcl_action_take_goal_request+0x64>
 8018378:	6820      	ldr	r0, [r4, #0]
 801837a:	3008      	adds	r0, #8
 801837c:	f7fe fb5c 	bl	8016a38 <rcl_service_is_valid>
 8018380:	b1e0      	cbz	r0, 80183bc <rcl_action_take_goal_request+0x64>
 8018382:	6820      	ldr	r0, [r4, #0]
 8018384:	300c      	adds	r0, #12
 8018386:	f7f6 fd43 	bl	800ee10 <rcl_publisher_is_valid>
 801838a:	b1b8      	cbz	r0, 80183bc <rcl_action_take_goal_request+0x64>
 801838c:	6820      	ldr	r0, [r4, #0]
 801838e:	3010      	adds	r0, #16
 8018390:	f7f6 fd3e 	bl	800ee10 <rcl_publisher_is_valid>
 8018394:	b190      	cbz	r0, 80183bc <rcl_action_take_goal_request+0x64>
 8018396:	b1cd      	cbz	r5, 80183cc <rcl_action_take_goal_request+0x74>
 8018398:	b1c6      	cbz	r6, 80183cc <rcl_action_take_goal_request+0x74>
 801839a:	6820      	ldr	r0, [r4, #0]
 801839c:	4632      	mov	r2, r6
 801839e:	4629      	mov	r1, r5
 80183a0:	f7fe faf2 	bl	8016988 <rcl_take_request>
 80183a4:	b148      	cbz	r0, 80183ba <rcl_action_take_goal_request+0x62>
 80183a6:	280a      	cmp	r0, #10
 80183a8:	d007      	beq.n	80183ba <rcl_action_take_goal_request+0x62>
 80183aa:	f240 2259 	movw	r2, #601	@ 0x259
 80183ae:	f640 0399 	movw	r3, #2201	@ 0x899
 80183b2:	4290      	cmp	r0, r2
 80183b4:	bf0c      	ite	eq
 80183b6:	4618      	moveq	r0, r3
 80183b8:	2001      	movne	r0, #1
 80183ba:	bd70      	pop	{r4, r5, r6, pc}
 80183bc:	f7f7 fd40 	bl	800fe40 <rcutils_reset_error>
 80183c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80183c4:	bd70      	pop	{r4, r5, r6, pc}
 80183c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80183ca:	bd70      	pop	{r4, r5, r6, pc}
 80183cc:	200b      	movs	r0, #11
 80183ce:	bd70      	pop	{r4, r5, r6, pc}
 80183d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop

080183d8 <rcl_action_send_goal_response>:
 80183d8:	b390      	cbz	r0, 8018440 <rcl_action_send_goal_response+0x68>
 80183da:	b570      	push	{r4, r5, r6, lr}
 80183dc:	4604      	mov	r4, r0
 80183de:	6800      	ldr	r0, [r0, #0]
 80183e0:	b348      	cbz	r0, 8018436 <rcl_action_send_goal_response+0x5e>
 80183e2:	460d      	mov	r5, r1
 80183e4:	4616      	mov	r6, r2
 80183e6:	f7fe fb27 	bl	8016a38 <rcl_service_is_valid>
 80183ea:	b1f8      	cbz	r0, 801842c <rcl_action_send_goal_response+0x54>
 80183ec:	6820      	ldr	r0, [r4, #0]
 80183ee:	3004      	adds	r0, #4
 80183f0:	f7fe fb22 	bl	8016a38 <rcl_service_is_valid>
 80183f4:	b1d0      	cbz	r0, 801842c <rcl_action_send_goal_response+0x54>
 80183f6:	6820      	ldr	r0, [r4, #0]
 80183f8:	3008      	adds	r0, #8
 80183fa:	f7fe fb1d 	bl	8016a38 <rcl_service_is_valid>
 80183fe:	b1a8      	cbz	r0, 801842c <rcl_action_send_goal_response+0x54>
 8018400:	6820      	ldr	r0, [r4, #0]
 8018402:	300c      	adds	r0, #12
 8018404:	f7f6 fd04 	bl	800ee10 <rcl_publisher_is_valid>
 8018408:	b180      	cbz	r0, 801842c <rcl_action_send_goal_response+0x54>
 801840a:	6820      	ldr	r0, [r4, #0]
 801840c:	3010      	adds	r0, #16
 801840e:	f7f6 fcff 	bl	800ee10 <rcl_publisher_is_valid>
 8018412:	b158      	cbz	r0, 801842c <rcl_action_send_goal_response+0x54>
 8018414:	b195      	cbz	r5, 801843c <rcl_action_send_goal_response+0x64>
 8018416:	b18e      	cbz	r6, 801843c <rcl_action_send_goal_response+0x64>
 8018418:	6820      	ldr	r0, [r4, #0]
 801841a:	4632      	mov	r2, r6
 801841c:	4629      	mov	r1, r5
 801841e:	f7fe faf3 	bl	8016a08 <rcl_send_response>
 8018422:	b110      	cbz	r0, 801842a <rcl_action_send_goal_response+0x52>
 8018424:	2802      	cmp	r0, #2
 8018426:	bf18      	it	ne
 8018428:	2001      	movne	r0, #1
 801842a:	bd70      	pop	{r4, r5, r6, pc}
 801842c:	f7f7 fd08 	bl	800fe40 <rcutils_reset_error>
 8018430:	f640 0098 	movw	r0, #2200	@ 0x898
 8018434:	bd70      	pop	{r4, r5, r6, pc}
 8018436:	f640 0098 	movw	r0, #2200	@ 0x898
 801843a:	bd70      	pop	{r4, r5, r6, pc}
 801843c:	200b      	movs	r0, #11
 801843e:	bd70      	pop	{r4, r5, r6, pc}
 8018440:	f640 0098 	movw	r0, #2200	@ 0x898
 8018444:	4770      	bx	lr
 8018446:	bf00      	nop

08018448 <rcl_action_take_result_request>:
 8018448:	2800      	cmp	r0, #0
 801844a:	d03a      	beq.n	80184c2 <rcl_action_take_result_request+0x7a>
 801844c:	b570      	push	{r4, r5, r6, lr}
 801844e:	4604      	mov	r4, r0
 8018450:	6800      	ldr	r0, [r0, #0]
 8018452:	b388      	cbz	r0, 80184b8 <rcl_action_take_result_request+0x70>
 8018454:	460d      	mov	r5, r1
 8018456:	4616      	mov	r6, r2
 8018458:	f7fe faee 	bl	8016a38 <rcl_service_is_valid>
 801845c:	b338      	cbz	r0, 80184ae <rcl_action_take_result_request+0x66>
 801845e:	6820      	ldr	r0, [r4, #0]
 8018460:	3004      	adds	r0, #4
 8018462:	f7fe fae9 	bl	8016a38 <rcl_service_is_valid>
 8018466:	b310      	cbz	r0, 80184ae <rcl_action_take_result_request+0x66>
 8018468:	6820      	ldr	r0, [r4, #0]
 801846a:	3008      	adds	r0, #8
 801846c:	f7fe fae4 	bl	8016a38 <rcl_service_is_valid>
 8018470:	b1e8      	cbz	r0, 80184ae <rcl_action_take_result_request+0x66>
 8018472:	6820      	ldr	r0, [r4, #0]
 8018474:	300c      	adds	r0, #12
 8018476:	f7f6 fccb 	bl	800ee10 <rcl_publisher_is_valid>
 801847a:	b1c0      	cbz	r0, 80184ae <rcl_action_take_result_request+0x66>
 801847c:	6820      	ldr	r0, [r4, #0]
 801847e:	3010      	adds	r0, #16
 8018480:	f7f6 fcc6 	bl	800ee10 <rcl_publisher_is_valid>
 8018484:	b198      	cbz	r0, 80184ae <rcl_action_take_result_request+0x66>
 8018486:	b1d5      	cbz	r5, 80184be <rcl_action_take_result_request+0x76>
 8018488:	b1ce      	cbz	r6, 80184be <rcl_action_take_result_request+0x76>
 801848a:	6820      	ldr	r0, [r4, #0]
 801848c:	4632      	mov	r2, r6
 801848e:	4629      	mov	r1, r5
 8018490:	3008      	adds	r0, #8
 8018492:	f7fe fa79 	bl	8016988 <rcl_take_request>
 8018496:	b148      	cbz	r0, 80184ac <rcl_action_take_result_request+0x64>
 8018498:	280a      	cmp	r0, #10
 801849a:	d007      	beq.n	80184ac <rcl_action_take_result_request+0x64>
 801849c:	f240 2259 	movw	r2, #601	@ 0x259
 80184a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80184a4:	4290      	cmp	r0, r2
 80184a6:	bf0c      	ite	eq
 80184a8:	4618      	moveq	r0, r3
 80184aa:	2001      	movne	r0, #1
 80184ac:	bd70      	pop	{r4, r5, r6, pc}
 80184ae:	f7f7 fcc7 	bl	800fe40 <rcutils_reset_error>
 80184b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80184b6:	bd70      	pop	{r4, r5, r6, pc}
 80184b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80184bc:	bd70      	pop	{r4, r5, r6, pc}
 80184be:	200b      	movs	r0, #11
 80184c0:	bd70      	pop	{r4, r5, r6, pc}
 80184c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80184c6:	4770      	bx	lr

080184c8 <rcl_action_take_cancel_request>:
 80184c8:	2800      	cmp	r0, #0
 80184ca:	d03a      	beq.n	8018542 <rcl_action_take_cancel_request+0x7a>
 80184cc:	b570      	push	{r4, r5, r6, lr}
 80184ce:	4604      	mov	r4, r0
 80184d0:	6800      	ldr	r0, [r0, #0]
 80184d2:	b388      	cbz	r0, 8018538 <rcl_action_take_cancel_request+0x70>
 80184d4:	460d      	mov	r5, r1
 80184d6:	4616      	mov	r6, r2
 80184d8:	f7fe faae 	bl	8016a38 <rcl_service_is_valid>
 80184dc:	b338      	cbz	r0, 801852e <rcl_action_take_cancel_request+0x66>
 80184de:	6820      	ldr	r0, [r4, #0]
 80184e0:	3004      	adds	r0, #4
 80184e2:	f7fe faa9 	bl	8016a38 <rcl_service_is_valid>
 80184e6:	b310      	cbz	r0, 801852e <rcl_action_take_cancel_request+0x66>
 80184e8:	6820      	ldr	r0, [r4, #0]
 80184ea:	3008      	adds	r0, #8
 80184ec:	f7fe faa4 	bl	8016a38 <rcl_service_is_valid>
 80184f0:	b1e8      	cbz	r0, 801852e <rcl_action_take_cancel_request+0x66>
 80184f2:	6820      	ldr	r0, [r4, #0]
 80184f4:	300c      	adds	r0, #12
 80184f6:	f7f6 fc8b 	bl	800ee10 <rcl_publisher_is_valid>
 80184fa:	b1c0      	cbz	r0, 801852e <rcl_action_take_cancel_request+0x66>
 80184fc:	6820      	ldr	r0, [r4, #0]
 80184fe:	3010      	adds	r0, #16
 8018500:	f7f6 fc86 	bl	800ee10 <rcl_publisher_is_valid>
 8018504:	b198      	cbz	r0, 801852e <rcl_action_take_cancel_request+0x66>
 8018506:	b1d5      	cbz	r5, 801853e <rcl_action_take_cancel_request+0x76>
 8018508:	b1ce      	cbz	r6, 801853e <rcl_action_take_cancel_request+0x76>
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	4632      	mov	r2, r6
 801850e:	4629      	mov	r1, r5
 8018510:	3004      	adds	r0, #4
 8018512:	f7fe fa39 	bl	8016988 <rcl_take_request>
 8018516:	b148      	cbz	r0, 801852c <rcl_action_take_cancel_request+0x64>
 8018518:	280a      	cmp	r0, #10
 801851a:	d007      	beq.n	801852c <rcl_action_take_cancel_request+0x64>
 801851c:	f240 2259 	movw	r2, #601	@ 0x259
 8018520:	f640 0399 	movw	r3, #2201	@ 0x899
 8018524:	4290      	cmp	r0, r2
 8018526:	bf0c      	ite	eq
 8018528:	4618      	moveq	r0, r3
 801852a:	2001      	movne	r0, #1
 801852c:	bd70      	pop	{r4, r5, r6, pc}
 801852e:	f7f7 fc87 	bl	800fe40 <rcutils_reset_error>
 8018532:	f640 0098 	movw	r0, #2200	@ 0x898
 8018536:	bd70      	pop	{r4, r5, r6, pc}
 8018538:	f640 0098 	movw	r0, #2200	@ 0x898
 801853c:	bd70      	pop	{r4, r5, r6, pc}
 801853e:	200b      	movs	r0, #11
 8018540:	bd70      	pop	{r4, r5, r6, pc}
 8018542:	f640 0098 	movw	r0, #2200	@ 0x898
 8018546:	4770      	bx	lr

08018548 <rcl_action_send_cancel_response>:
 8018548:	b398      	cbz	r0, 80185b2 <rcl_action_send_cancel_response+0x6a>
 801854a:	b570      	push	{r4, r5, r6, lr}
 801854c:	4604      	mov	r4, r0
 801854e:	6800      	ldr	r0, [r0, #0]
 8018550:	b350      	cbz	r0, 80185a8 <rcl_action_send_cancel_response+0x60>
 8018552:	460d      	mov	r5, r1
 8018554:	4616      	mov	r6, r2
 8018556:	f7fe fa6f 	bl	8016a38 <rcl_service_is_valid>
 801855a:	b300      	cbz	r0, 801859e <rcl_action_send_cancel_response+0x56>
 801855c:	6820      	ldr	r0, [r4, #0]
 801855e:	3004      	adds	r0, #4
 8018560:	f7fe fa6a 	bl	8016a38 <rcl_service_is_valid>
 8018564:	b1d8      	cbz	r0, 801859e <rcl_action_send_cancel_response+0x56>
 8018566:	6820      	ldr	r0, [r4, #0]
 8018568:	3008      	adds	r0, #8
 801856a:	f7fe fa65 	bl	8016a38 <rcl_service_is_valid>
 801856e:	b1b0      	cbz	r0, 801859e <rcl_action_send_cancel_response+0x56>
 8018570:	6820      	ldr	r0, [r4, #0]
 8018572:	300c      	adds	r0, #12
 8018574:	f7f6 fc4c 	bl	800ee10 <rcl_publisher_is_valid>
 8018578:	b188      	cbz	r0, 801859e <rcl_action_send_cancel_response+0x56>
 801857a:	6820      	ldr	r0, [r4, #0]
 801857c:	3010      	adds	r0, #16
 801857e:	f7f6 fc47 	bl	800ee10 <rcl_publisher_is_valid>
 8018582:	b160      	cbz	r0, 801859e <rcl_action_send_cancel_response+0x56>
 8018584:	b19d      	cbz	r5, 80185ae <rcl_action_send_cancel_response+0x66>
 8018586:	b196      	cbz	r6, 80185ae <rcl_action_send_cancel_response+0x66>
 8018588:	6820      	ldr	r0, [r4, #0]
 801858a:	4632      	mov	r2, r6
 801858c:	4629      	mov	r1, r5
 801858e:	3004      	adds	r0, #4
 8018590:	f7fe fa3a 	bl	8016a08 <rcl_send_response>
 8018594:	b110      	cbz	r0, 801859c <rcl_action_send_cancel_response+0x54>
 8018596:	2802      	cmp	r0, #2
 8018598:	bf18      	it	ne
 801859a:	2001      	movne	r0, #1
 801859c:	bd70      	pop	{r4, r5, r6, pc}
 801859e:	f7f7 fc4f 	bl	800fe40 <rcutils_reset_error>
 80185a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80185a6:	bd70      	pop	{r4, r5, r6, pc}
 80185a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80185ac:	bd70      	pop	{r4, r5, r6, pc}
 80185ae:	200b      	movs	r0, #11
 80185b0:	bd70      	pop	{r4, r5, r6, pc}
 80185b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80185b6:	4770      	bx	lr

080185b8 <rcl_action_wait_set_add_action_server>:
 80185b8:	2800      	cmp	r0, #0
 80185ba:	d04d      	beq.n	8018658 <rcl_action_wait_set_add_action_server+0xa0>
 80185bc:	b570      	push	{r4, r5, r6, lr}
 80185be:	460c      	mov	r4, r1
 80185c0:	b159      	cbz	r1, 80185da <rcl_action_wait_set_add_action_server+0x22>
 80185c2:	4605      	mov	r5, r0
 80185c4:	6808      	ldr	r0, [r1, #0]
 80185c6:	b140      	cbz	r0, 80185da <rcl_action_wait_set_add_action_server+0x22>
 80185c8:	4616      	mov	r6, r2
 80185ca:	f7fe fa35 	bl	8016a38 <rcl_service_is_valid>
 80185ce:	b120      	cbz	r0, 80185da <rcl_action_wait_set_add_action_server+0x22>
 80185d0:	6820      	ldr	r0, [r4, #0]
 80185d2:	3004      	adds	r0, #4
 80185d4:	f7fe fa30 	bl	8016a38 <rcl_service_is_valid>
 80185d8:	b910      	cbnz	r0, 80185e0 <rcl_action_wait_set_add_action_server+0x28>
 80185da:	f640 0098 	movw	r0, #2200	@ 0x898
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	6820      	ldr	r0, [r4, #0]
 80185e2:	3008      	adds	r0, #8
 80185e4:	f7fe fa28 	bl	8016a38 <rcl_service_is_valid>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	d0f6      	beq.n	80185da <rcl_action_wait_set_add_action_server+0x22>
 80185ec:	6820      	ldr	r0, [r4, #0]
 80185ee:	300c      	adds	r0, #12
 80185f0:	f7f6 fc26 	bl	800ee40 <rcl_publisher_is_valid_except_context>
 80185f4:	2800      	cmp	r0, #0
 80185f6:	d0f0      	beq.n	80185da <rcl_action_wait_set_add_action_server+0x22>
 80185f8:	6820      	ldr	r0, [r4, #0]
 80185fa:	3010      	adds	r0, #16
 80185fc:	f7f6 fc20 	bl	800ee40 <rcl_publisher_is_valid_except_context>
 8018600:	2800      	cmp	r0, #0
 8018602:	d0ea      	beq.n	80185da <rcl_action_wait_set_add_action_server+0x22>
 8018604:	6821      	ldr	r1, [r4, #0]
 8018606:	4628      	mov	r0, r5
 8018608:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801860c:	f7ff face 	bl	8017bac <rcl_wait_set_add_service>
 8018610:	2800      	cmp	r0, #0
 8018612:	d1e4      	bne.n	80185de <rcl_action_wait_set_add_action_server+0x26>
 8018614:	6821      	ldr	r1, [r4, #0]
 8018616:	4628      	mov	r0, r5
 8018618:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801861c:	3104      	adds	r1, #4
 801861e:	f7ff fac5 	bl	8017bac <rcl_wait_set_add_service>
 8018622:	2800      	cmp	r0, #0
 8018624:	d1db      	bne.n	80185de <rcl_action_wait_set_add_action_server+0x26>
 8018626:	6821      	ldr	r1, [r4, #0]
 8018628:	4628      	mov	r0, r5
 801862a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801862e:	3108      	adds	r1, #8
 8018630:	f7ff fabc 	bl	8017bac <rcl_wait_set_add_service>
 8018634:	2800      	cmp	r0, #0
 8018636:	d1d2      	bne.n	80185de <rcl_action_wait_set_add_action_server+0x26>
 8018638:	6821      	ldr	r1, [r4, #0]
 801863a:	4628      	mov	r0, r5
 801863c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018640:	3114      	adds	r1, #20
 8018642:	f7ff fa57 	bl	8017af4 <rcl_wait_set_add_timer>
 8018646:	2800      	cmp	r0, #0
 8018648:	d1c9      	bne.n	80185de <rcl_action_wait_set_add_action_server+0x26>
 801864a:	2e00      	cmp	r6, #0
 801864c:	d0c7      	beq.n	80185de <rcl_action_wait_set_add_action_server+0x26>
 801864e:	6823      	ldr	r3, [r4, #0]
 8018650:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018654:	6033      	str	r3, [r6, #0]
 8018656:	bd70      	pop	{r4, r5, r6, pc}
 8018658:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801865c:	4770      	bx	lr
 801865e:	bf00      	nop

08018660 <rcl_action_server_wait_set_get_entities_ready>:
 8018660:	2800      	cmp	r0, #0
 8018662:	d05a      	beq.n	801871a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8018664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018666:	460c      	mov	r4, r1
 8018668:	b161      	cbz	r1, 8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801866a:	4605      	mov	r5, r0
 801866c:	6808      	ldr	r0, [r1, #0]
 801866e:	b148      	cbz	r0, 8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018670:	4616      	mov	r6, r2
 8018672:	461f      	mov	r7, r3
 8018674:	f7fe f9e0 	bl	8016a38 <rcl_service_is_valid>
 8018678:	b120      	cbz	r0, 8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801867a:	6820      	ldr	r0, [r4, #0]
 801867c:	3004      	adds	r0, #4
 801867e:	f7fe f9db 	bl	8016a38 <rcl_service_is_valid>
 8018682:	b910      	cbnz	r0, 801868a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8018684:	f640 0098 	movw	r0, #2200	@ 0x898
 8018688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801868a:	6820      	ldr	r0, [r4, #0]
 801868c:	3008      	adds	r0, #8
 801868e:	f7fe f9d3 	bl	8016a38 <rcl_service_is_valid>
 8018692:	2800      	cmp	r0, #0
 8018694:	d0f6      	beq.n	8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018696:	6820      	ldr	r0, [r4, #0]
 8018698:	300c      	adds	r0, #12
 801869a:	f7f6 fbd1 	bl	800ee40 <rcl_publisher_is_valid_except_context>
 801869e:	2800      	cmp	r0, #0
 80186a0:	d0f0      	beq.n	8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80186a2:	6820      	ldr	r0, [r4, #0]
 80186a4:	3010      	adds	r0, #16
 80186a6:	f7f6 fbcb 	bl	800ee40 <rcl_publisher_is_valid_except_context>
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d0ea      	beq.n	8018684 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80186ae:	b3be      	cbz	r6, 8018720 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80186b0:	b3b7      	cbz	r7, 8018720 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80186b2:	9b06      	ldr	r3, [sp, #24]
 80186b4:	b3a3      	cbz	r3, 8018720 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80186b6:	9b07      	ldr	r3, [sp, #28]
 80186b8:	b393      	cbz	r3, 8018720 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80186ba:	6821      	ldr	r1, [r4, #0]
 80186bc:	692a      	ldr	r2, [r5, #16]
 80186be:	6a2c      	ldr	r4, [r5, #32]
 80186c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80186c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80186c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80186cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80186d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80186d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80186d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80186dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80186e0:	1a64      	subs	r4, r4, r1
 80186e2:	fab4 f484 	clz	r4, r4
 80186e6:	0964      	lsrs	r4, r4, #5
 80186e8:	7034      	strb	r4, [r6, #0]
 80186ea:	1d0c      	adds	r4, r1, #4
 80186ec:	1b1b      	subs	r3, r3, r4
 80186ee:	fab3 f383 	clz	r3, r3
 80186f2:	095b      	lsrs	r3, r3, #5
 80186f4:	f101 0408 	add.w	r4, r1, #8
 80186f8:	703b      	strb	r3, [r7, #0]
 80186fa:	f101 0314 	add.w	r3, r1, #20
 80186fe:	1b01      	subs	r1, r0, r4
 8018700:	1ad3      	subs	r3, r2, r3
 8018702:	fab1 f181 	clz	r1, r1
 8018706:	9a06      	ldr	r2, [sp, #24]
 8018708:	0949      	lsrs	r1, r1, #5
 801870a:	7011      	strb	r1, [r2, #0]
 801870c:	fab3 f383 	clz	r3, r3
 8018710:	9a07      	ldr	r2, [sp, #28]
 8018712:	095b      	lsrs	r3, r3, #5
 8018714:	2000      	movs	r0, #0
 8018716:	7013      	strb	r3, [r2, #0]
 8018718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801871a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801871e:	4770      	bx	lr
 8018720:	200b      	movs	r0, #11
 8018722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018724 <_execute_event_handler>:
 8018724:	2002      	movs	r0, #2
 8018726:	4770      	bx	lr

08018728 <_cancel_goal_event_handler>:
 8018728:	2003      	movs	r0, #3
 801872a:	4770      	bx	lr

0801872c <_succeed_event_handler>:
 801872c:	2004      	movs	r0, #4
 801872e:	4770      	bx	lr

08018730 <_abort_event_handler>:
 8018730:	2006      	movs	r0, #6
 8018732:	4770      	bx	lr

08018734 <_canceled_event_handler>:
 8018734:	2005      	movs	r0, #5
 8018736:	4770      	bx	lr

08018738 <rcl_action_transition_goal_state>:
 8018738:	b2c2      	uxtb	r2, r0
 801873a:	2a06      	cmp	r2, #6
 801873c:	d80c      	bhi.n	8018758 <rcl_action_transition_goal_state+0x20>
 801873e:	2904      	cmp	r1, #4
 8018740:	d80a      	bhi.n	8018758 <rcl_action_transition_goal_state+0x20>
 8018742:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8018746:	b410      	push	{r4}
 8018748:	1853      	adds	r3, r2, r1
 801874a:	4c06      	ldr	r4, [pc, #24]	@ (8018764 <rcl_action_transition_goal_state+0x2c>)
 801874c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018750:	b123      	cbz	r3, 801875c <rcl_action_transition_goal_state+0x24>
 8018752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018756:	4718      	bx	r3
 8018758:	2000      	movs	r0, #0
 801875a:	4770      	bx	lr
 801875c:	2000      	movs	r0, #0
 801875e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018762:	4770      	bx	lr
 8018764:	0801e4f8 	.word	0x0801e4f8

08018768 <rcl_action_get_zero_initialized_cancel_response>:
 8018768:	b510      	push	{r4, lr}
 801876a:	4c07      	ldr	r4, [pc, #28]	@ (8018788 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801876c:	4686      	mov	lr, r0
 801876e:	4684      	mov	ip, r0
 8018770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018772:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018778:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801877c:	6823      	ldr	r3, [r4, #0]
 801877e:	f8cc 3000 	str.w	r3, [ip]
 8018782:	4670      	mov	r0, lr
 8018784:	bd10      	pop	{r4, pc}
 8018786:	bf00      	nop
 8018788:	0801e584 	.word	0x0801e584

0801878c <rclc_action_send_result_request>:
 801878c:	b1d0      	cbz	r0, 80187c4 <rclc_action_send_result_request+0x38>
 801878e:	b500      	push	{lr}
 8018790:	4684      	mov	ip, r0
 8018792:	b087      	sub	sp, #28
 8018794:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018798:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801879c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80187a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80187a4:	f10d 0e08 	add.w	lr, sp, #8
 80187a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80187ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80187b0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80187b4:	a902      	add	r1, sp, #8
 80187b6:	3010      	adds	r0, #16
 80187b8:	f7ff fbda 	bl	8017f70 <rcl_action_send_result_request>
 80187bc:	b920      	cbnz	r0, 80187c8 <rclc_action_send_result_request+0x3c>
 80187be:	b007      	add	sp, #28
 80187c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80187c4:	200b      	movs	r0, #11
 80187c6:	4770      	bx	lr
 80187c8:	9001      	str	r0, [sp, #4]
 80187ca:	f7f7 fb39 	bl	800fe40 <rcutils_reset_error>
 80187ce:	9801      	ldr	r0, [sp, #4]
 80187d0:	b007      	add	sp, #28
 80187d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80187d6:	bf00      	nop

080187d8 <rclc_action_take_goal_handle>:
 80187d8:	b160      	cbz	r0, 80187f4 <rclc_action_take_goal_handle+0x1c>
 80187da:	6883      	ldr	r3, [r0, #8]
 80187dc:	b143      	cbz	r3, 80187f0 <rclc_action_take_goal_handle+0x18>
 80187de:	6819      	ldr	r1, [r3, #0]
 80187e0:	6081      	str	r1, [r0, #8]
 80187e2:	2200      	movs	r2, #0
 80187e4:	721a      	strb	r2, [r3, #8]
 80187e6:	68c1      	ldr	r1, [r0, #12]
 80187e8:	6019      	str	r1, [r3, #0]
 80187ea:	621a      	str	r2, [r3, #32]
 80187ec:	849a      	strh	r2, [r3, #36]	@ 0x24
 80187ee:	60c3      	str	r3, [r0, #12]
 80187f0:	4618      	mov	r0, r3
 80187f2:	4770      	bx	lr
 80187f4:	4603      	mov	r3, r0
 80187f6:	e7fb      	b.n	80187f0 <rclc_action_take_goal_handle+0x18>

080187f8 <rclc_action_remove_used_goal_handle>:
 80187f8:	b180      	cbz	r0, 801881c <rclc_action_remove_used_goal_handle+0x24>
 80187fa:	b179      	cbz	r1, 801881c <rclc_action_remove_used_goal_handle+0x24>
 80187fc:	68c3      	ldr	r3, [r0, #12]
 80187fe:	4299      	cmp	r1, r3
 8018800:	d00d      	beq.n	801881e <rclc_action_remove_used_goal_handle+0x26>
 8018802:	b12b      	cbz	r3, 8018810 <rclc_action_remove_used_goal_handle+0x18>
 8018804:	681a      	ldr	r2, [r3, #0]
 8018806:	4291      	cmp	r1, r2
 8018808:	d003      	beq.n	8018812 <rclc_action_remove_used_goal_handle+0x1a>
 801880a:	4613      	mov	r3, r2
 801880c:	2b00      	cmp	r3, #0
 801880e:	d1f9      	bne.n	8018804 <rclc_action_remove_used_goal_handle+0xc>
 8018810:	4770      	bx	lr
 8018812:	680a      	ldr	r2, [r1, #0]
 8018814:	601a      	str	r2, [r3, #0]
 8018816:	6883      	ldr	r3, [r0, #8]
 8018818:	600b      	str	r3, [r1, #0]
 801881a:	6081      	str	r1, [r0, #8]
 801881c:	4770      	bx	lr
 801881e:	680b      	ldr	r3, [r1, #0]
 8018820:	60c3      	str	r3, [r0, #12]
 8018822:	e7f8      	b.n	8018816 <rclc_action_remove_used_goal_handle+0x1e>

08018824 <rclc_action_find_goal_handle_by_uuid>:
 8018824:	b538      	push	{r3, r4, r5, lr}
 8018826:	b180      	cbz	r0, 801884a <rclc_action_find_goal_handle_by_uuid+0x26>
 8018828:	460d      	mov	r5, r1
 801882a:	b181      	cbz	r1, 801884e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801882c:	68c4      	ldr	r4, [r0, #12]
 801882e:	b914      	cbnz	r4, 8018836 <rclc_action_find_goal_handle_by_uuid+0x12>
 8018830:	e009      	b.n	8018846 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018832:	6824      	ldr	r4, [r4, #0]
 8018834:	b13c      	cbz	r4, 8018846 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018836:	f104 0009 	add.w	r0, r4, #9
 801883a:	2210      	movs	r2, #16
 801883c:	4629      	mov	r1, r5
 801883e:	f003 fa2f 	bl	801bca0 <memcmp>
 8018842:	2800      	cmp	r0, #0
 8018844:	d1f5      	bne.n	8018832 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018846:	4620      	mov	r0, r4
 8018848:	bd38      	pop	{r3, r4, r5, pc}
 801884a:	4604      	mov	r4, r0
 801884c:	e7fb      	b.n	8018846 <rclc_action_find_goal_handle_by_uuid+0x22>
 801884e:	460c      	mov	r4, r1
 8018850:	e7f9      	b.n	8018846 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018852:	bf00      	nop

08018854 <rclc_action_find_first_handle_by_status>:
 8018854:	b140      	cbz	r0, 8018868 <rclc_action_find_first_handle_by_status+0x14>
 8018856:	68c0      	ldr	r0, [r0, #12]
 8018858:	b910      	cbnz	r0, 8018860 <rclc_action_find_first_handle_by_status+0xc>
 801885a:	e005      	b.n	8018868 <rclc_action_find_first_handle_by_status+0x14>
 801885c:	6800      	ldr	r0, [r0, #0]
 801885e:	b118      	cbz	r0, 8018868 <rclc_action_find_first_handle_by_status+0x14>
 8018860:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018864:	428b      	cmp	r3, r1
 8018866:	d1f9      	bne.n	801885c <rclc_action_find_first_handle_by_status+0x8>
 8018868:	4770      	bx	lr
 801886a:	bf00      	nop

0801886c <rclc_action_find_first_terminated_handle>:
 801886c:	b140      	cbz	r0, 8018880 <rclc_action_find_first_terminated_handle+0x14>
 801886e:	68c0      	ldr	r0, [r0, #12]
 8018870:	b910      	cbnz	r0, 8018878 <rclc_action_find_first_terminated_handle+0xc>
 8018872:	e005      	b.n	8018880 <rclc_action_find_first_terminated_handle+0x14>
 8018874:	6800      	ldr	r0, [r0, #0]
 8018876:	b118      	cbz	r0, 8018880 <rclc_action_find_first_terminated_handle+0x14>
 8018878:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801887c:	2b03      	cmp	r3, #3
 801887e:	ddf9      	ble.n	8018874 <rclc_action_find_first_terminated_handle+0x8>
 8018880:	4770      	bx	lr
 8018882:	bf00      	nop

08018884 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018884:	b170      	cbz	r0, 80188a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018886:	68c0      	ldr	r0, [r0, #12]
 8018888:	b160      	cbz	r0, 80188a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801888a:	b410      	push	{r4}
 801888c:	e001      	b.n	8018892 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801888e:	6800      	ldr	r0, [r0, #0]
 8018890:	b128      	cbz	r0, 801889e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018892:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018896:	4299      	cmp	r1, r3
 8018898:	bf08      	it	eq
 801889a:	4294      	cmpeq	r4, r2
 801889c:	d1f7      	bne.n	801888e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801889e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188a2:	4770      	bx	lr
 80188a4:	4770      	bx	lr
 80188a6:	bf00      	nop

080188a8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80188a8:	b170      	cbz	r0, 80188c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80188aa:	68c0      	ldr	r0, [r0, #12]
 80188ac:	b160      	cbz	r0, 80188c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80188ae:	b410      	push	{r4}
 80188b0:	e001      	b.n	80188b6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80188b2:	6800      	ldr	r0, [r0, #0]
 80188b4:	b128      	cbz	r0, 80188c2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80188b6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80188ba:	4299      	cmp	r1, r3
 80188bc:	bf08      	it	eq
 80188be:	4294      	cmpeq	r4, r2
 80188c0:	d1f7      	bne.n	80188b2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80188c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188c6:	4770      	bx	lr
 80188c8:	4770      	bx	lr
 80188ca:	bf00      	nop

080188cc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80188cc:	b170      	cbz	r0, 80188ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80188ce:	68c0      	ldr	r0, [r0, #12]
 80188d0:	b160      	cbz	r0, 80188ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80188d2:	b410      	push	{r4}
 80188d4:	e001      	b.n	80188da <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80188d6:	6800      	ldr	r0, [r0, #0]
 80188d8:	b128      	cbz	r0, 80188e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80188da:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80188de:	4299      	cmp	r1, r3
 80188e0:	bf08      	it	eq
 80188e2:	4294      	cmpeq	r4, r2
 80188e4:	d1f7      	bne.n	80188d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80188e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188ea:	4770      	bx	lr
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop

080188f0 <rclc_action_find_first_handle_with_goal_response>:
 80188f0:	b140      	cbz	r0, 8018904 <rclc_action_find_first_handle_with_goal_response+0x14>
 80188f2:	68c0      	ldr	r0, [r0, #12]
 80188f4:	b910      	cbnz	r0, 80188fc <rclc_action_find_first_handle_with_goal_response+0xc>
 80188f6:	e005      	b.n	8018904 <rclc_action_find_first_handle_with_goal_response+0x14>
 80188f8:	6800      	ldr	r0, [r0, #0]
 80188fa:	b118      	cbz	r0, 8018904 <rclc_action_find_first_handle_with_goal_response+0x14>
 80188fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d0f9      	beq.n	80188f8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018904:	4770      	bx	lr
 8018906:	bf00      	nop

08018908 <rclc_action_find_first_handle_with_result_response>:
 8018908:	b140      	cbz	r0, 801891c <rclc_action_find_first_handle_with_result_response+0x14>
 801890a:	68c0      	ldr	r0, [r0, #12]
 801890c:	b910      	cbnz	r0, 8018914 <rclc_action_find_first_handle_with_result_response+0xc>
 801890e:	e005      	b.n	801891c <rclc_action_find_first_handle_with_result_response+0x14>
 8018910:	6800      	ldr	r0, [r0, #0]
 8018912:	b118      	cbz	r0, 801891c <rclc_action_find_first_handle_with_result_response+0x14>
 8018914:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018918:	2b00      	cmp	r3, #0
 801891a:	d0f9      	beq.n	8018910 <rclc_action_find_first_handle_with_result_response+0x8>
 801891c:	4770      	bx	lr
 801891e:	bf00      	nop

08018920 <rclc_action_server_response_goal_request>:
 8018920:	b198      	cbz	r0, 801894a <rclc_action_server_response_goal_request+0x2a>
 8018922:	b510      	push	{r4, lr}
 8018924:	6844      	ldr	r4, [r0, #4]
 8018926:	b086      	sub	sp, #24
 8018928:	2200      	movs	r2, #0
 801892a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801892e:	460b      	mov	r3, r1
 8018930:	9205      	str	r2, [sp, #20]
 8018932:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018936:	aa03      	add	r2, sp, #12
 8018938:	f104 0010 	add.w	r0, r4, #16
 801893c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018940:	f7ff fd4a 	bl	80183d8 <rcl_action_send_goal_response>
 8018944:	b918      	cbnz	r0, 801894e <rclc_action_server_response_goal_request+0x2e>
 8018946:	b006      	add	sp, #24
 8018948:	bd10      	pop	{r4, pc}
 801894a:	200b      	movs	r0, #11
 801894c:	4770      	bx	lr
 801894e:	9001      	str	r0, [sp, #4]
 8018950:	f7f7 fa76 	bl	800fe40 <rcutils_reset_error>
 8018954:	9801      	ldr	r0, [sp, #4]
 8018956:	b006      	add	sp, #24
 8018958:	bd10      	pop	{r4, pc}
 801895a:	bf00      	nop
 801895c:	0000      	movs	r0, r0
	...

08018960 <rclc_action_server_goal_cancel_accept>:
 8018960:	b310      	cbz	r0, 80189a8 <rclc_action_server_goal_cancel_accept+0x48>
 8018962:	b510      	push	{r4, lr}
 8018964:	b090      	sub	sp, #64	@ 0x40
 8018966:	4604      	mov	r4, r0
 8018968:	a806      	add	r0, sp, #24
 801896a:	f7ff fefd 	bl	8018768 <rcl_action_get_zero_initialized_cancel_response>
 801896e:	2300      	movs	r3, #0
 8018970:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018974:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018978:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801897c:	f88d 3018 	strb.w	r3, [sp, #24]
 8018980:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018984:	f8cd d01c 	str.w	sp, [sp, #28]
 8018988:	46ec      	mov	ip, sp
 801898a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801898e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80189b0 <rclc_action_server_goal_cancel_accept+0x50>
 8018992:	6860      	ldr	r0, [r4, #4]
 8018994:	aa06      	add	r2, sp, #24
 8018996:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801899a:	3010      	adds	r0, #16
 801899c:	ed8d 7b08 	vstr	d7, [sp, #32]
 80189a0:	f7ff fdd2 	bl	8018548 <rcl_action_send_cancel_response>
 80189a4:	b010      	add	sp, #64	@ 0x40
 80189a6:	bd10      	pop	{r4, pc}
 80189a8:	200b      	movs	r0, #11
 80189aa:	4770      	bx	lr
 80189ac:	f3af 8000 	nop.w
 80189b0:	00000001 	.word	0x00000001
 80189b4:	00000001 	.word	0x00000001

080189b8 <rclc_action_server_goal_cancel_reject>:
 80189b8:	b082      	sub	sp, #8
 80189ba:	b530      	push	{r4, r5, lr}
 80189bc:	b08b      	sub	sp, #44	@ 0x2c
 80189be:	ac0e      	add	r4, sp, #56	@ 0x38
 80189c0:	e884 000c 	stmia.w	r4, {r2, r3}
 80189c4:	b188      	cbz	r0, 80189ea <rclc_action_server_goal_cancel_reject+0x32>
 80189c6:	4604      	mov	r4, r0
 80189c8:	a801      	add	r0, sp, #4
 80189ca:	460d      	mov	r5, r1
 80189cc:	f7ff fecc 	bl	8018768 <rcl_action_get_zero_initialized_cancel_response>
 80189d0:	aa01      	add	r2, sp, #4
 80189d2:	a90e      	add	r1, sp, #56	@ 0x38
 80189d4:	f104 0010 	add.w	r0, r4, #16
 80189d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80189dc:	f7ff fdb4 	bl	8018548 <rcl_action_send_cancel_response>
 80189e0:	b00b      	add	sp, #44	@ 0x2c
 80189e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189e6:	b002      	add	sp, #8
 80189e8:	4770      	bx	lr
 80189ea:	200b      	movs	r0, #11
 80189ec:	b00b      	add	sp, #44	@ 0x2c
 80189ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189f2:	b002      	add	sp, #8
 80189f4:	4770      	bx	lr
 80189f6:	bf00      	nop

080189f8 <__atomic_load_8>:
 80189f8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80189fc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018a00:	4a15      	ldr	r2, [pc, #84]	@ (8018a58 <__atomic_load_8+0x60>)
 8018a02:	4b16      	ldr	r3, [pc, #88]	@ (8018a5c <__atomic_load_8+0x64>)
 8018a04:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018a08:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018a0c:	fb02 f101 	mul.w	r1, r2, r1
 8018a10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018a14:	fba3 2301 	umull	r2, r3, r3, r1
 8018a18:	091b      	lsrs	r3, r3, #4
 8018a1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018a1e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018a22:	b4d0      	push	{r4, r6, r7}
 8018a24:	4c0e      	ldr	r4, [pc, #56]	@ (8018a60 <__atomic_load_8+0x68>)
 8018a26:	1ac9      	subs	r1, r1, r3
 8018a28:	1862      	adds	r2, r4, r1
 8018a2a:	f04f 0c01 	mov.w	ip, #1
 8018a2e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018a32:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018a36:	2e00      	cmp	r6, #0
 8018a38:	d1f9      	bne.n	8018a2e <__atomic_load_8+0x36>
 8018a3a:	f3bf 8f5b 	dmb	ish
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d1f4      	bne.n	8018a2e <__atomic_load_8+0x36>
 8018a44:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018a48:	f3bf 8f5b 	dmb	ish
 8018a4c:	5463      	strb	r3, [r4, r1]
 8018a4e:	4630      	mov	r0, r6
 8018a50:	4639      	mov	r1, r7
 8018a52:	bcd0      	pop	{r4, r6, r7}
 8018a54:	4770      	bx	lr
 8018a56:	bf00      	nop
 8018a58:	27d4eb2d 	.word	0x27d4eb2d
 8018a5c:	b21642c9 	.word	0xb21642c9
 8018a60:	2000bd70 	.word	0x2000bd70

08018a64 <__atomic_store_8>:
 8018a64:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018a68:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018a6c:	b570      	push	{r4, r5, r6, lr}
 8018a6e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018a72:	4c14      	ldr	r4, [pc, #80]	@ (8018ac4 <__atomic_store_8+0x60>)
 8018a74:	4d14      	ldr	r5, [pc, #80]	@ (8018ac8 <__atomic_store_8+0x64>)
 8018a76:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018a7a:	fb04 f101 	mul.w	r1, r4, r1
 8018a7e:	4c13      	ldr	r4, [pc, #76]	@ (8018acc <__atomic_store_8+0x68>)
 8018a80:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018a84:	fba4 4e01 	umull	r4, lr, r4, r1
 8018a88:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8018a8c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8018a90:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8018a94:	eba1 0e0e 	sub.w	lr, r1, lr
 8018a98:	eb05 0c0e 	add.w	ip, r5, lr
 8018a9c:	f04f 0401 	mov.w	r4, #1
 8018aa0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018aa4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8018aa8:	2e00      	cmp	r6, #0
 8018aaa:	d1f9      	bne.n	8018aa0 <__atomic_store_8+0x3c>
 8018aac:	f3bf 8f5b 	dmb	ish
 8018ab0:	b2c9      	uxtb	r1, r1
 8018ab2:	2900      	cmp	r1, #0
 8018ab4:	d1f4      	bne.n	8018aa0 <__atomic_store_8+0x3c>
 8018ab6:	e9c0 2300 	strd	r2, r3, [r0]
 8018aba:	f3bf 8f5b 	dmb	ish
 8018abe:	f805 100e 	strb.w	r1, [r5, lr]
 8018ac2:	bd70      	pop	{r4, r5, r6, pc}
 8018ac4:	27d4eb2d 	.word	0x27d4eb2d
 8018ac8:	2000bd70 	.word	0x2000bd70
 8018acc:	b21642c9 	.word	0xb21642c9

08018ad0 <__atomic_exchange_8>:
 8018ad0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018ad4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018ad8:	4916      	ldr	r1, [pc, #88]	@ (8018b34 <__atomic_exchange_8+0x64>)
 8018ada:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018ade:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018ae2:	fb01 fc0c 	mul.w	ip, r1, ip
 8018ae6:	4914      	ldr	r1, [pc, #80]	@ (8018b38 <__atomic_exchange_8+0x68>)
 8018ae8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018aec:	b570      	push	{r4, r5, r6, lr}
 8018aee:	4605      	mov	r5, r0
 8018af0:	fba1 010c 	umull	r0, r1, r1, ip
 8018af4:	0909      	lsrs	r1, r1, #4
 8018af6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8018afa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8018afe:	4e0f      	ldr	r6, [pc, #60]	@ (8018b3c <__atomic_exchange_8+0x6c>)
 8018b00:	ebac 0c01 	sub.w	ip, ip, r1
 8018b04:	eb06 010c 	add.w	r1, r6, ip
 8018b08:	f04f 0e01 	mov.w	lr, #1
 8018b0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018b10:	e8c1 ef40 	strexb	r0, lr, [r1]
 8018b14:	2800      	cmp	r0, #0
 8018b16:	d1f9      	bne.n	8018b0c <__atomic_exchange_8+0x3c>
 8018b18:	f3bf 8f5b 	dmb	ish
 8018b1c:	b2e4      	uxtb	r4, r4
 8018b1e:	2c00      	cmp	r4, #0
 8018b20:	d1f4      	bne.n	8018b0c <__atomic_exchange_8+0x3c>
 8018b22:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018b26:	e9c5 2300 	strd	r2, r3, [r5]
 8018b2a:	f3bf 8f5b 	dmb	ish
 8018b2e:	f806 400c 	strb.w	r4, [r6, ip]
 8018b32:	bd70      	pop	{r4, r5, r6, pc}
 8018b34:	27d4eb2d 	.word	0x27d4eb2d
 8018b38:	b21642c9 	.word	0xb21642c9
 8018b3c:	2000bd70 	.word	0x2000bd70

08018b40 <rcutils_get_env>:
 8018b40:	b168      	cbz	r0, 8018b5e <rcutils_get_env+0x1e>
 8018b42:	b510      	push	{r4, lr}
 8018b44:	460c      	mov	r4, r1
 8018b46:	b129      	cbz	r1, 8018b54 <rcutils_get_env+0x14>
 8018b48:	f002 fc18 	bl	801b37c <getenv>
 8018b4c:	b120      	cbz	r0, 8018b58 <rcutils_get_env+0x18>
 8018b4e:	6020      	str	r0, [r4, #0]
 8018b50:	2000      	movs	r0, #0
 8018b52:	bd10      	pop	{r4, pc}
 8018b54:	4803      	ldr	r0, [pc, #12]	@ (8018b64 <rcutils_get_env+0x24>)
 8018b56:	bd10      	pop	{r4, pc}
 8018b58:	4b03      	ldr	r3, [pc, #12]	@ (8018b68 <rcutils_get_env+0x28>)
 8018b5a:	6023      	str	r3, [r4, #0]
 8018b5c:	bd10      	pop	{r4, pc}
 8018b5e:	4803      	ldr	r0, [pc, #12]	@ (8018b6c <rcutils_get_env+0x2c>)
 8018b60:	4770      	bx	lr
 8018b62:	bf00      	nop
 8018b64:	0801e5c4 	.word	0x0801e5c4
 8018b68:	0801e99c 	.word	0x0801e99c
 8018b6c:	0801e5a8 	.word	0x0801e5a8

08018b70 <rcutils_is_directory>:
 8018b70:	2000      	movs	r0, #0
 8018b72:	4770      	bx	lr

08018b74 <rcutils_join_path>:
 8018b74:	b082      	sub	sp, #8
 8018b76:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	b002      	add	sp, #8
 8018b7e:	4770      	bx	lr

08018b80 <rcutils_to_native_path>:
 8018b80:	b084      	sub	sp, #16
 8018b82:	a801      	add	r0, sp, #4
 8018b84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8018b88:	b004      	add	sp, #16
 8018b8a:	2000      	movs	r0, #0
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop

08018b90 <rcutils_format_string_limit>:
 8018b90:	b40f      	push	{r0, r1, r2, r3}
 8018b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b94:	b083      	sub	sp, #12
 8018b96:	ac08      	add	r4, sp, #32
 8018b98:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018b9e:	b34e      	cbz	r6, 8018bf4 <rcutils_format_string_limit+0x64>
 8018ba0:	a808      	add	r0, sp, #32
 8018ba2:	f7f7 f927 	bl	800fdf4 <rcutils_allocator_is_valid>
 8018ba6:	b328      	cbz	r0, 8018bf4 <rcutils_format_string_limit+0x64>
 8018ba8:	2100      	movs	r1, #0
 8018baa:	ab0f      	add	r3, sp, #60	@ 0x3c
 8018bac:	4632      	mov	r2, r6
 8018bae:	4608      	mov	r0, r1
 8018bb0:	e9cd 3300 	strd	r3, r3, [sp]
 8018bb4:	f000 f8f4 	bl	8018da0 <rcutils_vsnprintf>
 8018bb8:	1c43      	adds	r3, r0, #1
 8018bba:	4605      	mov	r5, r0
 8018bbc:	d01a      	beq.n	8018bf4 <rcutils_format_string_limit+0x64>
 8018bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018bc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018bc2:	1c47      	adds	r7, r0, #1
 8018bc4:	429f      	cmp	r7, r3
 8018bc6:	bf84      	itt	hi
 8018bc8:	461f      	movhi	r7, r3
 8018bca:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8018bce:	4638      	mov	r0, r7
 8018bd0:	9b08      	ldr	r3, [sp, #32]
 8018bd2:	4798      	blx	r3
 8018bd4:	4604      	mov	r4, r0
 8018bd6:	b168      	cbz	r0, 8018bf4 <rcutils_format_string_limit+0x64>
 8018bd8:	9b01      	ldr	r3, [sp, #4]
 8018bda:	4632      	mov	r2, r6
 8018bdc:	4639      	mov	r1, r7
 8018bde:	f000 f8df 	bl	8018da0 <rcutils_vsnprintf>
 8018be2:	2800      	cmp	r0, #0
 8018be4:	db02      	blt.n	8018bec <rcutils_format_string_limit+0x5c>
 8018be6:	2300      	movs	r3, #0
 8018be8:	5563      	strb	r3, [r4, r5]
 8018bea:	e004      	b.n	8018bf6 <rcutils_format_string_limit+0x66>
 8018bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	4798      	blx	r3
 8018bf4:	2400      	movs	r4, #0
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	b003      	add	sp, #12
 8018bfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018bfe:	b004      	add	sp, #16
 8018c00:	4770      	bx	lr
 8018c02:	bf00      	nop

08018c04 <rcutils_repl_str>:
 8018c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c08:	ed2d 8b02 	vpush	{d8}
 8018c0c:	b087      	sub	sp, #28
 8018c0e:	4680      	mov	r8, r0
 8018c10:	4608      	mov	r0, r1
 8018c12:	f8cd 8004 	str.w	r8, [sp, #4]
 8018c16:	ee08 2a10 	vmov	s16, r2
 8018c1a:	468a      	mov	sl, r1
 8018c1c:	4699      	mov	r9, r3
 8018c1e:	f7e7 fb09 	bl	8000234 <strlen>
 8018c22:	2600      	movs	r6, #0
 8018c24:	4647      	mov	r7, r8
 8018c26:	9002      	str	r0, [sp, #8]
 8018c28:	46b3      	mov	fp, r6
 8018c2a:	2510      	movs	r5, #16
 8018c2c:	46b0      	mov	r8, r6
 8018c2e:	e01d      	b.n	8018c6c <rcutils_repl_str+0x68>
 8018c30:	f10b 0b01 	add.w	fp, fp, #1
 8018c34:	455e      	cmp	r6, fp
 8018c36:	d211      	bcs.n	8018c5c <rcutils_repl_str+0x58>
 8018c38:	442e      	add	r6, r5
 8018c3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018c3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018c42:	00b1      	lsls	r1, r6, #2
 8018c44:	4798      	blx	r3
 8018c46:	2800      	cmp	r0, #0
 8018c48:	f000 8088 	beq.w	8018d5c <rcutils_repl_str+0x158>
 8018c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c50:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8018c54:	4680      	mov	r8, r0
 8018c56:	bf28      	it	cs
 8018c58:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8018c5c:	9a01      	ldr	r2, [sp, #4]
 8018c5e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8018c62:	1aa2      	subs	r2, r4, r2
 8018c64:	f843 2c04 	str.w	r2, [r3, #-4]
 8018c68:	9b02      	ldr	r3, [sp, #8]
 8018c6a:	18e7      	adds	r7, r4, r3
 8018c6c:	4651      	mov	r1, sl
 8018c6e:	4638      	mov	r0, r7
 8018c70:	f003 f867 	bl	801bd42 <strstr>
 8018c74:	4604      	mov	r4, r0
 8018c76:	4640      	mov	r0, r8
 8018c78:	2c00      	cmp	r4, #0
 8018c7a:	d1d9      	bne.n	8018c30 <rcutils_repl_str+0x2c>
 8018c7c:	46b8      	mov	r8, r7
 8018c7e:	4607      	mov	r7, r0
 8018c80:	4640      	mov	r0, r8
 8018c82:	f7e7 fad7 	bl	8000234 <strlen>
 8018c86:	9b01      	ldr	r3, [sp, #4]
 8018c88:	eba8 0303 	sub.w	r3, r8, r3
 8018c8c:	181c      	adds	r4, r3, r0
 8018c8e:	9404      	str	r4, [sp, #16]
 8018c90:	f1bb 0f00 	cmp.w	fp, #0
 8018c94:	d04a      	beq.n	8018d2c <rcutils_repl_str+0x128>
 8018c96:	ee18 0a10 	vmov	r0, s16
 8018c9a:	f7e7 facb 	bl	8000234 <strlen>
 8018c9e:	9b02      	ldr	r3, [sp, #8]
 8018ca0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018ca4:	1ac3      	subs	r3, r0, r3
 8018ca6:	fb0b 4303 	mla	r3, fp, r3, r4
 8018caa:	461a      	mov	r2, r3
 8018cac:	9305      	str	r3, [sp, #20]
 8018cae:	4606      	mov	r6, r0
 8018cb0:	f8d9 3000 	ldr.w	r3, [r9]
 8018cb4:	1c50      	adds	r0, r2, #1
 8018cb6:	4798      	blx	r3
 8018cb8:	9003      	str	r0, [sp, #12]
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	d04f      	beq.n	8018d5e <rcutils_repl_str+0x15a>
 8018cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018cc2:	683a      	ldr	r2, [r7, #0]
 8018cc4:	4641      	mov	r1, r8
 8018cc6:	f003 f8de 	bl	801be86 <memcpy>
 8018cca:	683d      	ldr	r5, [r7, #0]
 8018ccc:	9b03      	ldr	r3, [sp, #12]
 8018cce:	9701      	str	r7, [sp, #4]
 8018cd0:	46ba      	mov	sl, r7
 8018cd2:	441d      	add	r5, r3
 8018cd4:	9f02      	ldr	r7, [sp, #8]
 8018cd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8018cda:	2401      	movs	r4, #1
 8018cdc:	46d1      	mov	r9, sl
 8018cde:	ee18 aa10 	vmov	sl, s16
 8018ce2:	e00a      	b.n	8018cfa <rcutils_repl_str+0xf6>
 8018ce4:	f8d9 5000 	ldr.w	r5, [r9]
 8018ce8:	1aaa      	subs	r2, r5, r2
 8018cea:	1885      	adds	r5, r0, r2
 8018cec:	f003 f8cb 	bl	801be86 <memcpy>
 8018cf0:	45a3      	cmp	fp, r4
 8018cf2:	f104 0201 	add.w	r2, r4, #1
 8018cf6:	d935      	bls.n	8018d64 <rcutils_repl_str+0x160>
 8018cf8:	4614      	mov	r4, r2
 8018cfa:	4632      	mov	r2, r6
 8018cfc:	4651      	mov	r1, sl
 8018cfe:	4628      	mov	r0, r5
 8018d00:	f003 f8c1 	bl	801be86 <memcpy>
 8018d04:	f859 2b04 	ldr.w	r2, [r9], #4
 8018d08:	45a3      	cmp	fp, r4
 8018d0a:	443a      	add	r2, r7
 8018d0c:	eb05 0006 	add.w	r0, r5, r6
 8018d10:	eb08 0102 	add.w	r1, r8, r2
 8018d14:	d1e6      	bne.n	8018ce4 <rcutils_repl_str+0xe0>
 8018d16:	9b04      	ldr	r3, [sp, #16]
 8018d18:	1a9a      	subs	r2, r3, r2
 8018d1a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8018d1e:	f003 f8b2 	bl	801be86 <memcpy>
 8018d22:	9a03      	ldr	r2, [sp, #12]
 8018d24:	9905      	ldr	r1, [sp, #20]
 8018d26:	2300      	movs	r3, #0
 8018d28:	5453      	strb	r3, [r2, r1]
 8018d2a:	e00b      	b.n	8018d44 <rcutils_repl_str+0x140>
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	f8d9 3000 	ldr.w	r3, [r9]
 8018d32:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018d36:	3001      	adds	r0, #1
 8018d38:	4798      	blx	r3
 8018d3a:	9003      	str	r0, [sp, #12]
 8018d3c:	b110      	cbz	r0, 8018d44 <rcutils_repl_str+0x140>
 8018d3e:	9901      	ldr	r1, [sp, #4]
 8018d40:	f003 f899 	bl	801be76 <strcpy>
 8018d44:	4638      	mov	r0, r7
 8018d46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d4a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018d4e:	4798      	blx	r3
 8018d50:	9803      	ldr	r0, [sp, #12]
 8018d52:	b007      	add	sp, #28
 8018d54:	ecbd 8b02 	vpop	{d8}
 8018d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5c:	4647      	mov	r7, r8
 8018d5e:	2300      	movs	r3, #0
 8018d60:	9303      	str	r3, [sp, #12]
 8018d62:	e7ef      	b.n	8018d44 <rcutils_repl_str+0x140>
 8018d64:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8018d68:	e7db      	b.n	8018d22 <rcutils_repl_str+0x11e>
 8018d6a:	bf00      	nop

08018d6c <rcutils_snprintf>:
 8018d6c:	b40c      	push	{r2, r3}
 8018d6e:	b530      	push	{r4, r5, lr}
 8018d70:	b083      	sub	sp, #12
 8018d72:	ab06      	add	r3, sp, #24
 8018d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d78:	9301      	str	r3, [sp, #4]
 8018d7a:	b152      	cbz	r2, 8018d92 <rcutils_snprintf+0x26>
 8018d7c:	b138      	cbz	r0, 8018d8e <rcutils_snprintf+0x22>
 8018d7e:	b141      	cbz	r1, 8018d92 <rcutils_snprintf+0x26>
 8018d80:	f002 feec 	bl	801bb5c <vsniprintf>
 8018d84:	b003      	add	sp, #12
 8018d86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d8a:	b002      	add	sp, #8
 8018d8c:	4770      	bx	lr
 8018d8e:	2900      	cmp	r1, #0
 8018d90:	d0f6      	beq.n	8018d80 <rcutils_snprintf+0x14>
 8018d92:	f003 f843 	bl	801be1c <__errno>
 8018d96:	2316      	movs	r3, #22
 8018d98:	6003      	str	r3, [r0, #0]
 8018d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d9e:	e7f1      	b.n	8018d84 <rcutils_snprintf+0x18>

08018da0 <rcutils_vsnprintf>:
 8018da0:	b570      	push	{r4, r5, r6, lr}
 8018da2:	b13a      	cbz	r2, 8018db4 <rcutils_vsnprintf+0x14>
 8018da4:	b120      	cbz	r0, 8018db0 <rcutils_vsnprintf+0x10>
 8018da6:	b129      	cbz	r1, 8018db4 <rcutils_vsnprintf+0x14>
 8018da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dac:	f002 bed6 	b.w	801bb5c <vsniprintf>
 8018db0:	2900      	cmp	r1, #0
 8018db2:	d0f9      	beq.n	8018da8 <rcutils_vsnprintf+0x8>
 8018db4:	f003 f832 	bl	801be1c <__errno>
 8018db8:	2316      	movs	r3, #22
 8018dba:	6003      	str	r3, [r0, #0]
 8018dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018dc0:	bd70      	pop	{r4, r5, r6, pc}
 8018dc2:	bf00      	nop

08018dc4 <rcutils_strdup>:
 8018dc4:	b084      	sub	sp, #16
 8018dc6:	b570      	push	{r4, r5, r6, lr}
 8018dc8:	b082      	sub	sp, #8
 8018dca:	ac07      	add	r4, sp, #28
 8018dcc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018dd0:	4605      	mov	r5, r0
 8018dd2:	b1b0      	cbz	r0, 8018e02 <rcutils_strdup+0x3e>
 8018dd4:	f7e7 fa2e 	bl	8000234 <strlen>
 8018dd8:	1c42      	adds	r2, r0, #1
 8018dda:	9b07      	ldr	r3, [sp, #28]
 8018ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018dde:	9201      	str	r2, [sp, #4]
 8018de0:	4606      	mov	r6, r0
 8018de2:	4610      	mov	r0, r2
 8018de4:	4798      	blx	r3
 8018de6:	4604      	mov	r4, r0
 8018de8:	b128      	cbz	r0, 8018df6 <rcutils_strdup+0x32>
 8018dea:	9a01      	ldr	r2, [sp, #4]
 8018dec:	4629      	mov	r1, r5
 8018dee:	f003 f84a 	bl	801be86 <memcpy>
 8018df2:	2300      	movs	r3, #0
 8018df4:	55a3      	strb	r3, [r4, r6]
 8018df6:	4620      	mov	r0, r4
 8018df8:	b002      	add	sp, #8
 8018dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dfe:	b004      	add	sp, #16
 8018e00:	4770      	bx	lr
 8018e02:	4604      	mov	r4, r0
 8018e04:	e7f7      	b.n	8018df6 <rcutils_strdup+0x32>
 8018e06:	bf00      	nop

08018e08 <rcutils_strndup>:
 8018e08:	b082      	sub	sp, #8
 8018e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0c:	ac06      	add	r4, sp, #24
 8018e0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8018e12:	4605      	mov	r5, r0
 8018e14:	b188      	cbz	r0, 8018e3a <rcutils_strndup+0x32>
 8018e16:	1c4f      	adds	r7, r1, #1
 8018e18:	460e      	mov	r6, r1
 8018e1a:	4638      	mov	r0, r7
 8018e1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018e1e:	4790      	blx	r2
 8018e20:	4604      	mov	r4, r0
 8018e22:	b128      	cbz	r0, 8018e30 <rcutils_strndup+0x28>
 8018e24:	463a      	mov	r2, r7
 8018e26:	4629      	mov	r1, r5
 8018e28:	f003 f82d 	bl	801be86 <memcpy>
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	55a3      	strb	r3, [r4, r6]
 8018e30:	4620      	mov	r0, r4
 8018e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018e36:	b002      	add	sp, #8
 8018e38:	4770      	bx	lr
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	e7f8      	b.n	8018e30 <rcutils_strndup+0x28>
 8018e3e:	bf00      	nop

08018e40 <rcutils_get_zero_initialized_string_map>:
 8018e40:	4b01      	ldr	r3, [pc, #4]	@ (8018e48 <rcutils_get_zero_initialized_string_map+0x8>)
 8018e42:	2000      	movs	r0, #0
 8018e44:	6018      	str	r0, [r3, #0]
 8018e46:	4770      	bx	lr
 8018e48:	2000bd88 	.word	0x2000bd88

08018e4c <rcutils_string_map_reserve>:
 8018e4c:	2800      	cmp	r0, #0
 8018e4e:	d05f      	beq.n	8018f10 <rcutils_string_map_reserve+0xc4>
 8018e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e54:	460c      	mov	r4, r1
 8018e56:	6801      	ldr	r1, [r0, #0]
 8018e58:	b082      	sub	sp, #8
 8018e5a:	4605      	mov	r5, r0
 8018e5c:	b129      	cbz	r1, 8018e6a <rcutils_string_map_reserve+0x1e>
 8018e5e:	68cb      	ldr	r3, [r1, #12]
 8018e60:	42a3      	cmp	r3, r4
 8018e62:	d906      	bls.n	8018e72 <rcutils_string_map_reserve+0x26>
 8018e64:	461c      	mov	r4, r3
 8018e66:	2900      	cmp	r1, #0
 8018e68:	d1f9      	bne.n	8018e5e <rcutils_string_map_reserve+0x12>
 8018e6a:	201f      	movs	r0, #31
 8018e6c:	b002      	add	sp, #8
 8018e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e72:	688b      	ldr	r3, [r1, #8]
 8018e74:	42a3      	cmp	r3, r4
 8018e76:	d047      	beq.n	8018f08 <rcutils_string_map_reserve+0xbc>
 8018e78:	6a0e      	ldr	r6, [r1, #32]
 8018e7a:	2c00      	cmp	r4, #0
 8018e7c:	d034      	beq.n	8018ee8 <rcutils_string_map_reserve+0x9c>
 8018e7e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018e82:	d243      	bcs.n	8018f0c <rcutils_string_map_reserve+0xc0>
 8018e84:	00a7      	lsls	r7, r4, #2
 8018e86:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018e8a:	6808      	ldr	r0, [r1, #0]
 8018e8c:	4632      	mov	r2, r6
 8018e8e:	4639      	mov	r1, r7
 8018e90:	47c0      	blx	r8
 8018e92:	2800      	cmp	r0, #0
 8018e94:	d03a      	beq.n	8018f0c <rcutils_string_map_reserve+0xc0>
 8018e96:	682b      	ldr	r3, [r5, #0]
 8018e98:	4632      	mov	r2, r6
 8018e9a:	6018      	str	r0, [r3, #0]
 8018e9c:	4639      	mov	r1, r7
 8018e9e:	6858      	ldr	r0, [r3, #4]
 8018ea0:	47c0      	blx	r8
 8018ea2:	2800      	cmp	r0, #0
 8018ea4:	d032      	beq.n	8018f0c <rcutils_string_map_reserve+0xc0>
 8018ea6:	682d      	ldr	r5, [r5, #0]
 8018ea8:	68ab      	ldr	r3, [r5, #8]
 8018eaa:	6068      	str	r0, [r5, #4]
 8018eac:	42a3      	cmp	r3, r4
 8018eae:	d226      	bcs.n	8018efe <rcutils_string_map_reserve+0xb2>
 8018eb0:	682a      	ldr	r2, [r5, #0]
 8018eb2:	eb00 0c07 	add.w	ip, r0, r7
 8018eb6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8018eba:	45e6      	cmp	lr, ip
 8018ebc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8018ec0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018ec4:	d203      	bcs.n	8018ece <rcutils_string_map_reserve+0x82>
 8018ec6:	eb02 0c07 	add.w	ip, r2, r7
 8018eca:	4566      	cmp	r6, ip
 8018ecc:	d322      	bcc.n	8018f14 <rcutils_string_map_reserve+0xc8>
 8018ece:	1ae3      	subs	r3, r4, r3
 8018ed0:	009a      	lsls	r2, r3, #2
 8018ed2:	4670      	mov	r0, lr
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	9201      	str	r2, [sp, #4]
 8018ed8:	f002 ff0c 	bl	801bcf4 <memset>
 8018edc:	9a01      	ldr	r2, [sp, #4]
 8018ede:	2100      	movs	r1, #0
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	f002 ff07 	bl	801bcf4 <memset>
 8018ee6:	e00a      	b.n	8018efe <rcutils_string_map_reserve+0xb2>
 8018ee8:	694f      	ldr	r7, [r1, #20]
 8018eea:	6808      	ldr	r0, [r1, #0]
 8018eec:	4631      	mov	r1, r6
 8018eee:	47b8      	blx	r7
 8018ef0:	682b      	ldr	r3, [r5, #0]
 8018ef2:	4631      	mov	r1, r6
 8018ef4:	6858      	ldr	r0, [r3, #4]
 8018ef6:	601c      	str	r4, [r3, #0]
 8018ef8:	47b8      	blx	r7
 8018efa:	682d      	ldr	r5, [r5, #0]
 8018efc:	606c      	str	r4, [r5, #4]
 8018efe:	2000      	movs	r0, #0
 8018f00:	60ac      	str	r4, [r5, #8]
 8018f02:	b002      	add	sp, #8
 8018f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f08:	2000      	movs	r0, #0
 8018f0a:	e7af      	b.n	8018e6c <rcutils_string_map_reserve+0x20>
 8018f0c:	200a      	movs	r0, #10
 8018f0e:	e7ad      	b.n	8018e6c <rcutils_string_map_reserve+0x20>
 8018f10:	200b      	movs	r0, #11
 8018f12:	4770      	bx	lr
 8018f14:	1f0b      	subs	r3, r1, #4
 8018f16:	4418      	add	r0, r3
 8018f18:	4413      	add	r3, r2
 8018f1a:	3a04      	subs	r2, #4
 8018f1c:	4417      	add	r7, r2
 8018f1e:	2200      	movs	r2, #0
 8018f20:	f843 2f04 	str.w	r2, [r3, #4]!
 8018f24:	42bb      	cmp	r3, r7
 8018f26:	f840 2f04 	str.w	r2, [r0, #4]!
 8018f2a:	d1f9      	bne.n	8018f20 <rcutils_string_map_reserve+0xd4>
 8018f2c:	e7e7      	b.n	8018efe <rcutils_string_map_reserve+0xb2>
 8018f2e:	bf00      	nop

08018f30 <rcutils_string_map_init>:
 8018f30:	b082      	sub	sp, #8
 8018f32:	b570      	push	{r4, r5, r6, lr}
 8018f34:	ac04      	add	r4, sp, #16
 8018f36:	e884 000c 	stmia.w	r4, {r2, r3}
 8018f3a:	b380      	cbz	r0, 8018f9e <rcutils_string_map_init+0x6e>
 8018f3c:	6806      	ldr	r6, [r0, #0]
 8018f3e:	4604      	mov	r4, r0
 8018f40:	b12e      	cbz	r6, 8018f4e <rcutils_string_map_init+0x1e>
 8018f42:	251e      	movs	r5, #30
 8018f44:	4628      	mov	r0, r5
 8018f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f4a:	b002      	add	sp, #8
 8018f4c:	4770      	bx	lr
 8018f4e:	a804      	add	r0, sp, #16
 8018f50:	460d      	mov	r5, r1
 8018f52:	f7f6 ff4f 	bl	800fdf4 <rcutils_allocator_is_valid>
 8018f56:	b310      	cbz	r0, 8018f9e <rcutils_string_map_init+0x6e>
 8018f58:	9b04      	ldr	r3, [sp, #16]
 8018f5a:	9908      	ldr	r1, [sp, #32]
 8018f5c:	2024      	movs	r0, #36	@ 0x24
 8018f5e:	4798      	blx	r3
 8018f60:	6020      	str	r0, [r4, #0]
 8018f62:	b310      	cbz	r0, 8018faa <rcutils_string_map_init+0x7a>
 8018f64:	f10d 0e10 	add.w	lr, sp, #16
 8018f68:	e9c0 6600 	strd	r6, r6, [r0]
 8018f6c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018f70:	f100 0c10 	add.w	ip, r0, #16
 8018f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f7c:	f8de 3000 	ldr.w	r3, [lr]
 8018f80:	f8cc 3000 	str.w	r3, [ip]
 8018f84:	4629      	mov	r1, r5
 8018f86:	4620      	mov	r0, r4
 8018f88:	f7ff ff60 	bl	8018e4c <rcutils_string_map_reserve>
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	d0d8      	beq.n	8018f44 <rcutils_string_map_init+0x14>
 8018f92:	9b05      	ldr	r3, [sp, #20]
 8018f94:	9908      	ldr	r1, [sp, #32]
 8018f96:	6820      	ldr	r0, [r4, #0]
 8018f98:	4798      	blx	r3
 8018f9a:	6026      	str	r6, [r4, #0]
 8018f9c:	e7d2      	b.n	8018f44 <rcutils_string_map_init+0x14>
 8018f9e:	250b      	movs	r5, #11
 8018fa0:	4628      	mov	r0, r5
 8018fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fa6:	b002      	add	sp, #8
 8018fa8:	4770      	bx	lr
 8018faa:	250a      	movs	r5, #10
 8018fac:	e7ca      	b.n	8018f44 <rcutils_string_map_init+0x14>
 8018fae:	bf00      	nop

08018fb0 <rcutils_string_map_fini>:
 8018fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fb4:	b082      	sub	sp, #8
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	d03a      	beq.n	8019030 <rcutils_string_map_fini+0x80>
 8018fba:	6804      	ldr	r4, [r0, #0]
 8018fbc:	4606      	mov	r6, r0
 8018fbe:	2c00      	cmp	r4, #0
 8018fc0:	d032      	beq.n	8019028 <rcutils_string_map_fini+0x78>
 8018fc2:	68a3      	ldr	r3, [r4, #8]
 8018fc4:	b32b      	cbz	r3, 8019012 <rcutils_string_map_fini+0x62>
 8018fc6:	2500      	movs	r5, #0
 8018fc8:	6822      	ldr	r2, [r4, #0]
 8018fca:	462f      	mov	r7, r5
 8018fcc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018fd0:	b1e0      	cbz	r0, 801900c <rcutils_string_map_fini+0x5c>
 8018fd2:	6a21      	ldr	r1, [r4, #32]
 8018fd4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018fd8:	9101      	str	r1, [sp, #4]
 8018fda:	47c0      	blx	r8
 8018fdc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018fe0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018fe4:	9901      	ldr	r1, [sp, #4]
 8018fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018fea:	47c0      	blx	r8
 8018fec:	68e3      	ldr	r3, [r4, #12]
 8018fee:	6862      	ldr	r2, [r4, #4]
 8018ff0:	3b01      	subs	r3, #1
 8018ff2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018ff6:	60e3      	str	r3, [r4, #12]
 8018ff8:	6834      	ldr	r4, [r6, #0]
 8018ffa:	68a3      	ldr	r3, [r4, #8]
 8018ffc:	3501      	adds	r5, #1
 8018ffe:	429d      	cmp	r5, r3
 8019000:	d207      	bcs.n	8019012 <rcutils_string_map_fini+0x62>
 8019002:	6822      	ldr	r2, [r4, #0]
 8019004:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019008:	2800      	cmp	r0, #0
 801900a:	d1e2      	bne.n	8018fd2 <rcutils_string_map_fini+0x22>
 801900c:	3501      	adds	r5, #1
 801900e:	429d      	cmp	r5, r3
 8019010:	d3dc      	bcc.n	8018fcc <rcutils_string_map_fini+0x1c>
 8019012:	2100      	movs	r1, #0
 8019014:	4630      	mov	r0, r6
 8019016:	f7ff ff19 	bl	8018e4c <rcutils_string_map_reserve>
 801901a:	4604      	mov	r4, r0
 801901c:	b920      	cbnz	r0, 8019028 <rcutils_string_map_fini+0x78>
 801901e:	6830      	ldr	r0, [r6, #0]
 8019020:	6943      	ldr	r3, [r0, #20]
 8019022:	6a01      	ldr	r1, [r0, #32]
 8019024:	4798      	blx	r3
 8019026:	6034      	str	r4, [r6, #0]
 8019028:	4620      	mov	r0, r4
 801902a:	b002      	add	sp, #8
 801902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019030:	240b      	movs	r4, #11
 8019032:	4620      	mov	r0, r4
 8019034:	b002      	add	sp, #8
 8019036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801903a:	bf00      	nop

0801903c <rcutils_string_map_getn>:
 801903c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019040:	b300      	cbz	r0, 8019084 <rcutils_string_map_getn+0x48>
 8019042:	6807      	ldr	r7, [r0, #0]
 8019044:	b1ff      	cbz	r7, 8019086 <rcutils_string_map_getn+0x4a>
 8019046:	4688      	mov	r8, r1
 8019048:	b1e1      	cbz	r1, 8019084 <rcutils_string_map_getn+0x48>
 801904a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801904e:	683e      	ldr	r6, [r7, #0]
 8019050:	f1ba 0f00 	cmp.w	sl, #0
 8019054:	d016      	beq.n	8019084 <rcutils_string_map_getn+0x48>
 8019056:	4691      	mov	r9, r2
 8019058:	3e04      	subs	r6, #4
 801905a:	2400      	movs	r4, #0
 801905c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019060:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019064:	4628      	mov	r0, r5
 8019066:	3401      	adds	r4, #1
 8019068:	b155      	cbz	r5, 8019080 <rcutils_string_map_getn+0x44>
 801906a:	f7e7 f8e3 	bl	8000234 <strlen>
 801906e:	4548      	cmp	r0, r9
 8019070:	4602      	mov	r2, r0
 8019072:	4629      	mov	r1, r5
 8019074:	bf38      	it	cc
 8019076:	464a      	movcc	r2, r9
 8019078:	4640      	mov	r0, r8
 801907a:	f002 fe50 	bl	801bd1e <strncmp>
 801907e:	b128      	cbz	r0, 801908c <rcutils_string_map_getn+0x50>
 8019080:	45a2      	cmp	sl, r4
 8019082:	d1eb      	bne.n	801905c <rcutils_string_map_getn+0x20>
 8019084:	2700      	movs	r7, #0
 8019086:	4638      	mov	r0, r7
 8019088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	f853 700b 	ldr.w	r7, [r3, fp]
 8019092:	4638      	mov	r0, r7
 8019094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019098 <rmw_get_zero_initialized_context>:
 8019098:	b510      	push	{r4, lr}
 801909a:	4604      	mov	r4, r0
 801909c:	3010      	adds	r0, #16
 801909e:	f7f6 ff3b 	bl	800ff18 <rmw_get_zero_initialized_init_options>
 80190a2:	2300      	movs	r3, #0
 80190a4:	2000      	movs	r0, #0
 80190a6:	2100      	movs	r1, #0
 80190a8:	e9c4 0100 	strd	r0, r1, [r4]
 80190ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80190b0:	60a3      	str	r3, [r4, #8]
 80190b2:	4620      	mov	r0, r4
 80190b4:	bd10      	pop	{r4, pc}
 80190b6:	bf00      	nop

080190b8 <rmw_time_equal>:
 80190b8:	b4f0      	push	{r4, r5, r6, r7}
 80190ba:	b084      	sub	sp, #16
 80190bc:	ac04      	add	r4, sp, #16
 80190be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80190c2:	4603      	mov	r3, r0
 80190c4:	4924      	ldr	r1, [pc, #144]	@ (8019158 <rmw_time_equal+0xa0>)
 80190c6:	9e03      	ldr	r6, [sp, #12]
 80190c8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80190cc:	2202      	movs	r2, #2
 80190ce:	4299      	cmp	r1, r3
 80190d0:	41aa      	sbcs	r2, r5
 80190d2:	d330      	bcc.n	8019136 <rmw_time_equal+0x7e>
 80190d4:	4c21      	ldr	r4, [pc, #132]	@ (801915c <rmw_time_equal+0xa4>)
 80190d6:	fba3 3204 	umull	r3, r2, r3, r4
 80190da:	fb04 2205 	mla	r2, r4, r5, r2
 80190de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80190e2:	43dd      	mvns	r5, r3
 80190e4:	1a8c      	subs	r4, r1, r2
 80190e6:	4285      	cmp	r5, r0
 80190e8:	41b4      	sbcs	r4, r6
 80190ea:	d332      	bcc.n	8019152 <rmw_time_equal+0x9a>
 80190ec:	eb10 0c03 	adds.w	ip, r0, r3
 80190f0:	eb42 0106 	adc.w	r1, r2, r6
 80190f4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80190f8:	4817      	ldr	r0, [pc, #92]	@ (8019158 <rmw_time_equal+0xa0>)
 80190fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80190fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80190fe:	2202      	movs	r2, #2
 8019100:	4298      	cmp	r0, r3
 8019102:	41b2      	sbcs	r2, r6
 8019104:	d31c      	bcc.n	8019140 <rmw_time_equal+0x88>
 8019106:	4c15      	ldr	r4, [pc, #84]	@ (801915c <rmw_time_equal+0xa4>)
 8019108:	fba3 3204 	umull	r3, r2, r3, r4
 801910c:	fb04 2206 	mla	r2, r4, r6, r2
 8019110:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019114:	43de      	mvns	r6, r3
 8019116:	1a84      	subs	r4, r0, r2
 8019118:	42ae      	cmp	r6, r5
 801911a:	41bc      	sbcs	r4, r7
 801911c:	d315      	bcc.n	801914a <rmw_time_equal+0x92>
 801911e:	195b      	adds	r3, r3, r5
 8019120:	eb42 0207 	adc.w	r2, r2, r7
 8019124:	428a      	cmp	r2, r1
 8019126:	bf08      	it	eq
 8019128:	4563      	cmpeq	r3, ip
 801912a:	bf0c      	ite	eq
 801912c:	2001      	moveq	r0, #1
 801912e:	2000      	movne	r0, #0
 8019130:	b004      	add	sp, #16
 8019132:	bcf0      	pop	{r4, r5, r6, r7}
 8019134:	4770      	bx	lr
 8019136:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801913a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801913e:	e7d9      	b.n	80190f4 <rmw_time_equal+0x3c>
 8019140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019144:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8019148:	e7ec      	b.n	8019124 <rmw_time_equal+0x6c>
 801914a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801914e:	4602      	mov	r2, r0
 8019150:	e7e8      	b.n	8019124 <rmw_time_equal+0x6c>
 8019152:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8019156:	e7cd      	b.n	80190f4 <rmw_time_equal+0x3c>
 8019158:	25c17d04 	.word	0x25c17d04
 801915c:	3b9aca00 	.word	0x3b9aca00

08019160 <rmw_time_total_nsec>:
 8019160:	b470      	push	{r4, r5, r6}
 8019162:	b085      	sub	sp, #20
 8019164:	ac04      	add	r4, sp, #16
 8019166:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801916a:	4603      	mov	r3, r0
 801916c:	4912      	ldr	r1, [pc, #72]	@ (80191b8 <rmw_time_total_nsec+0x58>)
 801916e:	9e03      	ldr	r6, [sp, #12]
 8019170:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8019174:	2202      	movs	r2, #2
 8019176:	4299      	cmp	r1, r3
 8019178:	41aa      	sbcs	r2, r5
 801917a:	d311      	bcc.n	80191a0 <rmw_time_total_nsec+0x40>
 801917c:	4c0f      	ldr	r4, [pc, #60]	@ (80191bc <rmw_time_total_nsec+0x5c>)
 801917e:	fba3 3204 	umull	r3, r2, r3, r4
 8019182:	fb04 2205 	mla	r2, r4, r5, r2
 8019186:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801918a:	43dd      	mvns	r5, r3
 801918c:	1a8c      	subs	r4, r1, r2
 801918e:	4285      	cmp	r5, r0
 8019190:	41b4      	sbcs	r4, r6
 8019192:	d30c      	bcc.n	80191ae <rmw_time_total_nsec+0x4e>
 8019194:	1818      	adds	r0, r3, r0
 8019196:	eb42 0106 	adc.w	r1, r2, r6
 801919a:	b005      	add	sp, #20
 801919c:	bc70      	pop	{r4, r5, r6}
 801919e:	4770      	bx	lr
 80191a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80191a8:	b005      	add	sp, #20
 80191aa:	bc70      	pop	{r4, r5, r6}
 80191ac:	4770      	bx	lr
 80191ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191b2:	b005      	add	sp, #20
 80191b4:	bc70      	pop	{r4, r5, r6}
 80191b6:	4770      	bx	lr
 80191b8:	25c17d04 	.word	0x25c17d04
 80191bc:	3b9aca00 	.word	0x3b9aca00

080191c0 <rmw_get_zero_initialized_message_info>:
 80191c0:	b510      	push	{r4, lr}
 80191c2:	2240      	movs	r2, #64	@ 0x40
 80191c4:	4604      	mov	r4, r0
 80191c6:	2100      	movs	r1, #0
 80191c8:	f002 fd94 	bl	801bcf4 <memset>
 80191cc:	4620      	mov	r0, r4
 80191ce:	bd10      	pop	{r4, pc}

080191d0 <rmw_validate_full_topic_name>:
 80191d0:	2800      	cmp	r0, #0
 80191d2:	d057      	beq.n	8019284 <rmw_validate_full_topic_name+0xb4>
 80191d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d8:	460d      	mov	r5, r1
 80191da:	2900      	cmp	r1, #0
 80191dc:	d054      	beq.n	8019288 <rmw_validate_full_topic_name+0xb8>
 80191de:	4616      	mov	r6, r2
 80191e0:	4604      	mov	r4, r0
 80191e2:	f7e7 f827 	bl	8000234 <strlen>
 80191e6:	b148      	cbz	r0, 80191fc <rmw_validate_full_topic_name+0x2c>
 80191e8:	7823      	ldrb	r3, [r4, #0]
 80191ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80191ec:	d00d      	beq.n	801920a <rmw_validate_full_topic_name+0x3a>
 80191ee:	2302      	movs	r3, #2
 80191f0:	602b      	str	r3, [r5, #0]
 80191f2:	b13e      	cbz	r6, 8019204 <rmw_validate_full_topic_name+0x34>
 80191f4:	2000      	movs	r0, #0
 80191f6:	6030      	str	r0, [r6, #0]
 80191f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191fc:	2301      	movs	r3, #1
 80191fe:	602b      	str	r3, [r5, #0]
 8019200:	2e00      	cmp	r6, #0
 8019202:	d1f7      	bne.n	80191f4 <rmw_validate_full_topic_name+0x24>
 8019204:	2000      	movs	r0, #0
 8019206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801920a:	1e43      	subs	r3, r0, #1
 801920c:	5ce2      	ldrb	r2, [r4, r3]
 801920e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019210:	d03c      	beq.n	801928c <rmw_validate_full_topic_name+0xbc>
 8019212:	1e63      	subs	r3, r4, #1
 8019214:	eb03 0800 	add.w	r8, r3, r0
 8019218:	f1c4 0e01 	rsb	lr, r4, #1
 801921c:	eb0e 0703 	add.w	r7, lr, r3
 8019220:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8019224:	f021 0220 	bic.w	r2, r1, #32
 8019228:	3a41      	subs	r2, #65	@ 0x41
 801922a:	2a19      	cmp	r2, #25
 801922c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8019230:	d90b      	bls.n	801924a <rmw_validate_full_topic_name+0x7a>
 8019232:	295f      	cmp	r1, #95	@ 0x5f
 8019234:	d009      	beq.n	801924a <rmw_validate_full_topic_name+0x7a>
 8019236:	f1bc 0f0a 	cmp.w	ip, #10
 801923a:	d906      	bls.n	801924a <rmw_validate_full_topic_name+0x7a>
 801923c:	2304      	movs	r3, #4
 801923e:	602b      	str	r3, [r5, #0]
 8019240:	2e00      	cmp	r6, #0
 8019242:	d0df      	beq.n	8019204 <rmw_validate_full_topic_name+0x34>
 8019244:	6037      	str	r7, [r6, #0]
 8019246:	2000      	movs	r0, #0
 8019248:	e7d6      	b.n	80191f8 <rmw_validate_full_topic_name+0x28>
 801924a:	4543      	cmp	r3, r8
 801924c:	d1e6      	bne.n	801921c <rmw_validate_full_topic_name+0x4c>
 801924e:	4f1a      	ldr	r7, [pc, #104]	@ (80192b8 <rmw_validate_full_topic_name+0xe8>)
 8019250:	2301      	movs	r3, #1
 8019252:	e004      	b.n	801925e <rmw_validate_full_topic_name+0x8e>
 8019254:	4298      	cmp	r0, r3
 8019256:	f104 0401 	add.w	r4, r4, #1
 801925a:	d91c      	bls.n	8019296 <rmw_validate_full_topic_name+0xc6>
 801925c:	4613      	mov	r3, r2
 801925e:	4298      	cmp	r0, r3
 8019260:	f103 0201 	add.w	r2, r3, #1
 8019264:	d0f6      	beq.n	8019254 <rmw_validate_full_topic_name+0x84>
 8019266:	7821      	ldrb	r1, [r4, #0]
 8019268:	292f      	cmp	r1, #47	@ 0x2f
 801926a:	d1f3      	bne.n	8019254 <rmw_validate_full_topic_name+0x84>
 801926c:	7861      	ldrb	r1, [r4, #1]
 801926e:	292f      	cmp	r1, #47	@ 0x2f
 8019270:	d01c      	beq.n	80192ac <rmw_validate_full_topic_name+0xdc>
 8019272:	5dc9      	ldrb	r1, [r1, r7]
 8019274:	0749      	lsls	r1, r1, #29
 8019276:	d5ed      	bpl.n	8019254 <rmw_validate_full_topic_name+0x84>
 8019278:	2206      	movs	r2, #6
 801927a:	602a      	str	r2, [r5, #0]
 801927c:	2e00      	cmp	r6, #0
 801927e:	d0c1      	beq.n	8019204 <rmw_validate_full_topic_name+0x34>
 8019280:	6033      	str	r3, [r6, #0]
 8019282:	e7bf      	b.n	8019204 <rmw_validate_full_topic_name+0x34>
 8019284:	200b      	movs	r0, #11
 8019286:	4770      	bx	lr
 8019288:	200b      	movs	r0, #11
 801928a:	e7b5      	b.n	80191f8 <rmw_validate_full_topic_name+0x28>
 801928c:	2203      	movs	r2, #3
 801928e:	602a      	str	r2, [r5, #0]
 8019290:	2e00      	cmp	r6, #0
 8019292:	d1f5      	bne.n	8019280 <rmw_validate_full_topic_name+0xb0>
 8019294:	e7b6      	b.n	8019204 <rmw_validate_full_topic_name+0x34>
 8019296:	28f7      	cmp	r0, #247	@ 0xf7
 8019298:	d802      	bhi.n	80192a0 <rmw_validate_full_topic_name+0xd0>
 801929a:	2000      	movs	r0, #0
 801929c:	6028      	str	r0, [r5, #0]
 801929e:	e7ab      	b.n	80191f8 <rmw_validate_full_topic_name+0x28>
 80192a0:	2307      	movs	r3, #7
 80192a2:	602b      	str	r3, [r5, #0]
 80192a4:	2e00      	cmp	r6, #0
 80192a6:	d0ad      	beq.n	8019204 <rmw_validate_full_topic_name+0x34>
 80192a8:	23f6      	movs	r3, #246	@ 0xf6
 80192aa:	e7e9      	b.n	8019280 <rmw_validate_full_topic_name+0xb0>
 80192ac:	2205      	movs	r2, #5
 80192ae:	602a      	str	r2, [r5, #0]
 80192b0:	2e00      	cmp	r6, #0
 80192b2:	d1e5      	bne.n	8019280 <rmw_validate_full_topic_name+0xb0>
 80192b4:	e7a6      	b.n	8019204 <rmw_validate_full_topic_name+0x34>
 80192b6:	bf00      	nop
 80192b8:	0801eab2 	.word	0x0801eab2

080192bc <rmw_validate_namespace_with_size>:
 80192bc:	b340      	cbz	r0, 8019310 <rmw_validate_namespace_with_size+0x54>
 80192be:	b570      	push	{r4, r5, r6, lr}
 80192c0:	4614      	mov	r4, r2
 80192c2:	b0c2      	sub	sp, #264	@ 0x108
 80192c4:	b332      	cbz	r2, 8019314 <rmw_validate_namespace_with_size+0x58>
 80192c6:	2901      	cmp	r1, #1
 80192c8:	460d      	mov	r5, r1
 80192ca:	461e      	mov	r6, r3
 80192cc:	d102      	bne.n	80192d4 <rmw_validate_namespace_with_size+0x18>
 80192ce:	7803      	ldrb	r3, [r0, #0]
 80192d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80192d2:	d012      	beq.n	80192fa <rmw_validate_namespace_with_size+0x3e>
 80192d4:	aa01      	add	r2, sp, #4
 80192d6:	4669      	mov	r1, sp
 80192d8:	f7ff ff7a 	bl	80191d0 <rmw_validate_full_topic_name>
 80192dc:	b978      	cbnz	r0, 80192fe <rmw_validate_namespace_with_size+0x42>
 80192de:	9b00      	ldr	r3, [sp, #0]
 80192e0:	b14b      	cbz	r3, 80192f6 <rmw_validate_namespace_with_size+0x3a>
 80192e2:	2b07      	cmp	r3, #7
 80192e4:	d007      	beq.n	80192f6 <rmw_validate_namespace_with_size+0x3a>
 80192e6:	1e5a      	subs	r2, r3, #1
 80192e8:	2a05      	cmp	r2, #5
 80192ea:	d82b      	bhi.n	8019344 <rmw_validate_namespace_with_size+0x88>
 80192ec:	e8df f002 	tbb	[pc, r2]
 80192f0:	1e212427 	.word	0x1e212427
 80192f4:	141b      	.short	0x141b
 80192f6:	2df5      	cmp	r5, #245	@ 0xf5
 80192f8:	d803      	bhi.n	8019302 <rmw_validate_namespace_with_size+0x46>
 80192fa:	2000      	movs	r0, #0
 80192fc:	6020      	str	r0, [r4, #0]
 80192fe:	b042      	add	sp, #264	@ 0x108
 8019300:	bd70      	pop	{r4, r5, r6, pc}
 8019302:	2307      	movs	r3, #7
 8019304:	6023      	str	r3, [r4, #0]
 8019306:	2e00      	cmp	r6, #0
 8019308:	d0f9      	beq.n	80192fe <rmw_validate_namespace_with_size+0x42>
 801930a:	23f4      	movs	r3, #244	@ 0xf4
 801930c:	6033      	str	r3, [r6, #0]
 801930e:	e7f6      	b.n	80192fe <rmw_validate_namespace_with_size+0x42>
 8019310:	200b      	movs	r0, #11
 8019312:	4770      	bx	lr
 8019314:	200b      	movs	r0, #11
 8019316:	e7f2      	b.n	80192fe <rmw_validate_namespace_with_size+0x42>
 8019318:	2306      	movs	r3, #6
 801931a:	6023      	str	r3, [r4, #0]
 801931c:	2e00      	cmp	r6, #0
 801931e:	d0ee      	beq.n	80192fe <rmw_validate_namespace_with_size+0x42>
 8019320:	9b01      	ldr	r3, [sp, #4]
 8019322:	6033      	str	r3, [r6, #0]
 8019324:	e7eb      	b.n	80192fe <rmw_validate_namespace_with_size+0x42>
 8019326:	2305      	movs	r3, #5
 8019328:	6023      	str	r3, [r4, #0]
 801932a:	e7f7      	b.n	801931c <rmw_validate_namespace_with_size+0x60>
 801932c:	2304      	movs	r3, #4
 801932e:	6023      	str	r3, [r4, #0]
 8019330:	e7f4      	b.n	801931c <rmw_validate_namespace_with_size+0x60>
 8019332:	2303      	movs	r3, #3
 8019334:	6023      	str	r3, [r4, #0]
 8019336:	e7f1      	b.n	801931c <rmw_validate_namespace_with_size+0x60>
 8019338:	2302      	movs	r3, #2
 801933a:	6023      	str	r3, [r4, #0]
 801933c:	e7ee      	b.n	801931c <rmw_validate_namespace_with_size+0x60>
 801933e:	2301      	movs	r3, #1
 8019340:	6023      	str	r3, [r4, #0]
 8019342:	e7eb      	b.n	801931c <rmw_validate_namespace_with_size+0x60>
 8019344:	4a03      	ldr	r2, [pc, #12]	@ (8019354 <rmw_validate_namespace_with_size+0x98>)
 8019346:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801934a:	a802      	add	r0, sp, #8
 801934c:	f7ff fd0e 	bl	8018d6c <rcutils_snprintf>
 8019350:	2001      	movs	r0, #1
 8019352:	e7d4      	b.n	80192fe <rmw_validate_namespace_with_size+0x42>
 8019354:	0801e5e0 	.word	0x0801e5e0

08019358 <rmw_validate_namespace>:
 8019358:	b168      	cbz	r0, 8019376 <rmw_validate_namespace+0x1e>
 801935a:	b570      	push	{r4, r5, r6, lr}
 801935c:	460d      	mov	r5, r1
 801935e:	4616      	mov	r6, r2
 8019360:	4604      	mov	r4, r0
 8019362:	f7e6 ff67 	bl	8000234 <strlen>
 8019366:	4633      	mov	r3, r6
 8019368:	4601      	mov	r1, r0
 801936a:	462a      	mov	r2, r5
 801936c:	4620      	mov	r0, r4
 801936e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019372:	f7ff bfa3 	b.w	80192bc <rmw_validate_namespace_with_size>
 8019376:	200b      	movs	r0, #11
 8019378:	4770      	bx	lr
 801937a:	bf00      	nop

0801937c <rmw_namespace_validation_result_string>:
 801937c:	2807      	cmp	r0, #7
 801937e:	bf9a      	itte	ls
 8019380:	4b02      	ldrls	r3, [pc, #8]	@ (801938c <rmw_namespace_validation_result_string+0x10>)
 8019382:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019386:	4802      	ldrhi	r0, [pc, #8]	@ (8019390 <rmw_namespace_validation_result_string+0x14>)
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop
 801938c:	0801e7d8 	.word	0x0801e7d8
 8019390:	0801e630 	.word	0x0801e630

08019394 <rmw_validate_node_name>:
 8019394:	2800      	cmp	r0, #0
 8019396:	d03b      	beq.n	8019410 <rmw_validate_node_name+0x7c>
 8019398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801939c:	460d      	mov	r5, r1
 801939e:	2900      	cmp	r1, #0
 80193a0:	d038      	beq.n	8019414 <rmw_validate_node_name+0x80>
 80193a2:	4616      	mov	r6, r2
 80193a4:	4604      	mov	r4, r0
 80193a6:	f7e6 ff45 	bl	8000234 <strlen>
 80193aa:	b1e0      	cbz	r0, 80193e6 <rmw_validate_node_name+0x52>
 80193ac:	1e63      	subs	r3, r4, #1
 80193ae:	eb03 0800 	add.w	r8, r3, r0
 80193b2:	f1c4 0101 	rsb	r1, r4, #1
 80193b6:	18cf      	adds	r7, r1, r3
 80193b8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80193bc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80193c0:	f02e 0c20 	bic.w	ip, lr, #32
 80193c4:	2a09      	cmp	r2, #9
 80193c6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80193ca:	d914      	bls.n	80193f6 <rmw_validate_node_name+0x62>
 80193cc:	f1bc 0f19 	cmp.w	ip, #25
 80193d0:	d911      	bls.n	80193f6 <rmw_validate_node_name+0x62>
 80193d2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80193d6:	d00e      	beq.n	80193f6 <rmw_validate_node_name+0x62>
 80193d8:	2302      	movs	r3, #2
 80193da:	602b      	str	r3, [r5, #0]
 80193dc:	b106      	cbz	r6, 80193e0 <rmw_validate_node_name+0x4c>
 80193de:	6037      	str	r7, [r6, #0]
 80193e0:	2000      	movs	r0, #0
 80193e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e6:	2301      	movs	r3, #1
 80193e8:	602b      	str	r3, [r5, #0]
 80193ea:	2e00      	cmp	r6, #0
 80193ec:	d0f8      	beq.n	80193e0 <rmw_validate_node_name+0x4c>
 80193ee:	2000      	movs	r0, #0
 80193f0:	6030      	str	r0, [r6, #0]
 80193f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193f6:	4543      	cmp	r3, r8
 80193f8:	d1dd      	bne.n	80193b6 <rmw_validate_node_name+0x22>
 80193fa:	7822      	ldrb	r2, [r4, #0]
 80193fc:	4b0d      	ldr	r3, [pc, #52]	@ (8019434 <rmw_validate_node_name+0xa0>)
 80193fe:	5cd3      	ldrb	r3, [r2, r3]
 8019400:	f013 0304 	ands.w	r3, r3, #4
 8019404:	d110      	bne.n	8019428 <rmw_validate_node_name+0x94>
 8019406:	28ff      	cmp	r0, #255	@ 0xff
 8019408:	d806      	bhi.n	8019418 <rmw_validate_node_name+0x84>
 801940a:	602b      	str	r3, [r5, #0]
 801940c:	4618      	mov	r0, r3
 801940e:	e7e8      	b.n	80193e2 <rmw_validate_node_name+0x4e>
 8019410:	200b      	movs	r0, #11
 8019412:	4770      	bx	lr
 8019414:	200b      	movs	r0, #11
 8019416:	e7e4      	b.n	80193e2 <rmw_validate_node_name+0x4e>
 8019418:	2204      	movs	r2, #4
 801941a:	602a      	str	r2, [r5, #0]
 801941c:	2e00      	cmp	r6, #0
 801941e:	d0df      	beq.n	80193e0 <rmw_validate_node_name+0x4c>
 8019420:	22fe      	movs	r2, #254	@ 0xfe
 8019422:	6032      	str	r2, [r6, #0]
 8019424:	4618      	mov	r0, r3
 8019426:	e7dc      	b.n	80193e2 <rmw_validate_node_name+0x4e>
 8019428:	2303      	movs	r3, #3
 801942a:	602b      	str	r3, [r5, #0]
 801942c:	2e00      	cmp	r6, #0
 801942e:	d1de      	bne.n	80193ee <rmw_validate_node_name+0x5a>
 8019430:	e7d6      	b.n	80193e0 <rmw_validate_node_name+0x4c>
 8019432:	bf00      	nop
 8019434:	0801eab2 	.word	0x0801eab2

08019438 <rmw_node_name_validation_result_string>:
 8019438:	2804      	cmp	r0, #4
 801943a:	bf9a      	itte	ls
 801943c:	4b02      	ldrls	r3, [pc, #8]	@ (8019448 <rmw_node_name_validation_result_string+0x10>)
 801943e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8019442:	4802      	ldrhi	r0, [pc, #8]	@ (801944c <rmw_node_name_validation_result_string+0x14>)
 8019444:	4770      	bx	lr
 8019446:	bf00      	nop
 8019448:	0801e8e4 	.word	0x0801e8e4
 801944c:	0801e7f8 	.word	0x0801e7f8

08019450 <on_status>:
 8019450:	b082      	sub	sp, #8
 8019452:	b002      	add	sp, #8
 8019454:	4770      	bx	lr
 8019456:	bf00      	nop

08019458 <on_topic>:
 8019458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801945c:	4a22      	ldr	r2, [pc, #136]	@ (80194e8 <on_topic+0x90>)
 801945e:	b094      	sub	sp, #80	@ 0x50
 8019460:	6812      	ldr	r2, [r2, #0]
 8019462:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019464:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019468:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801946c:	b3c2      	cbz	r2, 80194e0 <on_topic+0x88>
 801946e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019472:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019476:	e001      	b.n	801947c <on_topic+0x24>
 8019478:	6852      	ldr	r2, [r2, #4]
 801947a:	b38a      	cbz	r2, 80194e0 <on_topic+0x88>
 801947c:	6894      	ldr	r4, [r2, #8]
 801947e:	8aa3      	ldrh	r3, [r4, #20]
 8019480:	428b      	cmp	r3, r1
 8019482:	d1f9      	bne.n	8019478 <on_topic+0x20>
 8019484:	7da3      	ldrb	r3, [r4, #22]
 8019486:	4283      	cmp	r3, r0
 8019488:	d1f6      	bne.n	8019478 <on_topic+0x20>
 801948a:	2248      	movs	r2, #72	@ 0x48
 801948c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019490:	4668      	mov	r0, sp
 8019492:	f002 fcf8 	bl	801be86 <memcpy>
 8019496:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801949a:	cb0c      	ldmia	r3, {r2, r3}
 801949c:	4620      	mov	r0, r4
 801949e:	f7f7 fe3f 	bl	8011120 <rmw_uxrce_get_static_input_buffer_for_entity>
 80194a2:	4607      	mov	r7, r0
 80194a4:	b1e0      	cbz	r0, 80194e0 <on_topic+0x88>
 80194a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80194aa:	4632      	mov	r2, r6
 80194ac:	4628      	mov	r0, r5
 80194ae:	f108 0110 	add.w	r1, r8, #16
 80194b2:	f7f8 fe73 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80194b6:	b930      	cbnz	r0, 80194c6 <on_topic+0x6e>
 80194b8:	480c      	ldr	r0, [pc, #48]	@ (80194ec <on_topic+0x94>)
 80194ba:	4639      	mov	r1, r7
 80194bc:	b014      	add	sp, #80	@ 0x50
 80194be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194c2:	f000 b8bd 	b.w	8019640 <put_memory>
 80194c6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80194ca:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80194ce:	f7f7 fc25 	bl	8010d1c <rmw_uros_epoch_nanos>
 80194d2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80194d6:	2305      	movs	r3, #5
 80194d8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80194dc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80194e0:	b014      	add	sp, #80	@ 0x50
 80194e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e6:	bf00      	nop
 80194e8:	2000bccc 	.word	0x2000bccc
 80194ec:	2000bcbc 	.word	0x2000bcbc

080194f0 <on_request>:
 80194f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194f4:	4823      	ldr	r0, [pc, #140]	@ (8019584 <on_request+0x94>)
 80194f6:	b094      	sub	sp, #80	@ 0x50
 80194f8:	6800      	ldr	r0, [r0, #0]
 80194fa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80194fc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019500:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019502:	2800      	cmp	r0, #0
 8019504:	d03b      	beq.n	801957e <on_request+0x8e>
 8019506:	461d      	mov	r5, r3
 8019508:	e001      	b.n	801950e <on_request+0x1e>
 801950a:	6840      	ldr	r0, [r0, #4]
 801950c:	b3b8      	cbz	r0, 801957e <on_request+0x8e>
 801950e:	6884      	ldr	r4, [r0, #8]
 8019510:	8b21      	ldrh	r1, [r4, #24]
 8019512:	4291      	cmp	r1, r2
 8019514:	d1f9      	bne.n	801950a <on_request+0x1a>
 8019516:	2248      	movs	r2, #72	@ 0x48
 8019518:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801951c:	4668      	mov	r0, sp
 801951e:	f002 fcb2 	bl	801be86 <memcpy>
 8019522:	f104 0320 	add.w	r3, r4, #32
 8019526:	cb0c      	ldmia	r3, {r2, r3}
 8019528:	4620      	mov	r0, r4
 801952a:	f7f7 fdf9 	bl	8011120 <rmw_uxrce_get_static_input_buffer_for_entity>
 801952e:	4680      	mov	r8, r0
 8019530:	b328      	cbz	r0, 801957e <on_request+0x8e>
 8019532:	4638      	mov	r0, r7
 8019534:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019538:	4632      	mov	r2, r6
 801953a:	f107 0110 	add.w	r1, r7, #16
 801953e:	f7f8 fe2d 	bl	801219c <ucdr_deserialize_array_uint8_t>
 8019542:	b930      	cbnz	r0, 8019552 <on_request+0x62>
 8019544:	4810      	ldr	r0, [pc, #64]	@ (8019588 <on_request+0x98>)
 8019546:	4641      	mov	r1, r8
 8019548:	b014      	add	sp, #80	@ 0x50
 801954a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801954e:	f000 b877 	b.w	8019640 <put_memory>
 8019552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019554:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019558:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801955c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019564:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019568:	e88c 0003 	stmia.w	ip, {r0, r1}
 801956c:	f7f7 fbd6 	bl	8010d1c <rmw_uros_epoch_nanos>
 8019570:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019574:	2303      	movs	r3, #3
 8019576:	e942 0102 	strd	r0, r1, [r2, #-8]
 801957a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801957e:	b014      	add	sp, #80	@ 0x50
 8019580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019584:	2000bc9c 	.word	0x2000bc9c
 8019588:	2000bcbc 	.word	0x2000bcbc

0801958c <on_reply>:
 801958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019590:	4821      	ldr	r0, [pc, #132]	@ (8019618 <on_reply+0x8c>)
 8019592:	b094      	sub	sp, #80	@ 0x50
 8019594:	6800      	ldr	r0, [r0, #0]
 8019596:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019598:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801959c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801959e:	b3b8      	cbz	r0, 8019610 <on_reply+0x84>
 80195a0:	461d      	mov	r5, r3
 80195a2:	e001      	b.n	80195a8 <on_reply+0x1c>
 80195a4:	6840      	ldr	r0, [r0, #4]
 80195a6:	b398      	cbz	r0, 8019610 <on_reply+0x84>
 80195a8:	6884      	ldr	r4, [r0, #8]
 80195aa:	8b21      	ldrh	r1, [r4, #24]
 80195ac:	4291      	cmp	r1, r2
 80195ae:	d1f9      	bne.n	80195a4 <on_reply+0x18>
 80195b0:	2248      	movs	r2, #72	@ 0x48
 80195b2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80195b6:	4668      	mov	r0, sp
 80195b8:	f002 fc65 	bl	801be86 <memcpy>
 80195bc:	f104 0320 	add.w	r3, r4, #32
 80195c0:	cb0c      	ldmia	r3, {r2, r3}
 80195c2:	4620      	mov	r0, r4
 80195c4:	f7f7 fdac 	bl	8011120 <rmw_uxrce_get_static_input_buffer_for_entity>
 80195c8:	4680      	mov	r8, r0
 80195ca:	b308      	cbz	r0, 8019610 <on_reply+0x84>
 80195cc:	4638      	mov	r0, r7
 80195ce:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80195d2:	4632      	mov	r2, r6
 80195d4:	f107 0110 	add.w	r1, r7, #16
 80195d8:	f7f8 fde0 	bl	801219c <ucdr_deserialize_array_uint8_t>
 80195dc:	b930      	cbnz	r0, 80195ec <on_reply+0x60>
 80195de:	480f      	ldr	r0, [pc, #60]	@ (801961c <on_reply+0x90>)
 80195e0:	4641      	mov	r1, r8
 80195e2:	b014      	add	sp, #80	@ 0x50
 80195e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195e8:	f000 b82a 	b.w	8019640 <put_memory>
 80195ec:	2200      	movs	r2, #0
 80195ee:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80195f2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80195f6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80195fa:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80195fe:	f7f7 fb8d 	bl	8010d1c <rmw_uros_epoch_nanos>
 8019602:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019606:	2304      	movs	r3, #4
 8019608:	e942 0102 	strd	r0, r1, [r2, #-8]
 801960c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019610:	b014      	add	sp, #80	@ 0x50
 8019612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019616:	bf00      	nop
 8019618:	2000708c 	.word	0x2000708c
 801961c:	2000bcbc 	.word	0x2000bcbc

08019620 <get_memory>:
 8019620:	4603      	mov	r3, r0
 8019622:	6840      	ldr	r0, [r0, #4]
 8019624:	b158      	cbz	r0, 801963e <get_memory+0x1e>
 8019626:	6842      	ldr	r2, [r0, #4]
 8019628:	605a      	str	r2, [r3, #4]
 801962a:	b10a      	cbz	r2, 8019630 <get_memory+0x10>
 801962c:	2100      	movs	r1, #0
 801962e:	6011      	str	r1, [r2, #0]
 8019630:	681a      	ldr	r2, [r3, #0]
 8019632:	6042      	str	r2, [r0, #4]
 8019634:	b102      	cbz	r2, 8019638 <get_memory+0x18>
 8019636:	6010      	str	r0, [r2, #0]
 8019638:	2200      	movs	r2, #0
 801963a:	6002      	str	r2, [r0, #0]
 801963c:	6018      	str	r0, [r3, #0]
 801963e:	4770      	bx	lr

08019640 <put_memory>:
 8019640:	680b      	ldr	r3, [r1, #0]
 8019642:	b10b      	cbz	r3, 8019648 <put_memory+0x8>
 8019644:	684a      	ldr	r2, [r1, #4]
 8019646:	605a      	str	r2, [r3, #4]
 8019648:	684a      	ldr	r2, [r1, #4]
 801964a:	b102      	cbz	r2, 801964e <put_memory+0xe>
 801964c:	6013      	str	r3, [r2, #0]
 801964e:	6803      	ldr	r3, [r0, #0]
 8019650:	428b      	cmp	r3, r1
 8019652:	6843      	ldr	r3, [r0, #4]
 8019654:	bf08      	it	eq
 8019656:	6002      	streq	r2, [r0, #0]
 8019658:	604b      	str	r3, [r1, #4]
 801965a:	b103      	cbz	r3, 801965e <put_memory+0x1e>
 801965c:	6019      	str	r1, [r3, #0]
 801965e:	2300      	movs	r3, #0
 8019660:	600b      	str	r3, [r1, #0]
 8019662:	6041      	str	r1, [r0, #4]
 8019664:	4770      	bx	lr
 8019666:	bf00      	nop

08019668 <rmw_destroy_client>:
 8019668:	b570      	push	{r4, r5, r6, lr}
 801966a:	b128      	cbz	r0, 8019678 <rmw_destroy_client+0x10>
 801966c:	4604      	mov	r4, r0
 801966e:	6800      	ldr	r0, [r0, #0]
 8019670:	460d      	mov	r5, r1
 8019672:	f7f7 ff65 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 8019676:	b910      	cbnz	r0, 801967e <rmw_destroy_client+0x16>
 8019678:	2401      	movs	r4, #1
 801967a:	4620      	mov	r0, r4
 801967c:	bd70      	pop	{r4, r5, r6, pc}
 801967e:	6863      	ldr	r3, [r4, #4]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d0f9      	beq.n	8019678 <rmw_destroy_client+0x10>
 8019684:	2d00      	cmp	r5, #0
 8019686:	d0f7      	beq.n	8019678 <rmw_destroy_client+0x10>
 8019688:	6828      	ldr	r0, [r5, #0]
 801968a:	f7f7 ff59 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 801968e:	2800      	cmp	r0, #0
 8019690:	d0f2      	beq.n	8019678 <rmw_destroy_client+0x10>
 8019692:	686e      	ldr	r6, [r5, #4]
 8019694:	2e00      	cmp	r6, #0
 8019696:	d0ef      	beq.n	8019678 <rmw_destroy_client+0x10>
 8019698:	6864      	ldr	r4, [r4, #4]
 801969a:	6932      	ldr	r2, [r6, #16]
 801969c:	6920      	ldr	r0, [r4, #16]
 801969e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80196a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196a6:	6819      	ldr	r1, [r3, #0]
 80196a8:	f7f9 f99e 	bl	80129e8 <uxr_buffer_cancel_data>
 80196ac:	4602      	mov	r2, r0
 80196ae:	6920      	ldr	r0, [r4, #16]
 80196b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80196b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80196b8:	f7f7 fe28 	bl	801130c <run_xrce_session>
 80196bc:	6920      	ldr	r0, [r4, #16]
 80196be:	6932      	ldr	r2, [r6, #16]
 80196c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80196c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196c8:	6819      	ldr	r1, [r3, #0]
 80196ca:	f7f8 fecd 	bl	8012468 <uxr_buffer_delete_entity>
 80196ce:	4602      	mov	r2, r0
 80196d0:	6920      	ldr	r0, [r4, #16]
 80196d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80196d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80196da:	f7f7 fe17 	bl	801130c <run_xrce_session>
 80196de:	2800      	cmp	r0, #0
 80196e0:	4628      	mov	r0, r5
 80196e2:	bf14      	ite	ne
 80196e4:	2400      	movne	r4, #0
 80196e6:	2402      	moveq	r4, #2
 80196e8:	f7f7 fcf8 	bl	80110dc <rmw_uxrce_fini_client_memory>
 80196ec:	e7c5      	b.n	801967a <rmw_destroy_client+0x12>
 80196ee:	bf00      	nop

080196f0 <rmw_get_implementation_identifier>:
 80196f0:	4b01      	ldr	r3, [pc, #4]	@ (80196f8 <rmw_get_implementation_identifier+0x8>)
 80196f2:	6818      	ldr	r0, [r3, #0]
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	0801e910 	.word	0x0801e910

080196fc <create_topic>:
 80196fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019700:	4605      	mov	r5, r0
 8019702:	b084      	sub	sp, #16
 8019704:	4822      	ldr	r0, [pc, #136]	@ (8019790 <create_topic+0x94>)
 8019706:	460f      	mov	r7, r1
 8019708:	4616      	mov	r6, r2
 801970a:	f7ff ff89 	bl	8019620 <get_memory>
 801970e:	4604      	mov	r4, r0
 8019710:	2800      	cmp	r0, #0
 8019712:	d039      	beq.n	8019788 <create_topic+0x8c>
 8019714:	692b      	ldr	r3, [r5, #16]
 8019716:	6884      	ldr	r4, [r0, #8]
 8019718:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8019798 <create_topic+0x9c>
 801971c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019720:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019724:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8019728:	1c42      	adds	r2, r0, #1
 801972a:	2102      	movs	r1, #2
 801972c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019730:	f7f9 f8f0 	bl	8012914 <uxr_object_id>
 8019734:	223c      	movs	r2, #60	@ 0x3c
 8019736:	6120      	str	r0, [r4, #16]
 8019738:	4641      	mov	r1, r8
 801973a:	4638      	mov	r0, r7
 801973c:	f7f7 fee6 	bl	801150c <generate_topic_name>
 8019740:	b1f0      	cbz	r0, 8019780 <create_topic+0x84>
 8019742:	4f14      	ldr	r7, [pc, #80]	@ (8019794 <create_topic+0x98>)
 8019744:	4630      	mov	r0, r6
 8019746:	2264      	movs	r2, #100	@ 0x64
 8019748:	4639      	mov	r1, r7
 801974a:	f7f7 feaf 	bl	80114ac <generate_type_name>
 801974e:	b1b8      	cbz	r0, 8019780 <create_topic+0x84>
 8019750:	6928      	ldr	r0, [r5, #16]
 8019752:	2306      	movs	r3, #6
 8019754:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8019758:	f8cd 8000 	str.w	r8, [sp]
 801975c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8019760:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019764:	6811      	ldr	r1, [r2, #0]
 8019766:	696b      	ldr	r3, [r5, #20]
 8019768:	6922      	ldr	r2, [r4, #16]
 801976a:	f7f8 fefb 	bl	8012564 <uxr_buffer_create_topic_bin>
 801976e:	4602      	mov	r2, r0
 8019770:	6928      	ldr	r0, [r5, #16]
 8019772:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019776:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801977a:	f7f7 fdc7 	bl	801130c <run_xrce_session>
 801977e:	b918      	cbnz	r0, 8019788 <create_topic+0x8c>
 8019780:	4620      	mov	r0, r4
 8019782:	f7f7 fcc1 	bl	8011108 <rmw_uxrce_fini_topic_memory>
 8019786:	2400      	movs	r4, #0
 8019788:	4620      	mov	r0, r4
 801978a:	b004      	add	sp, #16
 801978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019790:	2000bcdc 	.word	0x2000bcdc
 8019794:	2000bdc8 	.word	0x2000bdc8
 8019798:	2000bd8c 	.word	0x2000bd8c

0801979c <destroy_topic>:
 801979c:	b538      	push	{r3, r4, r5, lr}
 801979e:	6985      	ldr	r5, [r0, #24]
 80197a0:	b1d5      	cbz	r5, 80197d8 <destroy_topic+0x3c>
 80197a2:	4604      	mov	r4, r0
 80197a4:	6928      	ldr	r0, [r5, #16]
 80197a6:	6922      	ldr	r2, [r4, #16]
 80197a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80197ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197b0:	6819      	ldr	r1, [r3, #0]
 80197b2:	f7f8 fe59 	bl	8012468 <uxr_buffer_delete_entity>
 80197b6:	4602      	mov	r2, r0
 80197b8:	6928      	ldr	r0, [r5, #16]
 80197ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80197be:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80197c2:	f7f7 fda3 	bl	801130c <run_xrce_session>
 80197c6:	2800      	cmp	r0, #0
 80197c8:	4620      	mov	r0, r4
 80197ca:	bf14      	ite	ne
 80197cc:	2400      	movne	r4, #0
 80197ce:	2402      	moveq	r4, #2
 80197d0:	f7f7 fc9a 	bl	8011108 <rmw_uxrce_fini_topic_memory>
 80197d4:	4620      	mov	r0, r4
 80197d6:	bd38      	pop	{r3, r4, r5, pc}
 80197d8:	2401      	movs	r4, #1
 80197da:	4620      	mov	r0, r4
 80197dc:	bd38      	pop	{r3, r4, r5, pc}
 80197de:	bf00      	nop

080197e0 <rmw_send_request>:
 80197e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197e4:	4604      	mov	r4, r0
 80197e6:	6800      	ldr	r0, [r0, #0]
 80197e8:	b08b      	sub	sp, #44	@ 0x2c
 80197ea:	460e      	mov	r6, r1
 80197ec:	4615      	mov	r5, r2
 80197ee:	b128      	cbz	r0, 80197fc <rmw_send_request+0x1c>
 80197f0:	4b21      	ldr	r3, [pc, #132]	@ (8019878 <rmw_send_request+0x98>)
 80197f2:	6819      	ldr	r1, [r3, #0]
 80197f4:	f7e6 fd14 	bl	8000220 <strcmp>
 80197f8:	2800      	cmp	r0, #0
 80197fa:	d139      	bne.n	8019870 <rmw_send_request+0x90>
 80197fc:	6864      	ldr	r4, [r4, #4]
 80197fe:	6963      	ldr	r3, [r4, #20]
 8019800:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019804:	689b      	ldr	r3, [r3, #8]
 8019806:	4798      	blx	r3
 8019808:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801980c:	4630      	mov	r0, r6
 801980e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019812:	4798      	blx	r3
 8019814:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019818:	9000      	str	r0, [sp, #0]
 801981a:	6922      	ldr	r2, [r4, #16]
 801981c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801981e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019822:	ab02      	add	r3, sp, #8
 8019824:	f7fb f99a 	bl	8014b5c <uxr_prepare_output_stream>
 8019828:	2700      	movs	r7, #0
 801982a:	6028      	str	r0, [r5, #0]
 801982c:	606f      	str	r7, [r5, #4]
 801982e:	b198      	cbz	r0, 8019858 <rmw_send_request+0x78>
 8019830:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019834:	a902      	add	r1, sp, #8
 8019836:	4630      	mov	r0, r6
 8019838:	4798      	blx	r3
 801983a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801983e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019842:	2b01      	cmp	r3, #1
 8019844:	d00c      	beq.n	8019860 <rmw_send_request+0x80>
 8019846:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8019848:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801984c:	f7f9 feb2 	bl	80135b4 <uxr_run_session_until_confirm_delivery>
 8019850:	4638      	mov	r0, r7
 8019852:	b00b      	add	sp, #44	@ 0x2c
 8019854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019858:	2001      	movs	r0, #1
 801985a:	b00b      	add	sp, #44	@ 0x2c
 801985c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019860:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019864:	f7f9 fae6 	bl	8012e34 <uxr_flash_output_streams>
 8019868:	4638      	mov	r0, r7
 801986a:	b00b      	add	sp, #44	@ 0x2c
 801986c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019870:	200c      	movs	r0, #12
 8019872:	b00b      	add	sp, #44	@ 0x2c
 8019874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019878:	0801e910 	.word	0x0801e910

0801987c <rmw_take_request>:
 801987c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019880:	4605      	mov	r5, r0
 8019882:	6800      	ldr	r0, [r0, #0]
 8019884:	b089      	sub	sp, #36	@ 0x24
 8019886:	460c      	mov	r4, r1
 8019888:	4690      	mov	r8, r2
 801988a:	461e      	mov	r6, r3
 801988c:	b128      	cbz	r0, 801989a <rmw_take_request+0x1e>
 801988e:	4b28      	ldr	r3, [pc, #160]	@ (8019930 <rmw_take_request+0xb4>)
 8019890:	6819      	ldr	r1, [r3, #0]
 8019892:	f7e6 fcc5 	bl	8000220 <strcmp>
 8019896:	2800      	cmp	r0, #0
 8019898:	d146      	bne.n	8019928 <rmw_take_request+0xac>
 801989a:	b10e      	cbz	r6, 80198a0 <rmw_take_request+0x24>
 801989c:	2300      	movs	r3, #0
 801989e:	7033      	strb	r3, [r6, #0]
 80198a0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80198a4:	f7f7 fcb4 	bl	8011210 <rmw_uxrce_clean_expired_static_input_buffer>
 80198a8:	4648      	mov	r0, r9
 80198aa:	f7f7 fc89 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80198ae:	4607      	mov	r7, r0
 80198b0:	b3b0      	cbz	r0, 8019920 <rmw_take_request+0xa4>
 80198b2:	6885      	ldr	r5, [r0, #8]
 80198b4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80198b8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80198bc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80198c0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80198c4:	7423      	strb	r3, [r4, #16]
 80198c6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80198ca:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80198ce:	74e2      	strb	r2, [r4, #19]
 80198d0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80198d4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80198d8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80198dc:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80198e0:	61e1      	str	r1, [r4, #28]
 80198e2:	6162      	str	r2, [r4, #20]
 80198e4:	61a3      	str	r3, [r4, #24]
 80198e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80198ea:	689b      	ldr	r3, [r3, #8]
 80198ec:	4798      	blx	r3
 80198ee:	6844      	ldr	r4, [r0, #4]
 80198f0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80198f4:	f105 0110 	add.w	r1, r5, #16
 80198f8:	4668      	mov	r0, sp
 80198fa:	f7f5 f825 	bl	800e948 <ucdr_init_buffer>
 80198fe:	68e3      	ldr	r3, [r4, #12]
 8019900:	4641      	mov	r1, r8
 8019902:	4668      	mov	r0, sp
 8019904:	4798      	blx	r3
 8019906:	4639      	mov	r1, r7
 8019908:	4604      	mov	r4, r0
 801990a:	480a      	ldr	r0, [pc, #40]	@ (8019934 <rmw_take_request+0xb8>)
 801990c:	f7ff fe98 	bl	8019640 <put_memory>
 8019910:	b106      	cbz	r6, 8019914 <rmw_take_request+0x98>
 8019912:	7034      	strb	r4, [r6, #0]
 8019914:	f084 0001 	eor.w	r0, r4, #1
 8019918:	b2c0      	uxtb	r0, r0
 801991a:	b009      	add	sp, #36	@ 0x24
 801991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019920:	2001      	movs	r0, #1
 8019922:	b009      	add	sp, #36	@ 0x24
 8019924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019928:	200c      	movs	r0, #12
 801992a:	b009      	add	sp, #36	@ 0x24
 801992c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019930:	0801e910 	.word	0x0801e910
 8019934:	2000bcbc 	.word	0x2000bcbc

08019938 <rmw_send_response>:
 8019938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801993a:	4605      	mov	r5, r0
 801993c:	6800      	ldr	r0, [r0, #0]
 801993e:	b091      	sub	sp, #68	@ 0x44
 8019940:	460c      	mov	r4, r1
 8019942:	4616      	mov	r6, r2
 8019944:	b128      	cbz	r0, 8019952 <rmw_send_response+0x1a>
 8019946:	4b29      	ldr	r3, [pc, #164]	@ (80199ec <rmw_send_response+0xb4>)
 8019948:	6819      	ldr	r1, [r3, #0]
 801994a:	f7e6 fc69 	bl	8000220 <strcmp>
 801994e:	2800      	cmp	r0, #0
 8019950:	d141      	bne.n	80199d6 <rmw_send_response+0x9e>
 8019952:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8019956:	9306      	str	r3, [sp, #24]
 8019958:	4623      	mov	r3, r4
 801995a:	9207      	str	r2, [sp, #28]
 801995c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019960:	686d      	ldr	r5, [r5, #4]
 8019962:	789b      	ldrb	r3, [r3, #2]
 8019964:	68a1      	ldr	r1, [r4, #8]
 8019966:	f88d 2017 	strb.w	r2, [sp, #23]
 801996a:	f88d 3016 	strb.w	r3, [sp, #22]
 801996e:	68e2      	ldr	r2, [r4, #12]
 8019970:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019974:	6860      	ldr	r0, [r4, #4]
 8019976:	f8ad 3014 	strh.w	r3, [sp, #20]
 801997a:	ab02      	add	r3, sp, #8
 801997c:	c307      	stmia	r3!, {r0, r1, r2}
 801997e:	696b      	ldr	r3, [r5, #20]
 8019980:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019982:	68db      	ldr	r3, [r3, #12]
 8019984:	4798      	blx	r3
 8019986:	6844      	ldr	r4, [r0, #4]
 8019988:	4630      	mov	r0, r6
 801998a:	6923      	ldr	r3, [r4, #16]
 801998c:	4798      	blx	r3
 801998e:	f100 0318 	add.w	r3, r0, #24
 8019992:	6938      	ldr	r0, [r7, #16]
 8019994:	9300      	str	r3, [sp, #0]
 8019996:	692a      	ldr	r2, [r5, #16]
 8019998:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801999a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801999e:	ab08      	add	r3, sp, #32
 80199a0:	f7fb f8dc 	bl	8014b5c <uxr_prepare_output_stream>
 80199a4:	b910      	cbnz	r0, 80199ac <rmw_send_response+0x74>
 80199a6:	2001      	movs	r0, #1
 80199a8:	b011      	add	sp, #68	@ 0x44
 80199aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199ac:	a902      	add	r1, sp, #8
 80199ae:	a808      	add	r0, sp, #32
 80199b0:	f7fc f962 	bl	8015c78 <uxr_serialize_SampleIdentity>
 80199b4:	68a3      	ldr	r3, [r4, #8]
 80199b6:	a908      	add	r1, sp, #32
 80199b8:	4630      	mov	r0, r6
 80199ba:	4798      	blx	r3
 80199bc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80199c0:	6938      	ldr	r0, [r7, #16]
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d00a      	beq.n	80199dc <rmw_send_response+0xa4>
 80199c6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80199c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80199cc:	f7f9 fdf2 	bl	80135b4 <uxr_run_session_until_confirm_delivery>
 80199d0:	2000      	movs	r0, #0
 80199d2:	b011      	add	sp, #68	@ 0x44
 80199d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d6:	200c      	movs	r0, #12
 80199d8:	b011      	add	sp, #68	@ 0x44
 80199da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80199e0:	f7f9 fa28 	bl	8012e34 <uxr_flash_output_streams>
 80199e4:	2000      	movs	r0, #0
 80199e6:	b011      	add	sp, #68	@ 0x44
 80199e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199ea:	bf00      	nop
 80199ec:	0801e910 	.word	0x0801e910

080199f0 <rmw_take_response>:
 80199f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f4:	4604      	mov	r4, r0
 80199f6:	6800      	ldr	r0, [r0, #0]
 80199f8:	b088      	sub	sp, #32
 80199fa:	4688      	mov	r8, r1
 80199fc:	4617      	mov	r7, r2
 80199fe:	461d      	mov	r5, r3
 8019a00:	b120      	cbz	r0, 8019a0c <rmw_take_response+0x1c>
 8019a02:	4b1e      	ldr	r3, [pc, #120]	@ (8019a7c <rmw_take_response+0x8c>)
 8019a04:	6819      	ldr	r1, [r3, #0]
 8019a06:	f7e6 fc0b 	bl	8000220 <strcmp>
 8019a0a:	bb78      	cbnz	r0, 8019a6c <rmw_take_response+0x7c>
 8019a0c:	b10d      	cbz	r5, 8019a12 <rmw_take_response+0x22>
 8019a0e:	2300      	movs	r3, #0
 8019a10:	702b      	strb	r3, [r5, #0]
 8019a12:	6864      	ldr	r4, [r4, #4]
 8019a14:	f7f7 fbfc 	bl	8011210 <rmw_uxrce_clean_expired_static_input_buffer>
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f7f7 fbd1 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019a1e:	4606      	mov	r6, r0
 8019a20:	b340      	cbz	r0, 8019a74 <rmw_take_response+0x84>
 8019a22:	6963      	ldr	r3, [r4, #20]
 8019a24:	6884      	ldr	r4, [r0, #8]
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019a2c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019a30:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8019a34:	4798      	blx	r3
 8019a36:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019a3a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019a3e:	f104 0110 	add.w	r1, r4, #16
 8019a42:	4668      	mov	r0, sp
 8019a44:	f7f4 ff80 	bl	800e948 <ucdr_init_buffer>
 8019a48:	4639      	mov	r1, r7
 8019a4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a4e:	4668      	mov	r0, sp
 8019a50:	4798      	blx	r3
 8019a52:	4631      	mov	r1, r6
 8019a54:	4604      	mov	r4, r0
 8019a56:	480a      	ldr	r0, [pc, #40]	@ (8019a80 <rmw_take_response+0x90>)
 8019a58:	f7ff fdf2 	bl	8019640 <put_memory>
 8019a5c:	b105      	cbz	r5, 8019a60 <rmw_take_response+0x70>
 8019a5e:	702c      	strb	r4, [r5, #0]
 8019a60:	f084 0001 	eor.w	r0, r4, #1
 8019a64:	b2c0      	uxtb	r0, r0
 8019a66:	b008      	add	sp, #32
 8019a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a6c:	200c      	movs	r0, #12
 8019a6e:	b008      	add	sp, #32
 8019a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a74:	2001      	movs	r0, #1
 8019a76:	b008      	add	sp, #32
 8019a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a7c:	0801e910 	.word	0x0801e910
 8019a80:	2000bcbc 	.word	0x2000bcbc

08019a84 <rmw_take_with_info>:
 8019a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a86:	4604      	mov	r4, r0
 8019a88:	6800      	ldr	r0, [r0, #0]
 8019a8a:	b089      	sub	sp, #36	@ 0x24
 8019a8c:	460f      	mov	r7, r1
 8019a8e:	4615      	mov	r5, r2
 8019a90:	b128      	cbz	r0, 8019a9e <rmw_take_with_info+0x1a>
 8019a92:	4b24      	ldr	r3, [pc, #144]	@ (8019b24 <rmw_take_with_info+0xa0>)
 8019a94:	6819      	ldr	r1, [r3, #0]
 8019a96:	f7e6 fbc3 	bl	8000220 <strcmp>
 8019a9a:	2800      	cmp	r0, #0
 8019a9c:	d13e      	bne.n	8019b1c <rmw_take_with_info+0x98>
 8019a9e:	b305      	cbz	r5, 8019ae2 <rmw_take_with_info+0x5e>
 8019aa0:	6864      	ldr	r4, [r4, #4]
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	702b      	strb	r3, [r5, #0]
 8019aa6:	f7f7 fbb3 	bl	8011210 <rmw_uxrce_clean_expired_static_input_buffer>
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f7f7 fb88 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019ab0:	4606      	mov	r6, r0
 8019ab2:	b1f0      	cbz	r0, 8019af2 <rmw_take_with_info+0x6e>
 8019ab4:	6881      	ldr	r1, [r0, #8]
 8019ab6:	4668      	mov	r0, sp
 8019ab8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019abc:	3110      	adds	r1, #16
 8019abe:	f7f4 ff43 	bl	800e948 <ucdr_init_buffer>
 8019ac2:	69a3      	ldr	r3, [r4, #24]
 8019ac4:	4639      	mov	r1, r7
 8019ac6:	68db      	ldr	r3, [r3, #12]
 8019ac8:	4668      	mov	r0, sp
 8019aca:	4798      	blx	r3
 8019acc:	4631      	mov	r1, r6
 8019ace:	4604      	mov	r4, r0
 8019ad0:	4815      	ldr	r0, [pc, #84]	@ (8019b28 <rmw_take_with_info+0xa4>)
 8019ad2:	f7ff fdb5 	bl	8019640 <put_memory>
 8019ad6:	702c      	strb	r4, [r5, #0]
 8019ad8:	f084 0001 	eor.w	r0, r4, #1
 8019adc:	b2c0      	uxtb	r0, r0
 8019ade:	b009      	add	sp, #36	@ 0x24
 8019ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ae2:	6864      	ldr	r4, [r4, #4]
 8019ae4:	f7f7 fb94 	bl	8011210 <rmw_uxrce_clean_expired_static_input_buffer>
 8019ae8:	4620      	mov	r0, r4
 8019aea:	f7f7 fb69 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019aee:	4605      	mov	r5, r0
 8019af0:	b910      	cbnz	r0, 8019af8 <rmw_take_with_info+0x74>
 8019af2:	2001      	movs	r0, #1
 8019af4:	b009      	add	sp, #36	@ 0x24
 8019af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019af8:	68a9      	ldr	r1, [r5, #8]
 8019afa:	4668      	mov	r0, sp
 8019afc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019b00:	3110      	adds	r1, #16
 8019b02:	f7f4 ff21 	bl	800e948 <ucdr_init_buffer>
 8019b06:	69a3      	ldr	r3, [r4, #24]
 8019b08:	4639      	mov	r1, r7
 8019b0a:	68db      	ldr	r3, [r3, #12]
 8019b0c:	4668      	mov	r0, sp
 8019b0e:	4798      	blx	r3
 8019b10:	4629      	mov	r1, r5
 8019b12:	4604      	mov	r4, r0
 8019b14:	4804      	ldr	r0, [pc, #16]	@ (8019b28 <rmw_take_with_info+0xa4>)
 8019b16:	f7ff fd93 	bl	8019640 <put_memory>
 8019b1a:	e7dd      	b.n	8019ad8 <rmw_take_with_info+0x54>
 8019b1c:	200c      	movs	r0, #12
 8019b1e:	b009      	add	sp, #36	@ 0x24
 8019b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b22:	bf00      	nop
 8019b24:	0801e910 	.word	0x0801e910
 8019b28:	2000bcbc 	.word	0x2000bcbc

08019b2c <rmw_wait>:
 8019b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b30:	b089      	sub	sp, #36	@ 0x24
 8019b32:	4605      	mov	r5, r0
 8019b34:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019b36:	460e      	mov	r6, r1
 8019b38:	4698      	mov	r8, r3
 8019b3a:	4691      	mov	r9, r2
 8019b3c:	2a00      	cmp	r2, #0
 8019b3e:	f000 810a 	beq.w	8019d56 <rmw_wait+0x22a>
 8019b42:	b16c      	cbz	r4, 8019b60 <rmw_wait+0x34>
 8019b44:	4bae      	ldr	r3, [pc, #696]	@ (8019e00 <rmw_wait+0x2d4>)
 8019b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b48:	af04      	add	r7, sp, #16
 8019b4a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019b4e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019b52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019b56:	f7ff faaf 	bl	80190b8 <rmw_time_equal>
 8019b5a:	2800      	cmp	r0, #0
 8019b5c:	f000 8127 	beq.w	8019dae <rmw_wait+0x282>
 8019b60:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019b64:	f7f7 fb54 	bl	8011210 <rmw_uxrce_clean_expired_static_input_buffer>
 8019b68:	4ba6      	ldr	r3, [pc, #664]	@ (8019e04 <rmw_wait+0x2d8>)
 8019b6a:	681c      	ldr	r4, [r3, #0]
 8019b6c:	b14c      	cbz	r4, 8019b82 <rmw_wait+0x56>
 8019b6e:	4623      	mov	r3, r4
 8019b70:	2100      	movs	r1, #0
 8019b72:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b7a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d1f7      	bne.n	8019b72 <rmw_wait+0x46>
 8019b82:	f1b9 0f00 	cmp.w	r9, #0
 8019b86:	d011      	beq.n	8019bac <rmw_wait+0x80>
 8019b88:	f8d9 1000 	ldr.w	r1, [r9]
 8019b8c:	b171      	cbz	r1, 8019bac <rmw_wait+0x80>
 8019b8e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019b92:	2300      	movs	r3, #0
 8019b94:	2001      	movs	r0, #1
 8019b96:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019b9a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019b9c:	6912      	ldr	r2, [r2, #16]
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019ba4:	4299      	cmp	r1, r3
 8019ba6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019baa:	d1f4      	bne.n	8019b96 <rmw_wait+0x6a>
 8019bac:	f1b8 0f00 	cmp.w	r8, #0
 8019bb0:	d011      	beq.n	8019bd6 <rmw_wait+0xaa>
 8019bb2:	f8d8 1000 	ldr.w	r1, [r8]
 8019bb6:	b171      	cbz	r1, 8019bd6 <rmw_wait+0xaa>
 8019bb8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	2001      	movs	r0, #1
 8019bc0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019bc4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019bc6:	6912      	ldr	r2, [r2, #16]
 8019bc8:	3301      	adds	r3, #1
 8019bca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bce:	4299      	cmp	r1, r3
 8019bd0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019bd4:	d1f4      	bne.n	8019bc0 <rmw_wait+0x94>
 8019bd6:	b185      	cbz	r5, 8019bfa <rmw_wait+0xce>
 8019bd8:	6829      	ldr	r1, [r5, #0]
 8019bda:	b171      	cbz	r1, 8019bfa <rmw_wait+0xce>
 8019bdc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019be0:	2300      	movs	r3, #0
 8019be2:	2001      	movs	r0, #1
 8019be4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019be8:	6a12      	ldr	r2, [r2, #32]
 8019bea:	6912      	ldr	r2, [r2, #16]
 8019bec:	3301      	adds	r3, #1
 8019bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bf2:	4299      	cmp	r1, r3
 8019bf4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019bf8:	d1f4      	bne.n	8019be4 <rmw_wait+0xb8>
 8019bfa:	b34c      	cbz	r4, 8019c50 <rmw_wait+0x124>
 8019bfc:	4622      	mov	r2, r4
 8019bfe:	2300      	movs	r3, #0
 8019c00:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019c04:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019c08:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019c0c:	440b      	add	r3, r1
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	2a00      	cmp	r2, #0
 8019c12:	d1f5      	bne.n	8019c00 <rmw_wait+0xd4>
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	f000 8084 	beq.w	8019d22 <rmw_wait+0x1f6>
 8019c1a:	1c7a      	adds	r2, r7, #1
 8019c1c:	d00d      	beq.n	8019c3a <rmw_wait+0x10e>
 8019c1e:	ee07 7a90 	vmov	s15, r7
 8019c22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019c26:	ee07 3a90 	vmov	s15, r3
 8019c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019c32:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019c36:	ee17 7a90 	vmov	r7, s15
 8019c3a:	68a0      	ldr	r0, [r4, #8]
 8019c3c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019c40:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	f040 8090 	bne.w	8019d6a <rmw_wait+0x23e>
 8019c4a:	6864      	ldr	r4, [r4, #4]
 8019c4c:	2c00      	cmp	r4, #0
 8019c4e:	d1f4      	bne.n	8019c3a <rmw_wait+0x10e>
 8019c50:	f1b9 0f00 	cmp.w	r9, #0
 8019c54:	f000 80bc 	beq.w	8019dd0 <rmw_wait+0x2a4>
 8019c58:	f8d9 7000 	ldr.w	r7, [r9]
 8019c5c:	2f00      	cmp	r7, #0
 8019c5e:	f000 808e 	beq.w	8019d7e <rmw_wait+0x252>
 8019c62:	2400      	movs	r4, #0
 8019c64:	4627      	mov	r7, r4
 8019c66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c6e:	f7f7 faa7 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	d05f      	beq.n	8019d36 <rmw_wait+0x20a>
 8019c76:	f8d9 3000 	ldr.w	r3, [r9]
 8019c7a:	3401      	adds	r4, #1
 8019c7c:	42a3      	cmp	r3, r4
 8019c7e:	f04f 0701 	mov.w	r7, #1
 8019c82:	d8f0      	bhi.n	8019c66 <rmw_wait+0x13a>
 8019c84:	f1b8 0f00 	cmp.w	r8, #0
 8019c88:	d012      	beq.n	8019cb0 <rmw_wait+0x184>
 8019c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8019c8e:	b17b      	cbz	r3, 8019cb0 <rmw_wait+0x184>
 8019c90:	2400      	movs	r4, #0
 8019c92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019c96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c9a:	f7f7 fa91 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019c9e:	2800      	cmp	r0, #0
 8019ca0:	d051      	beq.n	8019d46 <rmw_wait+0x21a>
 8019ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8019ca6:	3401      	adds	r4, #1
 8019ca8:	42a3      	cmp	r3, r4
 8019caa:	f04f 0701 	mov.w	r7, #1
 8019cae:	d8f0      	bhi.n	8019c92 <rmw_wait+0x166>
 8019cb0:	b1dd      	cbz	r5, 8019cea <rmw_wait+0x1be>
 8019cb2:	682b      	ldr	r3, [r5, #0]
 8019cb4:	b1cb      	cbz	r3, 8019cea <rmw_wait+0x1be>
 8019cb6:	2400      	movs	r4, #0
 8019cb8:	686b      	ldr	r3, [r5, #4]
 8019cba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cbe:	f7f7 fa7f 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019cc2:	b158      	cbz	r0, 8019cdc <rmw_wait+0x1b0>
 8019cc4:	682b      	ldr	r3, [r5, #0]
 8019cc6:	3401      	adds	r4, #1
 8019cc8:	42a3      	cmp	r3, r4
 8019cca:	d969      	bls.n	8019da0 <rmw_wait+0x274>
 8019ccc:	686b      	ldr	r3, [r5, #4]
 8019cce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cd2:	2701      	movs	r7, #1
 8019cd4:	f7f7 fa74 	bl	80111c0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d1f3      	bne.n	8019cc4 <rmw_wait+0x198>
 8019cdc:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019ce0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019ce4:	3401      	adds	r4, #1
 8019ce6:	42a3      	cmp	r3, r4
 8019ce8:	d8e6      	bhi.n	8019cb8 <rmw_wait+0x18c>
 8019cea:	b1a6      	cbz	r6, 8019d16 <rmw_wait+0x1ea>
 8019cec:	6834      	ldr	r4, [r6, #0]
 8019cee:	b194      	cbz	r4, 8019d16 <rmw_wait+0x1ea>
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	461d      	mov	r5, r3
 8019cf4:	e004      	b.n	8019d00 <rmw_wait+0x1d4>
 8019cf6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	42a3      	cmp	r3, r4
 8019cfe:	d00a      	beq.n	8019d16 <rmw_wait+0x1ea>
 8019d00:	6870      	ldr	r0, [r6, #4]
 8019d02:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019d06:	7c0a      	ldrb	r2, [r1, #16]
 8019d08:	2a00      	cmp	r2, #0
 8019d0a:	d0f4      	beq.n	8019cf6 <rmw_wait+0x1ca>
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	42a3      	cmp	r3, r4
 8019d10:	740d      	strb	r5, [r1, #16]
 8019d12:	4617      	mov	r7, r2
 8019d14:	d1f4      	bne.n	8019d00 <rmw_wait+0x1d4>
 8019d16:	2f00      	cmp	r7, #0
 8019d18:	d03e      	beq.n	8019d98 <rmw_wait+0x26c>
 8019d1a:	2000      	movs	r0, #0
 8019d1c:	b009      	add	sp, #36	@ 0x24
 8019d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d22:	68a0      	ldr	r0, [r4, #8]
 8019d24:	2100      	movs	r1, #0
 8019d26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d2a:	f7f9 fc09 	bl	8013540 <uxr_run_session_timeout>
 8019d2e:	6864      	ldr	r4, [r4, #4]
 8019d30:	2c00      	cmp	r4, #0
 8019d32:	d1f6      	bne.n	8019d22 <rmw_wait+0x1f6>
 8019d34:	e78c      	b.n	8019c50 <rmw_wait+0x124>
 8019d36:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019d3a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d3e:	3401      	adds	r4, #1
 8019d40:	42a3      	cmp	r3, r4
 8019d42:	d890      	bhi.n	8019c66 <rmw_wait+0x13a>
 8019d44:	e79e      	b.n	8019c84 <rmw_wait+0x158>
 8019d46:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019d4a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d4e:	3401      	adds	r4, #1
 8019d50:	429c      	cmp	r4, r3
 8019d52:	d39e      	bcc.n	8019c92 <rmw_wait+0x166>
 8019d54:	e7ac      	b.n	8019cb0 <rmw_wait+0x184>
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	f47f aef3 	bne.w	8019b42 <rmw_wait+0x16>
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	f47f aef0 	bne.w	8019b42 <rmw_wait+0x16>
 8019d62:	2900      	cmp	r1, #0
 8019d64:	f47f aeed 	bne.w	8019b42 <rmw_wait+0x16>
 8019d68:	e7d7      	b.n	8019d1a <rmw_wait+0x1ee>
 8019d6a:	4639      	mov	r1, r7
 8019d6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d70:	f7f9 fc00 	bl	8013574 <uxr_run_session_until_data>
 8019d74:	6864      	ldr	r4, [r4, #4]
 8019d76:	2c00      	cmp	r4, #0
 8019d78:	f47f af5f 	bne.w	8019c3a <rmw_wait+0x10e>
 8019d7c:	e768      	b.n	8019c50 <rmw_wait+0x124>
 8019d7e:	f1b8 0f00 	cmp.w	r8, #0
 8019d82:	d032      	beq.n	8019dea <rmw_wait+0x2be>
 8019d84:	f8d8 3000 	ldr.w	r3, [r8]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d181      	bne.n	8019c90 <rmw_wait+0x164>
 8019d8c:	461f      	mov	r7, r3
 8019d8e:	2d00      	cmp	r5, #0
 8019d90:	d18f      	bne.n	8019cb2 <rmw_wait+0x186>
 8019d92:	462f      	mov	r7, r5
 8019d94:	2e00      	cmp	r6, #0
 8019d96:	d1a9      	bne.n	8019cec <rmw_wait+0x1c0>
 8019d98:	2002      	movs	r0, #2
 8019d9a:	b009      	add	sp, #36	@ 0x24
 8019d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019da0:	2e00      	cmp	r6, #0
 8019da2:	d0ba      	beq.n	8019d1a <rmw_wait+0x1ee>
 8019da4:	6834      	ldr	r4, [r6, #0]
 8019da6:	2701      	movs	r7, #1
 8019da8:	2c00      	cmp	r4, #0
 8019daa:	d1a1      	bne.n	8019cf0 <rmw_wait+0x1c4>
 8019dac:	e7b5      	b.n	8019d1a <rmw_wait+0x1ee>
 8019dae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019db2:	f7ff f9d5 	bl	8019160 <rmw_time_total_nsec>
 8019db6:	2300      	movs	r3, #0
 8019db8:	4a13      	ldr	r2, [pc, #76]	@ (8019e08 <rmw_wait+0x2dc>)
 8019dba:	f7e6 ff55 	bl	8000c68 <__aeabi_uldivmod>
 8019dbe:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019dc2:	f171 0300 	sbcs.w	r3, r1, #0
 8019dc6:	4607      	mov	r7, r0
 8019dc8:	bfa8      	it	ge
 8019dca:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8019dce:	e6c9      	b.n	8019b64 <rmw_wait+0x38>
 8019dd0:	f1b8 0f00 	cmp.w	r8, #0
 8019dd4:	d009      	beq.n	8019dea <rmw_wait+0x2be>
 8019dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8019dda:	464f      	mov	r7, r9
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	f47f af57 	bne.w	8019c90 <rmw_wait+0x164>
 8019de2:	2d00      	cmp	r5, #0
 8019de4:	f47f af65 	bne.w	8019cb2 <rmw_wait+0x186>
 8019de8:	e7d3      	b.n	8019d92 <rmw_wait+0x266>
 8019dea:	b17d      	cbz	r5, 8019e0c <rmw_wait+0x2e0>
 8019dec:	682b      	ldr	r3, [r5, #0]
 8019dee:	4647      	mov	r7, r8
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	f47f af60 	bne.w	8019cb6 <rmw_wait+0x18a>
 8019df6:	2e00      	cmp	r6, #0
 8019df8:	f47f af78 	bne.w	8019cec <rmw_wait+0x1c0>
 8019dfc:	e7cc      	b.n	8019d98 <rmw_wait+0x26c>
 8019dfe:	bf00      	nop
 8019e00:	0801d348 	.word	0x0801d348
 8019e04:	2000bcac 	.word	0x2000bcac
 8019e08:	000f4240 	.word	0x000f4240
 8019e0c:	2e00      	cmp	r6, #0
 8019e0e:	d0c3      	beq.n	8019d98 <rmw_wait+0x26c>
 8019e10:	6834      	ldr	r4, [r6, #0]
 8019e12:	462f      	mov	r7, r5
 8019e14:	2c00      	cmp	r4, #0
 8019e16:	f47f af6b 	bne.w	8019cf0 <rmw_wait+0x1c4>
 8019e1a:	e7bd      	b.n	8019d98 <rmw_wait+0x26c>

08019e1c <rmw_create_wait_set>:
 8019e1c:	b508      	push	{r3, lr}
 8019e1e:	4803      	ldr	r0, [pc, #12]	@ (8019e2c <rmw_create_wait_set+0x10>)
 8019e20:	f7ff fbfe 	bl	8019620 <get_memory>
 8019e24:	b108      	cbz	r0, 8019e2a <rmw_create_wait_set+0xe>
 8019e26:	6880      	ldr	r0, [r0, #8]
 8019e28:	3010      	adds	r0, #16
 8019e2a:	bd08      	pop	{r3, pc}
 8019e2c:	2000bcec 	.word	0x2000bcec

08019e30 <rmw_destroy_wait_set>:
 8019e30:	b508      	push	{r3, lr}
 8019e32:	4b08      	ldr	r3, [pc, #32]	@ (8019e54 <rmw_destroy_wait_set+0x24>)
 8019e34:	6819      	ldr	r1, [r3, #0]
 8019e36:	b911      	cbnz	r1, 8019e3e <rmw_destroy_wait_set+0xe>
 8019e38:	e00a      	b.n	8019e50 <rmw_destroy_wait_set+0x20>
 8019e3a:	6849      	ldr	r1, [r1, #4]
 8019e3c:	b141      	cbz	r1, 8019e50 <rmw_destroy_wait_set+0x20>
 8019e3e:	688b      	ldr	r3, [r1, #8]
 8019e40:	3310      	adds	r3, #16
 8019e42:	4298      	cmp	r0, r3
 8019e44:	d1f9      	bne.n	8019e3a <rmw_destroy_wait_set+0xa>
 8019e46:	4803      	ldr	r0, [pc, #12]	@ (8019e54 <rmw_destroy_wait_set+0x24>)
 8019e48:	f7ff fbfa 	bl	8019640 <put_memory>
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	bd08      	pop	{r3, pc}
 8019e50:	2001      	movs	r0, #1
 8019e52:	bd08      	pop	{r3, pc}
 8019e54:	2000bcec 	.word	0x2000bcec

08019e58 <sensor_msgs__msg__Imu__init>:
 8019e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e5c:	4605      	mov	r5, r0
 8019e5e:	b3c0      	cbz	r0, 8019ed2 <sensor_msgs__msg__Imu__init+0x7a>
 8019e60:	f000 f864 	bl	8019f2c <std_msgs__msg__Header__init>
 8019e64:	4604      	mov	r4, r0
 8019e66:	b310      	cbz	r0, 8019eae <sensor_msgs__msg__Imu__init+0x56>
 8019e68:	f105 0618 	add.w	r6, r5, #24
 8019e6c:	4630      	mov	r0, r6
 8019e6e:	f000 f8b3 	bl	8019fd8 <geometry_msgs__msg__Quaternion__init>
 8019e72:	4604      	mov	r4, r0
 8019e74:	2800      	cmp	r0, #0
 8019e76:	d040      	beq.n	8019efa <sensor_msgs__msg__Imu__init+0xa2>
 8019e78:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8019e7c:	4638      	mov	r0, r7
 8019e7e:	f7f7 ffd9 	bl	8011e34 <geometry_msgs__msg__Vector3__init>
 8019e82:	4604      	mov	r4, r0
 8019e84:	b348      	cbz	r0, 8019eda <sensor_msgs__msg__Imu__init+0x82>
 8019e86:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8019e8a:	4640      	mov	r0, r8
 8019e8c:	f7f7 ffd2 	bl	8011e34 <geometry_msgs__msg__Vector3__init>
 8019e90:	4604      	mov	r4, r0
 8019e92:	b9d8      	cbnz	r0, 8019ecc <sensor_msgs__msg__Imu__init+0x74>
 8019e94:	4628      	mov	r0, r5
 8019e96:	f000 f86d 	bl	8019f74 <std_msgs__msg__Header__fini>
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	f000 f8b0 	bl	801a000 <geometry_msgs__msg__Quaternion__fini>
 8019ea0:	4638      	mov	r0, r7
 8019ea2:	f7f7 ffcb 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019ea6:	4640      	mov	r0, r8
 8019ea8:	f7f7 ffc8 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019eac:	e00e      	b.n	8019ecc <sensor_msgs__msg__Imu__init+0x74>
 8019eae:	4628      	mov	r0, r5
 8019eb0:	f000 f860 	bl	8019f74 <std_msgs__msg__Header__fini>
 8019eb4:	f105 0018 	add.w	r0, r5, #24
 8019eb8:	f000 f8a2 	bl	801a000 <geometry_msgs__msg__Quaternion__fini>
 8019ebc:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8019ec0:	f7f7 ffbc 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019ec4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8019ec8:	f7f7 ffb8 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019ecc:	4620      	mov	r0, r4
 8019ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ed2:	4604      	mov	r4, r0
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eda:	4628      	mov	r0, r5
 8019edc:	f000 f84a 	bl	8019f74 <std_msgs__msg__Header__fini>
 8019ee0:	4630      	mov	r0, r6
 8019ee2:	f000 f88d 	bl	801a000 <geometry_msgs__msg__Quaternion__fini>
 8019ee6:	4638      	mov	r0, r7
 8019ee8:	f7f7 ffa8 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019eec:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8019ef0:	f7f7 ffa4 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019efa:	4628      	mov	r0, r5
 8019efc:	f000 f83a 	bl	8019f74 <std_msgs__msg__Header__fini>
 8019f00:	4630      	mov	r0, r6
 8019f02:	e7d9      	b.n	8019eb8 <sensor_msgs__msg__Imu__init+0x60>

08019f04 <sensor_msgs__msg__Imu__fini>:
 8019f04:	b188      	cbz	r0, 8019f2a <sensor_msgs__msg__Imu__fini+0x26>
 8019f06:	b510      	push	{r4, lr}
 8019f08:	4604      	mov	r4, r0
 8019f0a:	f000 f833 	bl	8019f74 <std_msgs__msg__Header__fini>
 8019f0e:	f104 0018 	add.w	r0, r4, #24
 8019f12:	f000 f875 	bl	801a000 <geometry_msgs__msg__Quaternion__fini>
 8019f16:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8019f1a:	f7f7 ff8f 	bl	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019f1e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f26:	f7f7 bf89 	b.w	8011e3c <geometry_msgs__msg__Vector3__fini>
 8019f2a:	4770      	bx	lr

08019f2c <std_msgs__msg__Header__init>:
 8019f2c:	b570      	push	{r4, r5, r6, lr}
 8019f2e:	4605      	mov	r5, r0
 8019f30:	b1a8      	cbz	r0, 8019f5e <std_msgs__msg__Header__init+0x32>
 8019f32:	f000 f849 	bl	8019fc8 <builtin_interfaces__msg__Time__init>
 8019f36:	4604      	mov	r4, r0
 8019f38:	b140      	cbz	r0, 8019f4c <std_msgs__msg__Header__init+0x20>
 8019f3a:	f105 0608 	add.w	r6, r5, #8
 8019f3e:	4630      	mov	r0, r6
 8019f40:	f001 f990 	bl	801b264 <rosidl_runtime_c__String__init>
 8019f44:	4604      	mov	r4, r0
 8019f46:	b168      	cbz	r0, 8019f64 <std_msgs__msg__Header__init+0x38>
 8019f48:	4620      	mov	r0, r4
 8019f4a:	bd70      	pop	{r4, r5, r6, pc}
 8019f4c:	4628      	mov	r0, r5
 8019f4e:	f000 f83f 	bl	8019fd0 <builtin_interfaces__msg__Time__fini>
 8019f52:	f105 0008 	add.w	r0, r5, #8
 8019f56:	f001 f99b 	bl	801b290 <rosidl_runtime_c__String__fini>
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	bd70      	pop	{r4, r5, r6, pc}
 8019f5e:	4604      	mov	r4, r0
 8019f60:	4620      	mov	r0, r4
 8019f62:	bd70      	pop	{r4, r5, r6, pc}
 8019f64:	4628      	mov	r0, r5
 8019f66:	f000 f833 	bl	8019fd0 <builtin_interfaces__msg__Time__fini>
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	f001 f990 	bl	801b290 <rosidl_runtime_c__String__fini>
 8019f70:	e7ea      	b.n	8019f48 <std_msgs__msg__Header__init+0x1c>
 8019f72:	bf00      	nop

08019f74 <std_msgs__msg__Header__fini>:
 8019f74:	b148      	cbz	r0, 8019f8a <std_msgs__msg__Header__fini+0x16>
 8019f76:	b510      	push	{r4, lr}
 8019f78:	4604      	mov	r4, r0
 8019f7a:	f000 f829 	bl	8019fd0 <builtin_interfaces__msg__Time__fini>
 8019f7e:	f104 0008 	add.w	r0, r4, #8
 8019f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f86:	f001 b983 	b.w	801b290 <rosidl_runtime_c__String__fini>
 8019f8a:	4770      	bx	lr

08019f8c <std_srvs__srv__SetBool_Request__init>:
 8019f8c:	3800      	subs	r0, #0
 8019f8e:	bf18      	it	ne
 8019f90:	2001      	movne	r0, #1
 8019f92:	4770      	bx	lr

08019f94 <std_srvs__srv__SetBool_Request__fini>:
 8019f94:	4770      	bx	lr
 8019f96:	bf00      	nop

08019f98 <std_srvs__srv__SetBool_Response__init>:
 8019f98:	b538      	push	{r3, r4, r5, lr}
 8019f9a:	b138      	cbz	r0, 8019fac <std_srvs__srv__SetBool_Response__init+0x14>
 8019f9c:	1d05      	adds	r5, r0, #4
 8019f9e:	4628      	mov	r0, r5
 8019fa0:	f001 f960 	bl	801b264 <rosidl_runtime_c__String__init>
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	b120      	cbz	r0, 8019fb2 <std_srvs__srv__SetBool_Response__init+0x1a>
 8019fa8:	4620      	mov	r0, r4
 8019faa:	bd38      	pop	{r3, r4, r5, pc}
 8019fac:	4604      	mov	r4, r0
 8019fae:	4620      	mov	r0, r4
 8019fb0:	bd38      	pop	{r3, r4, r5, pc}
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	f001 f96c 	bl	801b290 <rosidl_runtime_c__String__fini>
 8019fb8:	4620      	mov	r0, r4
 8019fba:	bd38      	pop	{r3, r4, r5, pc}

08019fbc <std_srvs__srv__SetBool_Response__fini>:
 8019fbc:	b110      	cbz	r0, 8019fc4 <std_srvs__srv__SetBool_Response__fini+0x8>
 8019fbe:	3004      	adds	r0, #4
 8019fc0:	f001 b966 	b.w	801b290 <rosidl_runtime_c__String__fini>
 8019fc4:	4770      	bx	lr
 8019fc6:	bf00      	nop

08019fc8 <builtin_interfaces__msg__Time__init>:
 8019fc8:	3800      	subs	r0, #0
 8019fca:	bf18      	it	ne
 8019fcc:	2001      	movne	r0, #1
 8019fce:	4770      	bx	lr

08019fd0 <builtin_interfaces__msg__Time__fini>:
 8019fd0:	4770      	bx	lr
 8019fd2:	bf00      	nop
 8019fd4:	0000      	movs	r0, r0
	...

08019fd8 <geometry_msgs__msg__Quaternion__init>:
 8019fd8:	b160      	cbz	r0, 8019ff4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8019fda:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019ff8 <geometry_msgs__msg__Quaternion__init+0x20>
 8019fde:	2200      	movs	r2, #0
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	e9c0 2300 	strd	r2, r3, [r0]
 8019fe6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019fea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019fee:	ed80 7b06 	vstr	d7, [r0, #24]
 8019ff2:	2001      	movs	r0, #1
 8019ff4:	4770      	bx	lr
 8019ff6:	bf00      	nop
 8019ff8:	00000000 	.word	0x00000000
 8019ffc:	3ff00000 	.word	0x3ff00000

0801a000 <geometry_msgs__msg__Quaternion__fini>:
 801a000:	4770      	bx	lr
 801a002:	bf00      	nop

0801a004 <ucdr_serialize_string>:
 801a004:	b510      	push	{r4, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	4604      	mov	r4, r0
 801a00a:	4608      	mov	r0, r1
 801a00c:	9101      	str	r1, [sp, #4]
 801a00e:	f7e6 f911 	bl	8000234 <strlen>
 801a012:	9901      	ldr	r1, [sp, #4]
 801a014:	1c42      	adds	r2, r0, #1
 801a016:	4620      	mov	r0, r4
 801a018:	b002      	add	sp, #8
 801a01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a01e:	f7f8 b9cb 	b.w	80123b8 <ucdr_serialize_sequence_char>
 801a022:	bf00      	nop

0801a024 <ucdr_deserialize_string>:
 801a024:	b500      	push	{lr}
 801a026:	b083      	sub	sp, #12
 801a028:	ab01      	add	r3, sp, #4
 801a02a:	f7f8 f9d7 	bl	80123dc <ucdr_deserialize_sequence_char>
 801a02e:	b003      	add	sp, #12
 801a030:	f85d fb04 	ldr.w	pc, [sp], #4

0801a034 <uxr_init_input_best_effort_stream>:
 801a034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a038:	8003      	strh	r3, [r0, #0]
 801a03a:	4770      	bx	lr

0801a03c <uxr_reset_input_best_effort_stream>:
 801a03c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a040:	8003      	strh	r3, [r0, #0]
 801a042:	4770      	bx	lr

0801a044 <uxr_receive_best_effort_message>:
 801a044:	b538      	push	{r3, r4, r5, lr}
 801a046:	4604      	mov	r4, r0
 801a048:	8800      	ldrh	r0, [r0, #0]
 801a04a:	460d      	mov	r5, r1
 801a04c:	f000 fd42 	bl	801aad4 <uxr_seq_num_cmp>
 801a050:	4603      	mov	r3, r0
 801a052:	2b00      	cmp	r3, #0
 801a054:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a058:	bfb8      	it	lt
 801a05a:	8025      	strhlt	r5, [r4, #0]
 801a05c:	bd38      	pop	{r3, r4, r5, pc}
 801a05e:	bf00      	nop

0801a060 <on_full_input_buffer>:
 801a060:	b570      	push	{r4, r5, r6, lr}
 801a062:	4605      	mov	r5, r0
 801a064:	460c      	mov	r4, r1
 801a066:	682b      	ldr	r3, [r5, #0]
 801a068:	6809      	ldr	r1, [r1, #0]
 801a06a:	8920      	ldrh	r0, [r4, #8]
 801a06c:	6862      	ldr	r2, [r4, #4]
 801a06e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a072:	eba3 0c01 	sub.w	ip, r3, r1
 801a076:	fbbc fcf2 	udiv	ip, ip, r2
 801a07a:	f10c 0c01 	add.w	ip, ip, #1
 801a07e:	fa1f f38c 	uxth.w	r3, ip
 801a082:	fbb3 f6f0 	udiv	r6, r3, r0
 801a086:	fb00 3316 	mls	r3, r0, r6, r3
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	fb02 f303 	mul.w	r3, r2, r3
 801a090:	1d18      	adds	r0, r3, #4
 801a092:	4408      	add	r0, r1
 801a094:	7d26      	ldrb	r6, [r4, #20]
 801a096:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a09a:	b116      	cbz	r6, 801a0a2 <on_full_input_buffer+0x42>
 801a09c:	2600      	movs	r6, #0
 801a09e:	f840 6c04 	str.w	r6, [r0, #-4]
 801a0a2:	2a03      	cmp	r2, #3
 801a0a4:	d801      	bhi.n	801a0aa <on_full_input_buffer+0x4a>
 801a0a6:	2001      	movs	r0, #1
 801a0a8:	bd70      	pop	{r4, r5, r6, pc}
 801a0aa:	3308      	adds	r3, #8
 801a0ac:	4419      	add	r1, r3
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	692b      	ldr	r3, [r5, #16]
 801a0b2:	3a04      	subs	r2, #4
 801a0b4:	f7f4 fc40 	bl	800e938 <ucdr_init_buffer_origin>
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	4903      	ldr	r1, [pc, #12]	@ (801a0c8 <on_full_input_buffer+0x68>)
 801a0bc:	4622      	mov	r2, r4
 801a0be:	f7f4 fc17 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 801a0c2:	2000      	movs	r0, #0
 801a0c4:	bd70      	pop	{r4, r5, r6, pc}
 801a0c6:	bf00      	nop
 801a0c8:	0801a061 	.word	0x0801a061

0801a0cc <uxr_init_input_reliable_stream>:
 801a0cc:	b500      	push	{lr}
 801a0ce:	e9c0 1200 	strd	r1, r2, [r0]
 801a0d2:	f04f 0e00 	mov.w	lr, #0
 801a0d6:	9a01      	ldr	r2, [sp, #4]
 801a0d8:	8103      	strh	r3, [r0, #8]
 801a0da:	6102      	str	r2, [r0, #16]
 801a0dc:	f880 e014 	strb.w	lr, [r0, #20]
 801a0e0:	b1d3      	cbz	r3, 801a118 <uxr_init_input_reliable_stream+0x4c>
 801a0e2:	f8c1 e000 	str.w	lr, [r1]
 801a0e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a0ea:	f1bc 0f01 	cmp.w	ip, #1
 801a0ee:	d913      	bls.n	801a118 <uxr_init_input_reliable_stream+0x4c>
 801a0f0:	2301      	movs	r3, #1
 801a0f2:	fbb3 f1fc 	udiv	r1, r3, ip
 801a0f6:	fb0c 3111 	mls	r1, ip, r1, r3
 801a0fa:	b289      	uxth	r1, r1
 801a0fc:	6842      	ldr	r2, [r0, #4]
 801a0fe:	fbb2 f2fc 	udiv	r2, r2, ip
 801a102:	fb01 f202 	mul.w	r2, r1, r2
 801a106:	6801      	ldr	r1, [r0, #0]
 801a108:	f841 e002 	str.w	lr, [r1, r2]
 801a10c:	3301      	adds	r3, #1
 801a10e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a112:	b29b      	uxth	r3, r3
 801a114:	459c      	cmp	ip, r3
 801a116:	d8ec      	bhi.n	801a0f2 <uxr_init_input_reliable_stream+0x26>
 801a118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a11c:	60c3      	str	r3, [r0, #12]
 801a11e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a122:	bf00      	nop

0801a124 <uxr_reset_input_reliable_stream>:
 801a124:	8901      	ldrh	r1, [r0, #8]
 801a126:	b1e9      	cbz	r1, 801a164 <uxr_reset_input_reliable_stream+0x40>
 801a128:	f04f 0c00 	mov.w	ip, #0
 801a12c:	b500      	push	{lr}
 801a12e:	4663      	mov	r3, ip
 801a130:	46e6      	mov	lr, ip
 801a132:	fbb3 f2f1 	udiv	r2, r3, r1
 801a136:	fb01 3312 	mls	r3, r1, r2, r3
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	6842      	ldr	r2, [r0, #4]
 801a13e:	fbb2 f2f1 	udiv	r2, r2, r1
 801a142:	fb02 f303 	mul.w	r3, r2, r3
 801a146:	6802      	ldr	r2, [r0, #0]
 801a148:	f842 e003 	str.w	lr, [r2, r3]
 801a14c:	f10c 0c01 	add.w	ip, ip, #1
 801a150:	8901      	ldrh	r1, [r0, #8]
 801a152:	fa1f f38c 	uxth.w	r3, ip
 801a156:	4299      	cmp	r1, r3
 801a158:	d8eb      	bhi.n	801a132 <uxr_reset_input_reliable_stream+0xe>
 801a15a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a15e:	60c3      	str	r3, [r0, #12]
 801a160:	f85d fb04 	ldr.w	pc, [sp], #4
 801a164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a168:	60c3      	str	r3, [r0, #12]
 801a16a:	4770      	bx	lr

0801a16c <uxr_receive_reliable_message>:
 801a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a170:	4604      	mov	r4, r0
 801a172:	460d      	mov	r5, r1
 801a174:	8901      	ldrh	r1, [r0, #8]
 801a176:	8980      	ldrh	r0, [r0, #12]
 801a178:	4690      	mov	r8, r2
 801a17a:	461f      	mov	r7, r3
 801a17c:	f000 fca2 	bl	801aac4 <uxr_seq_num_add>
 801a180:	4629      	mov	r1, r5
 801a182:	4606      	mov	r6, r0
 801a184:	89a0      	ldrh	r0, [r4, #12]
 801a186:	f000 fca5 	bl	801aad4 <uxr_seq_num_cmp>
 801a18a:	2800      	cmp	r0, #0
 801a18c:	db0a      	blt.n	801a1a4 <uxr_receive_reliable_message+0x38>
 801a18e:	2600      	movs	r6, #0
 801a190:	89e0      	ldrh	r0, [r4, #14]
 801a192:	4629      	mov	r1, r5
 801a194:	f000 fc9e 	bl	801aad4 <uxr_seq_num_cmp>
 801a198:	2800      	cmp	r0, #0
 801a19a:	da00      	bge.n	801a19e <uxr_receive_reliable_message+0x32>
 801a19c:	81e5      	strh	r5, [r4, #14]
 801a19e:	4630      	mov	r0, r6
 801a1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	4629      	mov	r1, r5
 801a1a8:	f000 fc94 	bl	801aad4 <uxr_seq_num_cmp>
 801a1ac:	2800      	cmp	r0, #0
 801a1ae:	dbee      	blt.n	801a18e <uxr_receive_reliable_message+0x22>
 801a1b0:	6923      	ldr	r3, [r4, #16]
 801a1b2:	4640      	mov	r0, r8
 801a1b4:	4798      	blx	r3
 801a1b6:	2101      	movs	r1, #1
 801a1b8:	4681      	mov	r9, r0
 801a1ba:	89a0      	ldrh	r0, [r4, #12]
 801a1bc:	f000 fc82 	bl	801aac4 <uxr_seq_num_add>
 801a1c0:	f1b9 0f00 	cmp.w	r9, #0
 801a1c4:	d101      	bne.n	801a1ca <uxr_receive_reliable_message+0x5e>
 801a1c6:	4285      	cmp	r5, r0
 801a1c8:	d047      	beq.n	801a25a <uxr_receive_reliable_message+0xee>
 801a1ca:	8922      	ldrh	r2, [r4, #8]
 801a1cc:	fbb5 f0f2 	udiv	r0, r5, r2
 801a1d0:	fb02 5010 	mls	r0, r2, r0, r5
 801a1d4:	b280      	uxth	r0, r0
 801a1d6:	6863      	ldr	r3, [r4, #4]
 801a1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 801a1dc:	fb00 f303 	mul.w	r3, r0, r3
 801a1e0:	6820      	ldr	r0, [r4, #0]
 801a1e2:	3304      	adds	r3, #4
 801a1e4:	4418      	add	r0, r3
 801a1e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d1cf      	bne.n	801a18e <uxr_receive_reliable_message+0x22>
 801a1ee:	4641      	mov	r1, r8
 801a1f0:	463a      	mov	r2, r7
 801a1f2:	f001 fe48 	bl	801be86 <memcpy>
 801a1f6:	8921      	ldrh	r1, [r4, #8]
 801a1f8:	fbb5 f2f1 	udiv	r2, r5, r1
 801a1fc:	fb01 5212 	mls	r2, r1, r2, r5
 801a200:	b292      	uxth	r2, r2
 801a202:	6863      	ldr	r3, [r4, #4]
 801a204:	fbb3 f3f1 	udiv	r3, r3, r1
 801a208:	fb02 f303 	mul.w	r3, r2, r3
 801a20c:	6822      	ldr	r2, [r4, #0]
 801a20e:	50d7      	str	r7, [r2, r3]
 801a210:	9a08      	ldr	r2, [sp, #32]
 801a212:	2301      	movs	r3, #1
 801a214:	7013      	strb	r3, [r2, #0]
 801a216:	f1b9 0f00 	cmp.w	r9, #0
 801a21a:	d0b8      	beq.n	801a18e <uxr_receive_reliable_message+0x22>
 801a21c:	89a6      	ldrh	r6, [r4, #12]
 801a21e:	4630      	mov	r0, r6
 801a220:	2101      	movs	r1, #1
 801a222:	f000 fc4f 	bl	801aac4 <uxr_seq_num_add>
 801a226:	8922      	ldrh	r2, [r4, #8]
 801a228:	6863      	ldr	r3, [r4, #4]
 801a22a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a22e:	4606      	mov	r6, r0
 801a230:	fbb0 f0f2 	udiv	r0, r0, r2
 801a234:	fb02 6010 	mls	r0, r2, r0, r6
 801a238:	b280      	uxth	r0, r0
 801a23a:	fb00 f303 	mul.w	r3, r0, r3
 801a23e:	6820      	ldr	r0, [r4, #0]
 801a240:	3304      	adds	r3, #4
 801a242:	4418      	add	r0, r3
 801a244:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d0a0      	beq.n	801a18e <uxr_receive_reliable_message+0x22>
 801a24c:	6923      	ldr	r3, [r4, #16]
 801a24e:	4798      	blx	r3
 801a250:	2802      	cmp	r0, #2
 801a252:	d008      	beq.n	801a266 <uxr_receive_reliable_message+0xfa>
 801a254:	2801      	cmp	r0, #1
 801a256:	d0e2      	beq.n	801a21e <uxr_receive_reliable_message+0xb2>
 801a258:	e799      	b.n	801a18e <uxr_receive_reliable_message+0x22>
 801a25a:	9b08      	ldr	r3, [sp, #32]
 801a25c:	81a5      	strh	r5, [r4, #12]
 801a25e:	2601      	movs	r6, #1
 801a260:	f883 9000 	strb.w	r9, [r3]
 801a264:	e794      	b.n	801a190 <uxr_receive_reliable_message+0x24>
 801a266:	2601      	movs	r6, #1
 801a268:	e792      	b.n	801a190 <uxr_receive_reliable_message+0x24>
 801a26a:	bf00      	nop

0801a26c <uxr_next_input_reliable_buffer_available>:
 801a26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a270:	4604      	mov	r4, r0
 801a272:	460f      	mov	r7, r1
 801a274:	8980      	ldrh	r0, [r0, #12]
 801a276:	2101      	movs	r1, #1
 801a278:	4690      	mov	r8, r2
 801a27a:	f000 fc23 	bl	801aac4 <uxr_seq_num_add>
 801a27e:	8922      	ldrh	r2, [r4, #8]
 801a280:	fbb0 f6f2 	udiv	r6, r0, r2
 801a284:	fb02 0616 	mls	r6, r2, r6, r0
 801a288:	b2b6      	uxth	r6, r6
 801a28a:	6863      	ldr	r3, [r4, #4]
 801a28c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a290:	fb06 f303 	mul.w	r3, r6, r3
 801a294:	6826      	ldr	r6, [r4, #0]
 801a296:	3304      	adds	r3, #4
 801a298:	441e      	add	r6, r3
 801a29a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a29e:	f1b9 0f00 	cmp.w	r9, #0
 801a2a2:	d023      	beq.n	801a2ec <uxr_next_input_reliable_buffer_available+0x80>
 801a2a4:	6923      	ldr	r3, [r4, #16]
 801a2a6:	4605      	mov	r5, r0
 801a2a8:	4630      	mov	r0, r6
 801a2aa:	4798      	blx	r3
 801a2ac:	4682      	mov	sl, r0
 801a2ae:	b300      	cbz	r0, 801a2f2 <uxr_next_input_reliable_buffer_available+0x86>
 801a2b0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a2b4:	2101      	movs	r1, #1
 801a2b6:	4650      	mov	r0, sl
 801a2b8:	f000 fc04 	bl	801aac4 <uxr_seq_num_add>
 801a2bc:	8921      	ldrh	r1, [r4, #8]
 801a2be:	fbb0 f2f1 	udiv	r2, r0, r1
 801a2c2:	4682      	mov	sl, r0
 801a2c4:	fb01 0212 	mls	r2, r1, r2, r0
 801a2c8:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a2cc:	b292      	uxth	r2, r2
 801a2ce:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2d2:	fb02 f303 	mul.w	r3, r2, r3
 801a2d6:	3304      	adds	r3, #4
 801a2d8:	4418      	add	r0, r3
 801a2da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a2de:	b12b      	cbz	r3, 801a2ec <uxr_next_input_reliable_buffer_available+0x80>
 801a2e0:	6923      	ldr	r3, [r4, #16]
 801a2e2:	4798      	blx	r3
 801a2e4:	2802      	cmp	r0, #2
 801a2e6:	d01b      	beq.n	801a320 <uxr_next_input_reliable_buffer_available+0xb4>
 801a2e8:	2801      	cmp	r0, #1
 801a2ea:	d0e3      	beq.n	801a2b4 <uxr_next_input_reliable_buffer_available+0x48>
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f2:	464a      	mov	r2, r9
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	4638      	mov	r0, r7
 801a2f8:	f7f4 fb26 	bl	800e948 <ucdr_init_buffer>
 801a2fc:	8921      	ldrh	r1, [r4, #8]
 801a2fe:	fbb5 f2f1 	udiv	r2, r5, r1
 801a302:	fb01 5212 	mls	r2, r1, r2, r5
 801a306:	b292      	uxth	r2, r2
 801a308:	6863      	ldr	r3, [r4, #4]
 801a30a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a30e:	fb02 f303 	mul.w	r3, r2, r3
 801a312:	6822      	ldr	r2, [r4, #0]
 801a314:	f842 a003 	str.w	sl, [r2, r3]
 801a318:	2001      	movs	r0, #1
 801a31a:	81a5      	strh	r5, [r4, #12]
 801a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a320:	8920      	ldrh	r0, [r4, #8]
 801a322:	fbb5 f3f0 	udiv	r3, r5, r0
 801a326:	fb00 5513 	mls	r5, r0, r3, r5
 801a32a:	b2ad      	uxth	r5, r5
 801a32c:	6863      	ldr	r3, [r4, #4]
 801a32e:	fbb3 f3f0 	udiv	r3, r3, r0
 801a332:	fb03 f505 	mul.w	r5, r3, r5
 801a336:	6823      	ldr	r3, [r4, #0]
 801a338:	2000      	movs	r0, #0
 801a33a:	5158      	str	r0, [r3, r5]
 801a33c:	eb06 0108 	add.w	r1, r6, r8
 801a340:	eba9 0208 	sub.w	r2, r9, r8
 801a344:	4638      	mov	r0, r7
 801a346:	f7f4 faff 	bl	800e948 <ucdr_init_buffer>
 801a34a:	4638      	mov	r0, r7
 801a34c:	4903      	ldr	r1, [pc, #12]	@ (801a35c <uxr_next_input_reliable_buffer_available+0xf0>)
 801a34e:	4622      	mov	r2, r4
 801a350:	f7f4 face 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 801a354:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a358:	2001      	movs	r0, #1
 801a35a:	e7c8      	b.n	801a2ee <uxr_next_input_reliable_buffer_available+0x82>
 801a35c:	0801a061 	.word	0x0801a061

0801a360 <uxr_process_heartbeat>:
 801a360:	b538      	push	{r3, r4, r5, lr}
 801a362:	4611      	mov	r1, r2
 801a364:	4604      	mov	r4, r0
 801a366:	89c0      	ldrh	r0, [r0, #14]
 801a368:	4615      	mov	r5, r2
 801a36a:	f000 fbb3 	bl	801aad4 <uxr_seq_num_cmp>
 801a36e:	2800      	cmp	r0, #0
 801a370:	bfb8      	it	lt
 801a372:	81e5      	strhlt	r5, [r4, #14]
 801a374:	bd38      	pop	{r3, r4, r5, pc}
 801a376:	bf00      	nop

0801a378 <uxr_compute_acknack>:
 801a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a37c:	8903      	ldrh	r3, [r0, #8]
 801a37e:	8985      	ldrh	r5, [r0, #12]
 801a380:	4604      	mov	r4, r0
 801a382:	460e      	mov	r6, r1
 801a384:	b1d3      	cbz	r3, 801a3bc <uxr_compute_acknack+0x44>
 801a386:	4628      	mov	r0, r5
 801a388:	2701      	movs	r7, #1
 801a38a:	e003      	b.n	801a394 <uxr_compute_acknack+0x1c>
 801a38c:	4567      	cmp	r7, ip
 801a38e:	d215      	bcs.n	801a3bc <uxr_compute_acknack+0x44>
 801a390:	89a0      	ldrh	r0, [r4, #12]
 801a392:	3701      	adds	r7, #1
 801a394:	b2b9      	uxth	r1, r7
 801a396:	f000 fb95 	bl	801aac4 <uxr_seq_num_add>
 801a39a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a39e:	fbb0 f3fc 	udiv	r3, r0, ip
 801a3a2:	fb0c 0313 	mls	r3, ip, r3, r0
 801a3a6:	b29a      	uxth	r2, r3
 801a3a8:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a3ac:	fbb3 f3fc 	udiv	r3, r3, ip
 801a3b0:	fb02 f303 	mul.w	r3, r2, r3
 801a3b4:	58cb      	ldr	r3, [r1, r3]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d1e8      	bne.n	801a38c <uxr_compute_acknack+0x14>
 801a3ba:	4605      	mov	r5, r0
 801a3bc:	8035      	strh	r5, [r6, #0]
 801a3be:	2101      	movs	r1, #1
 801a3c0:	4628      	mov	r0, r5
 801a3c2:	89e7      	ldrh	r7, [r4, #14]
 801a3c4:	f000 fb82 	bl	801aacc <uxr_seq_num_sub>
 801a3c8:	4601      	mov	r1, r0
 801a3ca:	4638      	mov	r0, r7
 801a3cc:	f000 fb7e 	bl	801aacc <uxr_seq_num_sub>
 801a3d0:	4605      	mov	r5, r0
 801a3d2:	b318      	cbz	r0, 801a41c <uxr_compute_acknack+0xa4>
 801a3d4:	f04f 0900 	mov.w	r9, #0
 801a3d8:	464f      	mov	r7, r9
 801a3da:	f04f 0801 	mov.w	r8, #1
 801a3de:	fa1f f189 	uxth.w	r1, r9
 801a3e2:	8830      	ldrh	r0, [r6, #0]
 801a3e4:	f000 fb6e 	bl	801aac4 <uxr_seq_num_add>
 801a3e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a3ec:	fbb0 f3fc 	udiv	r3, r0, ip
 801a3f0:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a3f4:	fb03 001c 	mls	r0, r3, ip, r0
 801a3f8:	b283      	uxth	r3, r0
 801a3fa:	fbb2 f2fc 	udiv	r2, r2, ip
 801a3fe:	fb02 f303 	mul.w	r3, r2, r3
 801a402:	fa08 f209 	lsl.w	r2, r8, r9
 801a406:	58cb      	ldr	r3, [r1, r3]
 801a408:	f109 0901 	add.w	r9, r9, #1
 801a40c:	b90b      	cbnz	r3, 801a412 <uxr_compute_acknack+0x9a>
 801a40e:	4317      	orrs	r7, r2
 801a410:	b2bf      	uxth	r7, r7
 801a412:	454d      	cmp	r5, r9
 801a414:	d1e3      	bne.n	801a3de <uxr_compute_acknack+0x66>
 801a416:	4638      	mov	r0, r7
 801a418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a41c:	4607      	mov	r7, r0
 801a41e:	4638      	mov	r0, r7
 801a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a424 <uxr_init_output_best_effort_stream>:
 801a424:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a428:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a42c:	6001      	str	r1, [r0, #0]
 801a42e:	7303      	strb	r3, [r0, #12]
 801a430:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a434:	4770      	bx	lr
 801a436:	bf00      	nop

0801a438 <uxr_reset_output_best_effort_stream>:
 801a438:	7b02      	ldrb	r2, [r0, #12]
 801a43a:	6042      	str	r2, [r0, #4]
 801a43c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a440:	81c3      	strh	r3, [r0, #14]
 801a442:	4770      	bx	lr

0801a444 <uxr_prepare_best_effort_buffer_to_write>:
 801a444:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a446:	4604      	mov	r4, r0
 801a448:	b083      	sub	sp, #12
 801a44a:	6840      	ldr	r0, [r0, #4]
 801a44c:	460d      	mov	r5, r1
 801a44e:	4616      	mov	r6, r2
 801a450:	f7fa fac4 	bl	80149dc <uxr_submessage_padding>
 801a454:	6863      	ldr	r3, [r4, #4]
 801a456:	4418      	add	r0, r3
 801a458:	68a3      	ldr	r3, [r4, #8]
 801a45a:	1942      	adds	r2, r0, r5
 801a45c:	4293      	cmp	r3, r2
 801a45e:	bf2c      	ite	cs
 801a460:	2701      	movcs	r7, #1
 801a462:	2700      	movcc	r7, #0
 801a464:	d202      	bcs.n	801a46c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a466:	4638      	mov	r0, r7
 801a468:	b003      	add	sp, #12
 801a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a46c:	9000      	str	r0, [sp, #0]
 801a46e:	6821      	ldr	r1, [r4, #0]
 801a470:	4630      	mov	r0, r6
 801a472:	2300      	movs	r3, #0
 801a474:	f7f4 fa56 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801a478:	6861      	ldr	r1, [r4, #4]
 801a47a:	4638      	mov	r0, r7
 801a47c:	4429      	add	r1, r5
 801a47e:	6061      	str	r1, [r4, #4]
 801a480:	b003      	add	sp, #12
 801a482:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a484 <uxr_prepare_best_effort_buffer_to_send>:
 801a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a488:	4604      	mov	r4, r0
 801a48a:	461d      	mov	r5, r3
 801a48c:	6840      	ldr	r0, [r0, #4]
 801a48e:	7b23      	ldrb	r3, [r4, #12]
 801a490:	4298      	cmp	r0, r3
 801a492:	bf8c      	ite	hi
 801a494:	2601      	movhi	r6, #1
 801a496:	2600      	movls	r6, #0
 801a498:	d802      	bhi.n	801a4a0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a49a:	4630      	mov	r0, r6
 801a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4a0:	4688      	mov	r8, r1
 801a4a2:	89e0      	ldrh	r0, [r4, #14]
 801a4a4:	2101      	movs	r1, #1
 801a4a6:	4617      	mov	r7, r2
 801a4a8:	f000 fb0c 	bl	801aac4 <uxr_seq_num_add>
 801a4ac:	6823      	ldr	r3, [r4, #0]
 801a4ae:	81e0      	strh	r0, [r4, #14]
 801a4b0:	8028      	strh	r0, [r5, #0]
 801a4b2:	f8c8 3000 	str.w	r3, [r8]
 801a4b6:	6863      	ldr	r3, [r4, #4]
 801a4b8:	603b      	str	r3, [r7, #0]
 801a4ba:	7b23      	ldrb	r3, [r4, #12]
 801a4bc:	6063      	str	r3, [r4, #4]
 801a4be:	4630      	mov	r0, r6
 801a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a4c4 <on_full_output_buffer>:
 801a4c4:	b538      	push	{r3, r4, r5, lr}
 801a4c6:	6802      	ldr	r2, [r0, #0]
 801a4c8:	460c      	mov	r4, r1
 801a4ca:	6809      	ldr	r1, [r1, #0]
 801a4cc:	8923      	ldrh	r3, [r4, #8]
 801a4ce:	eba2 0c01 	sub.w	ip, r2, r1
 801a4d2:	6862      	ldr	r2, [r4, #4]
 801a4d4:	fbb2 f2f3 	udiv	r2, r2, r3
 801a4d8:	fbbc fcf2 	udiv	ip, ip, r2
 801a4dc:	f10c 0c01 	add.w	ip, ip, #1
 801a4e0:	fa1f fc8c 	uxth.w	ip, ip
 801a4e4:	fbbc fef3 	udiv	lr, ip, r3
 801a4e8:	fb03 c31e 	mls	r3, r3, lr, ip
 801a4ec:	b29b      	uxth	r3, r3
 801a4ee:	fb02 f303 	mul.w	r3, r2, r3
 801a4f2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a4f6:	58ca      	ldr	r2, [r1, r3]
 801a4f8:	4463      	add	r3, ip
 801a4fa:	eba2 020c 	sub.w	r2, r2, ip
 801a4fe:	3308      	adds	r3, #8
 801a500:	4605      	mov	r5, r0
 801a502:	4419      	add	r1, r3
 801a504:	3a04      	subs	r2, #4
 801a506:	6903      	ldr	r3, [r0, #16]
 801a508:	f7f4 fa16 	bl	800e938 <ucdr_init_buffer_origin>
 801a50c:	4628      	mov	r0, r5
 801a50e:	4903      	ldr	r1, [pc, #12]	@ (801a51c <on_full_output_buffer+0x58>)
 801a510:	4622      	mov	r2, r4
 801a512:	f7f4 f9ed 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 801a516:	2000      	movs	r0, #0
 801a518:	bd38      	pop	{r3, r4, r5, pc}
 801a51a:	bf00      	nop
 801a51c:	0801a4c5 	.word	0x0801a4c5

0801a520 <uxr_init_output_reliable_stream>:
 801a520:	b410      	push	{r4}
 801a522:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a526:	8103      	strh	r3, [r0, #8]
 801a528:	e9c0 1200 	strd	r1, r2, [r0]
 801a52c:	f880 c00c 	strb.w	ip, [r0, #12]
 801a530:	b1d3      	cbz	r3, 801a568 <uxr_init_output_reliable_stream+0x48>
 801a532:	f8c1 c000 	str.w	ip, [r1]
 801a536:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a53a:	f1bc 0f01 	cmp.w	ip, #1
 801a53e:	d913      	bls.n	801a568 <uxr_init_output_reliable_stream+0x48>
 801a540:	2301      	movs	r3, #1
 801a542:	fbb3 f1fc 	udiv	r1, r3, ip
 801a546:	fb0c 3111 	mls	r1, ip, r1, r3
 801a54a:	b289      	uxth	r1, r1
 801a54c:	6842      	ldr	r2, [r0, #4]
 801a54e:	6804      	ldr	r4, [r0, #0]
 801a550:	fbb2 f2fc 	udiv	r2, r2, ip
 801a554:	fb01 f202 	mul.w	r2, r1, r2
 801a558:	7b01      	ldrb	r1, [r0, #12]
 801a55a:	50a1      	str	r1, [r4, r2]
 801a55c:	3301      	adds	r3, #1
 801a55e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a562:	b29b      	uxth	r3, r3
 801a564:	459c      	cmp	ip, r3
 801a566:	d8ec      	bhi.n	801a542 <uxr_init_output_reliable_stream+0x22>
 801a568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a56c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a570:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a574:	4905      	ldr	r1, [pc, #20]	@ (801a58c <uxr_init_output_reliable_stream+0x6c>)
 801a576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a57a:	f8c0 100e 	str.w	r1, [r0, #14]
 801a57e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a582:	2300      	movs	r3, #0
 801a584:	8242      	strh	r2, [r0, #18]
 801a586:	8403      	strh	r3, [r0, #32]
 801a588:	4770      	bx	lr
 801a58a:	bf00      	nop
 801a58c:	ffff0000 	.word	0xffff0000

0801a590 <uxr_reset_output_reliable_stream>:
 801a590:	8901      	ldrh	r1, [r0, #8]
 801a592:	b1b1      	cbz	r1, 801a5c2 <uxr_reset_output_reliable_stream+0x32>
 801a594:	f04f 0c00 	mov.w	ip, #0
 801a598:	4663      	mov	r3, ip
 801a59a:	fbb3 f2f1 	udiv	r2, r3, r1
 801a59e:	fb01 3312 	mls	r3, r1, r2, r3
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	6842      	ldr	r2, [r0, #4]
 801a5a6:	fbb2 f2f1 	udiv	r2, r2, r1
 801a5aa:	6801      	ldr	r1, [r0, #0]
 801a5ac:	fb02 f303 	mul.w	r3, r2, r3
 801a5b0:	7b02      	ldrb	r2, [r0, #12]
 801a5b2:	50ca      	str	r2, [r1, r3]
 801a5b4:	f10c 0c01 	add.w	ip, ip, #1
 801a5b8:	8901      	ldrh	r1, [r0, #8]
 801a5ba:	fa1f f38c 	uxth.w	r3, ip
 801a5be:	4299      	cmp	r1, r3
 801a5c0:	d8eb      	bhi.n	801a59a <uxr_reset_output_reliable_stream+0xa>
 801a5c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a5c6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a5ca:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a5ce:	4904      	ldr	r1, [pc, #16]	@ (801a5e0 <uxr_reset_output_reliable_stream+0x50>)
 801a5d0:	f8c0 100e 	str.w	r1, [r0, #14]
 801a5d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a5d8:	2300      	movs	r3, #0
 801a5da:	8242      	strh	r2, [r0, #18]
 801a5dc:	8403      	strh	r3, [r0, #32]
 801a5de:	4770      	bx	lr
 801a5e0:	ffff0000 	.word	0xffff0000

0801a5e4 <uxr_prepare_reliable_buffer_to_write>:
 801a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	b091      	sub	sp, #68	@ 0x44
 801a5ec:	8900      	ldrh	r0, [r0, #8]
 801a5ee:	89e6      	ldrh	r6, [r4, #14]
 801a5f0:	6823      	ldr	r3, [r4, #0]
 801a5f2:	9204      	str	r2, [sp, #16]
 801a5f4:	fbb6 f2f0 	udiv	r2, r6, r0
 801a5f8:	fb00 6212 	mls	r2, r0, r2, r6
 801a5fc:	b292      	uxth	r2, r2
 801a5fe:	6865      	ldr	r5, [r4, #4]
 801a600:	fbb5 f5f0 	udiv	r5, r5, r0
 801a604:	fb05 3202 	mla	r2, r5, r2, r3
 801a608:	3204      	adds	r2, #4
 801a60a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a60e:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a612:	9203      	str	r2, [sp, #12]
 801a614:	468b      	mov	fp, r1
 801a616:	1f2f      	subs	r7, r5, #4
 801a618:	2800      	cmp	r0, #0
 801a61a:	f000 814c 	beq.w	801a8b6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a61e:	f04f 0c00 	mov.w	ip, #0
 801a622:	46e2      	mov	sl, ip
 801a624:	4661      	mov	r1, ip
 801a626:	fbb1 f2f0 	udiv	r2, r1, r0
 801a62a:	fb00 1212 	mls	r2, r0, r2, r1
 801a62e:	b292      	uxth	r2, r2
 801a630:	fb05 f202 	mul.w	r2, r5, r2
 801a634:	f10c 0c01 	add.w	ip, ip, #1
 801a638:	589a      	ldr	r2, [r3, r2]
 801a63a:	454a      	cmp	r2, r9
 801a63c:	bf08      	it	eq
 801a63e:	f10a 0a01 	addeq.w	sl, sl, #1
 801a642:	fa1f f18c 	uxth.w	r1, ip
 801a646:	bf08      	it	eq
 801a648:	fa1f fa8a 	uxtheq.w	sl, sl
 801a64c:	4281      	cmp	r1, r0
 801a64e:	d3ea      	bcc.n	801a626 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a650:	4640      	mov	r0, r8
 801a652:	2104      	movs	r1, #4
 801a654:	f8cd a014 	str.w	sl, [sp, #20]
 801a658:	f7f4 f97a 	bl	800e950 <ucdr_alignment>
 801a65c:	4480      	add	r8, r0
 801a65e:	eb08 020b 	add.w	r2, r8, fp
 801a662:	42ba      	cmp	r2, r7
 801a664:	f240 80cd 	bls.w	801a802 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a668:	7b22      	ldrb	r2, [r4, #12]
 801a66a:	445a      	add	r2, fp
 801a66c:	42ba      	cmp	r2, r7
 801a66e:	f240 80b5 	bls.w	801a7dc <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a672:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a676:	33fc      	adds	r3, #252	@ 0xfc
 801a678:	b2ba      	uxth	r2, r7
 801a67a:	4413      	add	r3, r2
 801a67c:	b29b      	uxth	r3, r3
 801a67e:	fb0a f903 	mul.w	r9, sl, r3
 801a682:	45d9      	cmp	r9, fp
 801a684:	9305      	str	r3, [sp, #20]
 801a686:	9306      	str	r3, [sp, #24]
 801a688:	f0c0 80b7 	bcc.w	801a7fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801a68c:	f108 0304 	add.w	r3, r8, #4
 801a690:	42bb      	cmp	r3, r7
 801a692:	f080 80db 	bcs.w	801a84c <uxr_prepare_reliable_buffer_to_write+0x268>
 801a696:	f1a2 0904 	sub.w	r9, r2, #4
 801a69a:	eba9 0908 	sub.w	r9, r9, r8
 801a69e:	9b05      	ldr	r3, [sp, #20]
 801a6a0:	fa1f f989 	uxth.w	r9, r9
 801a6a4:	ebab 0b09 	sub.w	fp, fp, r9
 801a6a8:	fbbb f2f3 	udiv	r2, fp, r3
 801a6ac:	fb03 b312 	mls	r3, r3, r2, fp
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	f000 80c8 	beq.w	801a846 <uxr_prepare_reliable_buffer_to_write+0x262>
 801a6b6:	3201      	adds	r2, #1
 801a6b8:	b292      	uxth	r2, r2
 801a6ba:	9306      	str	r3, [sp, #24]
 801a6bc:	4552      	cmp	r2, sl
 801a6be:	f200 809c 	bhi.w	801a7fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801a6c2:	f10d 0b20 	add.w	fp, sp, #32
 801a6c6:	2a00      	cmp	r2, #0
 801a6c8:	d042      	beq.n	801a750 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a6ca:	f8cd 801c 	str.w	r8, [sp, #28]
 801a6ce:	f04f 0a00 	mov.w	sl, #0
 801a6d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a6d6:	9505      	str	r5, [sp, #20]
 801a6d8:	f10d 0b20 	add.w	fp, sp, #32
 801a6dc:	4615      	mov	r5, r2
 801a6de:	e000      	b.n	801a6e2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a6e0:	46c1      	mov	r9, r8
 801a6e2:	8920      	ldrh	r0, [r4, #8]
 801a6e4:	fbb6 f2f0 	udiv	r2, r6, r0
 801a6e8:	fb00 6112 	mls	r1, r0, r2, r6
 801a6ec:	b28a      	uxth	r2, r1
 801a6ee:	6863      	ldr	r3, [r4, #4]
 801a6f0:	fbb3 f1f0 	udiv	r1, r3, r0
 801a6f4:	6823      	ldr	r3, [r4, #0]
 801a6f6:	fb02 f101 	mul.w	r1, r2, r1
 801a6fa:	3104      	adds	r1, #4
 801a6fc:	4419      	add	r1, r3
 801a6fe:	4658      	mov	r0, fp
 801a700:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a704:	9200      	str	r2, [sp, #0]
 801a706:	2300      	movs	r3, #0
 801a708:	463a      	mov	r2, r7
 801a70a:	f7f4 f90b 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801a70e:	464a      	mov	r2, r9
 801a710:	2300      	movs	r3, #0
 801a712:	210d      	movs	r1, #13
 801a714:	4658      	mov	r0, fp
 801a716:	f7fa f921 	bl	801495c <uxr_buffer_submessage_header>
 801a71a:	8921      	ldrh	r1, [r4, #8]
 801a71c:	fbb6 f2f1 	udiv	r2, r6, r1
 801a720:	fb01 6212 	mls	r2, r1, r2, r6
 801a724:	b292      	uxth	r2, r2
 801a726:	6863      	ldr	r3, [r4, #4]
 801a728:	fbb3 f3f1 	udiv	r3, r3, r1
 801a72c:	fb02 f303 	mul.w	r3, r2, r3
 801a730:	6822      	ldr	r2, [r4, #0]
 801a732:	4630      	mov	r0, r6
 801a734:	50d7      	str	r7, [r2, r3]
 801a736:	2101      	movs	r1, #1
 801a738:	f000 f9c4 	bl	801aac4 <uxr_seq_num_add>
 801a73c:	f10a 0a01 	add.w	sl, sl, #1
 801a740:	fa1f f38a 	uxth.w	r3, sl
 801a744:	429d      	cmp	r5, r3
 801a746:	4606      	mov	r6, r0
 801a748:	d8ca      	bhi.n	801a6e0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a74a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a74e:	9d05      	ldr	r5, [sp, #20]
 801a750:	8920      	ldrh	r0, [r4, #8]
 801a752:	fbb6 f3f0 	udiv	r3, r6, r0
 801a756:	fb00 6313 	mls	r3, r0, r3, r6
 801a75a:	b299      	uxth	r1, r3
 801a75c:	6863      	ldr	r3, [r4, #4]
 801a75e:	fbb3 f3f0 	udiv	r3, r3, r0
 801a762:	fb01 f303 	mul.w	r3, r1, r3
 801a766:	6821      	ldr	r1, [r4, #0]
 801a768:	3304      	adds	r3, #4
 801a76a:	4419      	add	r1, r3
 801a76c:	463a      	mov	r2, r7
 801a76e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a772:	9000      	str	r0, [sp, #0]
 801a774:	2300      	movs	r3, #0
 801a776:	4658      	mov	r0, fp
 801a778:	f7f4 f8d4 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801a77c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a780:	4658      	mov	r0, fp
 801a782:	fa1f f289 	uxth.w	r2, r9
 801a786:	2302      	movs	r3, #2
 801a788:	210d      	movs	r1, #13
 801a78a:	f7fa f8e7 	bl	801495c <uxr_buffer_submessage_header>
 801a78e:	9b03      	ldr	r3, [sp, #12]
 801a790:	8927      	ldrh	r7, [r4, #8]
 801a792:	7b20      	ldrb	r0, [r4, #12]
 801a794:	f108 0104 	add.w	r1, r8, #4
 801a798:	440b      	add	r3, r1
 801a79a:	4619      	mov	r1, r3
 801a79c:	fbb6 f3f7 	udiv	r3, r6, r7
 801a7a0:	fb07 6313 	mls	r3, r7, r3, r6
 801a7a4:	f1a5 0208 	sub.w	r2, r5, #8
 801a7a8:	b29d      	uxth	r5, r3
 801a7aa:	3004      	adds	r0, #4
 801a7ac:	6863      	ldr	r3, [r4, #4]
 801a7ae:	fbb3 f3f7 	udiv	r3, r3, r7
 801a7b2:	fb05 f303 	mul.w	r3, r5, r3
 801a7b6:	6825      	ldr	r5, [r4, #0]
 801a7b8:	4448      	add	r0, r9
 801a7ba:	50e8      	str	r0, [r5, r3]
 801a7bc:	9d04      	ldr	r5, [sp, #16]
 801a7be:	eba2 0208 	sub.w	r2, r2, r8
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	f7f4 f8c0 	bl	800e948 <ucdr_init_buffer>
 801a7c8:	4628      	mov	r0, r5
 801a7ca:	493c      	ldr	r1, [pc, #240]	@ (801a8bc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a7cc:	4622      	mov	r2, r4
 801a7ce:	f7f4 f88f 	bl	800e8f0 <ucdr_set_on_full_buffer_callback>
 801a7d2:	2001      	movs	r0, #1
 801a7d4:	81e6      	strh	r6, [r4, #14]
 801a7d6:	b011      	add	sp, #68	@ 0x44
 801a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7dc:	2101      	movs	r1, #1
 801a7de:	89e0      	ldrh	r0, [r4, #14]
 801a7e0:	f000 f970 	bl	801aac4 <uxr_seq_num_add>
 801a7e4:	8921      	ldrh	r1, [r4, #8]
 801a7e6:	4605      	mov	r5, r0
 801a7e8:	8a60      	ldrh	r0, [r4, #18]
 801a7ea:	f000 f96b 	bl	801aac4 <uxr_seq_num_add>
 801a7ee:	4601      	mov	r1, r0
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	f000 f96f 	bl	801aad4 <uxr_seq_num_cmp>
 801a7f6:	2800      	cmp	r0, #0
 801a7f8:	dd42      	ble.n	801a880 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a7fa:	2000      	movs	r0, #0
 801a7fc:	b011      	add	sp, #68	@ 0x44
 801a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a802:	8921      	ldrh	r1, [r4, #8]
 801a804:	8a60      	ldrh	r0, [r4, #18]
 801a806:	9205      	str	r2, [sp, #20]
 801a808:	f000 f95c 	bl	801aac4 <uxr_seq_num_add>
 801a80c:	4601      	mov	r1, r0
 801a80e:	4630      	mov	r0, r6
 801a810:	f000 f960 	bl	801aad4 <uxr_seq_num_cmp>
 801a814:	2800      	cmp	r0, #0
 801a816:	9a05      	ldr	r2, [sp, #20]
 801a818:	dcef      	bgt.n	801a7fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801a81a:	8927      	ldrh	r7, [r4, #8]
 801a81c:	fbb6 f3f7 	udiv	r3, r6, r7
 801a820:	fb07 6313 	mls	r3, r7, r3, r6
 801a824:	b29d      	uxth	r5, r3
 801a826:	6863      	ldr	r3, [r4, #4]
 801a828:	6824      	ldr	r4, [r4, #0]
 801a82a:	fbb3 f3f7 	udiv	r3, r3, r7
 801a82e:	fb05 f303 	mul.w	r3, r5, r3
 801a832:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a836:	50e2      	str	r2, [r4, r3]
 801a838:	2300      	movs	r3, #0
 801a83a:	f8cd 8000 	str.w	r8, [sp]
 801a83e:	f7f4 f871 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801a842:	2001      	movs	r0, #1
 801a844:	e7da      	b.n	801a7fc <uxr_prepare_reliable_buffer_to_write+0x218>
 801a846:	b293      	uxth	r3, r2
 801a848:	461a      	mov	r2, r3
 801a84a:	e737      	b.n	801a6bc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a84c:	4630      	mov	r0, r6
 801a84e:	2101      	movs	r1, #1
 801a850:	9207      	str	r2, [sp, #28]
 801a852:	f000 f937 	bl	801aac4 <uxr_seq_num_add>
 801a856:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a85a:	fbb0 f1fc 	udiv	r1, r0, ip
 801a85e:	fb0c 0111 	mls	r1, ip, r1, r0
 801a862:	4606      	mov	r6, r0
 801a864:	b288      	uxth	r0, r1
 801a866:	6863      	ldr	r3, [r4, #4]
 801a868:	fbb3 f1fc 	udiv	r1, r3, ip
 801a86c:	6823      	ldr	r3, [r4, #0]
 801a86e:	9a07      	ldr	r2, [sp, #28]
 801a870:	fb00 f101 	mul.w	r1, r0, r1
 801a874:	3104      	adds	r1, #4
 801a876:	440b      	add	r3, r1
 801a878:	9303      	str	r3, [sp, #12]
 801a87a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a87e:	e70a      	b.n	801a696 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a880:	8921      	ldrh	r1, [r4, #8]
 801a882:	fbb5 f3f1 	udiv	r3, r5, r1
 801a886:	fb01 5313 	mls	r3, r1, r3, r5
 801a88a:	b29a      	uxth	r2, r3
 801a88c:	6863      	ldr	r3, [r4, #4]
 801a88e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a892:	6821      	ldr	r1, [r4, #0]
 801a894:	9804      	ldr	r0, [sp, #16]
 801a896:	fb02 f303 	mul.w	r3, r2, r3
 801a89a:	3304      	adds	r3, #4
 801a89c:	7b22      	ldrb	r2, [r4, #12]
 801a89e:	4419      	add	r1, r3
 801a8a0:	445a      	add	r2, fp
 801a8a2:	f841 2c04 	str.w	r2, [r1, #-4]
 801a8a6:	7b23      	ldrb	r3, [r4, #12]
 801a8a8:	9300      	str	r3, [sp, #0]
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	f7f4 f83a 	bl	800e924 <ucdr_init_buffer_origin_offset>
 801a8b0:	81e5      	strh	r5, [r4, #14]
 801a8b2:	2001      	movs	r0, #1
 801a8b4:	e7a2      	b.n	801a7fc <uxr_prepare_reliable_buffer_to_write+0x218>
 801a8b6:	4682      	mov	sl, r0
 801a8b8:	e6ca      	b.n	801a650 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a8ba:	bf00      	nop
 801a8bc:	0801a4c5 	.word	0x0801a4c5

0801a8c0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	460f      	mov	r7, r1
 801a8c6:	8a00      	ldrh	r0, [r0, #16]
 801a8c8:	2101      	movs	r1, #1
 801a8ca:	4616      	mov	r6, r2
 801a8cc:	461d      	mov	r5, r3
 801a8ce:	f000 f8f9 	bl	801aac4 <uxr_seq_num_add>
 801a8d2:	8028      	strh	r0, [r5, #0]
 801a8d4:	8922      	ldrh	r2, [r4, #8]
 801a8d6:	fbb0 f3f2 	udiv	r3, r0, r2
 801a8da:	fb02 0c13 	mls	ip, r2, r3, r0
 801a8de:	fa1f fc8c 	uxth.w	ip, ip
 801a8e2:	6863      	ldr	r3, [r4, #4]
 801a8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 801a8e8:	fb0c fc03 	mul.w	ip, ip, r3
 801a8ec:	6823      	ldr	r3, [r4, #0]
 801a8ee:	89e1      	ldrh	r1, [r4, #14]
 801a8f0:	f10c 0c04 	add.w	ip, ip, #4
 801a8f4:	4463      	add	r3, ip
 801a8f6:	603b      	str	r3, [r7, #0]
 801a8f8:	6823      	ldr	r3, [r4, #0]
 801a8fa:	449c      	add	ip, r3
 801a8fc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a900:	6033      	str	r3, [r6, #0]
 801a902:	f000 f8e7 	bl	801aad4 <uxr_seq_num_cmp>
 801a906:	2800      	cmp	r0, #0
 801a908:	dd01      	ble.n	801a90e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a90a:	2000      	movs	r0, #0
 801a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a90e:	7b23      	ldrb	r3, [r4, #12]
 801a910:	6832      	ldr	r2, [r6, #0]
 801a912:	429a      	cmp	r2, r3
 801a914:	d9f9      	bls.n	801a90a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a916:	8a61      	ldrh	r1, [r4, #18]
 801a918:	8a20      	ldrh	r0, [r4, #16]
 801a91a:	f000 f8d7 	bl	801aacc <uxr_seq_num_sub>
 801a91e:	8923      	ldrh	r3, [r4, #8]
 801a920:	4283      	cmp	r3, r0
 801a922:	d0f2      	beq.n	801a90a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a924:	8828      	ldrh	r0, [r5, #0]
 801a926:	89e3      	ldrh	r3, [r4, #14]
 801a928:	8220      	strh	r0, [r4, #16]
 801a92a:	4298      	cmp	r0, r3
 801a92c:	d001      	beq.n	801a932 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a92e:	2001      	movs	r0, #1
 801a930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a932:	2101      	movs	r1, #1
 801a934:	f000 f8c6 	bl	801aac4 <uxr_seq_num_add>
 801a938:	81e0      	strh	r0, [r4, #14]
 801a93a:	2001      	movs	r0, #1
 801a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a93e:	bf00      	nop

0801a940 <uxr_update_output_stream_heartbeat_timestamp>:
 801a940:	b570      	push	{r4, r5, r6, lr}
 801a942:	8a01      	ldrh	r1, [r0, #16]
 801a944:	4604      	mov	r4, r0
 801a946:	8a40      	ldrh	r0, [r0, #18]
 801a948:	4615      	mov	r5, r2
 801a94a:	461e      	mov	r6, r3
 801a94c:	f000 f8c2 	bl	801aad4 <uxr_seq_num_cmp>
 801a950:	2800      	cmp	r0, #0
 801a952:	db07      	blt.n	801a964 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a958:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a95c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a960:	2000      	movs	r0, #0
 801a962:	bd70      	pop	{r4, r5, r6, pc}
 801a964:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a968:	b940      	cbnz	r0, 801a97c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a96a:	2301      	movs	r3, #1
 801a96c:	f884 3020 	strb.w	r3, [r4, #32]
 801a970:	3564      	adds	r5, #100	@ 0x64
 801a972:	f146 0600 	adc.w	r6, r6, #0
 801a976:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a97a:	bd70      	pop	{r4, r5, r6, pc}
 801a97c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a980:	4295      	cmp	r5, r2
 801a982:	eb76 0303 	sbcs.w	r3, r6, r3
 801a986:	bfa5      	ittet	ge
 801a988:	3001      	addge	r0, #1
 801a98a:	f884 0020 	strbge.w	r0, [r4, #32]
 801a98e:	2000      	movlt	r0, #0
 801a990:	2001      	movge	r0, #1
 801a992:	e7ed      	b.n	801a970 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a994 <uxr_begin_output_nack_buffer_it>:
 801a994:	8a40      	ldrh	r0, [r0, #18]
 801a996:	4770      	bx	lr

0801a998 <uxr_next_reliable_nack_buffer_to_send>:
 801a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a99c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a9a0:	b082      	sub	sp, #8
 801a9a2:	f1b8 0f00 	cmp.w	r8, #0
 801a9a6:	d011      	beq.n	801a9cc <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	8818      	ldrh	r0, [r3, #0]
 801a9ac:	460e      	mov	r6, r1
 801a9ae:	4617      	mov	r7, r2
 801a9b0:	461d      	mov	r5, r3
 801a9b2:	2101      	movs	r1, #1
 801a9b4:	f000 f886 	bl	801aac4 <uxr_seq_num_add>
 801a9b8:	8028      	strh	r0, [r5, #0]
 801a9ba:	8a21      	ldrh	r1, [r4, #16]
 801a9bc:	f000 f88a 	bl	801aad4 <uxr_seq_num_cmp>
 801a9c0:	2800      	cmp	r0, #0
 801a9c2:	dd07      	ble.n	801a9d4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a9c4:	f04f 0800 	mov.w	r8, #0
 801a9c8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a9cc:	4640      	mov	r0, r8
 801a9ce:	b002      	add	sp, #8
 801a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9d4:	8921      	ldrh	r1, [r4, #8]
 801a9d6:	8828      	ldrh	r0, [r5, #0]
 801a9d8:	6823      	ldr	r3, [r4, #0]
 801a9da:	fbb0 f2f1 	udiv	r2, r0, r1
 801a9de:	fb01 0c12 	mls	ip, r1, r2, r0
 801a9e2:	fa1f f28c 	uxth.w	r2, ip
 801a9e6:	9301      	str	r3, [sp, #4]
 801a9e8:	6863      	ldr	r3, [r4, #4]
 801a9ea:	fbb3 fcf1 	udiv	ip, r3, r1
 801a9ee:	9b01      	ldr	r3, [sp, #4]
 801a9f0:	fb02 fc0c 	mul.w	ip, r2, ip
 801a9f4:	f10c 0c04 	add.w	ip, ip, #4
 801a9f8:	4463      	add	r3, ip
 801a9fa:	6033      	str	r3, [r6, #0]
 801a9fc:	6823      	ldr	r3, [r4, #0]
 801a9fe:	4463      	add	r3, ip
 801aa00:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801aa04:	603b      	str	r3, [r7, #0]
 801aa06:	7b22      	ldrb	r2, [r4, #12]
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d0d2      	beq.n	801a9b2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801aa0c:	4640      	mov	r0, r8
 801aa0e:	b002      	add	sp, #8
 801aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aa14 <uxr_process_acknack>:
 801aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa16:	4604      	mov	r4, r0
 801aa18:	460e      	mov	r6, r1
 801aa1a:	4610      	mov	r0, r2
 801aa1c:	2101      	movs	r1, #1
 801aa1e:	f000 f855 	bl	801aacc <uxr_seq_num_sub>
 801aa22:	8a61      	ldrh	r1, [r4, #18]
 801aa24:	f000 f852 	bl	801aacc <uxr_seq_num_sub>
 801aa28:	b1c0      	cbz	r0, 801aa5c <uxr_process_acknack+0x48>
 801aa2a:	4605      	mov	r5, r0
 801aa2c:	2700      	movs	r7, #0
 801aa2e:	2101      	movs	r1, #1
 801aa30:	8a60      	ldrh	r0, [r4, #18]
 801aa32:	f000 f847 	bl	801aac4 <uxr_seq_num_add>
 801aa36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801aa3a:	fbb0 f1fc 	udiv	r1, r0, ip
 801aa3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa42:	fb0c 0111 	mls	r1, ip, r1, r0
 801aa46:	b289      	uxth	r1, r1
 801aa48:	3701      	adds	r7, #1
 801aa4a:	fbb3 f3fc 	udiv	r3, r3, ip
 801aa4e:	fb01 f303 	mul.w	r3, r1, r3
 801aa52:	42bd      	cmp	r5, r7
 801aa54:	7b21      	ldrb	r1, [r4, #12]
 801aa56:	8260      	strh	r0, [r4, #18]
 801aa58:	50d1      	str	r1, [r2, r3]
 801aa5a:	d1e8      	bne.n	801aa2e <uxr_process_acknack+0x1a>
 801aa5c:	3e00      	subs	r6, #0
 801aa5e:	f04f 0300 	mov.w	r3, #0
 801aa62:	bf18      	it	ne
 801aa64:	2601      	movne	r6, #1
 801aa66:	f884 3020 	strb.w	r3, [r4, #32]
 801aa6a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa70 <uxr_is_output_up_to_date>:
 801aa70:	8a01      	ldrh	r1, [r0, #16]
 801aa72:	8a40      	ldrh	r0, [r0, #18]
 801aa74:	b508      	push	{r3, lr}
 801aa76:	f000 f82d 	bl	801aad4 <uxr_seq_num_cmp>
 801aa7a:	fab0 f080 	clz	r0, r0
 801aa7e:	0940      	lsrs	r0, r0, #5
 801aa80:	bd08      	pop	{r3, pc}
 801aa82:	bf00      	nop

0801aa84 <get_available_free_slots>:
 801aa84:	8902      	ldrh	r2, [r0, #8]
 801aa86:	b1da      	cbz	r2, 801aac0 <get_available_free_slots+0x3c>
 801aa88:	b530      	push	{r4, r5, lr}
 801aa8a:	2100      	movs	r1, #0
 801aa8c:	6843      	ldr	r3, [r0, #4]
 801aa8e:	6805      	ldr	r5, [r0, #0]
 801aa90:	7b04      	ldrb	r4, [r0, #12]
 801aa92:	fbb3 fef2 	udiv	lr, r3, r2
 801aa96:	4608      	mov	r0, r1
 801aa98:	460b      	mov	r3, r1
 801aa9a:	fbb3 fcf2 	udiv	ip, r3, r2
 801aa9e:	fb02 331c 	mls	r3, r2, ip, r3
 801aaa2:	b29b      	uxth	r3, r3
 801aaa4:	fb0e f303 	mul.w	r3, lr, r3
 801aaa8:	3101      	adds	r1, #1
 801aaaa:	f855 c003 	ldr.w	ip, [r5, r3]
 801aaae:	4564      	cmp	r4, ip
 801aab0:	bf08      	it	eq
 801aab2:	3001      	addeq	r0, #1
 801aab4:	b28b      	uxth	r3, r1
 801aab6:	bf08      	it	eq
 801aab8:	b280      	uxtheq	r0, r0
 801aaba:	4293      	cmp	r3, r2
 801aabc:	d3ed      	bcc.n	801aa9a <get_available_free_slots+0x16>
 801aabe:	bd30      	pop	{r4, r5, pc}
 801aac0:	4610      	mov	r0, r2
 801aac2:	4770      	bx	lr

0801aac4 <uxr_seq_num_add>:
 801aac4:	4408      	add	r0, r1
 801aac6:	b280      	uxth	r0, r0
 801aac8:	4770      	bx	lr
 801aaca:	bf00      	nop

0801aacc <uxr_seq_num_sub>:
 801aacc:	1a40      	subs	r0, r0, r1
 801aace:	b280      	uxth	r0, r0
 801aad0:	4770      	bx	lr
 801aad2:	bf00      	nop

0801aad4 <uxr_seq_num_cmp>:
 801aad4:	4288      	cmp	r0, r1
 801aad6:	d011      	beq.n	801aafc <uxr_seq_num_cmp+0x28>
 801aad8:	d309      	bcc.n	801aaee <uxr_seq_num_cmp+0x1a>
 801aada:	4288      	cmp	r0, r1
 801aadc:	d910      	bls.n	801ab00 <uxr_seq_num_cmp+0x2c>
 801aade:	1a40      	subs	r0, r0, r1
 801aae0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801aae4:	bfd4      	ite	le
 801aae6:	2001      	movle	r0, #1
 801aae8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801aaec:	4770      	bx	lr
 801aaee:	1a0b      	subs	r3, r1, r0
 801aaf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801aaf4:	daf1      	bge.n	801aada <uxr_seq_num_cmp+0x6>
 801aaf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aafa:	4770      	bx	lr
 801aafc:	2000      	movs	r0, #0
 801aafe:	4770      	bx	lr
 801ab00:	2001      	movs	r0, #1
 801ab02:	4770      	bx	lr

0801ab04 <rcl_get_default_domain_id>:
 801ab04:	b530      	push	{r4, r5, lr}
 801ab06:	b083      	sub	sp, #12
 801ab08:	2300      	movs	r3, #0
 801ab0a:	9300      	str	r3, [sp, #0]
 801ab0c:	b1d0      	cbz	r0, 801ab44 <rcl_get_default_domain_id+0x40>
 801ab0e:	4604      	mov	r4, r0
 801ab10:	4669      	mov	r1, sp
 801ab12:	4815      	ldr	r0, [pc, #84]	@ (801ab68 <rcl_get_default_domain_id+0x64>)
 801ab14:	f7fe f814 	bl	8018b40 <rcutils_get_env>
 801ab18:	4602      	mov	r2, r0
 801ab1a:	b110      	cbz	r0, 801ab22 <rcl_get_default_domain_id+0x1e>
 801ab1c:	2001      	movs	r0, #1
 801ab1e:	b003      	add	sp, #12
 801ab20:	bd30      	pop	{r4, r5, pc}
 801ab22:	9b00      	ldr	r3, [sp, #0]
 801ab24:	b18b      	cbz	r3, 801ab4a <rcl_get_default_domain_id+0x46>
 801ab26:	7818      	ldrb	r0, [r3, #0]
 801ab28:	2800      	cmp	r0, #0
 801ab2a:	d0f8      	beq.n	801ab1e <rcl_get_default_domain_id+0x1a>
 801ab2c:	a901      	add	r1, sp, #4
 801ab2e:	4618      	mov	r0, r3
 801ab30:	9201      	str	r2, [sp, #4]
 801ab32:	f000 fe39 	bl	801b7a8 <strtoul>
 801ab36:	4605      	mov	r5, r0
 801ab38:	b150      	cbz	r0, 801ab50 <rcl_get_default_domain_id+0x4c>
 801ab3a:	1c43      	adds	r3, r0, #1
 801ab3c:	d00d      	beq.n	801ab5a <rcl_get_default_domain_id+0x56>
 801ab3e:	6025      	str	r5, [r4, #0]
 801ab40:	2000      	movs	r0, #0
 801ab42:	e7ec      	b.n	801ab1e <rcl_get_default_domain_id+0x1a>
 801ab44:	200b      	movs	r0, #11
 801ab46:	b003      	add	sp, #12
 801ab48:	bd30      	pop	{r4, r5, pc}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	b003      	add	sp, #12
 801ab4e:	bd30      	pop	{r4, r5, pc}
 801ab50:	9b01      	ldr	r3, [sp, #4]
 801ab52:	781b      	ldrb	r3, [r3, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d0f2      	beq.n	801ab3e <rcl_get_default_domain_id+0x3a>
 801ab58:	e7e0      	b.n	801ab1c <rcl_get_default_domain_id+0x18>
 801ab5a:	f001 f95f 	bl	801be1c <__errno>
 801ab5e:	6803      	ldr	r3, [r0, #0]
 801ab60:	2b22      	cmp	r3, #34	@ 0x22
 801ab62:	d1ec      	bne.n	801ab3e <rcl_get_default_domain_id+0x3a>
 801ab64:	e7da      	b.n	801ab1c <rcl_get_default_domain_id+0x18>
 801ab66:	bf00      	nop
 801ab68:	0801e914 	.word	0x0801e914

0801ab6c <rcl_expand_topic_name>:
 801ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab70:	b08b      	sub	sp, #44	@ 0x2c
 801ab72:	9306      	str	r3, [sp, #24]
 801ab74:	2800      	cmp	r0, #0
 801ab76:	f000 80ad 	beq.w	801acd4 <rcl_expand_topic_name+0x168>
 801ab7a:	460e      	mov	r6, r1
 801ab7c:	2900      	cmp	r1, #0
 801ab7e:	f000 80a9 	beq.w	801acd4 <rcl_expand_topic_name+0x168>
 801ab82:	4617      	mov	r7, r2
 801ab84:	2a00      	cmp	r2, #0
 801ab86:	f000 80a5 	beq.w	801acd4 <rcl_expand_topic_name+0x168>
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	f000 80a2 	beq.w	801acd4 <rcl_expand_topic_name+0x168>
 801ab90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	f000 809e 	beq.w	801acd4 <rcl_expand_topic_name+0x168>
 801ab98:	2200      	movs	r2, #0
 801ab9a:	a909      	add	r1, sp, #36	@ 0x24
 801ab9c:	4680      	mov	r8, r0
 801ab9e:	f000 fa57 	bl	801b050 <rcl_validate_topic_name>
 801aba2:	4604      	mov	r4, r0
 801aba4:	2800      	cmp	r0, #0
 801aba6:	f040 8096 	bne.w	801acd6 <rcl_expand_topic_name+0x16a>
 801abaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abac:	2b00      	cmp	r3, #0
 801abae:	f040 809a 	bne.w	801ace6 <rcl_expand_topic_name+0x17a>
 801abb2:	4602      	mov	r2, r0
 801abb4:	a909      	add	r1, sp, #36	@ 0x24
 801abb6:	4630      	mov	r0, r6
 801abb8:	f7fe fbec 	bl	8019394 <rmw_validate_node_name>
 801abbc:	2800      	cmp	r0, #0
 801abbe:	f040 808e 	bne.w	801acde <rcl_expand_topic_name+0x172>
 801abc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abc4:	2a00      	cmp	r2, #0
 801abc6:	f040 8093 	bne.w	801acf0 <rcl_expand_topic_name+0x184>
 801abca:	a909      	add	r1, sp, #36	@ 0x24
 801abcc:	4638      	mov	r0, r7
 801abce:	f7fe fbc3 	bl	8019358 <rmw_validate_namespace>
 801abd2:	2800      	cmp	r0, #0
 801abd4:	f040 8083 	bne.w	801acde <rcl_expand_topic_name+0x172>
 801abd8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801abda:	2c00      	cmp	r4, #0
 801abdc:	f040 80ed 	bne.w	801adba <rcl_expand_topic_name+0x24e>
 801abe0:	217b      	movs	r1, #123	@ 0x7b
 801abe2:	4640      	mov	r0, r8
 801abe4:	f001 f88e 	bl	801bd04 <strchr>
 801abe8:	f898 3000 	ldrb.w	r3, [r8]
 801abec:	2b2f      	cmp	r3, #47	@ 0x2f
 801abee:	4605      	mov	r5, r0
 801abf0:	f000 809e 	beq.w	801ad30 <rcl_expand_topic_name+0x1c4>
 801abf4:	2b7e      	cmp	r3, #126	@ 0x7e
 801abf6:	f040 80a2 	bne.w	801ad3e <rcl_expand_topic_name+0x1d2>
 801abfa:	4638      	mov	r0, r7
 801abfc:	f7e5 fb1a 	bl	8000234 <strlen>
 801ac00:	4a82      	ldr	r2, [pc, #520]	@ (801ae0c <rcl_expand_topic_name+0x2a0>)
 801ac02:	4b83      	ldr	r3, [pc, #524]	@ (801ae10 <rcl_expand_topic_name+0x2a4>)
 801ac04:	2801      	cmp	r0, #1
 801ac06:	bf18      	it	ne
 801ac08:	4613      	movne	r3, r2
 801ac0a:	9302      	str	r3, [sp, #8]
 801ac0c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ac0e:	9300      	str	r3, [sp, #0]
 801ac10:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801ac14:	f108 0301 	add.w	r3, r8, #1
 801ac18:	9305      	str	r3, [sp, #20]
 801ac1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ac1e:	9301      	str	r3, [sp, #4]
 801ac20:	ab14      	add	r3, sp, #80	@ 0x50
 801ac22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ac24:	f7fd ffb4 	bl	8018b90 <rcutils_format_string_limit>
 801ac28:	4682      	mov	sl, r0
 801ac2a:	2800      	cmp	r0, #0
 801ac2c:	f000 80c7 	beq.w	801adbe <rcl_expand_topic_name+0x252>
 801ac30:	2d00      	cmp	r5, #0
 801ac32:	f000 80a2 	beq.w	801ad7a <rcl_expand_topic_name+0x20e>
 801ac36:	217b      	movs	r1, #123	@ 0x7b
 801ac38:	f001 f864 	bl	801bd04 <strchr>
 801ac3c:	46d1      	mov	r9, sl
 801ac3e:	4605      	mov	r5, r0
 801ac40:	9407      	str	r4, [sp, #28]
 801ac42:	46d3      	mov	fp, sl
 801ac44:	464c      	mov	r4, r9
 801ac46:	2d00      	cmp	r5, #0
 801ac48:	f000 80be 	beq.w	801adc8 <rcl_expand_topic_name+0x25c>
 801ac4c:	217d      	movs	r1, #125	@ 0x7d
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f001 f858 	bl	801bd04 <strchr>
 801ac54:	eba0 0905 	sub.w	r9, r0, r5
 801ac58:	f109 0a01 	add.w	sl, r9, #1
 801ac5c:	486d      	ldr	r0, [pc, #436]	@ (801ae14 <rcl_expand_topic_name+0x2a8>)
 801ac5e:	4652      	mov	r2, sl
 801ac60:	4629      	mov	r1, r5
 801ac62:	f001 f85c 	bl	801bd1e <strncmp>
 801ac66:	2800      	cmp	r0, #0
 801ac68:	d067      	beq.n	801ad3a <rcl_expand_topic_name+0x1ce>
 801ac6a:	486b      	ldr	r0, [pc, #428]	@ (801ae18 <rcl_expand_topic_name+0x2ac>)
 801ac6c:	4652      	mov	r2, sl
 801ac6e:	4629      	mov	r1, r5
 801ac70:	f001 f855 	bl	801bd1e <strncmp>
 801ac74:	b130      	cbz	r0, 801ac84 <rcl_expand_topic_name+0x118>
 801ac76:	4869      	ldr	r0, [pc, #420]	@ (801ae1c <rcl_expand_topic_name+0x2b0>)
 801ac78:	4652      	mov	r2, sl
 801ac7a:	4629      	mov	r1, r5
 801ac7c:	f001 f84f 	bl	801bd1e <strncmp>
 801ac80:	2800      	cmp	r0, #0
 801ac82:	d137      	bne.n	801acf4 <rcl_expand_topic_name+0x188>
 801ac84:	46b9      	mov	r9, r7
 801ac86:	ab16      	add	r3, sp, #88	@ 0x58
 801ac88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ac8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ac90:	ab14      	add	r3, sp, #80	@ 0x50
 801ac92:	4628      	mov	r0, r5
 801ac94:	cb0c      	ldmia	r3, {r2, r3}
 801ac96:	4651      	mov	r1, sl
 801ac98:	f7fe f8b6 	bl	8018e08 <rcutils_strndup>
 801ac9c:	4605      	mov	r5, r0
 801ac9e:	2800      	cmp	r0, #0
 801aca0:	f000 809c 	beq.w	801addc <rcl_expand_topic_name+0x270>
 801aca4:	464a      	mov	r2, r9
 801aca6:	4620      	mov	r0, r4
 801aca8:	ab14      	add	r3, sp, #80	@ 0x50
 801acaa:	4629      	mov	r1, r5
 801acac:	f7fd ffaa 	bl	8018c04 <rcutils_repl_str>
 801acb0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801acb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801acb4:	4604      	mov	r4, r0
 801acb6:	4628      	mov	r0, r5
 801acb8:	4798      	blx	r3
 801acba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801acbc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801acbe:	4658      	mov	r0, fp
 801acc0:	4798      	blx	r3
 801acc2:	2c00      	cmp	r4, #0
 801acc4:	d07b      	beq.n	801adbe <rcl_expand_topic_name+0x252>
 801acc6:	217b      	movs	r1, #123	@ 0x7b
 801acc8:	4620      	mov	r0, r4
 801acca:	f001 f81b 	bl	801bd04 <strchr>
 801acce:	46a3      	mov	fp, r4
 801acd0:	4605      	mov	r5, r0
 801acd2:	e7b8      	b.n	801ac46 <rcl_expand_topic_name+0xda>
 801acd4:	240b      	movs	r4, #11
 801acd6:	4620      	mov	r0, r4
 801acd8:	b00b      	add	sp, #44	@ 0x2c
 801acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acde:	f7fb f8a9 	bl	8015e34 <rcl_convert_rmw_ret_to_rcl_ret>
 801ace2:	4604      	mov	r4, r0
 801ace4:	e7f7      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801ace6:	2467      	movs	r4, #103	@ 0x67
 801ace8:	4620      	mov	r0, r4
 801acea:	b00b      	add	sp, #44	@ 0x2c
 801acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acf0:	24c9      	movs	r4, #201	@ 0xc9
 801acf2:	e7f0      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801acf4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801acf8:	9806      	ldr	r0, [sp, #24]
 801acfa:	1c69      	adds	r1, r5, #1
 801acfc:	f7fe f99e 	bl	801903c <rcutils_string_map_getn>
 801ad00:	4681      	mov	r9, r0
 801ad02:	2800      	cmp	r0, #0
 801ad04:	d1bf      	bne.n	801ac86 <rcl_expand_topic_name+0x11a>
 801ad06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad08:	aa16      	add	r2, sp, #88	@ 0x58
 801ad0a:	6018      	str	r0, [r3, #0]
 801ad0c:	ca07      	ldmia	r2, {r0, r1, r2}
 801ad0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ad12:	ab14      	add	r3, sp, #80	@ 0x50
 801ad14:	cb0c      	ldmia	r3, {r2, r3}
 801ad16:	4651      	mov	r1, sl
 801ad18:	4628      	mov	r0, r5
 801ad1a:	f7fe f875 	bl	8018e08 <rcutils_strndup>
 801ad1e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ad20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ad22:	4798      	blx	r3
 801ad24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ad26:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ad28:	4658      	mov	r0, fp
 801ad2a:	2469      	movs	r4, #105	@ 0x69
 801ad2c:	4798      	blx	r3
 801ad2e:	e7d2      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801ad30:	2800      	cmp	r0, #0
 801ad32:	d05b      	beq.n	801adec <rcl_expand_topic_name+0x280>
 801ad34:	46c1      	mov	r9, r8
 801ad36:	46a2      	mov	sl, r4
 801ad38:	e782      	b.n	801ac40 <rcl_expand_topic_name+0xd4>
 801ad3a:	46b1      	mov	r9, r6
 801ad3c:	e7a3      	b.n	801ac86 <rcl_expand_topic_name+0x11a>
 801ad3e:	2800      	cmp	r0, #0
 801ad40:	d1f8      	bne.n	801ad34 <rcl_expand_topic_name+0x1c8>
 801ad42:	4638      	mov	r0, r7
 801ad44:	f7e5 fa76 	bl	8000234 <strlen>
 801ad48:	4a35      	ldr	r2, [pc, #212]	@ (801ae20 <rcl_expand_topic_name+0x2b4>)
 801ad4a:	4b36      	ldr	r3, [pc, #216]	@ (801ae24 <rcl_expand_topic_name+0x2b8>)
 801ad4c:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad50:	2801      	cmp	r0, #1
 801ad52:	bf18      	it	ne
 801ad54:	4613      	movne	r3, r2
 801ad56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ad5a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ad5e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ad60:	9703      	str	r7, [sp, #12]
 801ad62:	9200      	str	r2, [sp, #0]
 801ad64:	ab14      	add	r3, sp, #80	@ 0x50
 801ad66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ad68:	f7fd ff12 	bl	8018b90 <rcutils_format_string_limit>
 801ad6c:	4682      	mov	sl, r0
 801ad6e:	4653      	mov	r3, sl
 801ad70:	b32b      	cbz	r3, 801adbe <rcl_expand_topic_name+0x252>
 801ad72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad74:	f8c3 a000 	str.w	sl, [r3]
 801ad78:	e7ad      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801ad7a:	f89a 3000 	ldrb.w	r3, [sl]
 801ad7e:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad80:	d0f7      	beq.n	801ad72 <rcl_expand_topic_name+0x206>
 801ad82:	4638      	mov	r0, r7
 801ad84:	f7e5 fa56 	bl	8000234 <strlen>
 801ad88:	4a25      	ldr	r2, [pc, #148]	@ (801ae20 <rcl_expand_topic_name+0x2b4>)
 801ad8a:	4b26      	ldr	r3, [pc, #152]	@ (801ae24 <rcl_expand_topic_name+0x2b8>)
 801ad8c:	f8cd a010 	str.w	sl, [sp, #16]
 801ad90:	2801      	cmp	r0, #1
 801ad92:	bf18      	it	ne
 801ad94:	4613      	movne	r3, r2
 801ad96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ad9a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ad9e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ada0:	9703      	str	r7, [sp, #12]
 801ada2:	9200      	str	r2, [sp, #0]
 801ada4:	ab14      	add	r3, sp, #80	@ 0x50
 801ada6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ada8:	f7fd fef2 	bl	8018b90 <rcutils_format_string_limit>
 801adac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801adae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801adb0:	4605      	mov	r5, r0
 801adb2:	4650      	mov	r0, sl
 801adb4:	4798      	blx	r3
 801adb6:	46aa      	mov	sl, r5
 801adb8:	e7d9      	b.n	801ad6e <rcl_expand_topic_name+0x202>
 801adba:	24ca      	movs	r4, #202	@ 0xca
 801adbc:	e78b      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801adbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801adc0:	2300      	movs	r3, #0
 801adc2:	6013      	str	r3, [r2, #0]
 801adc4:	240a      	movs	r4, #10
 801adc6:	e786      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801adc8:	465b      	mov	r3, fp
 801adca:	9c07      	ldr	r4, [sp, #28]
 801adcc:	46da      	mov	sl, fp
 801adce:	2b00      	cmp	r3, #0
 801add0:	d1d3      	bne.n	801ad7a <rcl_expand_topic_name+0x20e>
 801add2:	f898 3000 	ldrb.w	r3, [r8]
 801add6:	2b2f      	cmp	r3, #47	@ 0x2f
 801add8:	d0cb      	beq.n	801ad72 <rcl_expand_topic_name+0x206>
 801adda:	e7b2      	b.n	801ad42 <rcl_expand_topic_name+0x1d6>
 801addc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801ade0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ade2:	6015      	str	r5, [r2, #0]
 801ade4:	4658      	mov	r0, fp
 801ade6:	4798      	blx	r3
 801ade8:	240a      	movs	r4, #10
 801adea:	e774      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801adec:	ab17      	add	r3, sp, #92	@ 0x5c
 801adee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801adf2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801adf6:	ab14      	add	r3, sp, #80	@ 0x50
 801adf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801adfa:	4640      	mov	r0, r8
 801adfc:	f7fd ffe2 	bl	8018dc4 <rcutils_strdup>
 801ae00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ae02:	2800      	cmp	r0, #0
 801ae04:	6018      	str	r0, [r3, #0]
 801ae06:	bf08      	it	eq
 801ae08:	240a      	moveq	r4, #10
 801ae0a:	e764      	b.n	801acd6 <rcl_expand_topic_name+0x16a>
 801ae0c:	0801e924 	.word	0x0801e924
 801ae10:	0801db44 	.word	0x0801db44
 801ae14:	0801e92c 	.word	0x0801e92c
 801ae18:	0801e934 	.word	0x0801e934
 801ae1c:	0801e93c 	.word	0x0801e93c
 801ae20:	0801db30 	.word	0x0801db30
 801ae24:	0801db54 	.word	0x0801db54

0801ae28 <rcl_get_default_topic_name_substitutions>:
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	bf0c      	ite	eq
 801ae2c:	200b      	moveq	r0, #11
 801ae2e:	2000      	movne	r0, #0
 801ae30:	4770      	bx	lr
 801ae32:	bf00      	nop

0801ae34 <rcl_get_zero_initialized_guard_condition>:
 801ae34:	4a03      	ldr	r2, [pc, #12]	@ (801ae44 <rcl_get_zero_initialized_guard_condition+0x10>)
 801ae36:	4603      	mov	r3, r0
 801ae38:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ae40:	4618      	mov	r0, r3
 801ae42:	4770      	bx	lr
 801ae44:	0801e948 	.word	0x0801e948

0801ae48 <rcl_guard_condition_init>:
 801ae48:	b082      	sub	sp, #8
 801ae4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae4c:	b087      	sub	sp, #28
 801ae4e:	ac0c      	add	r4, sp, #48	@ 0x30
 801ae50:	e884 000c 	stmia.w	r4, {r2, r3}
 801ae54:	46a6      	mov	lr, r4
 801ae56:	460d      	mov	r5, r1
 801ae58:	4604      	mov	r4, r0
 801ae5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae5e:	f10d 0c04 	add.w	ip, sp, #4
 801ae62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae66:	f8de 3000 	ldr.w	r3, [lr]
 801ae6a:	f8cc 3000 	str.w	r3, [ip]
 801ae6e:	a801      	add	r0, sp, #4
 801ae70:	f7f4 ffc0 	bl	800fdf4 <rcutils_allocator_is_valid>
 801ae74:	b338      	cbz	r0, 801aec6 <rcl_guard_condition_init+0x7e>
 801ae76:	b334      	cbz	r4, 801aec6 <rcl_guard_condition_init+0x7e>
 801ae78:	6866      	ldr	r6, [r4, #4]
 801ae7a:	b9ee      	cbnz	r6, 801aeb8 <rcl_guard_condition_init+0x70>
 801ae7c:	b31d      	cbz	r5, 801aec6 <rcl_guard_condition_init+0x7e>
 801ae7e:	4628      	mov	r0, r5
 801ae80:	f7fa fff6 	bl	8015e70 <rcl_context_is_valid>
 801ae84:	b308      	cbz	r0, 801aeca <rcl_guard_condition_init+0x82>
 801ae86:	9b01      	ldr	r3, [sp, #4]
 801ae88:	9905      	ldr	r1, [sp, #20]
 801ae8a:	201c      	movs	r0, #28
 801ae8c:	4798      	blx	r3
 801ae8e:	4607      	mov	r7, r0
 801ae90:	6060      	str	r0, [r4, #4]
 801ae92:	b310      	cbz	r0, 801aeda <rcl_guard_condition_init+0x92>
 801ae94:	6828      	ldr	r0, [r5, #0]
 801ae96:	3028      	adds	r0, #40	@ 0x28
 801ae98:	f000 f9ac 	bl	801b1f4 <rmw_create_guard_condition>
 801ae9c:	6038      	str	r0, [r7, #0]
 801ae9e:	6860      	ldr	r0, [r4, #4]
 801aea0:	6805      	ldr	r5, [r0, #0]
 801aea2:	b1a5      	cbz	r5, 801aece <rcl_guard_condition_init+0x86>
 801aea4:	2301      	movs	r3, #1
 801aea6:	ac01      	add	r4, sp, #4
 801aea8:	7103      	strb	r3, [r0, #4]
 801aeaa:	f100 0708 	add.w	r7, r0, #8
 801aeae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aeb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801aeb2:	6823      	ldr	r3, [r4, #0]
 801aeb4:	603b      	str	r3, [r7, #0]
 801aeb6:	e000      	b.n	801aeba <rcl_guard_condition_init+0x72>
 801aeb8:	2664      	movs	r6, #100	@ 0x64
 801aeba:	4630      	mov	r0, r6
 801aebc:	b007      	add	sp, #28
 801aebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aec2:	b002      	add	sp, #8
 801aec4:	4770      	bx	lr
 801aec6:	260b      	movs	r6, #11
 801aec8:	e7f7      	b.n	801aeba <rcl_guard_condition_init+0x72>
 801aeca:	2665      	movs	r6, #101	@ 0x65
 801aecc:	e7f5      	b.n	801aeba <rcl_guard_condition_init+0x72>
 801aece:	9b02      	ldr	r3, [sp, #8]
 801aed0:	9905      	ldr	r1, [sp, #20]
 801aed2:	4798      	blx	r3
 801aed4:	2601      	movs	r6, #1
 801aed6:	6065      	str	r5, [r4, #4]
 801aed8:	e7ef      	b.n	801aeba <rcl_guard_condition_init+0x72>
 801aeda:	260a      	movs	r6, #10
 801aedc:	e7ed      	b.n	801aeba <rcl_guard_condition_init+0x72>
 801aede:	bf00      	nop

0801aee0 <rcl_guard_condition_init_from_rmw>:
 801aee0:	b082      	sub	sp, #8
 801aee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aee6:	b086      	sub	sp, #24
 801aee8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801aeec:	4604      	mov	r4, r0
 801aeee:	f84c 3f04 	str.w	r3, [ip, #4]!
 801aef2:	460e      	mov	r6, r1
 801aef4:	4617      	mov	r7, r2
 801aef6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aefa:	f10d 0e04 	add.w	lr, sp, #4
 801aefe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af02:	f8dc 3000 	ldr.w	r3, [ip]
 801af06:	f8ce 3000 	str.w	r3, [lr]
 801af0a:	a801      	add	r0, sp, #4
 801af0c:	f7f4 ff72 	bl	800fdf4 <rcutils_allocator_is_valid>
 801af10:	b350      	cbz	r0, 801af68 <rcl_guard_condition_init_from_rmw+0x88>
 801af12:	b34c      	cbz	r4, 801af68 <rcl_guard_condition_init_from_rmw+0x88>
 801af14:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801af18:	f1b8 0f00 	cmp.w	r8, #0
 801af1c:	d11e      	bne.n	801af5c <rcl_guard_condition_init_from_rmw+0x7c>
 801af1e:	b31f      	cbz	r7, 801af68 <rcl_guard_condition_init_from_rmw+0x88>
 801af20:	4638      	mov	r0, r7
 801af22:	f7fa ffa5 	bl	8015e70 <rcl_context_is_valid>
 801af26:	b328      	cbz	r0, 801af74 <rcl_guard_condition_init_from_rmw+0x94>
 801af28:	9b01      	ldr	r3, [sp, #4]
 801af2a:	9905      	ldr	r1, [sp, #20]
 801af2c:	201c      	movs	r0, #28
 801af2e:	4798      	blx	r3
 801af30:	4605      	mov	r5, r0
 801af32:	6060      	str	r0, [r4, #4]
 801af34:	b358      	cbz	r0, 801af8e <rcl_guard_condition_init_from_rmw+0xae>
 801af36:	b1fe      	cbz	r6, 801af78 <rcl_guard_condition_init_from_rmw+0x98>
 801af38:	6006      	str	r6, [r0, #0]
 801af3a:	f880 8004 	strb.w	r8, [r0, #4]
 801af3e:	ac01      	add	r4, sp, #4
 801af40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af42:	f105 0c08 	add.w	ip, r5, #8
 801af46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af4a:	6823      	ldr	r3, [r4, #0]
 801af4c:	f8cc 3000 	str.w	r3, [ip]
 801af50:	2000      	movs	r0, #0
 801af52:	b006      	add	sp, #24
 801af54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af58:	b002      	add	sp, #8
 801af5a:	4770      	bx	lr
 801af5c:	2064      	movs	r0, #100	@ 0x64
 801af5e:	b006      	add	sp, #24
 801af60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af64:	b002      	add	sp, #8
 801af66:	4770      	bx	lr
 801af68:	200b      	movs	r0, #11
 801af6a:	b006      	add	sp, #24
 801af6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af70:	b002      	add	sp, #8
 801af72:	4770      	bx	lr
 801af74:	2065      	movs	r0, #101	@ 0x65
 801af76:	e7f2      	b.n	801af5e <rcl_guard_condition_init_from_rmw+0x7e>
 801af78:	6838      	ldr	r0, [r7, #0]
 801af7a:	3028      	adds	r0, #40	@ 0x28
 801af7c:	f000 f93a 	bl	801b1f4 <rmw_create_guard_condition>
 801af80:	6028      	str	r0, [r5, #0]
 801af82:	6865      	ldr	r5, [r4, #4]
 801af84:	682e      	ldr	r6, [r5, #0]
 801af86:	b126      	cbz	r6, 801af92 <rcl_guard_condition_init_from_rmw+0xb2>
 801af88:	2301      	movs	r3, #1
 801af8a:	712b      	strb	r3, [r5, #4]
 801af8c:	e7d7      	b.n	801af3e <rcl_guard_condition_init_from_rmw+0x5e>
 801af8e:	200a      	movs	r0, #10
 801af90:	e7e5      	b.n	801af5e <rcl_guard_condition_init_from_rmw+0x7e>
 801af92:	4628      	mov	r0, r5
 801af94:	9b02      	ldr	r3, [sp, #8]
 801af96:	9905      	ldr	r1, [sp, #20]
 801af98:	4798      	blx	r3
 801af9a:	6066      	str	r6, [r4, #4]
 801af9c:	2001      	movs	r0, #1
 801af9e:	e7de      	b.n	801af5e <rcl_guard_condition_init_from_rmw+0x7e>

0801afa0 <rcl_guard_condition_fini>:
 801afa0:	b570      	push	{r4, r5, r6, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	b1f0      	cbz	r0, 801afe4 <rcl_guard_condition_fini+0x44>
 801afa6:	6843      	ldr	r3, [r0, #4]
 801afa8:	4604      	mov	r4, r0
 801afaa:	b163      	cbz	r3, 801afc6 <rcl_guard_condition_fini+0x26>
 801afac:	6818      	ldr	r0, [r3, #0]
 801afae:	68de      	ldr	r6, [r3, #12]
 801afb0:	6999      	ldr	r1, [r3, #24]
 801afb2:	b160      	cbz	r0, 801afce <rcl_guard_condition_fini+0x2e>
 801afb4:	791d      	ldrb	r5, [r3, #4]
 801afb6:	b965      	cbnz	r5, 801afd2 <rcl_guard_condition_fini+0x32>
 801afb8:	4618      	mov	r0, r3
 801afba:	47b0      	blx	r6
 801afbc:	2300      	movs	r3, #0
 801afbe:	4628      	mov	r0, r5
 801afc0:	6063      	str	r3, [r4, #4]
 801afc2:	b002      	add	sp, #8
 801afc4:	bd70      	pop	{r4, r5, r6, pc}
 801afc6:	461d      	mov	r5, r3
 801afc8:	4628      	mov	r0, r5
 801afca:	b002      	add	sp, #8
 801afcc:	bd70      	pop	{r4, r5, r6, pc}
 801afce:	4605      	mov	r5, r0
 801afd0:	e7f2      	b.n	801afb8 <rcl_guard_condition_fini+0x18>
 801afd2:	9101      	str	r1, [sp, #4]
 801afd4:	f000 f922 	bl	801b21c <rmw_destroy_guard_condition>
 801afd8:	1e05      	subs	r5, r0, #0
 801afda:	6863      	ldr	r3, [r4, #4]
 801afdc:	9901      	ldr	r1, [sp, #4]
 801afde:	bf18      	it	ne
 801afe0:	2501      	movne	r5, #1
 801afe2:	e7e9      	b.n	801afb8 <rcl_guard_condition_fini+0x18>
 801afe4:	250b      	movs	r5, #11
 801afe6:	4628      	mov	r0, r5
 801afe8:	b002      	add	sp, #8
 801afea:	bd70      	pop	{r4, r5, r6, pc}

0801afec <rcl_guard_condition_get_default_options>:
 801afec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afee:	b087      	sub	sp, #28
 801aff0:	4606      	mov	r6, r0
 801aff2:	4668      	mov	r0, sp
 801aff4:	f7f4 fef0 	bl	800fdd8 <rcutils_get_default_allocator>
 801aff8:	4b09      	ldr	r3, [pc, #36]	@ (801b020 <rcl_guard_condition_get_default_options+0x34>)
 801affa:	46ee      	mov	lr, sp
 801affc:	469c      	mov	ip, r3
 801affe:	461d      	mov	r5, r3
 801b000:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b00a:	4634      	mov	r4, r6
 801b00c:	f8de 7000 	ldr.w	r7, [lr]
 801b010:	f8cc 7000 	str.w	r7, [ip]
 801b014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b016:	4630      	mov	r0, r6
 801b018:	6027      	str	r7, [r4, #0]
 801b01a:	b007      	add	sp, #28
 801b01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b01e:	bf00      	nop
 801b020:	2000be2c 	.word	0x2000be2c

0801b024 <rcl_trigger_guard_condition>:
 801b024:	b148      	cbz	r0, 801b03a <rcl_trigger_guard_condition+0x16>
 801b026:	b508      	push	{r3, lr}
 801b028:	6843      	ldr	r3, [r0, #4]
 801b02a:	b143      	cbz	r3, 801b03e <rcl_trigger_guard_condition+0x1a>
 801b02c:	6818      	ldr	r0, [r3, #0]
 801b02e:	f000 f909 	bl	801b244 <rmw_trigger_guard_condition>
 801b032:	3800      	subs	r0, #0
 801b034:	bf18      	it	ne
 801b036:	2001      	movne	r0, #1
 801b038:	bd08      	pop	{r3, pc}
 801b03a:	200b      	movs	r0, #11
 801b03c:	4770      	bx	lr
 801b03e:	200b      	movs	r0, #11
 801b040:	bd08      	pop	{r3, pc}
 801b042:	bf00      	nop

0801b044 <rcl_guard_condition_get_rmw_handle>:
 801b044:	b110      	cbz	r0, 801b04c <rcl_guard_condition_get_rmw_handle+0x8>
 801b046:	6840      	ldr	r0, [r0, #4]
 801b048:	b100      	cbz	r0, 801b04c <rcl_guard_condition_get_rmw_handle+0x8>
 801b04a:	6800      	ldr	r0, [r0, #0]
 801b04c:	4770      	bx	lr
 801b04e:	bf00      	nop

0801b050 <rcl_validate_topic_name>:
 801b050:	2800      	cmp	r0, #0
 801b052:	d07a      	beq.n	801b14a <rcl_validate_topic_name+0xfa>
 801b054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b058:	460e      	mov	r6, r1
 801b05a:	2900      	cmp	r1, #0
 801b05c:	d07c      	beq.n	801b158 <rcl_validate_topic_name+0x108>
 801b05e:	4617      	mov	r7, r2
 801b060:	4605      	mov	r5, r0
 801b062:	f7e5 f8e7 	bl	8000234 <strlen>
 801b066:	b1b0      	cbz	r0, 801b096 <rcl_validate_topic_name+0x46>
 801b068:	f895 9000 	ldrb.w	r9, [r5]
 801b06c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801b1f0 <rcl_validate_topic_name+0x1a0>
 801b070:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801b074:	f013 0304 	ands.w	r3, r3, #4
 801b078:	d169      	bne.n	801b14e <rcl_validate_topic_name+0xfe>
 801b07a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b07e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801b082:	2a2f      	cmp	r2, #47	@ 0x2f
 801b084:	d10e      	bne.n	801b0a4 <rcl_validate_topic_name+0x54>
 801b086:	2202      	movs	r2, #2
 801b088:	6032      	str	r2, [r6, #0]
 801b08a:	b36f      	cbz	r7, 801b0e8 <rcl_validate_topic_name+0x98>
 801b08c:	f8c7 8000 	str.w	r8, [r7]
 801b090:	4618      	mov	r0, r3
 801b092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b096:	2301      	movs	r3, #1
 801b098:	6033      	str	r3, [r6, #0]
 801b09a:	b32f      	cbz	r7, 801b0e8 <rcl_validate_topic_name+0x98>
 801b09c:	2000      	movs	r0, #0
 801b09e:	6038      	str	r0, [r7, #0]
 801b0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0a4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801b0a8:	461c      	mov	r4, r3
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b0b0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801b0b4:	f1be 0f09 	cmp.w	lr, #9
 801b0b8:	d919      	bls.n	801b0ee <rcl_validate_topic_name+0x9e>
 801b0ba:	f022 0e20 	bic.w	lr, r2, #32
 801b0be:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801b0c2:	f1be 0f19 	cmp.w	lr, #25
 801b0c6:	d912      	bls.n	801b0ee <rcl_validate_topic_name+0x9e>
 801b0c8:	2a5f      	cmp	r2, #95	@ 0x5f
 801b0ca:	d019      	beq.n	801b100 <rcl_validate_topic_name+0xb0>
 801b0cc:	2a2f      	cmp	r2, #47	@ 0x2f
 801b0ce:	d051      	beq.n	801b174 <rcl_validate_topic_name+0x124>
 801b0d0:	2a7e      	cmp	r2, #126	@ 0x7e
 801b0d2:	d048      	beq.n	801b166 <rcl_validate_topic_name+0x116>
 801b0d4:	2a7b      	cmp	r2, #123	@ 0x7b
 801b0d6:	d054      	beq.n	801b182 <rcl_validate_topic_name+0x132>
 801b0d8:	2a7d      	cmp	r2, #125	@ 0x7d
 801b0da:	d161      	bne.n	801b1a0 <rcl_validate_topic_name+0x150>
 801b0dc:	2c00      	cmp	r4, #0
 801b0de:	d155      	bne.n	801b18c <rcl_validate_topic_name+0x13c>
 801b0e0:	2305      	movs	r3, #5
 801b0e2:	6033      	str	r3, [r6, #0]
 801b0e4:	b107      	cbz	r7, 801b0e8 <rcl_validate_topic_name+0x98>
 801b0e6:	6039      	str	r1, [r7, #0]
 801b0e8:	2000      	movs	r0, #0
 801b0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b0f2:	0752      	lsls	r2, r2, #29
 801b0f4:	d504      	bpl.n	801b100 <rcl_validate_topic_name+0xb0>
 801b0f6:	b11c      	cbz	r4, 801b100 <rcl_validate_topic_name+0xb0>
 801b0f8:	b111      	cbz	r1, 801b100 <rcl_validate_topic_name+0xb0>
 801b0fa:	1e4a      	subs	r2, r1, #1
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	d02d      	beq.n	801b15c <rcl_validate_topic_name+0x10c>
 801b100:	3101      	adds	r1, #1
 801b102:	4288      	cmp	r0, r1
 801b104:	d1d2      	bne.n	801b0ac <rcl_validate_topic_name+0x5c>
 801b106:	2c00      	cmp	r4, #0
 801b108:	d145      	bne.n	801b196 <rcl_validate_topic_name+0x146>
 801b10a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801b10e:	d04f      	beq.n	801b1b0 <rcl_validate_topic_name+0x160>
 801b110:	4620      	mov	r0, r4
 801b112:	2301      	movs	r3, #1
 801b114:	e006      	b.n	801b124 <rcl_validate_topic_name+0xd4>
 801b116:	428b      	cmp	r3, r1
 801b118:	f105 0501 	add.w	r5, r5, #1
 801b11c:	f103 0201 	add.w	r2, r3, #1
 801b120:	d236      	bcs.n	801b190 <rcl_validate_topic_name+0x140>
 801b122:	4613      	mov	r3, r2
 801b124:	4580      	cmp	r8, r0
 801b126:	f100 0001 	add.w	r0, r0, #1
 801b12a:	d0f4      	beq.n	801b116 <rcl_validate_topic_name+0xc6>
 801b12c:	782a      	ldrb	r2, [r5, #0]
 801b12e:	2a2f      	cmp	r2, #47	@ 0x2f
 801b130:	d1f1      	bne.n	801b116 <rcl_validate_topic_name+0xc6>
 801b132:	786a      	ldrb	r2, [r5, #1]
 801b134:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b138:	0754      	lsls	r4, r2, #29
 801b13a:	d5ec      	bpl.n	801b116 <rcl_validate_topic_name+0xc6>
 801b13c:	2204      	movs	r2, #4
 801b13e:	6032      	str	r2, [r6, #0]
 801b140:	2f00      	cmp	r7, #0
 801b142:	d0d1      	beq.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b144:	603b      	str	r3, [r7, #0]
 801b146:	2000      	movs	r0, #0
 801b148:	e7aa      	b.n	801b0a0 <rcl_validate_topic_name+0x50>
 801b14a:	200b      	movs	r0, #11
 801b14c:	4770      	bx	lr
 801b14e:	2304      	movs	r3, #4
 801b150:	6033      	str	r3, [r6, #0]
 801b152:	2f00      	cmp	r7, #0
 801b154:	d1a2      	bne.n	801b09c <rcl_validate_topic_name+0x4c>
 801b156:	e7c7      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b158:	200b      	movs	r0, #11
 801b15a:	e7a1      	b.n	801b0a0 <rcl_validate_topic_name+0x50>
 801b15c:	2309      	movs	r3, #9
 801b15e:	6033      	str	r3, [r6, #0]
 801b160:	2f00      	cmp	r7, #0
 801b162:	d1c0      	bne.n	801b0e6 <rcl_validate_topic_name+0x96>
 801b164:	e7c0      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b166:	2900      	cmp	r1, #0
 801b168:	d0ca      	beq.n	801b100 <rcl_validate_topic_name+0xb0>
 801b16a:	2306      	movs	r3, #6
 801b16c:	6033      	str	r3, [r6, #0]
 801b16e:	2f00      	cmp	r7, #0
 801b170:	d1b9      	bne.n	801b0e6 <rcl_validate_topic_name+0x96>
 801b172:	e7b9      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b174:	2c00      	cmp	r4, #0
 801b176:	d0c3      	beq.n	801b100 <rcl_validate_topic_name+0xb0>
 801b178:	2308      	movs	r3, #8
 801b17a:	6033      	str	r3, [r6, #0]
 801b17c:	2f00      	cmp	r7, #0
 801b17e:	d1b2      	bne.n	801b0e6 <rcl_validate_topic_name+0x96>
 801b180:	e7b2      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b182:	2c00      	cmp	r4, #0
 801b184:	d1f8      	bne.n	801b178 <rcl_validate_topic_name+0x128>
 801b186:	460b      	mov	r3, r1
 801b188:	2401      	movs	r4, #1
 801b18a:	e7b9      	b.n	801b100 <rcl_validate_topic_name+0xb0>
 801b18c:	2400      	movs	r4, #0
 801b18e:	e7b7      	b.n	801b100 <rcl_validate_topic_name+0xb0>
 801b190:	2000      	movs	r0, #0
 801b192:	6030      	str	r0, [r6, #0]
 801b194:	e784      	b.n	801b0a0 <rcl_validate_topic_name+0x50>
 801b196:	2205      	movs	r2, #5
 801b198:	6032      	str	r2, [r6, #0]
 801b19a:	2f00      	cmp	r7, #0
 801b19c:	d1d2      	bne.n	801b144 <rcl_validate_topic_name+0xf4>
 801b19e:	e7a3      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b1a0:	2c00      	cmp	r4, #0
 801b1a2:	bf14      	ite	ne
 801b1a4:	2308      	movne	r3, #8
 801b1a6:	2303      	moveq	r3, #3
 801b1a8:	6033      	str	r3, [r6, #0]
 801b1aa:	2f00      	cmp	r7, #0
 801b1ac:	d19b      	bne.n	801b0e6 <rcl_validate_topic_name+0x96>
 801b1ae:	e79b      	b.n	801b0e8 <rcl_validate_topic_name+0x98>
 801b1b0:	2301      	movs	r3, #1
 801b1b2:	e00a      	b.n	801b1ca <rcl_validate_topic_name+0x17a>
 801b1b4:	2c01      	cmp	r4, #1
 801b1b6:	d013      	beq.n	801b1e0 <rcl_validate_topic_name+0x190>
 801b1b8:	4299      	cmp	r1, r3
 801b1ba:	f104 0401 	add.w	r4, r4, #1
 801b1be:	f105 0501 	add.w	r5, r5, #1
 801b1c2:	f103 0201 	add.w	r2, r3, #1
 801b1c6:	d9e3      	bls.n	801b190 <rcl_validate_topic_name+0x140>
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	45a0      	cmp	r8, r4
 801b1cc:	d0f4      	beq.n	801b1b8 <rcl_validate_topic_name+0x168>
 801b1ce:	782a      	ldrb	r2, [r5, #0]
 801b1d0:	2a2f      	cmp	r2, #47	@ 0x2f
 801b1d2:	d1ef      	bne.n	801b1b4 <rcl_validate_topic_name+0x164>
 801b1d4:	786a      	ldrb	r2, [r5, #1]
 801b1d6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b1da:	0752      	lsls	r2, r2, #29
 801b1dc:	d5ec      	bpl.n	801b1b8 <rcl_validate_topic_name+0x168>
 801b1de:	e7ad      	b.n	801b13c <rcl_validate_topic_name+0xec>
 801b1e0:	2307      	movs	r3, #7
 801b1e2:	6033      	str	r3, [r6, #0]
 801b1e4:	2f00      	cmp	r7, #0
 801b1e6:	f43f af7f 	beq.w	801b0e8 <rcl_validate_topic_name+0x98>
 801b1ea:	603c      	str	r4, [r7, #0]
 801b1ec:	2000      	movs	r0, #0
 801b1ee:	e757      	b.n	801b0a0 <rcl_validate_topic_name+0x50>
 801b1f0:	0801eab2 	.word	0x0801eab2

0801b1f4 <rmw_create_guard_condition>:
 801b1f4:	b538      	push	{r3, r4, r5, lr}
 801b1f6:	4605      	mov	r5, r0
 801b1f8:	4807      	ldr	r0, [pc, #28]	@ (801b218 <rmw_create_guard_condition+0x24>)
 801b1fa:	f7fe fa11 	bl	8019620 <get_memory>
 801b1fe:	b148      	cbz	r0, 801b214 <rmw_create_guard_condition+0x20>
 801b200:	6884      	ldr	r4, [r0, #8]
 801b202:	2300      	movs	r3, #0
 801b204:	7423      	strb	r3, [r4, #16]
 801b206:	61e5      	str	r5, [r4, #28]
 801b208:	f7fe fa72 	bl	80196f0 <rmw_get_implementation_identifier>
 801b20c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b210:	f104 0014 	add.w	r0, r4, #20
 801b214:	bd38      	pop	{r3, r4, r5, pc}
 801b216:	bf00      	nop
 801b218:	2000bc5c 	.word	0x2000bc5c

0801b21c <rmw_destroy_guard_condition>:
 801b21c:	b508      	push	{r3, lr}
 801b21e:	4b08      	ldr	r3, [pc, #32]	@ (801b240 <rmw_destroy_guard_condition+0x24>)
 801b220:	6819      	ldr	r1, [r3, #0]
 801b222:	b911      	cbnz	r1, 801b22a <rmw_destroy_guard_condition+0xe>
 801b224:	e00a      	b.n	801b23c <rmw_destroy_guard_condition+0x20>
 801b226:	6849      	ldr	r1, [r1, #4]
 801b228:	b141      	cbz	r1, 801b23c <rmw_destroy_guard_condition+0x20>
 801b22a:	688b      	ldr	r3, [r1, #8]
 801b22c:	3314      	adds	r3, #20
 801b22e:	4298      	cmp	r0, r3
 801b230:	d1f9      	bne.n	801b226 <rmw_destroy_guard_condition+0xa>
 801b232:	4803      	ldr	r0, [pc, #12]	@ (801b240 <rmw_destroy_guard_condition+0x24>)
 801b234:	f7fe fa04 	bl	8019640 <put_memory>
 801b238:	2000      	movs	r0, #0
 801b23a:	bd08      	pop	{r3, pc}
 801b23c:	2001      	movs	r0, #1
 801b23e:	bd08      	pop	{r3, pc}
 801b240:	2000bc5c 	.word	0x2000bc5c

0801b244 <rmw_trigger_guard_condition>:
 801b244:	b160      	cbz	r0, 801b260 <rmw_trigger_guard_condition+0x1c>
 801b246:	b510      	push	{r4, lr}
 801b248:	4604      	mov	r4, r0
 801b24a:	6800      	ldr	r0, [r0, #0]
 801b24c:	f7f6 f978 	bl	8011540 <is_uxrce_rmw_identifier_valid>
 801b250:	b908      	cbnz	r0, 801b256 <rmw_trigger_guard_condition+0x12>
 801b252:	2001      	movs	r0, #1
 801b254:	bd10      	pop	{r4, pc}
 801b256:	6863      	ldr	r3, [r4, #4]
 801b258:	2201      	movs	r2, #1
 801b25a:	741a      	strb	r2, [r3, #16]
 801b25c:	2000      	movs	r0, #0
 801b25e:	bd10      	pop	{r4, pc}
 801b260:	2001      	movs	r0, #1
 801b262:	4770      	bx	lr

0801b264 <rosidl_runtime_c__String__init>:
 801b264:	b510      	push	{r4, lr}
 801b266:	4604      	mov	r4, r0
 801b268:	b086      	sub	sp, #24
 801b26a:	b170      	cbz	r0, 801b28a <rosidl_runtime_c__String__init+0x26>
 801b26c:	a801      	add	r0, sp, #4
 801b26e:	f7f4 fdb3 	bl	800fdd8 <rcutils_get_default_allocator>
 801b272:	9b01      	ldr	r3, [sp, #4]
 801b274:	9905      	ldr	r1, [sp, #20]
 801b276:	2001      	movs	r0, #1
 801b278:	4798      	blx	r3
 801b27a:	6020      	str	r0, [r4, #0]
 801b27c:	b128      	cbz	r0, 801b28a <rosidl_runtime_c__String__init+0x26>
 801b27e:	2100      	movs	r1, #0
 801b280:	2201      	movs	r2, #1
 801b282:	7001      	strb	r1, [r0, #0]
 801b284:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801b288:	4610      	mov	r0, r2
 801b28a:	b006      	add	sp, #24
 801b28c:	bd10      	pop	{r4, pc}
 801b28e:	bf00      	nop

0801b290 <rosidl_runtime_c__String__fini>:
 801b290:	b320      	cbz	r0, 801b2dc <rosidl_runtime_c__String__fini+0x4c>
 801b292:	b510      	push	{r4, lr}
 801b294:	6803      	ldr	r3, [r0, #0]
 801b296:	b086      	sub	sp, #24
 801b298:	4604      	mov	r4, r0
 801b29a:	b173      	cbz	r3, 801b2ba <rosidl_runtime_c__String__fini+0x2a>
 801b29c:	6883      	ldr	r3, [r0, #8]
 801b29e:	b1f3      	cbz	r3, 801b2de <rosidl_runtime_c__String__fini+0x4e>
 801b2a0:	a801      	add	r0, sp, #4
 801b2a2:	f7f4 fd99 	bl	800fdd8 <rcutils_get_default_allocator>
 801b2a6:	9b02      	ldr	r3, [sp, #8]
 801b2a8:	9905      	ldr	r1, [sp, #20]
 801b2aa:	6820      	ldr	r0, [r4, #0]
 801b2ac:	4798      	blx	r3
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	e9c4 3300 	strd	r3, r3, [r4]
 801b2b4:	60a3      	str	r3, [r4, #8]
 801b2b6:	b006      	add	sp, #24
 801b2b8:	bd10      	pop	{r4, pc}
 801b2ba:	6843      	ldr	r3, [r0, #4]
 801b2bc:	b9db      	cbnz	r3, 801b2f6 <rosidl_runtime_c__String__fini+0x66>
 801b2be:	6883      	ldr	r3, [r0, #8]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d0f8      	beq.n	801b2b6 <rosidl_runtime_c__String__fini+0x26>
 801b2c4:	4b12      	ldr	r3, [pc, #72]	@ (801b310 <rosidl_runtime_c__String__fini+0x80>)
 801b2c6:	4813      	ldr	r0, [pc, #76]	@ (801b314 <rosidl_runtime_c__String__fini+0x84>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	2251      	movs	r2, #81	@ 0x51
 801b2cc:	68db      	ldr	r3, [r3, #12]
 801b2ce:	2101      	movs	r1, #1
 801b2d0:	f000 fb82 	bl	801b9d8 <fwrite>
 801b2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b2d8:	f000 f83e 	bl	801b358 <exit>
 801b2dc:	4770      	bx	lr
 801b2de:	4b0c      	ldr	r3, [pc, #48]	@ (801b310 <rosidl_runtime_c__String__fini+0x80>)
 801b2e0:	480d      	ldr	r0, [pc, #52]	@ (801b318 <rosidl_runtime_c__String__fini+0x88>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	224c      	movs	r2, #76	@ 0x4c
 801b2e6:	68db      	ldr	r3, [r3, #12]
 801b2e8:	2101      	movs	r1, #1
 801b2ea:	f000 fb75 	bl	801b9d8 <fwrite>
 801b2ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b2f2:	f000 f831 	bl	801b358 <exit>
 801b2f6:	4b06      	ldr	r3, [pc, #24]	@ (801b310 <rosidl_runtime_c__String__fini+0x80>)
 801b2f8:	4808      	ldr	r0, [pc, #32]	@ (801b31c <rosidl_runtime_c__String__fini+0x8c>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	224e      	movs	r2, #78	@ 0x4e
 801b2fe:	68db      	ldr	r3, [r3, #12]
 801b300:	2101      	movs	r1, #1
 801b302:	f000 fb69 	bl	801b9d8 <fwrite>
 801b306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b30a:	f000 f825 	bl	801b358 <exit>
 801b30e:	bf00      	nop
 801b310:	200009c0 	.word	0x200009c0
 801b314:	0801e9f0 	.word	0x0801e9f0
 801b318:	0801e950 	.word	0x0801e950
 801b31c:	0801e9a0 	.word	0x0801e9a0

0801b320 <calloc>:
 801b320:	4b02      	ldr	r3, [pc, #8]	@ (801b32c <calloc+0xc>)
 801b322:	460a      	mov	r2, r1
 801b324:	4601      	mov	r1, r0
 801b326:	6818      	ldr	r0, [r3, #0]
 801b328:	f000 b802 	b.w	801b330 <_calloc_r>
 801b32c:	200009c0 	.word	0x200009c0

0801b330 <_calloc_r>:
 801b330:	b570      	push	{r4, r5, r6, lr}
 801b332:	fba1 5402 	umull	r5, r4, r1, r2
 801b336:	b93c      	cbnz	r4, 801b348 <_calloc_r+0x18>
 801b338:	4629      	mov	r1, r5
 801b33a:	f000 f899 	bl	801b470 <_malloc_r>
 801b33e:	4606      	mov	r6, r0
 801b340:	b928      	cbnz	r0, 801b34e <_calloc_r+0x1e>
 801b342:	2600      	movs	r6, #0
 801b344:	4630      	mov	r0, r6
 801b346:	bd70      	pop	{r4, r5, r6, pc}
 801b348:	220c      	movs	r2, #12
 801b34a:	6002      	str	r2, [r0, #0]
 801b34c:	e7f9      	b.n	801b342 <_calloc_r+0x12>
 801b34e:	462a      	mov	r2, r5
 801b350:	4621      	mov	r1, r4
 801b352:	f000 fccf 	bl	801bcf4 <memset>
 801b356:	e7f5      	b.n	801b344 <_calloc_r+0x14>

0801b358 <exit>:
 801b358:	b508      	push	{r3, lr}
 801b35a:	4b06      	ldr	r3, [pc, #24]	@ (801b374 <exit+0x1c>)
 801b35c:	4604      	mov	r4, r0
 801b35e:	b113      	cbz	r3, 801b366 <exit+0xe>
 801b360:	2100      	movs	r1, #0
 801b362:	f3af 8000 	nop.w
 801b366:	4b04      	ldr	r3, [pc, #16]	@ (801b378 <exit+0x20>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	b103      	cbz	r3, 801b36e <exit+0x16>
 801b36c:	4798      	blx	r3
 801b36e:	4620      	mov	r0, r4
 801b370:	f7e7 fac8 	bl	8002904 <_exit>
 801b374:	00000000 	.word	0x00000000
 801b378:	2000bf80 	.word	0x2000bf80

0801b37c <getenv>:
 801b37c:	b507      	push	{r0, r1, r2, lr}
 801b37e:	4b04      	ldr	r3, [pc, #16]	@ (801b390 <getenv+0x14>)
 801b380:	4601      	mov	r1, r0
 801b382:	aa01      	add	r2, sp, #4
 801b384:	6818      	ldr	r0, [r3, #0]
 801b386:	f000 f805 	bl	801b394 <_findenv_r>
 801b38a:	b003      	add	sp, #12
 801b38c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b390:	200009c0 	.word	0x200009c0

0801b394 <_findenv_r>:
 801b394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b398:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b408 <_findenv_r+0x74>
 801b39c:	4606      	mov	r6, r0
 801b39e:	4689      	mov	r9, r1
 801b3a0:	4617      	mov	r7, r2
 801b3a2:	f000 fd9d 	bl	801bee0 <__env_lock>
 801b3a6:	f8da 4000 	ldr.w	r4, [sl]
 801b3aa:	b134      	cbz	r4, 801b3ba <_findenv_r+0x26>
 801b3ac:	464b      	mov	r3, r9
 801b3ae:	4698      	mov	r8, r3
 801b3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3b4:	b13a      	cbz	r2, 801b3c6 <_findenv_r+0x32>
 801b3b6:	2a3d      	cmp	r2, #61	@ 0x3d
 801b3b8:	d1f9      	bne.n	801b3ae <_findenv_r+0x1a>
 801b3ba:	4630      	mov	r0, r6
 801b3bc:	f000 fd96 	bl	801beec <__env_unlock>
 801b3c0:	2000      	movs	r0, #0
 801b3c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c6:	eba8 0809 	sub.w	r8, r8, r9
 801b3ca:	46a3      	mov	fp, r4
 801b3cc:	f854 0b04 	ldr.w	r0, [r4], #4
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	d0f2      	beq.n	801b3ba <_findenv_r+0x26>
 801b3d4:	4642      	mov	r2, r8
 801b3d6:	4649      	mov	r1, r9
 801b3d8:	f000 fca1 	bl	801bd1e <strncmp>
 801b3dc:	2800      	cmp	r0, #0
 801b3de:	d1f4      	bne.n	801b3ca <_findenv_r+0x36>
 801b3e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b3e4:	eb03 0508 	add.w	r5, r3, r8
 801b3e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b3ec:	2b3d      	cmp	r3, #61	@ 0x3d
 801b3ee:	d1ec      	bne.n	801b3ca <_findenv_r+0x36>
 801b3f0:	f8da 3000 	ldr.w	r3, [sl]
 801b3f4:	ebab 0303 	sub.w	r3, fp, r3
 801b3f8:	109b      	asrs	r3, r3, #2
 801b3fa:	4630      	mov	r0, r6
 801b3fc:	603b      	str	r3, [r7, #0]
 801b3fe:	f000 fd75 	bl	801beec <__env_unlock>
 801b402:	1c68      	adds	r0, r5, #1
 801b404:	e7dd      	b.n	801b3c2 <_findenv_r+0x2e>
 801b406:	bf00      	nop
 801b408:	20000000 	.word	0x20000000

0801b40c <malloc>:
 801b40c:	4b02      	ldr	r3, [pc, #8]	@ (801b418 <malloc+0xc>)
 801b40e:	4601      	mov	r1, r0
 801b410:	6818      	ldr	r0, [r3, #0]
 801b412:	f000 b82d 	b.w	801b470 <_malloc_r>
 801b416:	bf00      	nop
 801b418:	200009c0 	.word	0x200009c0

0801b41c <free>:
 801b41c:	4b02      	ldr	r3, [pc, #8]	@ (801b428 <free+0xc>)
 801b41e:	4601      	mov	r1, r0
 801b420:	6818      	ldr	r0, [r3, #0]
 801b422:	f000 bd69 	b.w	801bef8 <_free_r>
 801b426:	bf00      	nop
 801b428:	200009c0 	.word	0x200009c0

0801b42c <sbrk_aligned>:
 801b42c:	b570      	push	{r4, r5, r6, lr}
 801b42e:	4e0f      	ldr	r6, [pc, #60]	@ (801b46c <sbrk_aligned+0x40>)
 801b430:	460c      	mov	r4, r1
 801b432:	6831      	ldr	r1, [r6, #0]
 801b434:	4605      	mov	r5, r0
 801b436:	b911      	cbnz	r1, 801b43e <sbrk_aligned+0x12>
 801b438:	f000 fcce 	bl	801bdd8 <_sbrk_r>
 801b43c:	6030      	str	r0, [r6, #0]
 801b43e:	4621      	mov	r1, r4
 801b440:	4628      	mov	r0, r5
 801b442:	f000 fcc9 	bl	801bdd8 <_sbrk_r>
 801b446:	1c43      	adds	r3, r0, #1
 801b448:	d103      	bne.n	801b452 <sbrk_aligned+0x26>
 801b44a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b44e:	4620      	mov	r0, r4
 801b450:	bd70      	pop	{r4, r5, r6, pc}
 801b452:	1cc4      	adds	r4, r0, #3
 801b454:	f024 0403 	bic.w	r4, r4, #3
 801b458:	42a0      	cmp	r0, r4
 801b45a:	d0f8      	beq.n	801b44e <sbrk_aligned+0x22>
 801b45c:	1a21      	subs	r1, r4, r0
 801b45e:	4628      	mov	r0, r5
 801b460:	f000 fcba 	bl	801bdd8 <_sbrk_r>
 801b464:	3001      	adds	r0, #1
 801b466:	d1f2      	bne.n	801b44e <sbrk_aligned+0x22>
 801b468:	e7ef      	b.n	801b44a <sbrk_aligned+0x1e>
 801b46a:	bf00      	nop
 801b46c:	2000be40 	.word	0x2000be40

0801b470 <_malloc_r>:
 801b470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b474:	1ccd      	adds	r5, r1, #3
 801b476:	f025 0503 	bic.w	r5, r5, #3
 801b47a:	3508      	adds	r5, #8
 801b47c:	2d0c      	cmp	r5, #12
 801b47e:	bf38      	it	cc
 801b480:	250c      	movcc	r5, #12
 801b482:	2d00      	cmp	r5, #0
 801b484:	4606      	mov	r6, r0
 801b486:	db01      	blt.n	801b48c <_malloc_r+0x1c>
 801b488:	42a9      	cmp	r1, r5
 801b48a:	d904      	bls.n	801b496 <_malloc_r+0x26>
 801b48c:	230c      	movs	r3, #12
 801b48e:	6033      	str	r3, [r6, #0]
 801b490:	2000      	movs	r0, #0
 801b492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b56c <_malloc_r+0xfc>
 801b49a:	f000 f869 	bl	801b570 <__malloc_lock>
 801b49e:	f8d8 3000 	ldr.w	r3, [r8]
 801b4a2:	461c      	mov	r4, r3
 801b4a4:	bb44      	cbnz	r4, 801b4f8 <_malloc_r+0x88>
 801b4a6:	4629      	mov	r1, r5
 801b4a8:	4630      	mov	r0, r6
 801b4aa:	f7ff ffbf 	bl	801b42c <sbrk_aligned>
 801b4ae:	1c43      	adds	r3, r0, #1
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	d158      	bne.n	801b566 <_malloc_r+0xf6>
 801b4b4:	f8d8 4000 	ldr.w	r4, [r8]
 801b4b8:	4627      	mov	r7, r4
 801b4ba:	2f00      	cmp	r7, #0
 801b4bc:	d143      	bne.n	801b546 <_malloc_r+0xd6>
 801b4be:	2c00      	cmp	r4, #0
 801b4c0:	d04b      	beq.n	801b55a <_malloc_r+0xea>
 801b4c2:	6823      	ldr	r3, [r4, #0]
 801b4c4:	4639      	mov	r1, r7
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	eb04 0903 	add.w	r9, r4, r3
 801b4cc:	f000 fc84 	bl	801bdd8 <_sbrk_r>
 801b4d0:	4581      	cmp	r9, r0
 801b4d2:	d142      	bne.n	801b55a <_malloc_r+0xea>
 801b4d4:	6821      	ldr	r1, [r4, #0]
 801b4d6:	1a6d      	subs	r5, r5, r1
 801b4d8:	4629      	mov	r1, r5
 801b4da:	4630      	mov	r0, r6
 801b4dc:	f7ff ffa6 	bl	801b42c <sbrk_aligned>
 801b4e0:	3001      	adds	r0, #1
 801b4e2:	d03a      	beq.n	801b55a <_malloc_r+0xea>
 801b4e4:	6823      	ldr	r3, [r4, #0]
 801b4e6:	442b      	add	r3, r5
 801b4e8:	6023      	str	r3, [r4, #0]
 801b4ea:	f8d8 3000 	ldr.w	r3, [r8]
 801b4ee:	685a      	ldr	r2, [r3, #4]
 801b4f0:	bb62      	cbnz	r2, 801b54c <_malloc_r+0xdc>
 801b4f2:	f8c8 7000 	str.w	r7, [r8]
 801b4f6:	e00f      	b.n	801b518 <_malloc_r+0xa8>
 801b4f8:	6822      	ldr	r2, [r4, #0]
 801b4fa:	1b52      	subs	r2, r2, r5
 801b4fc:	d420      	bmi.n	801b540 <_malloc_r+0xd0>
 801b4fe:	2a0b      	cmp	r2, #11
 801b500:	d917      	bls.n	801b532 <_malloc_r+0xc2>
 801b502:	1961      	adds	r1, r4, r5
 801b504:	42a3      	cmp	r3, r4
 801b506:	6025      	str	r5, [r4, #0]
 801b508:	bf18      	it	ne
 801b50a:	6059      	strne	r1, [r3, #4]
 801b50c:	6863      	ldr	r3, [r4, #4]
 801b50e:	bf08      	it	eq
 801b510:	f8c8 1000 	streq.w	r1, [r8]
 801b514:	5162      	str	r2, [r4, r5]
 801b516:	604b      	str	r3, [r1, #4]
 801b518:	4630      	mov	r0, r6
 801b51a:	f000 f82f 	bl	801b57c <__malloc_unlock>
 801b51e:	f104 000b 	add.w	r0, r4, #11
 801b522:	1d23      	adds	r3, r4, #4
 801b524:	f020 0007 	bic.w	r0, r0, #7
 801b528:	1ac2      	subs	r2, r0, r3
 801b52a:	bf1c      	itt	ne
 801b52c:	1a1b      	subne	r3, r3, r0
 801b52e:	50a3      	strne	r3, [r4, r2]
 801b530:	e7af      	b.n	801b492 <_malloc_r+0x22>
 801b532:	6862      	ldr	r2, [r4, #4]
 801b534:	42a3      	cmp	r3, r4
 801b536:	bf0c      	ite	eq
 801b538:	f8c8 2000 	streq.w	r2, [r8]
 801b53c:	605a      	strne	r2, [r3, #4]
 801b53e:	e7eb      	b.n	801b518 <_malloc_r+0xa8>
 801b540:	4623      	mov	r3, r4
 801b542:	6864      	ldr	r4, [r4, #4]
 801b544:	e7ae      	b.n	801b4a4 <_malloc_r+0x34>
 801b546:	463c      	mov	r4, r7
 801b548:	687f      	ldr	r7, [r7, #4]
 801b54a:	e7b6      	b.n	801b4ba <_malloc_r+0x4a>
 801b54c:	461a      	mov	r2, r3
 801b54e:	685b      	ldr	r3, [r3, #4]
 801b550:	42a3      	cmp	r3, r4
 801b552:	d1fb      	bne.n	801b54c <_malloc_r+0xdc>
 801b554:	2300      	movs	r3, #0
 801b556:	6053      	str	r3, [r2, #4]
 801b558:	e7de      	b.n	801b518 <_malloc_r+0xa8>
 801b55a:	230c      	movs	r3, #12
 801b55c:	6033      	str	r3, [r6, #0]
 801b55e:	4630      	mov	r0, r6
 801b560:	f000 f80c 	bl	801b57c <__malloc_unlock>
 801b564:	e794      	b.n	801b490 <_malloc_r+0x20>
 801b566:	6005      	str	r5, [r0, #0]
 801b568:	e7d6      	b.n	801b518 <_malloc_r+0xa8>
 801b56a:	bf00      	nop
 801b56c:	2000be44 	.word	0x2000be44

0801b570 <__malloc_lock>:
 801b570:	4801      	ldr	r0, [pc, #4]	@ (801b578 <__malloc_lock+0x8>)
 801b572:	f000 bc7e 	b.w	801be72 <__retarget_lock_acquire_recursive>
 801b576:	bf00      	nop
 801b578:	2000bf89 	.word	0x2000bf89

0801b57c <__malloc_unlock>:
 801b57c:	4801      	ldr	r0, [pc, #4]	@ (801b584 <__malloc_unlock+0x8>)
 801b57e:	f000 bc79 	b.w	801be74 <__retarget_lock_release_recursive>
 801b582:	bf00      	nop
 801b584:	2000bf89 	.word	0x2000bf89

0801b588 <srand>:
 801b588:	b538      	push	{r3, r4, r5, lr}
 801b58a:	4b10      	ldr	r3, [pc, #64]	@ (801b5cc <srand+0x44>)
 801b58c:	681d      	ldr	r5, [r3, #0]
 801b58e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b590:	4604      	mov	r4, r0
 801b592:	b9b3      	cbnz	r3, 801b5c2 <srand+0x3a>
 801b594:	2018      	movs	r0, #24
 801b596:	f7ff ff39 	bl	801b40c <malloc>
 801b59a:	4602      	mov	r2, r0
 801b59c:	6328      	str	r0, [r5, #48]	@ 0x30
 801b59e:	b920      	cbnz	r0, 801b5aa <srand+0x22>
 801b5a0:	4b0b      	ldr	r3, [pc, #44]	@ (801b5d0 <srand+0x48>)
 801b5a2:	480c      	ldr	r0, [pc, #48]	@ (801b5d4 <srand+0x4c>)
 801b5a4:	2146      	movs	r1, #70	@ 0x46
 801b5a6:	f000 fc7d 	bl	801bea4 <__assert_func>
 801b5aa:	490b      	ldr	r1, [pc, #44]	@ (801b5d8 <srand+0x50>)
 801b5ac:	4b0b      	ldr	r3, [pc, #44]	@ (801b5dc <srand+0x54>)
 801b5ae:	e9c0 1300 	strd	r1, r3, [r0]
 801b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (801b5e0 <srand+0x58>)
 801b5b4:	6083      	str	r3, [r0, #8]
 801b5b6:	230b      	movs	r3, #11
 801b5b8:	8183      	strh	r3, [r0, #12]
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	2001      	movs	r0, #1
 801b5be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b5c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	611c      	str	r4, [r3, #16]
 801b5c8:	615a      	str	r2, [r3, #20]
 801b5ca:	bd38      	pop	{r3, r4, r5, pc}
 801b5cc:	200009c0 	.word	0x200009c0
 801b5d0:	0801ea42 	.word	0x0801ea42
 801b5d4:	0801ea59 	.word	0x0801ea59
 801b5d8:	abcd330e 	.word	0xabcd330e
 801b5dc:	e66d1234 	.word	0xe66d1234
 801b5e0:	0005deec 	.word	0x0005deec

0801b5e4 <rand>:
 801b5e4:	4b16      	ldr	r3, [pc, #88]	@ (801b640 <rand+0x5c>)
 801b5e6:	b510      	push	{r4, lr}
 801b5e8:	681c      	ldr	r4, [r3, #0]
 801b5ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b5ec:	b9b3      	cbnz	r3, 801b61c <rand+0x38>
 801b5ee:	2018      	movs	r0, #24
 801b5f0:	f7ff ff0c 	bl	801b40c <malloc>
 801b5f4:	4602      	mov	r2, r0
 801b5f6:	6320      	str	r0, [r4, #48]	@ 0x30
 801b5f8:	b920      	cbnz	r0, 801b604 <rand+0x20>
 801b5fa:	4b12      	ldr	r3, [pc, #72]	@ (801b644 <rand+0x60>)
 801b5fc:	4812      	ldr	r0, [pc, #72]	@ (801b648 <rand+0x64>)
 801b5fe:	2152      	movs	r1, #82	@ 0x52
 801b600:	f000 fc50 	bl	801bea4 <__assert_func>
 801b604:	4911      	ldr	r1, [pc, #68]	@ (801b64c <rand+0x68>)
 801b606:	4b12      	ldr	r3, [pc, #72]	@ (801b650 <rand+0x6c>)
 801b608:	e9c0 1300 	strd	r1, r3, [r0]
 801b60c:	4b11      	ldr	r3, [pc, #68]	@ (801b654 <rand+0x70>)
 801b60e:	6083      	str	r3, [r0, #8]
 801b610:	230b      	movs	r3, #11
 801b612:	8183      	strh	r3, [r0, #12]
 801b614:	2100      	movs	r1, #0
 801b616:	2001      	movs	r0, #1
 801b618:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b61c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b61e:	480e      	ldr	r0, [pc, #56]	@ (801b658 <rand+0x74>)
 801b620:	690b      	ldr	r3, [r1, #16]
 801b622:	694c      	ldr	r4, [r1, #20]
 801b624:	4a0d      	ldr	r2, [pc, #52]	@ (801b65c <rand+0x78>)
 801b626:	4358      	muls	r0, r3
 801b628:	fb02 0004 	mla	r0, r2, r4, r0
 801b62c:	fba3 3202 	umull	r3, r2, r3, r2
 801b630:	3301      	adds	r3, #1
 801b632:	eb40 0002 	adc.w	r0, r0, r2
 801b636:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b63a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b63e:	bd10      	pop	{r4, pc}
 801b640:	200009c0 	.word	0x200009c0
 801b644:	0801ea42 	.word	0x0801ea42
 801b648:	0801ea59 	.word	0x0801ea59
 801b64c:	abcd330e 	.word	0xabcd330e
 801b650:	e66d1234 	.word	0xe66d1234
 801b654:	0005deec 	.word	0x0005deec
 801b658:	5851f42d 	.word	0x5851f42d
 801b65c:	4c957f2d 	.word	0x4c957f2d

0801b660 <realloc>:
 801b660:	4b02      	ldr	r3, [pc, #8]	@ (801b66c <realloc+0xc>)
 801b662:	460a      	mov	r2, r1
 801b664:	4601      	mov	r1, r0
 801b666:	6818      	ldr	r0, [r3, #0]
 801b668:	f000 b802 	b.w	801b670 <_realloc_r>
 801b66c:	200009c0 	.word	0x200009c0

0801b670 <_realloc_r>:
 801b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b674:	4680      	mov	r8, r0
 801b676:	4615      	mov	r5, r2
 801b678:	460c      	mov	r4, r1
 801b67a:	b921      	cbnz	r1, 801b686 <_realloc_r+0x16>
 801b67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b680:	4611      	mov	r1, r2
 801b682:	f7ff bef5 	b.w	801b470 <_malloc_r>
 801b686:	b92a      	cbnz	r2, 801b694 <_realloc_r+0x24>
 801b688:	f000 fc36 	bl	801bef8 <_free_r>
 801b68c:	2400      	movs	r4, #0
 801b68e:	4620      	mov	r0, r4
 801b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b694:	f000 fc7a 	bl	801bf8c <_malloc_usable_size_r>
 801b698:	4285      	cmp	r5, r0
 801b69a:	4606      	mov	r6, r0
 801b69c:	d802      	bhi.n	801b6a4 <_realloc_r+0x34>
 801b69e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b6a2:	d8f4      	bhi.n	801b68e <_realloc_r+0x1e>
 801b6a4:	4629      	mov	r1, r5
 801b6a6:	4640      	mov	r0, r8
 801b6a8:	f7ff fee2 	bl	801b470 <_malloc_r>
 801b6ac:	4607      	mov	r7, r0
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	d0ec      	beq.n	801b68c <_realloc_r+0x1c>
 801b6b2:	42b5      	cmp	r5, r6
 801b6b4:	462a      	mov	r2, r5
 801b6b6:	4621      	mov	r1, r4
 801b6b8:	bf28      	it	cs
 801b6ba:	4632      	movcs	r2, r6
 801b6bc:	f000 fbe3 	bl	801be86 <memcpy>
 801b6c0:	4621      	mov	r1, r4
 801b6c2:	4640      	mov	r0, r8
 801b6c4:	f000 fc18 	bl	801bef8 <_free_r>
 801b6c8:	463c      	mov	r4, r7
 801b6ca:	e7e0      	b.n	801b68e <_realloc_r+0x1e>

0801b6cc <_strtoul_l.constprop.0>:
 801b6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6d0:	4e34      	ldr	r6, [pc, #208]	@ (801b7a4 <_strtoul_l.constprop.0+0xd8>)
 801b6d2:	4686      	mov	lr, r0
 801b6d4:	460d      	mov	r5, r1
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b6dc:	5d37      	ldrb	r7, [r6, r4]
 801b6de:	f017 0708 	ands.w	r7, r7, #8
 801b6e2:	d1f8      	bne.n	801b6d6 <_strtoul_l.constprop.0+0xa>
 801b6e4:	2c2d      	cmp	r4, #45	@ 0x2d
 801b6e6:	d12f      	bne.n	801b748 <_strtoul_l.constprop.0+0x7c>
 801b6e8:	782c      	ldrb	r4, [r5, #0]
 801b6ea:	2701      	movs	r7, #1
 801b6ec:	1c85      	adds	r5, r0, #2
 801b6ee:	f033 0010 	bics.w	r0, r3, #16
 801b6f2:	d109      	bne.n	801b708 <_strtoul_l.constprop.0+0x3c>
 801b6f4:	2c30      	cmp	r4, #48	@ 0x30
 801b6f6:	d12c      	bne.n	801b752 <_strtoul_l.constprop.0+0x86>
 801b6f8:	7828      	ldrb	r0, [r5, #0]
 801b6fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b6fe:	2858      	cmp	r0, #88	@ 0x58
 801b700:	d127      	bne.n	801b752 <_strtoul_l.constprop.0+0x86>
 801b702:	786c      	ldrb	r4, [r5, #1]
 801b704:	2310      	movs	r3, #16
 801b706:	3502      	adds	r5, #2
 801b708:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b70c:	2600      	movs	r6, #0
 801b70e:	fbb8 f8f3 	udiv	r8, r8, r3
 801b712:	fb03 f908 	mul.w	r9, r3, r8
 801b716:	ea6f 0909 	mvn.w	r9, r9
 801b71a:	4630      	mov	r0, r6
 801b71c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b720:	f1bc 0f09 	cmp.w	ip, #9
 801b724:	d81c      	bhi.n	801b760 <_strtoul_l.constprop.0+0x94>
 801b726:	4664      	mov	r4, ip
 801b728:	42a3      	cmp	r3, r4
 801b72a:	dd2a      	ble.n	801b782 <_strtoul_l.constprop.0+0xb6>
 801b72c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b730:	d007      	beq.n	801b742 <_strtoul_l.constprop.0+0x76>
 801b732:	4580      	cmp	r8, r0
 801b734:	d322      	bcc.n	801b77c <_strtoul_l.constprop.0+0xb0>
 801b736:	d101      	bne.n	801b73c <_strtoul_l.constprop.0+0x70>
 801b738:	45a1      	cmp	r9, r4
 801b73a:	db1f      	blt.n	801b77c <_strtoul_l.constprop.0+0xb0>
 801b73c:	fb00 4003 	mla	r0, r0, r3, r4
 801b740:	2601      	movs	r6, #1
 801b742:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b746:	e7e9      	b.n	801b71c <_strtoul_l.constprop.0+0x50>
 801b748:	2c2b      	cmp	r4, #43	@ 0x2b
 801b74a:	bf04      	itt	eq
 801b74c:	782c      	ldrbeq	r4, [r5, #0]
 801b74e:	1c85      	addeq	r5, r0, #2
 801b750:	e7cd      	b.n	801b6ee <_strtoul_l.constprop.0+0x22>
 801b752:	2b00      	cmp	r3, #0
 801b754:	d1d8      	bne.n	801b708 <_strtoul_l.constprop.0+0x3c>
 801b756:	2c30      	cmp	r4, #48	@ 0x30
 801b758:	bf0c      	ite	eq
 801b75a:	2308      	moveq	r3, #8
 801b75c:	230a      	movne	r3, #10
 801b75e:	e7d3      	b.n	801b708 <_strtoul_l.constprop.0+0x3c>
 801b760:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b764:	f1bc 0f19 	cmp.w	ip, #25
 801b768:	d801      	bhi.n	801b76e <_strtoul_l.constprop.0+0xa2>
 801b76a:	3c37      	subs	r4, #55	@ 0x37
 801b76c:	e7dc      	b.n	801b728 <_strtoul_l.constprop.0+0x5c>
 801b76e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b772:	f1bc 0f19 	cmp.w	ip, #25
 801b776:	d804      	bhi.n	801b782 <_strtoul_l.constprop.0+0xb6>
 801b778:	3c57      	subs	r4, #87	@ 0x57
 801b77a:	e7d5      	b.n	801b728 <_strtoul_l.constprop.0+0x5c>
 801b77c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b780:	e7df      	b.n	801b742 <_strtoul_l.constprop.0+0x76>
 801b782:	1c73      	adds	r3, r6, #1
 801b784:	d106      	bne.n	801b794 <_strtoul_l.constprop.0+0xc8>
 801b786:	2322      	movs	r3, #34	@ 0x22
 801b788:	f8ce 3000 	str.w	r3, [lr]
 801b78c:	4630      	mov	r0, r6
 801b78e:	b932      	cbnz	r2, 801b79e <_strtoul_l.constprop.0+0xd2>
 801b790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b794:	b107      	cbz	r7, 801b798 <_strtoul_l.constprop.0+0xcc>
 801b796:	4240      	negs	r0, r0
 801b798:	2a00      	cmp	r2, #0
 801b79a:	d0f9      	beq.n	801b790 <_strtoul_l.constprop.0+0xc4>
 801b79c:	b106      	cbz	r6, 801b7a0 <_strtoul_l.constprop.0+0xd4>
 801b79e:	1e69      	subs	r1, r5, #1
 801b7a0:	6011      	str	r1, [r2, #0]
 801b7a2:	e7f5      	b.n	801b790 <_strtoul_l.constprop.0+0xc4>
 801b7a4:	0801eab2 	.word	0x0801eab2

0801b7a8 <strtoul>:
 801b7a8:	4613      	mov	r3, r2
 801b7aa:	460a      	mov	r2, r1
 801b7ac:	4601      	mov	r1, r0
 801b7ae:	4802      	ldr	r0, [pc, #8]	@ (801b7b8 <strtoul+0x10>)
 801b7b0:	6800      	ldr	r0, [r0, #0]
 801b7b2:	f7ff bf8b 	b.w	801b6cc <_strtoul_l.constprop.0>
 801b7b6:	bf00      	nop
 801b7b8:	200009c0 	.word	0x200009c0

0801b7bc <std>:
 801b7bc:	2300      	movs	r3, #0
 801b7be:	b510      	push	{r4, lr}
 801b7c0:	4604      	mov	r4, r0
 801b7c2:	e9c0 3300 	strd	r3, r3, [r0]
 801b7c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b7ca:	6083      	str	r3, [r0, #8]
 801b7cc:	8181      	strh	r1, [r0, #12]
 801b7ce:	6643      	str	r3, [r0, #100]	@ 0x64
 801b7d0:	81c2      	strh	r2, [r0, #14]
 801b7d2:	6183      	str	r3, [r0, #24]
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	2208      	movs	r2, #8
 801b7d8:	305c      	adds	r0, #92	@ 0x5c
 801b7da:	f000 fa8b 	bl	801bcf4 <memset>
 801b7de:	4b0d      	ldr	r3, [pc, #52]	@ (801b814 <std+0x58>)
 801b7e0:	6263      	str	r3, [r4, #36]	@ 0x24
 801b7e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b818 <std+0x5c>)
 801b7e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b7e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b81c <std+0x60>)
 801b7e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b7ea:	4b0d      	ldr	r3, [pc, #52]	@ (801b820 <std+0x64>)
 801b7ec:	6323      	str	r3, [r4, #48]	@ 0x30
 801b7ee:	4b0d      	ldr	r3, [pc, #52]	@ (801b824 <std+0x68>)
 801b7f0:	6224      	str	r4, [r4, #32]
 801b7f2:	429c      	cmp	r4, r3
 801b7f4:	d006      	beq.n	801b804 <std+0x48>
 801b7f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b7fa:	4294      	cmp	r4, r2
 801b7fc:	d002      	beq.n	801b804 <std+0x48>
 801b7fe:	33d0      	adds	r3, #208	@ 0xd0
 801b800:	429c      	cmp	r4, r3
 801b802:	d105      	bne.n	801b810 <std+0x54>
 801b804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b80c:	f000 bb30 	b.w	801be70 <__retarget_lock_init_recursive>
 801b810:	bd10      	pop	{r4, pc}
 801b812:	bf00      	nop
 801b814:	0801ba81 	.word	0x0801ba81
 801b818:	0801baa3 	.word	0x0801baa3
 801b81c:	0801badb 	.word	0x0801badb
 801b820:	0801baff 	.word	0x0801baff
 801b824:	2000be48 	.word	0x2000be48

0801b828 <stdio_exit_handler>:
 801b828:	4a02      	ldr	r2, [pc, #8]	@ (801b834 <stdio_exit_handler+0xc>)
 801b82a:	4903      	ldr	r1, [pc, #12]	@ (801b838 <stdio_exit_handler+0x10>)
 801b82c:	4803      	ldr	r0, [pc, #12]	@ (801b83c <stdio_exit_handler+0x14>)
 801b82e:	f000 b869 	b.w	801b904 <_fwalk_sglue>
 801b832:	bf00      	nop
 801b834:	200009b4 	.word	0x200009b4
 801b838:	0801c8f5 	.word	0x0801c8f5
 801b83c:	200009c4 	.word	0x200009c4

0801b840 <cleanup_stdio>:
 801b840:	6841      	ldr	r1, [r0, #4]
 801b842:	4b0c      	ldr	r3, [pc, #48]	@ (801b874 <cleanup_stdio+0x34>)
 801b844:	4299      	cmp	r1, r3
 801b846:	b510      	push	{r4, lr}
 801b848:	4604      	mov	r4, r0
 801b84a:	d001      	beq.n	801b850 <cleanup_stdio+0x10>
 801b84c:	f001 f852 	bl	801c8f4 <_fflush_r>
 801b850:	68a1      	ldr	r1, [r4, #8]
 801b852:	4b09      	ldr	r3, [pc, #36]	@ (801b878 <cleanup_stdio+0x38>)
 801b854:	4299      	cmp	r1, r3
 801b856:	d002      	beq.n	801b85e <cleanup_stdio+0x1e>
 801b858:	4620      	mov	r0, r4
 801b85a:	f001 f84b 	bl	801c8f4 <_fflush_r>
 801b85e:	68e1      	ldr	r1, [r4, #12]
 801b860:	4b06      	ldr	r3, [pc, #24]	@ (801b87c <cleanup_stdio+0x3c>)
 801b862:	4299      	cmp	r1, r3
 801b864:	d004      	beq.n	801b870 <cleanup_stdio+0x30>
 801b866:	4620      	mov	r0, r4
 801b868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b86c:	f001 b842 	b.w	801c8f4 <_fflush_r>
 801b870:	bd10      	pop	{r4, pc}
 801b872:	bf00      	nop
 801b874:	2000be48 	.word	0x2000be48
 801b878:	2000beb0 	.word	0x2000beb0
 801b87c:	2000bf18 	.word	0x2000bf18

0801b880 <global_stdio_init.part.0>:
 801b880:	b510      	push	{r4, lr}
 801b882:	4b0b      	ldr	r3, [pc, #44]	@ (801b8b0 <global_stdio_init.part.0+0x30>)
 801b884:	4c0b      	ldr	r4, [pc, #44]	@ (801b8b4 <global_stdio_init.part.0+0x34>)
 801b886:	4a0c      	ldr	r2, [pc, #48]	@ (801b8b8 <global_stdio_init.part.0+0x38>)
 801b888:	601a      	str	r2, [r3, #0]
 801b88a:	4620      	mov	r0, r4
 801b88c:	2200      	movs	r2, #0
 801b88e:	2104      	movs	r1, #4
 801b890:	f7ff ff94 	bl	801b7bc <std>
 801b894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b898:	2201      	movs	r2, #1
 801b89a:	2109      	movs	r1, #9
 801b89c:	f7ff ff8e 	bl	801b7bc <std>
 801b8a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b8a4:	2202      	movs	r2, #2
 801b8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8aa:	2112      	movs	r1, #18
 801b8ac:	f7ff bf86 	b.w	801b7bc <std>
 801b8b0:	2000bf80 	.word	0x2000bf80
 801b8b4:	2000be48 	.word	0x2000be48
 801b8b8:	0801b829 	.word	0x0801b829

0801b8bc <__sfp_lock_acquire>:
 801b8bc:	4801      	ldr	r0, [pc, #4]	@ (801b8c4 <__sfp_lock_acquire+0x8>)
 801b8be:	f000 bad8 	b.w	801be72 <__retarget_lock_acquire_recursive>
 801b8c2:	bf00      	nop
 801b8c4:	2000bf8a 	.word	0x2000bf8a

0801b8c8 <__sfp_lock_release>:
 801b8c8:	4801      	ldr	r0, [pc, #4]	@ (801b8d0 <__sfp_lock_release+0x8>)
 801b8ca:	f000 bad3 	b.w	801be74 <__retarget_lock_release_recursive>
 801b8ce:	bf00      	nop
 801b8d0:	2000bf8a 	.word	0x2000bf8a

0801b8d4 <__sinit>:
 801b8d4:	b510      	push	{r4, lr}
 801b8d6:	4604      	mov	r4, r0
 801b8d8:	f7ff fff0 	bl	801b8bc <__sfp_lock_acquire>
 801b8dc:	6a23      	ldr	r3, [r4, #32]
 801b8de:	b11b      	cbz	r3, 801b8e8 <__sinit+0x14>
 801b8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8e4:	f7ff bff0 	b.w	801b8c8 <__sfp_lock_release>
 801b8e8:	4b04      	ldr	r3, [pc, #16]	@ (801b8fc <__sinit+0x28>)
 801b8ea:	6223      	str	r3, [r4, #32]
 801b8ec:	4b04      	ldr	r3, [pc, #16]	@ (801b900 <__sinit+0x2c>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d1f5      	bne.n	801b8e0 <__sinit+0xc>
 801b8f4:	f7ff ffc4 	bl	801b880 <global_stdio_init.part.0>
 801b8f8:	e7f2      	b.n	801b8e0 <__sinit+0xc>
 801b8fa:	bf00      	nop
 801b8fc:	0801b841 	.word	0x0801b841
 801b900:	2000bf80 	.word	0x2000bf80

0801b904 <_fwalk_sglue>:
 801b904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b908:	4607      	mov	r7, r0
 801b90a:	4688      	mov	r8, r1
 801b90c:	4614      	mov	r4, r2
 801b90e:	2600      	movs	r6, #0
 801b910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b914:	f1b9 0901 	subs.w	r9, r9, #1
 801b918:	d505      	bpl.n	801b926 <_fwalk_sglue+0x22>
 801b91a:	6824      	ldr	r4, [r4, #0]
 801b91c:	2c00      	cmp	r4, #0
 801b91e:	d1f7      	bne.n	801b910 <_fwalk_sglue+0xc>
 801b920:	4630      	mov	r0, r6
 801b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b926:	89ab      	ldrh	r3, [r5, #12]
 801b928:	2b01      	cmp	r3, #1
 801b92a:	d907      	bls.n	801b93c <_fwalk_sglue+0x38>
 801b92c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b930:	3301      	adds	r3, #1
 801b932:	d003      	beq.n	801b93c <_fwalk_sglue+0x38>
 801b934:	4629      	mov	r1, r5
 801b936:	4638      	mov	r0, r7
 801b938:	47c0      	blx	r8
 801b93a:	4306      	orrs	r6, r0
 801b93c:	3568      	adds	r5, #104	@ 0x68
 801b93e:	e7e9      	b.n	801b914 <_fwalk_sglue+0x10>

0801b940 <_fwrite_r>:
 801b940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b944:	9c08      	ldr	r4, [sp, #32]
 801b946:	468a      	mov	sl, r1
 801b948:	4690      	mov	r8, r2
 801b94a:	fb02 f903 	mul.w	r9, r2, r3
 801b94e:	4606      	mov	r6, r0
 801b950:	b118      	cbz	r0, 801b95a <_fwrite_r+0x1a>
 801b952:	6a03      	ldr	r3, [r0, #32]
 801b954:	b90b      	cbnz	r3, 801b95a <_fwrite_r+0x1a>
 801b956:	f7ff ffbd 	bl	801b8d4 <__sinit>
 801b95a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b95c:	07dd      	lsls	r5, r3, #31
 801b95e:	d405      	bmi.n	801b96c <_fwrite_r+0x2c>
 801b960:	89a3      	ldrh	r3, [r4, #12]
 801b962:	0598      	lsls	r0, r3, #22
 801b964:	d402      	bmi.n	801b96c <_fwrite_r+0x2c>
 801b966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b968:	f000 fa83 	bl	801be72 <__retarget_lock_acquire_recursive>
 801b96c:	89a3      	ldrh	r3, [r4, #12]
 801b96e:	0719      	lsls	r1, r3, #28
 801b970:	d516      	bpl.n	801b9a0 <_fwrite_r+0x60>
 801b972:	6923      	ldr	r3, [r4, #16]
 801b974:	b1a3      	cbz	r3, 801b9a0 <_fwrite_r+0x60>
 801b976:	2500      	movs	r5, #0
 801b978:	454d      	cmp	r5, r9
 801b97a:	d01f      	beq.n	801b9bc <_fwrite_r+0x7c>
 801b97c:	68a7      	ldr	r7, [r4, #8]
 801b97e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b982:	3f01      	subs	r7, #1
 801b984:	2f00      	cmp	r7, #0
 801b986:	60a7      	str	r7, [r4, #8]
 801b988:	da04      	bge.n	801b994 <_fwrite_r+0x54>
 801b98a:	69a3      	ldr	r3, [r4, #24]
 801b98c:	429f      	cmp	r7, r3
 801b98e:	db0f      	blt.n	801b9b0 <_fwrite_r+0x70>
 801b990:	290a      	cmp	r1, #10
 801b992:	d00d      	beq.n	801b9b0 <_fwrite_r+0x70>
 801b994:	6823      	ldr	r3, [r4, #0]
 801b996:	1c5a      	adds	r2, r3, #1
 801b998:	6022      	str	r2, [r4, #0]
 801b99a:	7019      	strb	r1, [r3, #0]
 801b99c:	3501      	adds	r5, #1
 801b99e:	e7eb      	b.n	801b978 <_fwrite_r+0x38>
 801b9a0:	4621      	mov	r1, r4
 801b9a2:	4630      	mov	r0, r6
 801b9a4:	f000 f926 	bl	801bbf4 <__swsetup_r>
 801b9a8:	2800      	cmp	r0, #0
 801b9aa:	d0e4      	beq.n	801b976 <_fwrite_r+0x36>
 801b9ac:	2500      	movs	r5, #0
 801b9ae:	e005      	b.n	801b9bc <_fwrite_r+0x7c>
 801b9b0:	4622      	mov	r2, r4
 801b9b2:	4630      	mov	r0, r6
 801b9b4:	f000 f8e0 	bl	801bb78 <__swbuf_r>
 801b9b8:	3001      	adds	r0, #1
 801b9ba:	d1ef      	bne.n	801b99c <_fwrite_r+0x5c>
 801b9bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b9be:	07da      	lsls	r2, r3, #31
 801b9c0:	d405      	bmi.n	801b9ce <_fwrite_r+0x8e>
 801b9c2:	89a3      	ldrh	r3, [r4, #12]
 801b9c4:	059b      	lsls	r3, r3, #22
 801b9c6:	d402      	bmi.n	801b9ce <_fwrite_r+0x8e>
 801b9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b9ca:	f000 fa53 	bl	801be74 <__retarget_lock_release_recursive>
 801b9ce:	fbb5 f0f8 	udiv	r0, r5, r8
 801b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b9d8 <fwrite>:
 801b9d8:	b507      	push	{r0, r1, r2, lr}
 801b9da:	9300      	str	r3, [sp, #0]
 801b9dc:	4613      	mov	r3, r2
 801b9de:	460a      	mov	r2, r1
 801b9e0:	4601      	mov	r1, r0
 801b9e2:	4803      	ldr	r0, [pc, #12]	@ (801b9f0 <fwrite+0x18>)
 801b9e4:	6800      	ldr	r0, [r0, #0]
 801b9e6:	f7ff ffab 	bl	801b940 <_fwrite_r>
 801b9ea:	b003      	add	sp, #12
 801b9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9f0:	200009c0 	.word	0x200009c0

0801b9f4 <iprintf>:
 801b9f4:	b40f      	push	{r0, r1, r2, r3}
 801b9f6:	b507      	push	{r0, r1, r2, lr}
 801b9f8:	4906      	ldr	r1, [pc, #24]	@ (801ba14 <iprintf+0x20>)
 801b9fa:	ab04      	add	r3, sp, #16
 801b9fc:	6808      	ldr	r0, [r1, #0]
 801b9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba02:	6881      	ldr	r1, [r0, #8]
 801ba04:	9301      	str	r3, [sp, #4]
 801ba06:	f000 fc4b 	bl	801c2a0 <_vfiprintf_r>
 801ba0a:	b003      	add	sp, #12
 801ba0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba10:	b004      	add	sp, #16
 801ba12:	4770      	bx	lr
 801ba14:	200009c0 	.word	0x200009c0

0801ba18 <sniprintf>:
 801ba18:	b40c      	push	{r2, r3}
 801ba1a:	b530      	push	{r4, r5, lr}
 801ba1c:	4b17      	ldr	r3, [pc, #92]	@ (801ba7c <sniprintf+0x64>)
 801ba1e:	1e0c      	subs	r4, r1, #0
 801ba20:	681d      	ldr	r5, [r3, #0]
 801ba22:	b09d      	sub	sp, #116	@ 0x74
 801ba24:	da08      	bge.n	801ba38 <sniprintf+0x20>
 801ba26:	238b      	movs	r3, #139	@ 0x8b
 801ba28:	602b      	str	r3, [r5, #0]
 801ba2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba2e:	b01d      	add	sp, #116	@ 0x74
 801ba30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba34:	b002      	add	sp, #8
 801ba36:	4770      	bx	lr
 801ba38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ba3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba40:	bf14      	ite	ne
 801ba42:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ba46:	4623      	moveq	r3, r4
 801ba48:	9304      	str	r3, [sp, #16]
 801ba4a:	9307      	str	r3, [sp, #28]
 801ba4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ba50:	9002      	str	r0, [sp, #8]
 801ba52:	9006      	str	r0, [sp, #24]
 801ba54:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ba5a:	ab21      	add	r3, sp, #132	@ 0x84
 801ba5c:	a902      	add	r1, sp, #8
 801ba5e:	4628      	mov	r0, r5
 801ba60:	9301      	str	r3, [sp, #4]
 801ba62:	f000 faf7 	bl	801c054 <_svfiprintf_r>
 801ba66:	1c43      	adds	r3, r0, #1
 801ba68:	bfbc      	itt	lt
 801ba6a:	238b      	movlt	r3, #139	@ 0x8b
 801ba6c:	602b      	strlt	r3, [r5, #0]
 801ba6e:	2c00      	cmp	r4, #0
 801ba70:	d0dd      	beq.n	801ba2e <sniprintf+0x16>
 801ba72:	9b02      	ldr	r3, [sp, #8]
 801ba74:	2200      	movs	r2, #0
 801ba76:	701a      	strb	r2, [r3, #0]
 801ba78:	e7d9      	b.n	801ba2e <sniprintf+0x16>
 801ba7a:	bf00      	nop
 801ba7c:	200009c0 	.word	0x200009c0

0801ba80 <__sread>:
 801ba80:	b510      	push	{r4, lr}
 801ba82:	460c      	mov	r4, r1
 801ba84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba88:	f000 f994 	bl	801bdb4 <_read_r>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	bfab      	itete	ge
 801ba90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ba92:	89a3      	ldrhlt	r3, [r4, #12]
 801ba94:	181b      	addge	r3, r3, r0
 801ba96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ba9a:	bfac      	ite	ge
 801ba9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ba9e:	81a3      	strhlt	r3, [r4, #12]
 801baa0:	bd10      	pop	{r4, pc}

0801baa2 <__swrite>:
 801baa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baa6:	461f      	mov	r7, r3
 801baa8:	898b      	ldrh	r3, [r1, #12]
 801baaa:	05db      	lsls	r3, r3, #23
 801baac:	4605      	mov	r5, r0
 801baae:	460c      	mov	r4, r1
 801bab0:	4616      	mov	r6, r2
 801bab2:	d505      	bpl.n	801bac0 <__swrite+0x1e>
 801bab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bab8:	2302      	movs	r3, #2
 801baba:	2200      	movs	r2, #0
 801babc:	f000 f968 	bl	801bd90 <_lseek_r>
 801bac0:	89a3      	ldrh	r3, [r4, #12]
 801bac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801baca:	81a3      	strh	r3, [r4, #12]
 801bacc:	4632      	mov	r2, r6
 801bace:	463b      	mov	r3, r7
 801bad0:	4628      	mov	r0, r5
 801bad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bad6:	f000 b98f 	b.w	801bdf8 <_write_r>

0801bada <__sseek>:
 801bada:	b510      	push	{r4, lr}
 801badc:	460c      	mov	r4, r1
 801bade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bae2:	f000 f955 	bl	801bd90 <_lseek_r>
 801bae6:	1c43      	adds	r3, r0, #1
 801bae8:	89a3      	ldrh	r3, [r4, #12]
 801baea:	bf15      	itete	ne
 801baec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801baee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801baf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801baf6:	81a3      	strheq	r3, [r4, #12]
 801baf8:	bf18      	it	ne
 801bafa:	81a3      	strhne	r3, [r4, #12]
 801bafc:	bd10      	pop	{r4, pc}

0801bafe <__sclose>:
 801bafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb02:	f000 b935 	b.w	801bd70 <_close_r>

0801bb06 <_vsniprintf_r>:
 801bb06:	b530      	push	{r4, r5, lr}
 801bb08:	4614      	mov	r4, r2
 801bb0a:	2c00      	cmp	r4, #0
 801bb0c:	b09b      	sub	sp, #108	@ 0x6c
 801bb0e:	4605      	mov	r5, r0
 801bb10:	461a      	mov	r2, r3
 801bb12:	da05      	bge.n	801bb20 <_vsniprintf_r+0x1a>
 801bb14:	238b      	movs	r3, #139	@ 0x8b
 801bb16:	6003      	str	r3, [r0, #0]
 801bb18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bb1c:	b01b      	add	sp, #108	@ 0x6c
 801bb1e:	bd30      	pop	{r4, r5, pc}
 801bb20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bb24:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bb28:	bf14      	ite	ne
 801bb2a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801bb2e:	4623      	moveq	r3, r4
 801bb30:	9302      	str	r3, [sp, #8]
 801bb32:	9305      	str	r3, [sp, #20]
 801bb34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bb38:	9100      	str	r1, [sp, #0]
 801bb3a:	9104      	str	r1, [sp, #16]
 801bb3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bb40:	4669      	mov	r1, sp
 801bb42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bb44:	f000 fa86 	bl	801c054 <_svfiprintf_r>
 801bb48:	1c43      	adds	r3, r0, #1
 801bb4a:	bfbc      	itt	lt
 801bb4c:	238b      	movlt	r3, #139	@ 0x8b
 801bb4e:	602b      	strlt	r3, [r5, #0]
 801bb50:	2c00      	cmp	r4, #0
 801bb52:	d0e3      	beq.n	801bb1c <_vsniprintf_r+0x16>
 801bb54:	9b00      	ldr	r3, [sp, #0]
 801bb56:	2200      	movs	r2, #0
 801bb58:	701a      	strb	r2, [r3, #0]
 801bb5a:	e7df      	b.n	801bb1c <_vsniprintf_r+0x16>

0801bb5c <vsniprintf>:
 801bb5c:	b507      	push	{r0, r1, r2, lr}
 801bb5e:	9300      	str	r3, [sp, #0]
 801bb60:	4613      	mov	r3, r2
 801bb62:	460a      	mov	r2, r1
 801bb64:	4601      	mov	r1, r0
 801bb66:	4803      	ldr	r0, [pc, #12]	@ (801bb74 <vsniprintf+0x18>)
 801bb68:	6800      	ldr	r0, [r0, #0]
 801bb6a:	f7ff ffcc 	bl	801bb06 <_vsniprintf_r>
 801bb6e:	b003      	add	sp, #12
 801bb70:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb74:	200009c0 	.word	0x200009c0

0801bb78 <__swbuf_r>:
 801bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb7a:	460e      	mov	r6, r1
 801bb7c:	4614      	mov	r4, r2
 801bb7e:	4605      	mov	r5, r0
 801bb80:	b118      	cbz	r0, 801bb8a <__swbuf_r+0x12>
 801bb82:	6a03      	ldr	r3, [r0, #32]
 801bb84:	b90b      	cbnz	r3, 801bb8a <__swbuf_r+0x12>
 801bb86:	f7ff fea5 	bl	801b8d4 <__sinit>
 801bb8a:	69a3      	ldr	r3, [r4, #24]
 801bb8c:	60a3      	str	r3, [r4, #8]
 801bb8e:	89a3      	ldrh	r3, [r4, #12]
 801bb90:	071a      	lsls	r2, r3, #28
 801bb92:	d501      	bpl.n	801bb98 <__swbuf_r+0x20>
 801bb94:	6923      	ldr	r3, [r4, #16]
 801bb96:	b943      	cbnz	r3, 801bbaa <__swbuf_r+0x32>
 801bb98:	4621      	mov	r1, r4
 801bb9a:	4628      	mov	r0, r5
 801bb9c:	f000 f82a 	bl	801bbf4 <__swsetup_r>
 801bba0:	b118      	cbz	r0, 801bbaa <__swbuf_r+0x32>
 801bba2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801bba6:	4638      	mov	r0, r7
 801bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbaa:	6823      	ldr	r3, [r4, #0]
 801bbac:	6922      	ldr	r2, [r4, #16]
 801bbae:	1a98      	subs	r0, r3, r2
 801bbb0:	6963      	ldr	r3, [r4, #20]
 801bbb2:	b2f6      	uxtb	r6, r6
 801bbb4:	4283      	cmp	r3, r0
 801bbb6:	4637      	mov	r7, r6
 801bbb8:	dc05      	bgt.n	801bbc6 <__swbuf_r+0x4e>
 801bbba:	4621      	mov	r1, r4
 801bbbc:	4628      	mov	r0, r5
 801bbbe:	f000 fe99 	bl	801c8f4 <_fflush_r>
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	d1ed      	bne.n	801bba2 <__swbuf_r+0x2a>
 801bbc6:	68a3      	ldr	r3, [r4, #8]
 801bbc8:	3b01      	subs	r3, #1
 801bbca:	60a3      	str	r3, [r4, #8]
 801bbcc:	6823      	ldr	r3, [r4, #0]
 801bbce:	1c5a      	adds	r2, r3, #1
 801bbd0:	6022      	str	r2, [r4, #0]
 801bbd2:	701e      	strb	r6, [r3, #0]
 801bbd4:	6962      	ldr	r2, [r4, #20]
 801bbd6:	1c43      	adds	r3, r0, #1
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d004      	beq.n	801bbe6 <__swbuf_r+0x6e>
 801bbdc:	89a3      	ldrh	r3, [r4, #12]
 801bbde:	07db      	lsls	r3, r3, #31
 801bbe0:	d5e1      	bpl.n	801bba6 <__swbuf_r+0x2e>
 801bbe2:	2e0a      	cmp	r6, #10
 801bbe4:	d1df      	bne.n	801bba6 <__swbuf_r+0x2e>
 801bbe6:	4621      	mov	r1, r4
 801bbe8:	4628      	mov	r0, r5
 801bbea:	f000 fe83 	bl	801c8f4 <_fflush_r>
 801bbee:	2800      	cmp	r0, #0
 801bbf0:	d0d9      	beq.n	801bba6 <__swbuf_r+0x2e>
 801bbf2:	e7d6      	b.n	801bba2 <__swbuf_r+0x2a>

0801bbf4 <__swsetup_r>:
 801bbf4:	b538      	push	{r3, r4, r5, lr}
 801bbf6:	4b29      	ldr	r3, [pc, #164]	@ (801bc9c <__swsetup_r+0xa8>)
 801bbf8:	4605      	mov	r5, r0
 801bbfa:	6818      	ldr	r0, [r3, #0]
 801bbfc:	460c      	mov	r4, r1
 801bbfe:	b118      	cbz	r0, 801bc08 <__swsetup_r+0x14>
 801bc00:	6a03      	ldr	r3, [r0, #32]
 801bc02:	b90b      	cbnz	r3, 801bc08 <__swsetup_r+0x14>
 801bc04:	f7ff fe66 	bl	801b8d4 <__sinit>
 801bc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc0c:	0719      	lsls	r1, r3, #28
 801bc0e:	d422      	bmi.n	801bc56 <__swsetup_r+0x62>
 801bc10:	06da      	lsls	r2, r3, #27
 801bc12:	d407      	bmi.n	801bc24 <__swsetup_r+0x30>
 801bc14:	2209      	movs	r2, #9
 801bc16:	602a      	str	r2, [r5, #0]
 801bc18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc1c:	81a3      	strh	r3, [r4, #12]
 801bc1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc22:	e033      	b.n	801bc8c <__swsetup_r+0x98>
 801bc24:	0758      	lsls	r0, r3, #29
 801bc26:	d512      	bpl.n	801bc4e <__swsetup_r+0x5a>
 801bc28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bc2a:	b141      	cbz	r1, 801bc3e <__swsetup_r+0x4a>
 801bc2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bc30:	4299      	cmp	r1, r3
 801bc32:	d002      	beq.n	801bc3a <__swsetup_r+0x46>
 801bc34:	4628      	mov	r0, r5
 801bc36:	f000 f95f 	bl	801bef8 <_free_r>
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	6363      	str	r3, [r4, #52]	@ 0x34
 801bc3e:	89a3      	ldrh	r3, [r4, #12]
 801bc40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bc44:	81a3      	strh	r3, [r4, #12]
 801bc46:	2300      	movs	r3, #0
 801bc48:	6063      	str	r3, [r4, #4]
 801bc4a:	6923      	ldr	r3, [r4, #16]
 801bc4c:	6023      	str	r3, [r4, #0]
 801bc4e:	89a3      	ldrh	r3, [r4, #12]
 801bc50:	f043 0308 	orr.w	r3, r3, #8
 801bc54:	81a3      	strh	r3, [r4, #12]
 801bc56:	6923      	ldr	r3, [r4, #16]
 801bc58:	b94b      	cbnz	r3, 801bc6e <__swsetup_r+0x7a>
 801bc5a:	89a3      	ldrh	r3, [r4, #12]
 801bc5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bc60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bc64:	d003      	beq.n	801bc6e <__swsetup_r+0x7a>
 801bc66:	4621      	mov	r1, r4
 801bc68:	4628      	mov	r0, r5
 801bc6a:	f000 fea3 	bl	801c9b4 <__smakebuf_r>
 801bc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc72:	f013 0201 	ands.w	r2, r3, #1
 801bc76:	d00a      	beq.n	801bc8e <__swsetup_r+0x9a>
 801bc78:	2200      	movs	r2, #0
 801bc7a:	60a2      	str	r2, [r4, #8]
 801bc7c:	6962      	ldr	r2, [r4, #20]
 801bc7e:	4252      	negs	r2, r2
 801bc80:	61a2      	str	r2, [r4, #24]
 801bc82:	6922      	ldr	r2, [r4, #16]
 801bc84:	b942      	cbnz	r2, 801bc98 <__swsetup_r+0xa4>
 801bc86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bc8a:	d1c5      	bne.n	801bc18 <__swsetup_r+0x24>
 801bc8c:	bd38      	pop	{r3, r4, r5, pc}
 801bc8e:	0799      	lsls	r1, r3, #30
 801bc90:	bf58      	it	pl
 801bc92:	6962      	ldrpl	r2, [r4, #20]
 801bc94:	60a2      	str	r2, [r4, #8]
 801bc96:	e7f4      	b.n	801bc82 <__swsetup_r+0x8e>
 801bc98:	2000      	movs	r0, #0
 801bc9a:	e7f7      	b.n	801bc8c <__swsetup_r+0x98>
 801bc9c:	200009c0 	.word	0x200009c0

0801bca0 <memcmp>:
 801bca0:	b510      	push	{r4, lr}
 801bca2:	3901      	subs	r1, #1
 801bca4:	4402      	add	r2, r0
 801bca6:	4290      	cmp	r0, r2
 801bca8:	d101      	bne.n	801bcae <memcmp+0xe>
 801bcaa:	2000      	movs	r0, #0
 801bcac:	e005      	b.n	801bcba <memcmp+0x1a>
 801bcae:	7803      	ldrb	r3, [r0, #0]
 801bcb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bcb4:	42a3      	cmp	r3, r4
 801bcb6:	d001      	beq.n	801bcbc <memcmp+0x1c>
 801bcb8:	1b18      	subs	r0, r3, r4
 801bcba:	bd10      	pop	{r4, pc}
 801bcbc:	3001      	adds	r0, #1
 801bcbe:	e7f2      	b.n	801bca6 <memcmp+0x6>

0801bcc0 <memmove>:
 801bcc0:	4288      	cmp	r0, r1
 801bcc2:	b510      	push	{r4, lr}
 801bcc4:	eb01 0402 	add.w	r4, r1, r2
 801bcc8:	d902      	bls.n	801bcd0 <memmove+0x10>
 801bcca:	4284      	cmp	r4, r0
 801bccc:	4623      	mov	r3, r4
 801bcce:	d807      	bhi.n	801bce0 <memmove+0x20>
 801bcd0:	1e43      	subs	r3, r0, #1
 801bcd2:	42a1      	cmp	r1, r4
 801bcd4:	d008      	beq.n	801bce8 <memmove+0x28>
 801bcd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bcda:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcde:	e7f8      	b.n	801bcd2 <memmove+0x12>
 801bce0:	4402      	add	r2, r0
 801bce2:	4601      	mov	r1, r0
 801bce4:	428a      	cmp	r2, r1
 801bce6:	d100      	bne.n	801bcea <memmove+0x2a>
 801bce8:	bd10      	pop	{r4, pc}
 801bcea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcf2:	e7f7      	b.n	801bce4 <memmove+0x24>

0801bcf4 <memset>:
 801bcf4:	4402      	add	r2, r0
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	4293      	cmp	r3, r2
 801bcfa:	d100      	bne.n	801bcfe <memset+0xa>
 801bcfc:	4770      	bx	lr
 801bcfe:	f803 1b01 	strb.w	r1, [r3], #1
 801bd02:	e7f9      	b.n	801bcf8 <memset+0x4>

0801bd04 <strchr>:
 801bd04:	b2c9      	uxtb	r1, r1
 801bd06:	4603      	mov	r3, r0
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd0e:	b112      	cbz	r2, 801bd16 <strchr+0x12>
 801bd10:	428a      	cmp	r2, r1
 801bd12:	d1f9      	bne.n	801bd08 <strchr+0x4>
 801bd14:	4770      	bx	lr
 801bd16:	2900      	cmp	r1, #0
 801bd18:	bf18      	it	ne
 801bd1a:	2000      	movne	r0, #0
 801bd1c:	4770      	bx	lr

0801bd1e <strncmp>:
 801bd1e:	b510      	push	{r4, lr}
 801bd20:	b16a      	cbz	r2, 801bd3e <strncmp+0x20>
 801bd22:	3901      	subs	r1, #1
 801bd24:	1884      	adds	r4, r0, r2
 801bd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bd2e:	429a      	cmp	r2, r3
 801bd30:	d103      	bne.n	801bd3a <strncmp+0x1c>
 801bd32:	42a0      	cmp	r0, r4
 801bd34:	d001      	beq.n	801bd3a <strncmp+0x1c>
 801bd36:	2a00      	cmp	r2, #0
 801bd38:	d1f5      	bne.n	801bd26 <strncmp+0x8>
 801bd3a:	1ad0      	subs	r0, r2, r3
 801bd3c:	bd10      	pop	{r4, pc}
 801bd3e:	4610      	mov	r0, r2
 801bd40:	e7fc      	b.n	801bd3c <strncmp+0x1e>

0801bd42 <strstr>:
 801bd42:	780a      	ldrb	r2, [r1, #0]
 801bd44:	b570      	push	{r4, r5, r6, lr}
 801bd46:	b96a      	cbnz	r2, 801bd64 <strstr+0x22>
 801bd48:	bd70      	pop	{r4, r5, r6, pc}
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d109      	bne.n	801bd62 <strstr+0x20>
 801bd4e:	460c      	mov	r4, r1
 801bd50:	4605      	mov	r5, r0
 801bd52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d0f6      	beq.n	801bd48 <strstr+0x6>
 801bd5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801bd5e:	429e      	cmp	r6, r3
 801bd60:	d0f7      	beq.n	801bd52 <strstr+0x10>
 801bd62:	3001      	adds	r0, #1
 801bd64:	7803      	ldrb	r3, [r0, #0]
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d1ef      	bne.n	801bd4a <strstr+0x8>
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	e7ec      	b.n	801bd48 <strstr+0x6>
	...

0801bd70 <_close_r>:
 801bd70:	b538      	push	{r3, r4, r5, lr}
 801bd72:	4d06      	ldr	r5, [pc, #24]	@ (801bd8c <_close_r+0x1c>)
 801bd74:	2300      	movs	r3, #0
 801bd76:	4604      	mov	r4, r0
 801bd78:	4608      	mov	r0, r1
 801bd7a:	602b      	str	r3, [r5, #0]
 801bd7c:	f7e6 fe06 	bl	800298c <_close>
 801bd80:	1c43      	adds	r3, r0, #1
 801bd82:	d102      	bne.n	801bd8a <_close_r+0x1a>
 801bd84:	682b      	ldr	r3, [r5, #0]
 801bd86:	b103      	cbz	r3, 801bd8a <_close_r+0x1a>
 801bd88:	6023      	str	r3, [r4, #0]
 801bd8a:	bd38      	pop	{r3, r4, r5, pc}
 801bd8c:	2000bf84 	.word	0x2000bf84

0801bd90 <_lseek_r>:
 801bd90:	b538      	push	{r3, r4, r5, lr}
 801bd92:	4d07      	ldr	r5, [pc, #28]	@ (801bdb0 <_lseek_r+0x20>)
 801bd94:	4604      	mov	r4, r0
 801bd96:	4608      	mov	r0, r1
 801bd98:	4611      	mov	r1, r2
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	602a      	str	r2, [r5, #0]
 801bd9e:	461a      	mov	r2, r3
 801bda0:	f7e6 fe1b 	bl	80029da <_lseek>
 801bda4:	1c43      	adds	r3, r0, #1
 801bda6:	d102      	bne.n	801bdae <_lseek_r+0x1e>
 801bda8:	682b      	ldr	r3, [r5, #0]
 801bdaa:	b103      	cbz	r3, 801bdae <_lseek_r+0x1e>
 801bdac:	6023      	str	r3, [r4, #0]
 801bdae:	bd38      	pop	{r3, r4, r5, pc}
 801bdb0:	2000bf84 	.word	0x2000bf84

0801bdb4 <_read_r>:
 801bdb4:	b538      	push	{r3, r4, r5, lr}
 801bdb6:	4d07      	ldr	r5, [pc, #28]	@ (801bdd4 <_read_r+0x20>)
 801bdb8:	4604      	mov	r4, r0
 801bdba:	4608      	mov	r0, r1
 801bdbc:	4611      	mov	r1, r2
 801bdbe:	2200      	movs	r2, #0
 801bdc0:	602a      	str	r2, [r5, #0]
 801bdc2:	461a      	mov	r2, r3
 801bdc4:	f7e6 fda9 	bl	800291a <_read>
 801bdc8:	1c43      	adds	r3, r0, #1
 801bdca:	d102      	bne.n	801bdd2 <_read_r+0x1e>
 801bdcc:	682b      	ldr	r3, [r5, #0]
 801bdce:	b103      	cbz	r3, 801bdd2 <_read_r+0x1e>
 801bdd0:	6023      	str	r3, [r4, #0]
 801bdd2:	bd38      	pop	{r3, r4, r5, pc}
 801bdd4:	2000bf84 	.word	0x2000bf84

0801bdd8 <_sbrk_r>:
 801bdd8:	b538      	push	{r3, r4, r5, lr}
 801bdda:	4d06      	ldr	r5, [pc, #24]	@ (801bdf4 <_sbrk_r+0x1c>)
 801bddc:	2300      	movs	r3, #0
 801bdde:	4604      	mov	r4, r0
 801bde0:	4608      	mov	r0, r1
 801bde2:	602b      	str	r3, [r5, #0]
 801bde4:	f7e6 fe06 	bl	80029f4 <_sbrk>
 801bde8:	1c43      	adds	r3, r0, #1
 801bdea:	d102      	bne.n	801bdf2 <_sbrk_r+0x1a>
 801bdec:	682b      	ldr	r3, [r5, #0]
 801bdee:	b103      	cbz	r3, 801bdf2 <_sbrk_r+0x1a>
 801bdf0:	6023      	str	r3, [r4, #0]
 801bdf2:	bd38      	pop	{r3, r4, r5, pc}
 801bdf4:	2000bf84 	.word	0x2000bf84

0801bdf8 <_write_r>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	4d07      	ldr	r5, [pc, #28]	@ (801be18 <_write_r+0x20>)
 801bdfc:	4604      	mov	r4, r0
 801bdfe:	4608      	mov	r0, r1
 801be00:	4611      	mov	r1, r2
 801be02:	2200      	movs	r2, #0
 801be04:	602a      	str	r2, [r5, #0]
 801be06:	461a      	mov	r2, r3
 801be08:	f7e6 fda4 	bl	8002954 <_write>
 801be0c:	1c43      	adds	r3, r0, #1
 801be0e:	d102      	bne.n	801be16 <_write_r+0x1e>
 801be10:	682b      	ldr	r3, [r5, #0]
 801be12:	b103      	cbz	r3, 801be16 <_write_r+0x1e>
 801be14:	6023      	str	r3, [r4, #0]
 801be16:	bd38      	pop	{r3, r4, r5, pc}
 801be18:	2000bf84 	.word	0x2000bf84

0801be1c <__errno>:
 801be1c:	4b01      	ldr	r3, [pc, #4]	@ (801be24 <__errno+0x8>)
 801be1e:	6818      	ldr	r0, [r3, #0]
 801be20:	4770      	bx	lr
 801be22:	bf00      	nop
 801be24:	200009c0 	.word	0x200009c0

0801be28 <__libc_init_array>:
 801be28:	b570      	push	{r4, r5, r6, lr}
 801be2a:	4d0d      	ldr	r5, [pc, #52]	@ (801be60 <__libc_init_array+0x38>)
 801be2c:	4c0d      	ldr	r4, [pc, #52]	@ (801be64 <__libc_init_array+0x3c>)
 801be2e:	1b64      	subs	r4, r4, r5
 801be30:	10a4      	asrs	r4, r4, #2
 801be32:	2600      	movs	r6, #0
 801be34:	42a6      	cmp	r6, r4
 801be36:	d109      	bne.n	801be4c <__libc_init_array+0x24>
 801be38:	4d0b      	ldr	r5, [pc, #44]	@ (801be68 <__libc_init_array+0x40>)
 801be3a:	4c0c      	ldr	r4, [pc, #48]	@ (801be6c <__libc_init_array+0x44>)
 801be3c:	f001 f9d6 	bl	801d1ec <_init>
 801be40:	1b64      	subs	r4, r4, r5
 801be42:	10a4      	asrs	r4, r4, #2
 801be44:	2600      	movs	r6, #0
 801be46:	42a6      	cmp	r6, r4
 801be48:	d105      	bne.n	801be56 <__libc_init_array+0x2e>
 801be4a:	bd70      	pop	{r4, r5, r6, pc}
 801be4c:	f855 3b04 	ldr.w	r3, [r5], #4
 801be50:	4798      	blx	r3
 801be52:	3601      	adds	r6, #1
 801be54:	e7ee      	b.n	801be34 <__libc_init_array+0xc>
 801be56:	f855 3b04 	ldr.w	r3, [r5], #4
 801be5a:	4798      	blx	r3
 801be5c:	3601      	adds	r6, #1
 801be5e:	e7f2      	b.n	801be46 <__libc_init_array+0x1e>
 801be60:	0801eca0 	.word	0x0801eca0
 801be64:	0801eca0 	.word	0x0801eca0
 801be68:	0801eca0 	.word	0x0801eca0
 801be6c:	0801ecb4 	.word	0x0801ecb4

0801be70 <__retarget_lock_init_recursive>:
 801be70:	4770      	bx	lr

0801be72 <__retarget_lock_acquire_recursive>:
 801be72:	4770      	bx	lr

0801be74 <__retarget_lock_release_recursive>:
 801be74:	4770      	bx	lr

0801be76 <strcpy>:
 801be76:	4603      	mov	r3, r0
 801be78:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be7c:	f803 2b01 	strb.w	r2, [r3], #1
 801be80:	2a00      	cmp	r2, #0
 801be82:	d1f9      	bne.n	801be78 <strcpy+0x2>
 801be84:	4770      	bx	lr

0801be86 <memcpy>:
 801be86:	440a      	add	r2, r1
 801be88:	4291      	cmp	r1, r2
 801be8a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801be8e:	d100      	bne.n	801be92 <memcpy+0xc>
 801be90:	4770      	bx	lr
 801be92:	b510      	push	{r4, lr}
 801be94:	f811 4b01 	ldrb.w	r4, [r1], #1
 801be98:	f803 4f01 	strb.w	r4, [r3, #1]!
 801be9c:	4291      	cmp	r1, r2
 801be9e:	d1f9      	bne.n	801be94 <memcpy+0xe>
 801bea0:	bd10      	pop	{r4, pc}
	...

0801bea4 <__assert_func>:
 801bea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bea6:	4614      	mov	r4, r2
 801bea8:	461a      	mov	r2, r3
 801beaa:	4b09      	ldr	r3, [pc, #36]	@ (801bed0 <__assert_func+0x2c>)
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	4605      	mov	r5, r0
 801beb0:	68d8      	ldr	r0, [r3, #12]
 801beb2:	b954      	cbnz	r4, 801beca <__assert_func+0x26>
 801beb4:	4b07      	ldr	r3, [pc, #28]	@ (801bed4 <__assert_func+0x30>)
 801beb6:	461c      	mov	r4, r3
 801beb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bebc:	9100      	str	r1, [sp, #0]
 801bebe:	462b      	mov	r3, r5
 801bec0:	4905      	ldr	r1, [pc, #20]	@ (801bed8 <__assert_func+0x34>)
 801bec2:	f000 fd3f 	bl	801c944 <fiprintf>
 801bec6:	f000 fdd3 	bl	801ca70 <abort>
 801beca:	4b04      	ldr	r3, [pc, #16]	@ (801bedc <__assert_func+0x38>)
 801becc:	e7f4      	b.n	801beb8 <__assert_func+0x14>
 801bece:	bf00      	nop
 801bed0:	200009c0 	.word	0x200009c0
 801bed4:	0801ebed 	.word	0x0801ebed
 801bed8:	0801ebbf 	.word	0x0801ebbf
 801bedc:	0801ebb2 	.word	0x0801ebb2

0801bee0 <__env_lock>:
 801bee0:	4801      	ldr	r0, [pc, #4]	@ (801bee8 <__env_lock+0x8>)
 801bee2:	f7ff bfc6 	b.w	801be72 <__retarget_lock_acquire_recursive>
 801bee6:	bf00      	nop
 801bee8:	2000bf88 	.word	0x2000bf88

0801beec <__env_unlock>:
 801beec:	4801      	ldr	r0, [pc, #4]	@ (801bef4 <__env_unlock+0x8>)
 801beee:	f7ff bfc1 	b.w	801be74 <__retarget_lock_release_recursive>
 801bef2:	bf00      	nop
 801bef4:	2000bf88 	.word	0x2000bf88

0801bef8 <_free_r>:
 801bef8:	b538      	push	{r3, r4, r5, lr}
 801befa:	4605      	mov	r5, r0
 801befc:	2900      	cmp	r1, #0
 801befe:	d041      	beq.n	801bf84 <_free_r+0x8c>
 801bf00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf04:	1f0c      	subs	r4, r1, #4
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	bfb8      	it	lt
 801bf0a:	18e4      	addlt	r4, r4, r3
 801bf0c:	f7ff fb30 	bl	801b570 <__malloc_lock>
 801bf10:	4a1d      	ldr	r2, [pc, #116]	@ (801bf88 <_free_r+0x90>)
 801bf12:	6813      	ldr	r3, [r2, #0]
 801bf14:	b933      	cbnz	r3, 801bf24 <_free_r+0x2c>
 801bf16:	6063      	str	r3, [r4, #4]
 801bf18:	6014      	str	r4, [r2, #0]
 801bf1a:	4628      	mov	r0, r5
 801bf1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf20:	f7ff bb2c 	b.w	801b57c <__malloc_unlock>
 801bf24:	42a3      	cmp	r3, r4
 801bf26:	d908      	bls.n	801bf3a <_free_r+0x42>
 801bf28:	6820      	ldr	r0, [r4, #0]
 801bf2a:	1821      	adds	r1, r4, r0
 801bf2c:	428b      	cmp	r3, r1
 801bf2e:	bf01      	itttt	eq
 801bf30:	6819      	ldreq	r1, [r3, #0]
 801bf32:	685b      	ldreq	r3, [r3, #4]
 801bf34:	1809      	addeq	r1, r1, r0
 801bf36:	6021      	streq	r1, [r4, #0]
 801bf38:	e7ed      	b.n	801bf16 <_free_r+0x1e>
 801bf3a:	461a      	mov	r2, r3
 801bf3c:	685b      	ldr	r3, [r3, #4]
 801bf3e:	b10b      	cbz	r3, 801bf44 <_free_r+0x4c>
 801bf40:	42a3      	cmp	r3, r4
 801bf42:	d9fa      	bls.n	801bf3a <_free_r+0x42>
 801bf44:	6811      	ldr	r1, [r2, #0]
 801bf46:	1850      	adds	r0, r2, r1
 801bf48:	42a0      	cmp	r0, r4
 801bf4a:	d10b      	bne.n	801bf64 <_free_r+0x6c>
 801bf4c:	6820      	ldr	r0, [r4, #0]
 801bf4e:	4401      	add	r1, r0
 801bf50:	1850      	adds	r0, r2, r1
 801bf52:	4283      	cmp	r3, r0
 801bf54:	6011      	str	r1, [r2, #0]
 801bf56:	d1e0      	bne.n	801bf1a <_free_r+0x22>
 801bf58:	6818      	ldr	r0, [r3, #0]
 801bf5a:	685b      	ldr	r3, [r3, #4]
 801bf5c:	6053      	str	r3, [r2, #4]
 801bf5e:	4408      	add	r0, r1
 801bf60:	6010      	str	r0, [r2, #0]
 801bf62:	e7da      	b.n	801bf1a <_free_r+0x22>
 801bf64:	d902      	bls.n	801bf6c <_free_r+0x74>
 801bf66:	230c      	movs	r3, #12
 801bf68:	602b      	str	r3, [r5, #0]
 801bf6a:	e7d6      	b.n	801bf1a <_free_r+0x22>
 801bf6c:	6820      	ldr	r0, [r4, #0]
 801bf6e:	1821      	adds	r1, r4, r0
 801bf70:	428b      	cmp	r3, r1
 801bf72:	bf04      	itt	eq
 801bf74:	6819      	ldreq	r1, [r3, #0]
 801bf76:	685b      	ldreq	r3, [r3, #4]
 801bf78:	6063      	str	r3, [r4, #4]
 801bf7a:	bf04      	itt	eq
 801bf7c:	1809      	addeq	r1, r1, r0
 801bf7e:	6021      	streq	r1, [r4, #0]
 801bf80:	6054      	str	r4, [r2, #4]
 801bf82:	e7ca      	b.n	801bf1a <_free_r+0x22>
 801bf84:	bd38      	pop	{r3, r4, r5, pc}
 801bf86:	bf00      	nop
 801bf88:	2000be44 	.word	0x2000be44

0801bf8c <_malloc_usable_size_r>:
 801bf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf90:	1f18      	subs	r0, r3, #4
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	bfbc      	itt	lt
 801bf96:	580b      	ldrlt	r3, [r1, r0]
 801bf98:	18c0      	addlt	r0, r0, r3
 801bf9a:	4770      	bx	lr

0801bf9c <__ssputs_r>:
 801bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfa0:	688e      	ldr	r6, [r1, #8]
 801bfa2:	461f      	mov	r7, r3
 801bfa4:	42be      	cmp	r6, r7
 801bfa6:	680b      	ldr	r3, [r1, #0]
 801bfa8:	4682      	mov	sl, r0
 801bfaa:	460c      	mov	r4, r1
 801bfac:	4690      	mov	r8, r2
 801bfae:	d82d      	bhi.n	801c00c <__ssputs_r+0x70>
 801bfb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bfb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bfb8:	d026      	beq.n	801c008 <__ssputs_r+0x6c>
 801bfba:	6965      	ldr	r5, [r4, #20]
 801bfbc:	6909      	ldr	r1, [r1, #16]
 801bfbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bfc2:	eba3 0901 	sub.w	r9, r3, r1
 801bfc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bfca:	1c7b      	adds	r3, r7, #1
 801bfcc:	444b      	add	r3, r9
 801bfce:	106d      	asrs	r5, r5, #1
 801bfd0:	429d      	cmp	r5, r3
 801bfd2:	bf38      	it	cc
 801bfd4:	461d      	movcc	r5, r3
 801bfd6:	0553      	lsls	r3, r2, #21
 801bfd8:	d527      	bpl.n	801c02a <__ssputs_r+0x8e>
 801bfda:	4629      	mov	r1, r5
 801bfdc:	f7ff fa48 	bl	801b470 <_malloc_r>
 801bfe0:	4606      	mov	r6, r0
 801bfe2:	b360      	cbz	r0, 801c03e <__ssputs_r+0xa2>
 801bfe4:	6921      	ldr	r1, [r4, #16]
 801bfe6:	464a      	mov	r2, r9
 801bfe8:	f7ff ff4d 	bl	801be86 <memcpy>
 801bfec:	89a3      	ldrh	r3, [r4, #12]
 801bfee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bff6:	81a3      	strh	r3, [r4, #12]
 801bff8:	6126      	str	r6, [r4, #16]
 801bffa:	6165      	str	r5, [r4, #20]
 801bffc:	444e      	add	r6, r9
 801bffe:	eba5 0509 	sub.w	r5, r5, r9
 801c002:	6026      	str	r6, [r4, #0]
 801c004:	60a5      	str	r5, [r4, #8]
 801c006:	463e      	mov	r6, r7
 801c008:	42be      	cmp	r6, r7
 801c00a:	d900      	bls.n	801c00e <__ssputs_r+0x72>
 801c00c:	463e      	mov	r6, r7
 801c00e:	6820      	ldr	r0, [r4, #0]
 801c010:	4632      	mov	r2, r6
 801c012:	4641      	mov	r1, r8
 801c014:	f7ff fe54 	bl	801bcc0 <memmove>
 801c018:	68a3      	ldr	r3, [r4, #8]
 801c01a:	1b9b      	subs	r3, r3, r6
 801c01c:	60a3      	str	r3, [r4, #8]
 801c01e:	6823      	ldr	r3, [r4, #0]
 801c020:	4433      	add	r3, r6
 801c022:	6023      	str	r3, [r4, #0]
 801c024:	2000      	movs	r0, #0
 801c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c02a:	462a      	mov	r2, r5
 801c02c:	f7ff fb20 	bl	801b670 <_realloc_r>
 801c030:	4606      	mov	r6, r0
 801c032:	2800      	cmp	r0, #0
 801c034:	d1e0      	bne.n	801bff8 <__ssputs_r+0x5c>
 801c036:	6921      	ldr	r1, [r4, #16]
 801c038:	4650      	mov	r0, sl
 801c03a:	f7ff ff5d 	bl	801bef8 <_free_r>
 801c03e:	230c      	movs	r3, #12
 801c040:	f8ca 3000 	str.w	r3, [sl]
 801c044:	89a3      	ldrh	r3, [r4, #12]
 801c046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c04a:	81a3      	strh	r3, [r4, #12]
 801c04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c050:	e7e9      	b.n	801c026 <__ssputs_r+0x8a>
	...

0801c054 <_svfiprintf_r>:
 801c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c058:	4698      	mov	r8, r3
 801c05a:	898b      	ldrh	r3, [r1, #12]
 801c05c:	061b      	lsls	r3, r3, #24
 801c05e:	b09d      	sub	sp, #116	@ 0x74
 801c060:	4607      	mov	r7, r0
 801c062:	460d      	mov	r5, r1
 801c064:	4614      	mov	r4, r2
 801c066:	d510      	bpl.n	801c08a <_svfiprintf_r+0x36>
 801c068:	690b      	ldr	r3, [r1, #16]
 801c06a:	b973      	cbnz	r3, 801c08a <_svfiprintf_r+0x36>
 801c06c:	2140      	movs	r1, #64	@ 0x40
 801c06e:	f7ff f9ff 	bl	801b470 <_malloc_r>
 801c072:	6028      	str	r0, [r5, #0]
 801c074:	6128      	str	r0, [r5, #16]
 801c076:	b930      	cbnz	r0, 801c086 <_svfiprintf_r+0x32>
 801c078:	230c      	movs	r3, #12
 801c07a:	603b      	str	r3, [r7, #0]
 801c07c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c080:	b01d      	add	sp, #116	@ 0x74
 801c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c086:	2340      	movs	r3, #64	@ 0x40
 801c088:	616b      	str	r3, [r5, #20]
 801c08a:	2300      	movs	r3, #0
 801c08c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c08e:	2320      	movs	r3, #32
 801c090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c094:	f8cd 800c 	str.w	r8, [sp, #12]
 801c098:	2330      	movs	r3, #48	@ 0x30
 801c09a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c238 <_svfiprintf_r+0x1e4>
 801c09e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c0a2:	f04f 0901 	mov.w	r9, #1
 801c0a6:	4623      	mov	r3, r4
 801c0a8:	469a      	mov	sl, r3
 801c0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0ae:	b10a      	cbz	r2, 801c0b4 <_svfiprintf_r+0x60>
 801c0b0:	2a25      	cmp	r2, #37	@ 0x25
 801c0b2:	d1f9      	bne.n	801c0a8 <_svfiprintf_r+0x54>
 801c0b4:	ebba 0b04 	subs.w	fp, sl, r4
 801c0b8:	d00b      	beq.n	801c0d2 <_svfiprintf_r+0x7e>
 801c0ba:	465b      	mov	r3, fp
 801c0bc:	4622      	mov	r2, r4
 801c0be:	4629      	mov	r1, r5
 801c0c0:	4638      	mov	r0, r7
 801c0c2:	f7ff ff6b 	bl	801bf9c <__ssputs_r>
 801c0c6:	3001      	adds	r0, #1
 801c0c8:	f000 80a7 	beq.w	801c21a <_svfiprintf_r+0x1c6>
 801c0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c0ce:	445a      	add	r2, fp
 801c0d0:	9209      	str	r2, [sp, #36]	@ 0x24
 801c0d2:	f89a 3000 	ldrb.w	r3, [sl]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	f000 809f 	beq.w	801c21a <_svfiprintf_r+0x1c6>
 801c0dc:	2300      	movs	r3, #0
 801c0de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c0e6:	f10a 0a01 	add.w	sl, sl, #1
 801c0ea:	9304      	str	r3, [sp, #16]
 801c0ec:	9307      	str	r3, [sp, #28]
 801c0ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c0f2:	931a      	str	r3, [sp, #104]	@ 0x68
 801c0f4:	4654      	mov	r4, sl
 801c0f6:	2205      	movs	r2, #5
 801c0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0fc:	484e      	ldr	r0, [pc, #312]	@ (801c238 <_svfiprintf_r+0x1e4>)
 801c0fe:	f7e4 f8a7 	bl	8000250 <memchr>
 801c102:	9a04      	ldr	r2, [sp, #16]
 801c104:	b9d8      	cbnz	r0, 801c13e <_svfiprintf_r+0xea>
 801c106:	06d0      	lsls	r0, r2, #27
 801c108:	bf44      	itt	mi
 801c10a:	2320      	movmi	r3, #32
 801c10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c110:	0711      	lsls	r1, r2, #28
 801c112:	bf44      	itt	mi
 801c114:	232b      	movmi	r3, #43	@ 0x2b
 801c116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c11a:	f89a 3000 	ldrb.w	r3, [sl]
 801c11e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c120:	d015      	beq.n	801c14e <_svfiprintf_r+0xfa>
 801c122:	9a07      	ldr	r2, [sp, #28]
 801c124:	4654      	mov	r4, sl
 801c126:	2000      	movs	r0, #0
 801c128:	f04f 0c0a 	mov.w	ip, #10
 801c12c:	4621      	mov	r1, r4
 801c12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c132:	3b30      	subs	r3, #48	@ 0x30
 801c134:	2b09      	cmp	r3, #9
 801c136:	d94b      	bls.n	801c1d0 <_svfiprintf_r+0x17c>
 801c138:	b1b0      	cbz	r0, 801c168 <_svfiprintf_r+0x114>
 801c13a:	9207      	str	r2, [sp, #28]
 801c13c:	e014      	b.n	801c168 <_svfiprintf_r+0x114>
 801c13e:	eba0 0308 	sub.w	r3, r0, r8
 801c142:	fa09 f303 	lsl.w	r3, r9, r3
 801c146:	4313      	orrs	r3, r2
 801c148:	9304      	str	r3, [sp, #16]
 801c14a:	46a2      	mov	sl, r4
 801c14c:	e7d2      	b.n	801c0f4 <_svfiprintf_r+0xa0>
 801c14e:	9b03      	ldr	r3, [sp, #12]
 801c150:	1d19      	adds	r1, r3, #4
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	9103      	str	r1, [sp, #12]
 801c156:	2b00      	cmp	r3, #0
 801c158:	bfbb      	ittet	lt
 801c15a:	425b      	neglt	r3, r3
 801c15c:	f042 0202 	orrlt.w	r2, r2, #2
 801c160:	9307      	strge	r3, [sp, #28]
 801c162:	9307      	strlt	r3, [sp, #28]
 801c164:	bfb8      	it	lt
 801c166:	9204      	strlt	r2, [sp, #16]
 801c168:	7823      	ldrb	r3, [r4, #0]
 801c16a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c16c:	d10a      	bne.n	801c184 <_svfiprintf_r+0x130>
 801c16e:	7863      	ldrb	r3, [r4, #1]
 801c170:	2b2a      	cmp	r3, #42	@ 0x2a
 801c172:	d132      	bne.n	801c1da <_svfiprintf_r+0x186>
 801c174:	9b03      	ldr	r3, [sp, #12]
 801c176:	1d1a      	adds	r2, r3, #4
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	9203      	str	r2, [sp, #12]
 801c17c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c180:	3402      	adds	r4, #2
 801c182:	9305      	str	r3, [sp, #20]
 801c184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c248 <_svfiprintf_r+0x1f4>
 801c188:	7821      	ldrb	r1, [r4, #0]
 801c18a:	2203      	movs	r2, #3
 801c18c:	4650      	mov	r0, sl
 801c18e:	f7e4 f85f 	bl	8000250 <memchr>
 801c192:	b138      	cbz	r0, 801c1a4 <_svfiprintf_r+0x150>
 801c194:	9b04      	ldr	r3, [sp, #16]
 801c196:	eba0 000a 	sub.w	r0, r0, sl
 801c19a:	2240      	movs	r2, #64	@ 0x40
 801c19c:	4082      	lsls	r2, r0
 801c19e:	4313      	orrs	r3, r2
 801c1a0:	3401      	adds	r4, #1
 801c1a2:	9304      	str	r3, [sp, #16]
 801c1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1a8:	4824      	ldr	r0, [pc, #144]	@ (801c23c <_svfiprintf_r+0x1e8>)
 801c1aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c1ae:	2206      	movs	r2, #6
 801c1b0:	f7e4 f84e 	bl	8000250 <memchr>
 801c1b4:	2800      	cmp	r0, #0
 801c1b6:	d036      	beq.n	801c226 <_svfiprintf_r+0x1d2>
 801c1b8:	4b21      	ldr	r3, [pc, #132]	@ (801c240 <_svfiprintf_r+0x1ec>)
 801c1ba:	bb1b      	cbnz	r3, 801c204 <_svfiprintf_r+0x1b0>
 801c1bc:	9b03      	ldr	r3, [sp, #12]
 801c1be:	3307      	adds	r3, #7
 801c1c0:	f023 0307 	bic.w	r3, r3, #7
 801c1c4:	3308      	adds	r3, #8
 801c1c6:	9303      	str	r3, [sp, #12]
 801c1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1ca:	4433      	add	r3, r6
 801c1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c1ce:	e76a      	b.n	801c0a6 <_svfiprintf_r+0x52>
 801c1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801c1d4:	460c      	mov	r4, r1
 801c1d6:	2001      	movs	r0, #1
 801c1d8:	e7a8      	b.n	801c12c <_svfiprintf_r+0xd8>
 801c1da:	2300      	movs	r3, #0
 801c1dc:	3401      	adds	r4, #1
 801c1de:	9305      	str	r3, [sp, #20]
 801c1e0:	4619      	mov	r1, r3
 801c1e2:	f04f 0c0a 	mov.w	ip, #10
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c1ec:	3a30      	subs	r2, #48	@ 0x30
 801c1ee:	2a09      	cmp	r2, #9
 801c1f0:	d903      	bls.n	801c1fa <_svfiprintf_r+0x1a6>
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d0c6      	beq.n	801c184 <_svfiprintf_r+0x130>
 801c1f6:	9105      	str	r1, [sp, #20]
 801c1f8:	e7c4      	b.n	801c184 <_svfiprintf_r+0x130>
 801c1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801c1fe:	4604      	mov	r4, r0
 801c200:	2301      	movs	r3, #1
 801c202:	e7f0      	b.n	801c1e6 <_svfiprintf_r+0x192>
 801c204:	ab03      	add	r3, sp, #12
 801c206:	9300      	str	r3, [sp, #0]
 801c208:	462a      	mov	r2, r5
 801c20a:	4b0e      	ldr	r3, [pc, #56]	@ (801c244 <_svfiprintf_r+0x1f0>)
 801c20c:	a904      	add	r1, sp, #16
 801c20e:	4638      	mov	r0, r7
 801c210:	f3af 8000 	nop.w
 801c214:	1c42      	adds	r2, r0, #1
 801c216:	4606      	mov	r6, r0
 801c218:	d1d6      	bne.n	801c1c8 <_svfiprintf_r+0x174>
 801c21a:	89ab      	ldrh	r3, [r5, #12]
 801c21c:	065b      	lsls	r3, r3, #25
 801c21e:	f53f af2d 	bmi.w	801c07c <_svfiprintf_r+0x28>
 801c222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c224:	e72c      	b.n	801c080 <_svfiprintf_r+0x2c>
 801c226:	ab03      	add	r3, sp, #12
 801c228:	9300      	str	r3, [sp, #0]
 801c22a:	462a      	mov	r2, r5
 801c22c:	4b05      	ldr	r3, [pc, #20]	@ (801c244 <_svfiprintf_r+0x1f0>)
 801c22e:	a904      	add	r1, sp, #16
 801c230:	4638      	mov	r0, r7
 801c232:	f000 f9bb 	bl	801c5ac <_printf_i>
 801c236:	e7ed      	b.n	801c214 <_svfiprintf_r+0x1c0>
 801c238:	0801ebee 	.word	0x0801ebee
 801c23c:	0801ebf8 	.word	0x0801ebf8
 801c240:	00000000 	.word	0x00000000
 801c244:	0801bf9d 	.word	0x0801bf9d
 801c248:	0801ebf4 	.word	0x0801ebf4

0801c24c <__sfputc_r>:
 801c24c:	6893      	ldr	r3, [r2, #8]
 801c24e:	3b01      	subs	r3, #1
 801c250:	2b00      	cmp	r3, #0
 801c252:	b410      	push	{r4}
 801c254:	6093      	str	r3, [r2, #8]
 801c256:	da08      	bge.n	801c26a <__sfputc_r+0x1e>
 801c258:	6994      	ldr	r4, [r2, #24]
 801c25a:	42a3      	cmp	r3, r4
 801c25c:	db01      	blt.n	801c262 <__sfputc_r+0x16>
 801c25e:	290a      	cmp	r1, #10
 801c260:	d103      	bne.n	801c26a <__sfputc_r+0x1e>
 801c262:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c266:	f7ff bc87 	b.w	801bb78 <__swbuf_r>
 801c26a:	6813      	ldr	r3, [r2, #0]
 801c26c:	1c58      	adds	r0, r3, #1
 801c26e:	6010      	str	r0, [r2, #0]
 801c270:	7019      	strb	r1, [r3, #0]
 801c272:	4608      	mov	r0, r1
 801c274:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c278:	4770      	bx	lr

0801c27a <__sfputs_r>:
 801c27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c27c:	4606      	mov	r6, r0
 801c27e:	460f      	mov	r7, r1
 801c280:	4614      	mov	r4, r2
 801c282:	18d5      	adds	r5, r2, r3
 801c284:	42ac      	cmp	r4, r5
 801c286:	d101      	bne.n	801c28c <__sfputs_r+0x12>
 801c288:	2000      	movs	r0, #0
 801c28a:	e007      	b.n	801c29c <__sfputs_r+0x22>
 801c28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c290:	463a      	mov	r2, r7
 801c292:	4630      	mov	r0, r6
 801c294:	f7ff ffda 	bl	801c24c <__sfputc_r>
 801c298:	1c43      	adds	r3, r0, #1
 801c29a:	d1f3      	bne.n	801c284 <__sfputs_r+0xa>
 801c29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c2a0 <_vfiprintf_r>:
 801c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a4:	460d      	mov	r5, r1
 801c2a6:	b09d      	sub	sp, #116	@ 0x74
 801c2a8:	4614      	mov	r4, r2
 801c2aa:	4698      	mov	r8, r3
 801c2ac:	4606      	mov	r6, r0
 801c2ae:	b118      	cbz	r0, 801c2b8 <_vfiprintf_r+0x18>
 801c2b0:	6a03      	ldr	r3, [r0, #32]
 801c2b2:	b90b      	cbnz	r3, 801c2b8 <_vfiprintf_r+0x18>
 801c2b4:	f7ff fb0e 	bl	801b8d4 <__sinit>
 801c2b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c2ba:	07d9      	lsls	r1, r3, #31
 801c2bc:	d405      	bmi.n	801c2ca <_vfiprintf_r+0x2a>
 801c2be:	89ab      	ldrh	r3, [r5, #12]
 801c2c0:	059a      	lsls	r2, r3, #22
 801c2c2:	d402      	bmi.n	801c2ca <_vfiprintf_r+0x2a>
 801c2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c2c6:	f7ff fdd4 	bl	801be72 <__retarget_lock_acquire_recursive>
 801c2ca:	89ab      	ldrh	r3, [r5, #12]
 801c2cc:	071b      	lsls	r3, r3, #28
 801c2ce:	d501      	bpl.n	801c2d4 <_vfiprintf_r+0x34>
 801c2d0:	692b      	ldr	r3, [r5, #16]
 801c2d2:	b99b      	cbnz	r3, 801c2fc <_vfiprintf_r+0x5c>
 801c2d4:	4629      	mov	r1, r5
 801c2d6:	4630      	mov	r0, r6
 801c2d8:	f7ff fc8c 	bl	801bbf4 <__swsetup_r>
 801c2dc:	b170      	cbz	r0, 801c2fc <_vfiprintf_r+0x5c>
 801c2de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c2e0:	07dc      	lsls	r4, r3, #31
 801c2e2:	d504      	bpl.n	801c2ee <_vfiprintf_r+0x4e>
 801c2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c2e8:	b01d      	add	sp, #116	@ 0x74
 801c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2ee:	89ab      	ldrh	r3, [r5, #12]
 801c2f0:	0598      	lsls	r0, r3, #22
 801c2f2:	d4f7      	bmi.n	801c2e4 <_vfiprintf_r+0x44>
 801c2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c2f6:	f7ff fdbd 	bl	801be74 <__retarget_lock_release_recursive>
 801c2fa:	e7f3      	b.n	801c2e4 <_vfiprintf_r+0x44>
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801c300:	2320      	movs	r3, #32
 801c302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c306:	f8cd 800c 	str.w	r8, [sp, #12]
 801c30a:	2330      	movs	r3, #48	@ 0x30
 801c30c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c4bc <_vfiprintf_r+0x21c>
 801c310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c314:	f04f 0901 	mov.w	r9, #1
 801c318:	4623      	mov	r3, r4
 801c31a:	469a      	mov	sl, r3
 801c31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c320:	b10a      	cbz	r2, 801c326 <_vfiprintf_r+0x86>
 801c322:	2a25      	cmp	r2, #37	@ 0x25
 801c324:	d1f9      	bne.n	801c31a <_vfiprintf_r+0x7a>
 801c326:	ebba 0b04 	subs.w	fp, sl, r4
 801c32a:	d00b      	beq.n	801c344 <_vfiprintf_r+0xa4>
 801c32c:	465b      	mov	r3, fp
 801c32e:	4622      	mov	r2, r4
 801c330:	4629      	mov	r1, r5
 801c332:	4630      	mov	r0, r6
 801c334:	f7ff ffa1 	bl	801c27a <__sfputs_r>
 801c338:	3001      	adds	r0, #1
 801c33a:	f000 80a7 	beq.w	801c48c <_vfiprintf_r+0x1ec>
 801c33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c340:	445a      	add	r2, fp
 801c342:	9209      	str	r2, [sp, #36]	@ 0x24
 801c344:	f89a 3000 	ldrb.w	r3, [sl]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	f000 809f 	beq.w	801c48c <_vfiprintf_r+0x1ec>
 801c34e:	2300      	movs	r3, #0
 801c350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c358:	f10a 0a01 	add.w	sl, sl, #1
 801c35c:	9304      	str	r3, [sp, #16]
 801c35e:	9307      	str	r3, [sp, #28]
 801c360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c364:	931a      	str	r3, [sp, #104]	@ 0x68
 801c366:	4654      	mov	r4, sl
 801c368:	2205      	movs	r2, #5
 801c36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c36e:	4853      	ldr	r0, [pc, #332]	@ (801c4bc <_vfiprintf_r+0x21c>)
 801c370:	f7e3 ff6e 	bl	8000250 <memchr>
 801c374:	9a04      	ldr	r2, [sp, #16]
 801c376:	b9d8      	cbnz	r0, 801c3b0 <_vfiprintf_r+0x110>
 801c378:	06d1      	lsls	r1, r2, #27
 801c37a:	bf44      	itt	mi
 801c37c:	2320      	movmi	r3, #32
 801c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c382:	0713      	lsls	r3, r2, #28
 801c384:	bf44      	itt	mi
 801c386:	232b      	movmi	r3, #43	@ 0x2b
 801c388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c38c:	f89a 3000 	ldrb.w	r3, [sl]
 801c390:	2b2a      	cmp	r3, #42	@ 0x2a
 801c392:	d015      	beq.n	801c3c0 <_vfiprintf_r+0x120>
 801c394:	9a07      	ldr	r2, [sp, #28]
 801c396:	4654      	mov	r4, sl
 801c398:	2000      	movs	r0, #0
 801c39a:	f04f 0c0a 	mov.w	ip, #10
 801c39e:	4621      	mov	r1, r4
 801c3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c3a4:	3b30      	subs	r3, #48	@ 0x30
 801c3a6:	2b09      	cmp	r3, #9
 801c3a8:	d94b      	bls.n	801c442 <_vfiprintf_r+0x1a2>
 801c3aa:	b1b0      	cbz	r0, 801c3da <_vfiprintf_r+0x13a>
 801c3ac:	9207      	str	r2, [sp, #28]
 801c3ae:	e014      	b.n	801c3da <_vfiprintf_r+0x13a>
 801c3b0:	eba0 0308 	sub.w	r3, r0, r8
 801c3b4:	fa09 f303 	lsl.w	r3, r9, r3
 801c3b8:	4313      	orrs	r3, r2
 801c3ba:	9304      	str	r3, [sp, #16]
 801c3bc:	46a2      	mov	sl, r4
 801c3be:	e7d2      	b.n	801c366 <_vfiprintf_r+0xc6>
 801c3c0:	9b03      	ldr	r3, [sp, #12]
 801c3c2:	1d19      	adds	r1, r3, #4
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	9103      	str	r1, [sp, #12]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	bfbb      	ittet	lt
 801c3cc:	425b      	neglt	r3, r3
 801c3ce:	f042 0202 	orrlt.w	r2, r2, #2
 801c3d2:	9307      	strge	r3, [sp, #28]
 801c3d4:	9307      	strlt	r3, [sp, #28]
 801c3d6:	bfb8      	it	lt
 801c3d8:	9204      	strlt	r2, [sp, #16]
 801c3da:	7823      	ldrb	r3, [r4, #0]
 801c3dc:	2b2e      	cmp	r3, #46	@ 0x2e
 801c3de:	d10a      	bne.n	801c3f6 <_vfiprintf_r+0x156>
 801c3e0:	7863      	ldrb	r3, [r4, #1]
 801c3e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801c3e4:	d132      	bne.n	801c44c <_vfiprintf_r+0x1ac>
 801c3e6:	9b03      	ldr	r3, [sp, #12]
 801c3e8:	1d1a      	adds	r2, r3, #4
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	9203      	str	r2, [sp, #12]
 801c3ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c3f2:	3402      	adds	r4, #2
 801c3f4:	9305      	str	r3, [sp, #20]
 801c3f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c4cc <_vfiprintf_r+0x22c>
 801c3fa:	7821      	ldrb	r1, [r4, #0]
 801c3fc:	2203      	movs	r2, #3
 801c3fe:	4650      	mov	r0, sl
 801c400:	f7e3 ff26 	bl	8000250 <memchr>
 801c404:	b138      	cbz	r0, 801c416 <_vfiprintf_r+0x176>
 801c406:	9b04      	ldr	r3, [sp, #16]
 801c408:	eba0 000a 	sub.w	r0, r0, sl
 801c40c:	2240      	movs	r2, #64	@ 0x40
 801c40e:	4082      	lsls	r2, r0
 801c410:	4313      	orrs	r3, r2
 801c412:	3401      	adds	r4, #1
 801c414:	9304      	str	r3, [sp, #16]
 801c416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c41a:	4829      	ldr	r0, [pc, #164]	@ (801c4c0 <_vfiprintf_r+0x220>)
 801c41c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c420:	2206      	movs	r2, #6
 801c422:	f7e3 ff15 	bl	8000250 <memchr>
 801c426:	2800      	cmp	r0, #0
 801c428:	d03f      	beq.n	801c4aa <_vfiprintf_r+0x20a>
 801c42a:	4b26      	ldr	r3, [pc, #152]	@ (801c4c4 <_vfiprintf_r+0x224>)
 801c42c:	bb1b      	cbnz	r3, 801c476 <_vfiprintf_r+0x1d6>
 801c42e:	9b03      	ldr	r3, [sp, #12]
 801c430:	3307      	adds	r3, #7
 801c432:	f023 0307 	bic.w	r3, r3, #7
 801c436:	3308      	adds	r3, #8
 801c438:	9303      	str	r3, [sp, #12]
 801c43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c43c:	443b      	add	r3, r7
 801c43e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c440:	e76a      	b.n	801c318 <_vfiprintf_r+0x78>
 801c442:	fb0c 3202 	mla	r2, ip, r2, r3
 801c446:	460c      	mov	r4, r1
 801c448:	2001      	movs	r0, #1
 801c44a:	e7a8      	b.n	801c39e <_vfiprintf_r+0xfe>
 801c44c:	2300      	movs	r3, #0
 801c44e:	3401      	adds	r4, #1
 801c450:	9305      	str	r3, [sp, #20]
 801c452:	4619      	mov	r1, r3
 801c454:	f04f 0c0a 	mov.w	ip, #10
 801c458:	4620      	mov	r0, r4
 801c45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c45e:	3a30      	subs	r2, #48	@ 0x30
 801c460:	2a09      	cmp	r2, #9
 801c462:	d903      	bls.n	801c46c <_vfiprintf_r+0x1cc>
 801c464:	2b00      	cmp	r3, #0
 801c466:	d0c6      	beq.n	801c3f6 <_vfiprintf_r+0x156>
 801c468:	9105      	str	r1, [sp, #20]
 801c46a:	e7c4      	b.n	801c3f6 <_vfiprintf_r+0x156>
 801c46c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c470:	4604      	mov	r4, r0
 801c472:	2301      	movs	r3, #1
 801c474:	e7f0      	b.n	801c458 <_vfiprintf_r+0x1b8>
 801c476:	ab03      	add	r3, sp, #12
 801c478:	9300      	str	r3, [sp, #0]
 801c47a:	462a      	mov	r2, r5
 801c47c:	4b12      	ldr	r3, [pc, #72]	@ (801c4c8 <_vfiprintf_r+0x228>)
 801c47e:	a904      	add	r1, sp, #16
 801c480:	4630      	mov	r0, r6
 801c482:	f3af 8000 	nop.w
 801c486:	4607      	mov	r7, r0
 801c488:	1c78      	adds	r0, r7, #1
 801c48a:	d1d6      	bne.n	801c43a <_vfiprintf_r+0x19a>
 801c48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c48e:	07d9      	lsls	r1, r3, #31
 801c490:	d405      	bmi.n	801c49e <_vfiprintf_r+0x1fe>
 801c492:	89ab      	ldrh	r3, [r5, #12]
 801c494:	059a      	lsls	r2, r3, #22
 801c496:	d402      	bmi.n	801c49e <_vfiprintf_r+0x1fe>
 801c498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c49a:	f7ff fceb 	bl	801be74 <__retarget_lock_release_recursive>
 801c49e:	89ab      	ldrh	r3, [r5, #12]
 801c4a0:	065b      	lsls	r3, r3, #25
 801c4a2:	f53f af1f 	bmi.w	801c2e4 <_vfiprintf_r+0x44>
 801c4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c4a8:	e71e      	b.n	801c2e8 <_vfiprintf_r+0x48>
 801c4aa:	ab03      	add	r3, sp, #12
 801c4ac:	9300      	str	r3, [sp, #0]
 801c4ae:	462a      	mov	r2, r5
 801c4b0:	4b05      	ldr	r3, [pc, #20]	@ (801c4c8 <_vfiprintf_r+0x228>)
 801c4b2:	a904      	add	r1, sp, #16
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	f000 f879 	bl	801c5ac <_printf_i>
 801c4ba:	e7e4      	b.n	801c486 <_vfiprintf_r+0x1e6>
 801c4bc:	0801ebee 	.word	0x0801ebee
 801c4c0:	0801ebf8 	.word	0x0801ebf8
 801c4c4:	00000000 	.word	0x00000000
 801c4c8:	0801c27b 	.word	0x0801c27b
 801c4cc:	0801ebf4 	.word	0x0801ebf4

0801c4d0 <_printf_common>:
 801c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4d4:	4616      	mov	r6, r2
 801c4d6:	4698      	mov	r8, r3
 801c4d8:	688a      	ldr	r2, [r1, #8]
 801c4da:	690b      	ldr	r3, [r1, #16]
 801c4dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c4e0:	4293      	cmp	r3, r2
 801c4e2:	bfb8      	it	lt
 801c4e4:	4613      	movlt	r3, r2
 801c4e6:	6033      	str	r3, [r6, #0]
 801c4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c4ec:	4607      	mov	r7, r0
 801c4ee:	460c      	mov	r4, r1
 801c4f0:	b10a      	cbz	r2, 801c4f6 <_printf_common+0x26>
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	6033      	str	r3, [r6, #0]
 801c4f6:	6823      	ldr	r3, [r4, #0]
 801c4f8:	0699      	lsls	r1, r3, #26
 801c4fa:	bf42      	ittt	mi
 801c4fc:	6833      	ldrmi	r3, [r6, #0]
 801c4fe:	3302      	addmi	r3, #2
 801c500:	6033      	strmi	r3, [r6, #0]
 801c502:	6825      	ldr	r5, [r4, #0]
 801c504:	f015 0506 	ands.w	r5, r5, #6
 801c508:	d106      	bne.n	801c518 <_printf_common+0x48>
 801c50a:	f104 0a19 	add.w	sl, r4, #25
 801c50e:	68e3      	ldr	r3, [r4, #12]
 801c510:	6832      	ldr	r2, [r6, #0]
 801c512:	1a9b      	subs	r3, r3, r2
 801c514:	42ab      	cmp	r3, r5
 801c516:	dc26      	bgt.n	801c566 <_printf_common+0x96>
 801c518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c51c:	6822      	ldr	r2, [r4, #0]
 801c51e:	3b00      	subs	r3, #0
 801c520:	bf18      	it	ne
 801c522:	2301      	movne	r3, #1
 801c524:	0692      	lsls	r2, r2, #26
 801c526:	d42b      	bmi.n	801c580 <_printf_common+0xb0>
 801c528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c52c:	4641      	mov	r1, r8
 801c52e:	4638      	mov	r0, r7
 801c530:	47c8      	blx	r9
 801c532:	3001      	adds	r0, #1
 801c534:	d01e      	beq.n	801c574 <_printf_common+0xa4>
 801c536:	6823      	ldr	r3, [r4, #0]
 801c538:	6922      	ldr	r2, [r4, #16]
 801c53a:	f003 0306 	and.w	r3, r3, #6
 801c53e:	2b04      	cmp	r3, #4
 801c540:	bf02      	ittt	eq
 801c542:	68e5      	ldreq	r5, [r4, #12]
 801c544:	6833      	ldreq	r3, [r6, #0]
 801c546:	1aed      	subeq	r5, r5, r3
 801c548:	68a3      	ldr	r3, [r4, #8]
 801c54a:	bf0c      	ite	eq
 801c54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c550:	2500      	movne	r5, #0
 801c552:	4293      	cmp	r3, r2
 801c554:	bfc4      	itt	gt
 801c556:	1a9b      	subgt	r3, r3, r2
 801c558:	18ed      	addgt	r5, r5, r3
 801c55a:	2600      	movs	r6, #0
 801c55c:	341a      	adds	r4, #26
 801c55e:	42b5      	cmp	r5, r6
 801c560:	d11a      	bne.n	801c598 <_printf_common+0xc8>
 801c562:	2000      	movs	r0, #0
 801c564:	e008      	b.n	801c578 <_printf_common+0xa8>
 801c566:	2301      	movs	r3, #1
 801c568:	4652      	mov	r2, sl
 801c56a:	4641      	mov	r1, r8
 801c56c:	4638      	mov	r0, r7
 801c56e:	47c8      	blx	r9
 801c570:	3001      	adds	r0, #1
 801c572:	d103      	bne.n	801c57c <_printf_common+0xac>
 801c574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c57c:	3501      	adds	r5, #1
 801c57e:	e7c6      	b.n	801c50e <_printf_common+0x3e>
 801c580:	18e1      	adds	r1, r4, r3
 801c582:	1c5a      	adds	r2, r3, #1
 801c584:	2030      	movs	r0, #48	@ 0x30
 801c586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c58a:	4422      	add	r2, r4
 801c58c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c594:	3302      	adds	r3, #2
 801c596:	e7c7      	b.n	801c528 <_printf_common+0x58>
 801c598:	2301      	movs	r3, #1
 801c59a:	4622      	mov	r2, r4
 801c59c:	4641      	mov	r1, r8
 801c59e:	4638      	mov	r0, r7
 801c5a0:	47c8      	blx	r9
 801c5a2:	3001      	adds	r0, #1
 801c5a4:	d0e6      	beq.n	801c574 <_printf_common+0xa4>
 801c5a6:	3601      	adds	r6, #1
 801c5a8:	e7d9      	b.n	801c55e <_printf_common+0x8e>
	...

0801c5ac <_printf_i>:
 801c5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c5b0:	7e0f      	ldrb	r7, [r1, #24]
 801c5b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c5b4:	2f78      	cmp	r7, #120	@ 0x78
 801c5b6:	4691      	mov	r9, r2
 801c5b8:	4680      	mov	r8, r0
 801c5ba:	460c      	mov	r4, r1
 801c5bc:	469a      	mov	sl, r3
 801c5be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c5c2:	d807      	bhi.n	801c5d4 <_printf_i+0x28>
 801c5c4:	2f62      	cmp	r7, #98	@ 0x62
 801c5c6:	d80a      	bhi.n	801c5de <_printf_i+0x32>
 801c5c8:	2f00      	cmp	r7, #0
 801c5ca:	f000 80d2 	beq.w	801c772 <_printf_i+0x1c6>
 801c5ce:	2f58      	cmp	r7, #88	@ 0x58
 801c5d0:	f000 80b9 	beq.w	801c746 <_printf_i+0x19a>
 801c5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c5d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c5dc:	e03a      	b.n	801c654 <_printf_i+0xa8>
 801c5de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c5e2:	2b15      	cmp	r3, #21
 801c5e4:	d8f6      	bhi.n	801c5d4 <_printf_i+0x28>
 801c5e6:	a101      	add	r1, pc, #4	@ (adr r1, 801c5ec <_printf_i+0x40>)
 801c5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c5ec:	0801c645 	.word	0x0801c645
 801c5f0:	0801c659 	.word	0x0801c659
 801c5f4:	0801c5d5 	.word	0x0801c5d5
 801c5f8:	0801c5d5 	.word	0x0801c5d5
 801c5fc:	0801c5d5 	.word	0x0801c5d5
 801c600:	0801c5d5 	.word	0x0801c5d5
 801c604:	0801c659 	.word	0x0801c659
 801c608:	0801c5d5 	.word	0x0801c5d5
 801c60c:	0801c5d5 	.word	0x0801c5d5
 801c610:	0801c5d5 	.word	0x0801c5d5
 801c614:	0801c5d5 	.word	0x0801c5d5
 801c618:	0801c759 	.word	0x0801c759
 801c61c:	0801c683 	.word	0x0801c683
 801c620:	0801c713 	.word	0x0801c713
 801c624:	0801c5d5 	.word	0x0801c5d5
 801c628:	0801c5d5 	.word	0x0801c5d5
 801c62c:	0801c77b 	.word	0x0801c77b
 801c630:	0801c5d5 	.word	0x0801c5d5
 801c634:	0801c683 	.word	0x0801c683
 801c638:	0801c5d5 	.word	0x0801c5d5
 801c63c:	0801c5d5 	.word	0x0801c5d5
 801c640:	0801c71b 	.word	0x0801c71b
 801c644:	6833      	ldr	r3, [r6, #0]
 801c646:	1d1a      	adds	r2, r3, #4
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	6032      	str	r2, [r6, #0]
 801c64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c654:	2301      	movs	r3, #1
 801c656:	e09d      	b.n	801c794 <_printf_i+0x1e8>
 801c658:	6833      	ldr	r3, [r6, #0]
 801c65a:	6820      	ldr	r0, [r4, #0]
 801c65c:	1d19      	adds	r1, r3, #4
 801c65e:	6031      	str	r1, [r6, #0]
 801c660:	0606      	lsls	r6, r0, #24
 801c662:	d501      	bpl.n	801c668 <_printf_i+0xbc>
 801c664:	681d      	ldr	r5, [r3, #0]
 801c666:	e003      	b.n	801c670 <_printf_i+0xc4>
 801c668:	0645      	lsls	r5, r0, #25
 801c66a:	d5fb      	bpl.n	801c664 <_printf_i+0xb8>
 801c66c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c670:	2d00      	cmp	r5, #0
 801c672:	da03      	bge.n	801c67c <_printf_i+0xd0>
 801c674:	232d      	movs	r3, #45	@ 0x2d
 801c676:	426d      	negs	r5, r5
 801c678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c67c:	4859      	ldr	r0, [pc, #356]	@ (801c7e4 <_printf_i+0x238>)
 801c67e:	230a      	movs	r3, #10
 801c680:	e011      	b.n	801c6a6 <_printf_i+0xfa>
 801c682:	6821      	ldr	r1, [r4, #0]
 801c684:	6833      	ldr	r3, [r6, #0]
 801c686:	0608      	lsls	r0, r1, #24
 801c688:	f853 5b04 	ldr.w	r5, [r3], #4
 801c68c:	d402      	bmi.n	801c694 <_printf_i+0xe8>
 801c68e:	0649      	lsls	r1, r1, #25
 801c690:	bf48      	it	mi
 801c692:	b2ad      	uxthmi	r5, r5
 801c694:	2f6f      	cmp	r7, #111	@ 0x6f
 801c696:	4853      	ldr	r0, [pc, #332]	@ (801c7e4 <_printf_i+0x238>)
 801c698:	6033      	str	r3, [r6, #0]
 801c69a:	bf14      	ite	ne
 801c69c:	230a      	movne	r3, #10
 801c69e:	2308      	moveq	r3, #8
 801c6a0:	2100      	movs	r1, #0
 801c6a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c6a6:	6866      	ldr	r6, [r4, #4]
 801c6a8:	60a6      	str	r6, [r4, #8]
 801c6aa:	2e00      	cmp	r6, #0
 801c6ac:	bfa2      	ittt	ge
 801c6ae:	6821      	ldrge	r1, [r4, #0]
 801c6b0:	f021 0104 	bicge.w	r1, r1, #4
 801c6b4:	6021      	strge	r1, [r4, #0]
 801c6b6:	b90d      	cbnz	r5, 801c6bc <_printf_i+0x110>
 801c6b8:	2e00      	cmp	r6, #0
 801c6ba:	d04b      	beq.n	801c754 <_printf_i+0x1a8>
 801c6bc:	4616      	mov	r6, r2
 801c6be:	fbb5 f1f3 	udiv	r1, r5, r3
 801c6c2:	fb03 5711 	mls	r7, r3, r1, r5
 801c6c6:	5dc7      	ldrb	r7, [r0, r7]
 801c6c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c6cc:	462f      	mov	r7, r5
 801c6ce:	42bb      	cmp	r3, r7
 801c6d0:	460d      	mov	r5, r1
 801c6d2:	d9f4      	bls.n	801c6be <_printf_i+0x112>
 801c6d4:	2b08      	cmp	r3, #8
 801c6d6:	d10b      	bne.n	801c6f0 <_printf_i+0x144>
 801c6d8:	6823      	ldr	r3, [r4, #0]
 801c6da:	07df      	lsls	r7, r3, #31
 801c6dc:	d508      	bpl.n	801c6f0 <_printf_i+0x144>
 801c6de:	6923      	ldr	r3, [r4, #16]
 801c6e0:	6861      	ldr	r1, [r4, #4]
 801c6e2:	4299      	cmp	r1, r3
 801c6e4:	bfde      	ittt	le
 801c6e6:	2330      	movle	r3, #48	@ 0x30
 801c6e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c6ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c6f0:	1b92      	subs	r2, r2, r6
 801c6f2:	6122      	str	r2, [r4, #16]
 801c6f4:	f8cd a000 	str.w	sl, [sp]
 801c6f8:	464b      	mov	r3, r9
 801c6fa:	aa03      	add	r2, sp, #12
 801c6fc:	4621      	mov	r1, r4
 801c6fe:	4640      	mov	r0, r8
 801c700:	f7ff fee6 	bl	801c4d0 <_printf_common>
 801c704:	3001      	adds	r0, #1
 801c706:	d14a      	bne.n	801c79e <_printf_i+0x1f2>
 801c708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c70c:	b004      	add	sp, #16
 801c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c712:	6823      	ldr	r3, [r4, #0]
 801c714:	f043 0320 	orr.w	r3, r3, #32
 801c718:	6023      	str	r3, [r4, #0]
 801c71a:	4833      	ldr	r0, [pc, #204]	@ (801c7e8 <_printf_i+0x23c>)
 801c71c:	2778      	movs	r7, #120	@ 0x78
 801c71e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c722:	6823      	ldr	r3, [r4, #0]
 801c724:	6831      	ldr	r1, [r6, #0]
 801c726:	061f      	lsls	r7, r3, #24
 801c728:	f851 5b04 	ldr.w	r5, [r1], #4
 801c72c:	d402      	bmi.n	801c734 <_printf_i+0x188>
 801c72e:	065f      	lsls	r7, r3, #25
 801c730:	bf48      	it	mi
 801c732:	b2ad      	uxthmi	r5, r5
 801c734:	6031      	str	r1, [r6, #0]
 801c736:	07d9      	lsls	r1, r3, #31
 801c738:	bf44      	itt	mi
 801c73a:	f043 0320 	orrmi.w	r3, r3, #32
 801c73e:	6023      	strmi	r3, [r4, #0]
 801c740:	b11d      	cbz	r5, 801c74a <_printf_i+0x19e>
 801c742:	2310      	movs	r3, #16
 801c744:	e7ac      	b.n	801c6a0 <_printf_i+0xf4>
 801c746:	4827      	ldr	r0, [pc, #156]	@ (801c7e4 <_printf_i+0x238>)
 801c748:	e7e9      	b.n	801c71e <_printf_i+0x172>
 801c74a:	6823      	ldr	r3, [r4, #0]
 801c74c:	f023 0320 	bic.w	r3, r3, #32
 801c750:	6023      	str	r3, [r4, #0]
 801c752:	e7f6      	b.n	801c742 <_printf_i+0x196>
 801c754:	4616      	mov	r6, r2
 801c756:	e7bd      	b.n	801c6d4 <_printf_i+0x128>
 801c758:	6833      	ldr	r3, [r6, #0]
 801c75a:	6825      	ldr	r5, [r4, #0]
 801c75c:	6961      	ldr	r1, [r4, #20]
 801c75e:	1d18      	adds	r0, r3, #4
 801c760:	6030      	str	r0, [r6, #0]
 801c762:	062e      	lsls	r6, r5, #24
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	d501      	bpl.n	801c76c <_printf_i+0x1c0>
 801c768:	6019      	str	r1, [r3, #0]
 801c76a:	e002      	b.n	801c772 <_printf_i+0x1c6>
 801c76c:	0668      	lsls	r0, r5, #25
 801c76e:	d5fb      	bpl.n	801c768 <_printf_i+0x1bc>
 801c770:	8019      	strh	r1, [r3, #0]
 801c772:	2300      	movs	r3, #0
 801c774:	6123      	str	r3, [r4, #16]
 801c776:	4616      	mov	r6, r2
 801c778:	e7bc      	b.n	801c6f4 <_printf_i+0x148>
 801c77a:	6833      	ldr	r3, [r6, #0]
 801c77c:	1d1a      	adds	r2, r3, #4
 801c77e:	6032      	str	r2, [r6, #0]
 801c780:	681e      	ldr	r6, [r3, #0]
 801c782:	6862      	ldr	r2, [r4, #4]
 801c784:	2100      	movs	r1, #0
 801c786:	4630      	mov	r0, r6
 801c788:	f7e3 fd62 	bl	8000250 <memchr>
 801c78c:	b108      	cbz	r0, 801c792 <_printf_i+0x1e6>
 801c78e:	1b80      	subs	r0, r0, r6
 801c790:	6060      	str	r0, [r4, #4]
 801c792:	6863      	ldr	r3, [r4, #4]
 801c794:	6123      	str	r3, [r4, #16]
 801c796:	2300      	movs	r3, #0
 801c798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c79c:	e7aa      	b.n	801c6f4 <_printf_i+0x148>
 801c79e:	6923      	ldr	r3, [r4, #16]
 801c7a0:	4632      	mov	r2, r6
 801c7a2:	4649      	mov	r1, r9
 801c7a4:	4640      	mov	r0, r8
 801c7a6:	47d0      	blx	sl
 801c7a8:	3001      	adds	r0, #1
 801c7aa:	d0ad      	beq.n	801c708 <_printf_i+0x15c>
 801c7ac:	6823      	ldr	r3, [r4, #0]
 801c7ae:	079b      	lsls	r3, r3, #30
 801c7b0:	d413      	bmi.n	801c7da <_printf_i+0x22e>
 801c7b2:	68e0      	ldr	r0, [r4, #12]
 801c7b4:	9b03      	ldr	r3, [sp, #12]
 801c7b6:	4298      	cmp	r0, r3
 801c7b8:	bfb8      	it	lt
 801c7ba:	4618      	movlt	r0, r3
 801c7bc:	e7a6      	b.n	801c70c <_printf_i+0x160>
 801c7be:	2301      	movs	r3, #1
 801c7c0:	4632      	mov	r2, r6
 801c7c2:	4649      	mov	r1, r9
 801c7c4:	4640      	mov	r0, r8
 801c7c6:	47d0      	blx	sl
 801c7c8:	3001      	adds	r0, #1
 801c7ca:	d09d      	beq.n	801c708 <_printf_i+0x15c>
 801c7cc:	3501      	adds	r5, #1
 801c7ce:	68e3      	ldr	r3, [r4, #12]
 801c7d0:	9903      	ldr	r1, [sp, #12]
 801c7d2:	1a5b      	subs	r3, r3, r1
 801c7d4:	42ab      	cmp	r3, r5
 801c7d6:	dcf2      	bgt.n	801c7be <_printf_i+0x212>
 801c7d8:	e7eb      	b.n	801c7b2 <_printf_i+0x206>
 801c7da:	2500      	movs	r5, #0
 801c7dc:	f104 0619 	add.w	r6, r4, #25
 801c7e0:	e7f5      	b.n	801c7ce <_printf_i+0x222>
 801c7e2:	bf00      	nop
 801c7e4:	0801ebff 	.word	0x0801ebff
 801c7e8:	0801ec10 	.word	0x0801ec10

0801c7ec <__sflush_r>:
 801c7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7f4:	0716      	lsls	r6, r2, #28
 801c7f6:	4605      	mov	r5, r0
 801c7f8:	460c      	mov	r4, r1
 801c7fa:	d454      	bmi.n	801c8a6 <__sflush_r+0xba>
 801c7fc:	684b      	ldr	r3, [r1, #4]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	dc02      	bgt.n	801c808 <__sflush_r+0x1c>
 801c802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c804:	2b00      	cmp	r3, #0
 801c806:	dd48      	ble.n	801c89a <__sflush_r+0xae>
 801c808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c80a:	2e00      	cmp	r6, #0
 801c80c:	d045      	beq.n	801c89a <__sflush_r+0xae>
 801c80e:	2300      	movs	r3, #0
 801c810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c814:	682f      	ldr	r7, [r5, #0]
 801c816:	6a21      	ldr	r1, [r4, #32]
 801c818:	602b      	str	r3, [r5, #0]
 801c81a:	d030      	beq.n	801c87e <__sflush_r+0x92>
 801c81c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c81e:	89a3      	ldrh	r3, [r4, #12]
 801c820:	0759      	lsls	r1, r3, #29
 801c822:	d505      	bpl.n	801c830 <__sflush_r+0x44>
 801c824:	6863      	ldr	r3, [r4, #4]
 801c826:	1ad2      	subs	r2, r2, r3
 801c828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c82a:	b10b      	cbz	r3, 801c830 <__sflush_r+0x44>
 801c82c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c82e:	1ad2      	subs	r2, r2, r3
 801c830:	2300      	movs	r3, #0
 801c832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c834:	6a21      	ldr	r1, [r4, #32]
 801c836:	4628      	mov	r0, r5
 801c838:	47b0      	blx	r6
 801c83a:	1c43      	adds	r3, r0, #1
 801c83c:	89a3      	ldrh	r3, [r4, #12]
 801c83e:	d106      	bne.n	801c84e <__sflush_r+0x62>
 801c840:	6829      	ldr	r1, [r5, #0]
 801c842:	291d      	cmp	r1, #29
 801c844:	d82b      	bhi.n	801c89e <__sflush_r+0xb2>
 801c846:	4a2a      	ldr	r2, [pc, #168]	@ (801c8f0 <__sflush_r+0x104>)
 801c848:	410a      	asrs	r2, r1
 801c84a:	07d6      	lsls	r6, r2, #31
 801c84c:	d427      	bmi.n	801c89e <__sflush_r+0xb2>
 801c84e:	2200      	movs	r2, #0
 801c850:	6062      	str	r2, [r4, #4]
 801c852:	04d9      	lsls	r1, r3, #19
 801c854:	6922      	ldr	r2, [r4, #16]
 801c856:	6022      	str	r2, [r4, #0]
 801c858:	d504      	bpl.n	801c864 <__sflush_r+0x78>
 801c85a:	1c42      	adds	r2, r0, #1
 801c85c:	d101      	bne.n	801c862 <__sflush_r+0x76>
 801c85e:	682b      	ldr	r3, [r5, #0]
 801c860:	b903      	cbnz	r3, 801c864 <__sflush_r+0x78>
 801c862:	6560      	str	r0, [r4, #84]	@ 0x54
 801c864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c866:	602f      	str	r7, [r5, #0]
 801c868:	b1b9      	cbz	r1, 801c89a <__sflush_r+0xae>
 801c86a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c86e:	4299      	cmp	r1, r3
 801c870:	d002      	beq.n	801c878 <__sflush_r+0x8c>
 801c872:	4628      	mov	r0, r5
 801c874:	f7ff fb40 	bl	801bef8 <_free_r>
 801c878:	2300      	movs	r3, #0
 801c87a:	6363      	str	r3, [r4, #52]	@ 0x34
 801c87c:	e00d      	b.n	801c89a <__sflush_r+0xae>
 801c87e:	2301      	movs	r3, #1
 801c880:	4628      	mov	r0, r5
 801c882:	47b0      	blx	r6
 801c884:	4602      	mov	r2, r0
 801c886:	1c50      	adds	r0, r2, #1
 801c888:	d1c9      	bne.n	801c81e <__sflush_r+0x32>
 801c88a:	682b      	ldr	r3, [r5, #0]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d0c6      	beq.n	801c81e <__sflush_r+0x32>
 801c890:	2b1d      	cmp	r3, #29
 801c892:	d001      	beq.n	801c898 <__sflush_r+0xac>
 801c894:	2b16      	cmp	r3, #22
 801c896:	d11e      	bne.n	801c8d6 <__sflush_r+0xea>
 801c898:	602f      	str	r7, [r5, #0]
 801c89a:	2000      	movs	r0, #0
 801c89c:	e022      	b.n	801c8e4 <__sflush_r+0xf8>
 801c89e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c8a2:	b21b      	sxth	r3, r3
 801c8a4:	e01b      	b.n	801c8de <__sflush_r+0xf2>
 801c8a6:	690f      	ldr	r7, [r1, #16]
 801c8a8:	2f00      	cmp	r7, #0
 801c8aa:	d0f6      	beq.n	801c89a <__sflush_r+0xae>
 801c8ac:	0793      	lsls	r3, r2, #30
 801c8ae:	680e      	ldr	r6, [r1, #0]
 801c8b0:	bf08      	it	eq
 801c8b2:	694b      	ldreq	r3, [r1, #20]
 801c8b4:	600f      	str	r7, [r1, #0]
 801c8b6:	bf18      	it	ne
 801c8b8:	2300      	movne	r3, #0
 801c8ba:	eba6 0807 	sub.w	r8, r6, r7
 801c8be:	608b      	str	r3, [r1, #8]
 801c8c0:	f1b8 0f00 	cmp.w	r8, #0
 801c8c4:	dde9      	ble.n	801c89a <__sflush_r+0xae>
 801c8c6:	6a21      	ldr	r1, [r4, #32]
 801c8c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c8ca:	4643      	mov	r3, r8
 801c8cc:	463a      	mov	r2, r7
 801c8ce:	4628      	mov	r0, r5
 801c8d0:	47b0      	blx	r6
 801c8d2:	2800      	cmp	r0, #0
 801c8d4:	dc08      	bgt.n	801c8e8 <__sflush_r+0xfc>
 801c8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c8de:	81a3      	strh	r3, [r4, #12]
 801c8e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8e8:	4407      	add	r7, r0
 801c8ea:	eba8 0800 	sub.w	r8, r8, r0
 801c8ee:	e7e7      	b.n	801c8c0 <__sflush_r+0xd4>
 801c8f0:	dfbffffe 	.word	0xdfbffffe

0801c8f4 <_fflush_r>:
 801c8f4:	b538      	push	{r3, r4, r5, lr}
 801c8f6:	690b      	ldr	r3, [r1, #16]
 801c8f8:	4605      	mov	r5, r0
 801c8fa:	460c      	mov	r4, r1
 801c8fc:	b913      	cbnz	r3, 801c904 <_fflush_r+0x10>
 801c8fe:	2500      	movs	r5, #0
 801c900:	4628      	mov	r0, r5
 801c902:	bd38      	pop	{r3, r4, r5, pc}
 801c904:	b118      	cbz	r0, 801c90e <_fflush_r+0x1a>
 801c906:	6a03      	ldr	r3, [r0, #32]
 801c908:	b90b      	cbnz	r3, 801c90e <_fflush_r+0x1a>
 801c90a:	f7fe ffe3 	bl	801b8d4 <__sinit>
 801c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d0f3      	beq.n	801c8fe <_fflush_r+0xa>
 801c916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c918:	07d0      	lsls	r0, r2, #31
 801c91a:	d404      	bmi.n	801c926 <_fflush_r+0x32>
 801c91c:	0599      	lsls	r1, r3, #22
 801c91e:	d402      	bmi.n	801c926 <_fflush_r+0x32>
 801c920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c922:	f7ff faa6 	bl	801be72 <__retarget_lock_acquire_recursive>
 801c926:	4628      	mov	r0, r5
 801c928:	4621      	mov	r1, r4
 801c92a:	f7ff ff5f 	bl	801c7ec <__sflush_r>
 801c92e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c930:	07da      	lsls	r2, r3, #31
 801c932:	4605      	mov	r5, r0
 801c934:	d4e4      	bmi.n	801c900 <_fflush_r+0xc>
 801c936:	89a3      	ldrh	r3, [r4, #12]
 801c938:	059b      	lsls	r3, r3, #22
 801c93a:	d4e1      	bmi.n	801c900 <_fflush_r+0xc>
 801c93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c93e:	f7ff fa99 	bl	801be74 <__retarget_lock_release_recursive>
 801c942:	e7dd      	b.n	801c900 <_fflush_r+0xc>

0801c944 <fiprintf>:
 801c944:	b40e      	push	{r1, r2, r3}
 801c946:	b503      	push	{r0, r1, lr}
 801c948:	4601      	mov	r1, r0
 801c94a:	ab03      	add	r3, sp, #12
 801c94c:	4805      	ldr	r0, [pc, #20]	@ (801c964 <fiprintf+0x20>)
 801c94e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c952:	6800      	ldr	r0, [r0, #0]
 801c954:	9301      	str	r3, [sp, #4]
 801c956:	f7ff fca3 	bl	801c2a0 <_vfiprintf_r>
 801c95a:	b002      	add	sp, #8
 801c95c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c960:	b003      	add	sp, #12
 801c962:	4770      	bx	lr
 801c964:	200009c0 	.word	0x200009c0

0801c968 <__swhatbuf_r>:
 801c968:	b570      	push	{r4, r5, r6, lr}
 801c96a:	460c      	mov	r4, r1
 801c96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c970:	2900      	cmp	r1, #0
 801c972:	b096      	sub	sp, #88	@ 0x58
 801c974:	4615      	mov	r5, r2
 801c976:	461e      	mov	r6, r3
 801c978:	da0d      	bge.n	801c996 <__swhatbuf_r+0x2e>
 801c97a:	89a3      	ldrh	r3, [r4, #12]
 801c97c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c980:	f04f 0100 	mov.w	r1, #0
 801c984:	bf14      	ite	ne
 801c986:	2340      	movne	r3, #64	@ 0x40
 801c988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c98c:	2000      	movs	r0, #0
 801c98e:	6031      	str	r1, [r6, #0]
 801c990:	602b      	str	r3, [r5, #0]
 801c992:	b016      	add	sp, #88	@ 0x58
 801c994:	bd70      	pop	{r4, r5, r6, pc}
 801c996:	466a      	mov	r2, sp
 801c998:	f000 f848 	bl	801ca2c <_fstat_r>
 801c99c:	2800      	cmp	r0, #0
 801c99e:	dbec      	blt.n	801c97a <__swhatbuf_r+0x12>
 801c9a0:	9901      	ldr	r1, [sp, #4]
 801c9a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c9a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c9aa:	4259      	negs	r1, r3
 801c9ac:	4159      	adcs	r1, r3
 801c9ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c9b2:	e7eb      	b.n	801c98c <__swhatbuf_r+0x24>

0801c9b4 <__smakebuf_r>:
 801c9b4:	898b      	ldrh	r3, [r1, #12]
 801c9b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9b8:	079d      	lsls	r5, r3, #30
 801c9ba:	4606      	mov	r6, r0
 801c9bc:	460c      	mov	r4, r1
 801c9be:	d507      	bpl.n	801c9d0 <__smakebuf_r+0x1c>
 801c9c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c9c4:	6023      	str	r3, [r4, #0]
 801c9c6:	6123      	str	r3, [r4, #16]
 801c9c8:	2301      	movs	r3, #1
 801c9ca:	6163      	str	r3, [r4, #20]
 801c9cc:	b003      	add	sp, #12
 801c9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9d0:	ab01      	add	r3, sp, #4
 801c9d2:	466a      	mov	r2, sp
 801c9d4:	f7ff ffc8 	bl	801c968 <__swhatbuf_r>
 801c9d8:	9f00      	ldr	r7, [sp, #0]
 801c9da:	4605      	mov	r5, r0
 801c9dc:	4639      	mov	r1, r7
 801c9de:	4630      	mov	r0, r6
 801c9e0:	f7fe fd46 	bl	801b470 <_malloc_r>
 801c9e4:	b948      	cbnz	r0, 801c9fa <__smakebuf_r+0x46>
 801c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9ea:	059a      	lsls	r2, r3, #22
 801c9ec:	d4ee      	bmi.n	801c9cc <__smakebuf_r+0x18>
 801c9ee:	f023 0303 	bic.w	r3, r3, #3
 801c9f2:	f043 0302 	orr.w	r3, r3, #2
 801c9f6:	81a3      	strh	r3, [r4, #12]
 801c9f8:	e7e2      	b.n	801c9c0 <__smakebuf_r+0xc>
 801c9fa:	89a3      	ldrh	r3, [r4, #12]
 801c9fc:	6020      	str	r0, [r4, #0]
 801c9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca02:	81a3      	strh	r3, [r4, #12]
 801ca04:	9b01      	ldr	r3, [sp, #4]
 801ca06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ca0a:	b15b      	cbz	r3, 801ca24 <__smakebuf_r+0x70>
 801ca0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca10:	4630      	mov	r0, r6
 801ca12:	f000 f81d 	bl	801ca50 <_isatty_r>
 801ca16:	b128      	cbz	r0, 801ca24 <__smakebuf_r+0x70>
 801ca18:	89a3      	ldrh	r3, [r4, #12]
 801ca1a:	f023 0303 	bic.w	r3, r3, #3
 801ca1e:	f043 0301 	orr.w	r3, r3, #1
 801ca22:	81a3      	strh	r3, [r4, #12]
 801ca24:	89a3      	ldrh	r3, [r4, #12]
 801ca26:	431d      	orrs	r5, r3
 801ca28:	81a5      	strh	r5, [r4, #12]
 801ca2a:	e7cf      	b.n	801c9cc <__smakebuf_r+0x18>

0801ca2c <_fstat_r>:
 801ca2c:	b538      	push	{r3, r4, r5, lr}
 801ca2e:	4d07      	ldr	r5, [pc, #28]	@ (801ca4c <_fstat_r+0x20>)
 801ca30:	2300      	movs	r3, #0
 801ca32:	4604      	mov	r4, r0
 801ca34:	4608      	mov	r0, r1
 801ca36:	4611      	mov	r1, r2
 801ca38:	602b      	str	r3, [r5, #0]
 801ca3a:	f7e5 ffb3 	bl	80029a4 <_fstat>
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	d102      	bne.n	801ca48 <_fstat_r+0x1c>
 801ca42:	682b      	ldr	r3, [r5, #0]
 801ca44:	b103      	cbz	r3, 801ca48 <_fstat_r+0x1c>
 801ca46:	6023      	str	r3, [r4, #0]
 801ca48:	bd38      	pop	{r3, r4, r5, pc}
 801ca4a:	bf00      	nop
 801ca4c:	2000bf84 	.word	0x2000bf84

0801ca50 <_isatty_r>:
 801ca50:	b538      	push	{r3, r4, r5, lr}
 801ca52:	4d06      	ldr	r5, [pc, #24]	@ (801ca6c <_isatty_r+0x1c>)
 801ca54:	2300      	movs	r3, #0
 801ca56:	4604      	mov	r4, r0
 801ca58:	4608      	mov	r0, r1
 801ca5a:	602b      	str	r3, [r5, #0]
 801ca5c:	f7e5 ffb2 	bl	80029c4 <_isatty>
 801ca60:	1c43      	adds	r3, r0, #1
 801ca62:	d102      	bne.n	801ca6a <_isatty_r+0x1a>
 801ca64:	682b      	ldr	r3, [r5, #0]
 801ca66:	b103      	cbz	r3, 801ca6a <_isatty_r+0x1a>
 801ca68:	6023      	str	r3, [r4, #0]
 801ca6a:	bd38      	pop	{r3, r4, r5, pc}
 801ca6c:	2000bf84 	.word	0x2000bf84

0801ca70 <abort>:
 801ca70:	b508      	push	{r3, lr}
 801ca72:	2006      	movs	r0, #6
 801ca74:	f000 f82c 	bl	801cad0 <raise>
 801ca78:	2001      	movs	r0, #1
 801ca7a:	f7e5 ff43 	bl	8002904 <_exit>

0801ca7e <_raise_r>:
 801ca7e:	291f      	cmp	r1, #31
 801ca80:	b538      	push	{r3, r4, r5, lr}
 801ca82:	4605      	mov	r5, r0
 801ca84:	460c      	mov	r4, r1
 801ca86:	d904      	bls.n	801ca92 <_raise_r+0x14>
 801ca88:	2316      	movs	r3, #22
 801ca8a:	6003      	str	r3, [r0, #0]
 801ca8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca90:	bd38      	pop	{r3, r4, r5, pc}
 801ca92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ca94:	b112      	cbz	r2, 801ca9c <_raise_r+0x1e>
 801ca96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca9a:	b94b      	cbnz	r3, 801cab0 <_raise_r+0x32>
 801ca9c:	4628      	mov	r0, r5
 801ca9e:	f000 f831 	bl	801cb04 <_getpid_r>
 801caa2:	4622      	mov	r2, r4
 801caa4:	4601      	mov	r1, r0
 801caa6:	4628      	mov	r0, r5
 801caa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801caac:	f000 b818 	b.w	801cae0 <_kill_r>
 801cab0:	2b01      	cmp	r3, #1
 801cab2:	d00a      	beq.n	801caca <_raise_r+0x4c>
 801cab4:	1c59      	adds	r1, r3, #1
 801cab6:	d103      	bne.n	801cac0 <_raise_r+0x42>
 801cab8:	2316      	movs	r3, #22
 801caba:	6003      	str	r3, [r0, #0]
 801cabc:	2001      	movs	r0, #1
 801cabe:	e7e7      	b.n	801ca90 <_raise_r+0x12>
 801cac0:	2100      	movs	r1, #0
 801cac2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cac6:	4620      	mov	r0, r4
 801cac8:	4798      	blx	r3
 801caca:	2000      	movs	r0, #0
 801cacc:	e7e0      	b.n	801ca90 <_raise_r+0x12>
	...

0801cad0 <raise>:
 801cad0:	4b02      	ldr	r3, [pc, #8]	@ (801cadc <raise+0xc>)
 801cad2:	4601      	mov	r1, r0
 801cad4:	6818      	ldr	r0, [r3, #0]
 801cad6:	f7ff bfd2 	b.w	801ca7e <_raise_r>
 801cada:	bf00      	nop
 801cadc:	200009c0 	.word	0x200009c0

0801cae0 <_kill_r>:
 801cae0:	b538      	push	{r3, r4, r5, lr}
 801cae2:	4d07      	ldr	r5, [pc, #28]	@ (801cb00 <_kill_r+0x20>)
 801cae4:	2300      	movs	r3, #0
 801cae6:	4604      	mov	r4, r0
 801cae8:	4608      	mov	r0, r1
 801caea:	4611      	mov	r1, r2
 801caec:	602b      	str	r3, [r5, #0]
 801caee:	f7e5 fef9 	bl	80028e4 <_kill>
 801caf2:	1c43      	adds	r3, r0, #1
 801caf4:	d102      	bne.n	801cafc <_kill_r+0x1c>
 801caf6:	682b      	ldr	r3, [r5, #0]
 801caf8:	b103      	cbz	r3, 801cafc <_kill_r+0x1c>
 801cafa:	6023      	str	r3, [r4, #0]
 801cafc:	bd38      	pop	{r3, r4, r5, pc}
 801cafe:	bf00      	nop
 801cb00:	2000bf84 	.word	0x2000bf84

0801cb04 <_getpid_r>:
 801cb04:	f7e5 bee6 	b.w	80028d4 <_getpid>

0801cb08 <atan2>:
 801cb08:	f000 baaa 	b.w	801d060 <__ieee754_atan2>

0801cb0c <sqrt>:
 801cb0c:	b538      	push	{r3, r4, r5, lr}
 801cb0e:	ed2d 8b02 	vpush	{d8}
 801cb12:	ec55 4b10 	vmov	r4, r5, d0
 801cb16:	f000 f9c7 	bl	801cea8 <__ieee754_sqrt>
 801cb1a:	4622      	mov	r2, r4
 801cb1c:	462b      	mov	r3, r5
 801cb1e:	4620      	mov	r0, r4
 801cb20:	4629      	mov	r1, r5
 801cb22:	eeb0 8a40 	vmov.f32	s16, s0
 801cb26:	eef0 8a60 	vmov.f32	s17, s1
 801cb2a:	f7e4 f837 	bl	8000b9c <__aeabi_dcmpun>
 801cb2e:	b990      	cbnz	r0, 801cb56 <sqrt+0x4a>
 801cb30:	2200      	movs	r2, #0
 801cb32:	2300      	movs	r3, #0
 801cb34:	4620      	mov	r0, r4
 801cb36:	4629      	mov	r1, r5
 801cb38:	f7e4 f808 	bl	8000b4c <__aeabi_dcmplt>
 801cb3c:	b158      	cbz	r0, 801cb56 <sqrt+0x4a>
 801cb3e:	f7ff f96d 	bl	801be1c <__errno>
 801cb42:	2321      	movs	r3, #33	@ 0x21
 801cb44:	6003      	str	r3, [r0, #0]
 801cb46:	2200      	movs	r2, #0
 801cb48:	2300      	movs	r3, #0
 801cb4a:	4610      	mov	r0, r2
 801cb4c:	4619      	mov	r1, r3
 801cb4e:	f7e3 feb5 	bl	80008bc <__aeabi_ddiv>
 801cb52:	ec41 0b18 	vmov	d8, r0, r1
 801cb56:	eeb0 0a48 	vmov.f32	s0, s16
 801cb5a:	eef0 0a68 	vmov.f32	s1, s17
 801cb5e:	ecbd 8b02 	vpop	{d8}
 801cb62:	bd38      	pop	{r3, r4, r5, pc}
 801cb64:	0000      	movs	r0, r0
	...

0801cb68 <atan>:
 801cb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb6c:	ec55 4b10 	vmov	r4, r5, d0
 801cb70:	4bbf      	ldr	r3, [pc, #764]	@ (801ce70 <atan+0x308>)
 801cb72:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801cb76:	429e      	cmp	r6, r3
 801cb78:	46ab      	mov	fp, r5
 801cb7a:	d918      	bls.n	801cbae <atan+0x46>
 801cb7c:	4bbd      	ldr	r3, [pc, #756]	@ (801ce74 <atan+0x30c>)
 801cb7e:	429e      	cmp	r6, r3
 801cb80:	d801      	bhi.n	801cb86 <atan+0x1e>
 801cb82:	d109      	bne.n	801cb98 <atan+0x30>
 801cb84:	b144      	cbz	r4, 801cb98 <atan+0x30>
 801cb86:	4622      	mov	r2, r4
 801cb88:	462b      	mov	r3, r5
 801cb8a:	4620      	mov	r0, r4
 801cb8c:	4629      	mov	r1, r5
 801cb8e:	f7e3 fbb5 	bl	80002fc <__adddf3>
 801cb92:	4604      	mov	r4, r0
 801cb94:	460d      	mov	r5, r1
 801cb96:	e006      	b.n	801cba6 <atan+0x3e>
 801cb98:	f1bb 0f00 	cmp.w	fp, #0
 801cb9c:	f340 812b 	ble.w	801cdf6 <atan+0x28e>
 801cba0:	a597      	add	r5, pc, #604	@ (adr r5, 801ce00 <atan+0x298>)
 801cba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cba6:	ec45 4b10 	vmov	d0, r4, r5
 801cbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbae:	4bb2      	ldr	r3, [pc, #712]	@ (801ce78 <atan+0x310>)
 801cbb0:	429e      	cmp	r6, r3
 801cbb2:	d813      	bhi.n	801cbdc <atan+0x74>
 801cbb4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801cbb8:	429e      	cmp	r6, r3
 801cbba:	d80c      	bhi.n	801cbd6 <atan+0x6e>
 801cbbc:	a392      	add	r3, pc, #584	@ (adr r3, 801ce08 <atan+0x2a0>)
 801cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc2:	4620      	mov	r0, r4
 801cbc4:	4629      	mov	r1, r5
 801cbc6:	f7e3 fb99 	bl	80002fc <__adddf3>
 801cbca:	4bac      	ldr	r3, [pc, #688]	@ (801ce7c <atan+0x314>)
 801cbcc:	2200      	movs	r2, #0
 801cbce:	f7e3 ffdb 	bl	8000b88 <__aeabi_dcmpgt>
 801cbd2:	2800      	cmp	r0, #0
 801cbd4:	d1e7      	bne.n	801cba6 <atan+0x3e>
 801cbd6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801cbda:	e029      	b.n	801cc30 <atan+0xc8>
 801cbdc:	f000 f95c 	bl	801ce98 <fabs>
 801cbe0:	4ba7      	ldr	r3, [pc, #668]	@ (801ce80 <atan+0x318>)
 801cbe2:	429e      	cmp	r6, r3
 801cbe4:	ec55 4b10 	vmov	r4, r5, d0
 801cbe8:	f200 80bc 	bhi.w	801cd64 <atan+0x1fc>
 801cbec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801cbf0:	429e      	cmp	r6, r3
 801cbf2:	f200 809e 	bhi.w	801cd32 <atan+0x1ca>
 801cbf6:	4622      	mov	r2, r4
 801cbf8:	462b      	mov	r3, r5
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	4629      	mov	r1, r5
 801cbfe:	f7e3 fb7d 	bl	80002fc <__adddf3>
 801cc02:	4b9e      	ldr	r3, [pc, #632]	@ (801ce7c <atan+0x314>)
 801cc04:	2200      	movs	r2, #0
 801cc06:	f7e3 fb77 	bl	80002f8 <__aeabi_dsub>
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	4606      	mov	r6, r0
 801cc0e:	460f      	mov	r7, r1
 801cc10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cc14:	4620      	mov	r0, r4
 801cc16:	4629      	mov	r1, r5
 801cc18:	f7e3 fb70 	bl	80002fc <__adddf3>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	460b      	mov	r3, r1
 801cc20:	4630      	mov	r0, r6
 801cc22:	4639      	mov	r1, r7
 801cc24:	f7e3 fe4a 	bl	80008bc <__aeabi_ddiv>
 801cc28:	f04f 0a00 	mov.w	sl, #0
 801cc2c:	4604      	mov	r4, r0
 801cc2e:	460d      	mov	r5, r1
 801cc30:	4622      	mov	r2, r4
 801cc32:	462b      	mov	r3, r5
 801cc34:	4620      	mov	r0, r4
 801cc36:	4629      	mov	r1, r5
 801cc38:	f7e3 fd16 	bl	8000668 <__aeabi_dmul>
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	4680      	mov	r8, r0
 801cc42:	4689      	mov	r9, r1
 801cc44:	f7e3 fd10 	bl	8000668 <__aeabi_dmul>
 801cc48:	a371      	add	r3, pc, #452	@ (adr r3, 801ce10 <atan+0x2a8>)
 801cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc4e:	4606      	mov	r6, r0
 801cc50:	460f      	mov	r7, r1
 801cc52:	f7e3 fd09 	bl	8000668 <__aeabi_dmul>
 801cc56:	a370      	add	r3, pc, #448	@ (adr r3, 801ce18 <atan+0x2b0>)
 801cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc5c:	f7e3 fb4e 	bl	80002fc <__adddf3>
 801cc60:	4632      	mov	r2, r6
 801cc62:	463b      	mov	r3, r7
 801cc64:	f7e3 fd00 	bl	8000668 <__aeabi_dmul>
 801cc68:	a36d      	add	r3, pc, #436	@ (adr r3, 801ce20 <atan+0x2b8>)
 801cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc6e:	f7e3 fb45 	bl	80002fc <__adddf3>
 801cc72:	4632      	mov	r2, r6
 801cc74:	463b      	mov	r3, r7
 801cc76:	f7e3 fcf7 	bl	8000668 <__aeabi_dmul>
 801cc7a:	a36b      	add	r3, pc, #428	@ (adr r3, 801ce28 <atan+0x2c0>)
 801cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc80:	f7e3 fb3c 	bl	80002fc <__adddf3>
 801cc84:	4632      	mov	r2, r6
 801cc86:	463b      	mov	r3, r7
 801cc88:	f7e3 fcee 	bl	8000668 <__aeabi_dmul>
 801cc8c:	a368      	add	r3, pc, #416	@ (adr r3, 801ce30 <atan+0x2c8>)
 801cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc92:	f7e3 fb33 	bl	80002fc <__adddf3>
 801cc96:	4632      	mov	r2, r6
 801cc98:	463b      	mov	r3, r7
 801cc9a:	f7e3 fce5 	bl	8000668 <__aeabi_dmul>
 801cc9e:	a366      	add	r3, pc, #408	@ (adr r3, 801ce38 <atan+0x2d0>)
 801cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cca4:	f7e3 fb2a 	bl	80002fc <__adddf3>
 801cca8:	4642      	mov	r2, r8
 801ccaa:	464b      	mov	r3, r9
 801ccac:	f7e3 fcdc 	bl	8000668 <__aeabi_dmul>
 801ccb0:	a363      	add	r3, pc, #396	@ (adr r3, 801ce40 <atan+0x2d8>)
 801ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccb6:	4680      	mov	r8, r0
 801ccb8:	4689      	mov	r9, r1
 801ccba:	4630      	mov	r0, r6
 801ccbc:	4639      	mov	r1, r7
 801ccbe:	f7e3 fcd3 	bl	8000668 <__aeabi_dmul>
 801ccc2:	a361      	add	r3, pc, #388	@ (adr r3, 801ce48 <atan+0x2e0>)
 801ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc8:	f7e3 fb16 	bl	80002f8 <__aeabi_dsub>
 801cccc:	4632      	mov	r2, r6
 801ccce:	463b      	mov	r3, r7
 801ccd0:	f7e3 fcca 	bl	8000668 <__aeabi_dmul>
 801ccd4:	a35e      	add	r3, pc, #376	@ (adr r3, 801ce50 <atan+0x2e8>)
 801ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccda:	f7e3 fb0d 	bl	80002f8 <__aeabi_dsub>
 801ccde:	4632      	mov	r2, r6
 801cce0:	463b      	mov	r3, r7
 801cce2:	f7e3 fcc1 	bl	8000668 <__aeabi_dmul>
 801cce6:	a35c      	add	r3, pc, #368	@ (adr r3, 801ce58 <atan+0x2f0>)
 801cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccec:	f7e3 fb04 	bl	80002f8 <__aeabi_dsub>
 801ccf0:	4632      	mov	r2, r6
 801ccf2:	463b      	mov	r3, r7
 801ccf4:	f7e3 fcb8 	bl	8000668 <__aeabi_dmul>
 801ccf8:	a359      	add	r3, pc, #356	@ (adr r3, 801ce60 <atan+0x2f8>)
 801ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccfe:	f7e3 fafb 	bl	80002f8 <__aeabi_dsub>
 801cd02:	4632      	mov	r2, r6
 801cd04:	463b      	mov	r3, r7
 801cd06:	f7e3 fcaf 	bl	8000668 <__aeabi_dmul>
 801cd0a:	4602      	mov	r2, r0
 801cd0c:	460b      	mov	r3, r1
 801cd0e:	4640      	mov	r0, r8
 801cd10:	4649      	mov	r1, r9
 801cd12:	f7e3 faf3 	bl	80002fc <__adddf3>
 801cd16:	4622      	mov	r2, r4
 801cd18:	462b      	mov	r3, r5
 801cd1a:	f7e3 fca5 	bl	8000668 <__aeabi_dmul>
 801cd1e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801cd22:	4602      	mov	r2, r0
 801cd24:	460b      	mov	r3, r1
 801cd26:	d148      	bne.n	801cdba <atan+0x252>
 801cd28:	4620      	mov	r0, r4
 801cd2a:	4629      	mov	r1, r5
 801cd2c:	f7e3 fae4 	bl	80002f8 <__aeabi_dsub>
 801cd30:	e72f      	b.n	801cb92 <atan+0x2a>
 801cd32:	4b52      	ldr	r3, [pc, #328]	@ (801ce7c <atan+0x314>)
 801cd34:	2200      	movs	r2, #0
 801cd36:	4620      	mov	r0, r4
 801cd38:	4629      	mov	r1, r5
 801cd3a:	f7e3 fadd 	bl	80002f8 <__aeabi_dsub>
 801cd3e:	4b4f      	ldr	r3, [pc, #316]	@ (801ce7c <atan+0x314>)
 801cd40:	4606      	mov	r6, r0
 801cd42:	460f      	mov	r7, r1
 801cd44:	2200      	movs	r2, #0
 801cd46:	4620      	mov	r0, r4
 801cd48:	4629      	mov	r1, r5
 801cd4a:	f7e3 fad7 	bl	80002fc <__adddf3>
 801cd4e:	4602      	mov	r2, r0
 801cd50:	460b      	mov	r3, r1
 801cd52:	4630      	mov	r0, r6
 801cd54:	4639      	mov	r1, r7
 801cd56:	f7e3 fdb1 	bl	80008bc <__aeabi_ddiv>
 801cd5a:	f04f 0a01 	mov.w	sl, #1
 801cd5e:	4604      	mov	r4, r0
 801cd60:	460d      	mov	r5, r1
 801cd62:	e765      	b.n	801cc30 <atan+0xc8>
 801cd64:	4b47      	ldr	r3, [pc, #284]	@ (801ce84 <atan+0x31c>)
 801cd66:	429e      	cmp	r6, r3
 801cd68:	d21c      	bcs.n	801cda4 <atan+0x23c>
 801cd6a:	4b47      	ldr	r3, [pc, #284]	@ (801ce88 <atan+0x320>)
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	4620      	mov	r0, r4
 801cd70:	4629      	mov	r1, r5
 801cd72:	f7e3 fac1 	bl	80002f8 <__aeabi_dsub>
 801cd76:	4b44      	ldr	r3, [pc, #272]	@ (801ce88 <atan+0x320>)
 801cd78:	4606      	mov	r6, r0
 801cd7a:	460f      	mov	r7, r1
 801cd7c:	2200      	movs	r2, #0
 801cd7e:	4620      	mov	r0, r4
 801cd80:	4629      	mov	r1, r5
 801cd82:	f7e3 fc71 	bl	8000668 <__aeabi_dmul>
 801cd86:	4b3d      	ldr	r3, [pc, #244]	@ (801ce7c <atan+0x314>)
 801cd88:	2200      	movs	r2, #0
 801cd8a:	f7e3 fab7 	bl	80002fc <__adddf3>
 801cd8e:	4602      	mov	r2, r0
 801cd90:	460b      	mov	r3, r1
 801cd92:	4630      	mov	r0, r6
 801cd94:	4639      	mov	r1, r7
 801cd96:	f7e3 fd91 	bl	80008bc <__aeabi_ddiv>
 801cd9a:	f04f 0a02 	mov.w	sl, #2
 801cd9e:	4604      	mov	r4, r0
 801cda0:	460d      	mov	r5, r1
 801cda2:	e745      	b.n	801cc30 <atan+0xc8>
 801cda4:	4622      	mov	r2, r4
 801cda6:	462b      	mov	r3, r5
 801cda8:	4938      	ldr	r1, [pc, #224]	@ (801ce8c <atan+0x324>)
 801cdaa:	2000      	movs	r0, #0
 801cdac:	f7e3 fd86 	bl	80008bc <__aeabi_ddiv>
 801cdb0:	f04f 0a03 	mov.w	sl, #3
 801cdb4:	4604      	mov	r4, r0
 801cdb6:	460d      	mov	r5, r1
 801cdb8:	e73a      	b.n	801cc30 <atan+0xc8>
 801cdba:	4b35      	ldr	r3, [pc, #212]	@ (801ce90 <atan+0x328>)
 801cdbc:	4e35      	ldr	r6, [pc, #212]	@ (801ce94 <atan+0x32c>)
 801cdbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc6:	f7e3 fa97 	bl	80002f8 <__aeabi_dsub>
 801cdca:	4622      	mov	r2, r4
 801cdcc:	462b      	mov	r3, r5
 801cdce:	f7e3 fa93 	bl	80002f8 <__aeabi_dsub>
 801cdd2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801cdd6:	4602      	mov	r2, r0
 801cdd8:	460b      	mov	r3, r1
 801cdda:	e9d6 0100 	ldrd	r0, r1, [r6]
 801cdde:	f7e3 fa8b 	bl	80002f8 <__aeabi_dsub>
 801cde2:	f1bb 0f00 	cmp.w	fp, #0
 801cde6:	4604      	mov	r4, r0
 801cde8:	460d      	mov	r5, r1
 801cdea:	f6bf aedc 	bge.w	801cba6 <atan+0x3e>
 801cdee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cdf2:	461d      	mov	r5, r3
 801cdf4:	e6d7      	b.n	801cba6 <atan+0x3e>
 801cdf6:	a51c      	add	r5, pc, #112	@ (adr r5, 801ce68 <atan+0x300>)
 801cdf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cdfc:	e6d3      	b.n	801cba6 <atan+0x3e>
 801cdfe:	bf00      	nop
 801ce00:	54442d18 	.word	0x54442d18
 801ce04:	3ff921fb 	.word	0x3ff921fb
 801ce08:	8800759c 	.word	0x8800759c
 801ce0c:	7e37e43c 	.word	0x7e37e43c
 801ce10:	e322da11 	.word	0xe322da11
 801ce14:	3f90ad3a 	.word	0x3f90ad3a
 801ce18:	24760deb 	.word	0x24760deb
 801ce1c:	3fa97b4b 	.word	0x3fa97b4b
 801ce20:	a0d03d51 	.word	0xa0d03d51
 801ce24:	3fb10d66 	.word	0x3fb10d66
 801ce28:	c54c206e 	.word	0xc54c206e
 801ce2c:	3fb745cd 	.word	0x3fb745cd
 801ce30:	920083ff 	.word	0x920083ff
 801ce34:	3fc24924 	.word	0x3fc24924
 801ce38:	5555550d 	.word	0x5555550d
 801ce3c:	3fd55555 	.word	0x3fd55555
 801ce40:	2c6a6c2f 	.word	0x2c6a6c2f
 801ce44:	bfa2b444 	.word	0xbfa2b444
 801ce48:	52defd9a 	.word	0x52defd9a
 801ce4c:	3fadde2d 	.word	0x3fadde2d
 801ce50:	af749a6d 	.word	0xaf749a6d
 801ce54:	3fb3b0f2 	.word	0x3fb3b0f2
 801ce58:	fe231671 	.word	0xfe231671
 801ce5c:	3fbc71c6 	.word	0x3fbc71c6
 801ce60:	9998ebc4 	.word	0x9998ebc4
 801ce64:	3fc99999 	.word	0x3fc99999
 801ce68:	54442d18 	.word	0x54442d18
 801ce6c:	bff921fb 	.word	0xbff921fb
 801ce70:	440fffff 	.word	0x440fffff
 801ce74:	7ff00000 	.word	0x7ff00000
 801ce78:	3fdbffff 	.word	0x3fdbffff
 801ce7c:	3ff00000 	.word	0x3ff00000
 801ce80:	3ff2ffff 	.word	0x3ff2ffff
 801ce84:	40038000 	.word	0x40038000
 801ce88:	3ff80000 	.word	0x3ff80000
 801ce8c:	bff00000 	.word	0xbff00000
 801ce90:	0801ec28 	.word	0x0801ec28
 801ce94:	0801ec48 	.word	0x0801ec48

0801ce98 <fabs>:
 801ce98:	ec51 0b10 	vmov	r0, r1, d0
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801cea2:	ec43 2b10 	vmov	d0, r2, r3
 801cea6:	4770      	bx	lr

0801cea8 <__ieee754_sqrt>:
 801cea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceac:	4a68      	ldr	r2, [pc, #416]	@ (801d050 <__ieee754_sqrt+0x1a8>)
 801ceae:	ec55 4b10 	vmov	r4, r5, d0
 801ceb2:	43aa      	bics	r2, r5
 801ceb4:	462b      	mov	r3, r5
 801ceb6:	4621      	mov	r1, r4
 801ceb8:	d110      	bne.n	801cedc <__ieee754_sqrt+0x34>
 801ceba:	4622      	mov	r2, r4
 801cebc:	4620      	mov	r0, r4
 801cebe:	4629      	mov	r1, r5
 801cec0:	f7e3 fbd2 	bl	8000668 <__aeabi_dmul>
 801cec4:	4602      	mov	r2, r0
 801cec6:	460b      	mov	r3, r1
 801cec8:	4620      	mov	r0, r4
 801ceca:	4629      	mov	r1, r5
 801cecc:	f7e3 fa16 	bl	80002fc <__adddf3>
 801ced0:	4604      	mov	r4, r0
 801ced2:	460d      	mov	r5, r1
 801ced4:	ec45 4b10 	vmov	d0, r4, r5
 801ced8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cedc:	2d00      	cmp	r5, #0
 801cede:	dc0e      	bgt.n	801cefe <__ieee754_sqrt+0x56>
 801cee0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801cee4:	4322      	orrs	r2, r4
 801cee6:	d0f5      	beq.n	801ced4 <__ieee754_sqrt+0x2c>
 801cee8:	b19d      	cbz	r5, 801cf12 <__ieee754_sqrt+0x6a>
 801ceea:	4622      	mov	r2, r4
 801ceec:	4620      	mov	r0, r4
 801ceee:	4629      	mov	r1, r5
 801cef0:	f7e3 fa02 	bl	80002f8 <__aeabi_dsub>
 801cef4:	4602      	mov	r2, r0
 801cef6:	460b      	mov	r3, r1
 801cef8:	f7e3 fce0 	bl	80008bc <__aeabi_ddiv>
 801cefc:	e7e8      	b.n	801ced0 <__ieee754_sqrt+0x28>
 801cefe:	152a      	asrs	r2, r5, #20
 801cf00:	d115      	bne.n	801cf2e <__ieee754_sqrt+0x86>
 801cf02:	2000      	movs	r0, #0
 801cf04:	e009      	b.n	801cf1a <__ieee754_sqrt+0x72>
 801cf06:	0acb      	lsrs	r3, r1, #11
 801cf08:	3a15      	subs	r2, #21
 801cf0a:	0549      	lsls	r1, r1, #21
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d0fa      	beq.n	801cf06 <__ieee754_sqrt+0x5e>
 801cf10:	e7f7      	b.n	801cf02 <__ieee754_sqrt+0x5a>
 801cf12:	462a      	mov	r2, r5
 801cf14:	e7fa      	b.n	801cf0c <__ieee754_sqrt+0x64>
 801cf16:	005b      	lsls	r3, r3, #1
 801cf18:	3001      	adds	r0, #1
 801cf1a:	02dc      	lsls	r4, r3, #11
 801cf1c:	d5fb      	bpl.n	801cf16 <__ieee754_sqrt+0x6e>
 801cf1e:	1e44      	subs	r4, r0, #1
 801cf20:	1b12      	subs	r2, r2, r4
 801cf22:	f1c0 0420 	rsb	r4, r0, #32
 801cf26:	fa21 f404 	lsr.w	r4, r1, r4
 801cf2a:	4323      	orrs	r3, r4
 801cf2c:	4081      	lsls	r1, r0
 801cf2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cf32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801cf36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cf3a:	07d2      	lsls	r2, r2, #31
 801cf3c:	bf5c      	itt	pl
 801cf3e:	005b      	lslpl	r3, r3, #1
 801cf40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801cf44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801cf48:	bf58      	it	pl
 801cf4a:	0049      	lslpl	r1, r1, #1
 801cf4c:	2600      	movs	r6, #0
 801cf4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801cf52:	106d      	asrs	r5, r5, #1
 801cf54:	0049      	lsls	r1, r1, #1
 801cf56:	2016      	movs	r0, #22
 801cf58:	4632      	mov	r2, r6
 801cf5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801cf5e:	1917      	adds	r7, r2, r4
 801cf60:	429f      	cmp	r7, r3
 801cf62:	bfde      	ittt	le
 801cf64:	193a      	addle	r2, r7, r4
 801cf66:	1bdb      	suble	r3, r3, r7
 801cf68:	1936      	addle	r6, r6, r4
 801cf6a:	0fcf      	lsrs	r7, r1, #31
 801cf6c:	3801      	subs	r0, #1
 801cf6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801cf72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cf76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801cf7a:	d1f0      	bne.n	801cf5e <__ieee754_sqrt+0xb6>
 801cf7c:	4604      	mov	r4, r0
 801cf7e:	2720      	movs	r7, #32
 801cf80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801cf84:	429a      	cmp	r2, r3
 801cf86:	eb00 0e0c 	add.w	lr, r0, ip
 801cf8a:	db02      	blt.n	801cf92 <__ieee754_sqrt+0xea>
 801cf8c:	d113      	bne.n	801cfb6 <__ieee754_sqrt+0x10e>
 801cf8e:	458e      	cmp	lr, r1
 801cf90:	d811      	bhi.n	801cfb6 <__ieee754_sqrt+0x10e>
 801cf92:	f1be 0f00 	cmp.w	lr, #0
 801cf96:	eb0e 000c 	add.w	r0, lr, ip
 801cf9a:	da42      	bge.n	801d022 <__ieee754_sqrt+0x17a>
 801cf9c:	2800      	cmp	r0, #0
 801cf9e:	db40      	blt.n	801d022 <__ieee754_sqrt+0x17a>
 801cfa0:	f102 0801 	add.w	r8, r2, #1
 801cfa4:	1a9b      	subs	r3, r3, r2
 801cfa6:	458e      	cmp	lr, r1
 801cfa8:	bf88      	it	hi
 801cfaa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801cfae:	eba1 010e 	sub.w	r1, r1, lr
 801cfb2:	4464      	add	r4, ip
 801cfb4:	4642      	mov	r2, r8
 801cfb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801cfba:	3f01      	subs	r7, #1
 801cfbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801cfc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cfc4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801cfc8:	d1dc      	bne.n	801cf84 <__ieee754_sqrt+0xdc>
 801cfca:	4319      	orrs	r1, r3
 801cfcc:	d01b      	beq.n	801d006 <__ieee754_sqrt+0x15e>
 801cfce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801d054 <__ieee754_sqrt+0x1ac>
 801cfd2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801d058 <__ieee754_sqrt+0x1b0>
 801cfd6:	e9da 0100 	ldrd	r0, r1, [sl]
 801cfda:	e9db 2300 	ldrd	r2, r3, [fp]
 801cfde:	f7e3 f98b 	bl	80002f8 <__aeabi_dsub>
 801cfe2:	e9da 8900 	ldrd	r8, r9, [sl]
 801cfe6:	4602      	mov	r2, r0
 801cfe8:	460b      	mov	r3, r1
 801cfea:	4640      	mov	r0, r8
 801cfec:	4649      	mov	r1, r9
 801cfee:	f7e3 fdb7 	bl	8000b60 <__aeabi_dcmple>
 801cff2:	b140      	cbz	r0, 801d006 <__ieee754_sqrt+0x15e>
 801cff4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801cff8:	e9da 0100 	ldrd	r0, r1, [sl]
 801cffc:	e9db 2300 	ldrd	r2, r3, [fp]
 801d000:	d111      	bne.n	801d026 <__ieee754_sqrt+0x17e>
 801d002:	3601      	adds	r6, #1
 801d004:	463c      	mov	r4, r7
 801d006:	1072      	asrs	r2, r6, #1
 801d008:	0863      	lsrs	r3, r4, #1
 801d00a:	07f1      	lsls	r1, r6, #31
 801d00c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801d010:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801d014:	bf48      	it	mi
 801d016:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801d01a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801d01e:	4618      	mov	r0, r3
 801d020:	e756      	b.n	801ced0 <__ieee754_sqrt+0x28>
 801d022:	4690      	mov	r8, r2
 801d024:	e7be      	b.n	801cfa4 <__ieee754_sqrt+0xfc>
 801d026:	f7e3 f969 	bl	80002fc <__adddf3>
 801d02a:	e9da 8900 	ldrd	r8, r9, [sl]
 801d02e:	4602      	mov	r2, r0
 801d030:	460b      	mov	r3, r1
 801d032:	4640      	mov	r0, r8
 801d034:	4649      	mov	r1, r9
 801d036:	f7e3 fd89 	bl	8000b4c <__aeabi_dcmplt>
 801d03a:	b120      	cbz	r0, 801d046 <__ieee754_sqrt+0x19e>
 801d03c:	1ca0      	adds	r0, r4, #2
 801d03e:	bf08      	it	eq
 801d040:	3601      	addeq	r6, #1
 801d042:	3402      	adds	r4, #2
 801d044:	e7df      	b.n	801d006 <__ieee754_sqrt+0x15e>
 801d046:	1c63      	adds	r3, r4, #1
 801d048:	f023 0401 	bic.w	r4, r3, #1
 801d04c:	e7db      	b.n	801d006 <__ieee754_sqrt+0x15e>
 801d04e:	bf00      	nop
 801d050:	7ff00000 	.word	0x7ff00000
 801d054:	20000a18 	.word	0x20000a18
 801d058:	20000a10 	.word	0x20000a10
 801d05c:	00000000 	.word	0x00000000

0801d060 <__ieee754_atan2>:
 801d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d064:	ec57 6b11 	vmov	r6, r7, d1
 801d068:	4273      	negs	r3, r6
 801d06a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801d1e8 <__ieee754_atan2+0x188>
 801d06e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801d072:	4333      	orrs	r3, r6
 801d074:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d078:	4543      	cmp	r3, r8
 801d07a:	ec51 0b10 	vmov	r0, r1, d0
 801d07e:	4635      	mov	r5, r6
 801d080:	d809      	bhi.n	801d096 <__ieee754_atan2+0x36>
 801d082:	4244      	negs	r4, r0
 801d084:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d088:	4304      	orrs	r4, r0
 801d08a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d08e:	4544      	cmp	r4, r8
 801d090:	468e      	mov	lr, r1
 801d092:	4681      	mov	r9, r0
 801d094:	d907      	bls.n	801d0a6 <__ieee754_atan2+0x46>
 801d096:	4632      	mov	r2, r6
 801d098:	463b      	mov	r3, r7
 801d09a:	f7e3 f92f 	bl	80002fc <__adddf3>
 801d09e:	ec41 0b10 	vmov	d0, r0, r1
 801d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801d0aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801d0ae:	4334      	orrs	r4, r6
 801d0b0:	d103      	bne.n	801d0ba <__ieee754_atan2+0x5a>
 801d0b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0b6:	f7ff bd57 	b.w	801cb68 <atan>
 801d0ba:	17bc      	asrs	r4, r7, #30
 801d0bc:	f004 0402 	and.w	r4, r4, #2
 801d0c0:	ea53 0909 	orrs.w	r9, r3, r9
 801d0c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d0c8:	d107      	bne.n	801d0da <__ieee754_atan2+0x7a>
 801d0ca:	2c02      	cmp	r4, #2
 801d0cc:	d05f      	beq.n	801d18e <__ieee754_atan2+0x12e>
 801d0ce:	2c03      	cmp	r4, #3
 801d0d0:	d1e5      	bne.n	801d09e <__ieee754_atan2+0x3e>
 801d0d2:	a141      	add	r1, pc, #260	@ (adr r1, 801d1d8 <__ieee754_atan2+0x178>)
 801d0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0d8:	e7e1      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d0da:	4315      	orrs	r5, r2
 801d0dc:	d106      	bne.n	801d0ec <__ieee754_atan2+0x8c>
 801d0de:	f1be 0f00 	cmp.w	lr, #0
 801d0e2:	da5f      	bge.n	801d1a4 <__ieee754_atan2+0x144>
 801d0e4:	a13e      	add	r1, pc, #248	@ (adr r1, 801d1e0 <__ieee754_atan2+0x180>)
 801d0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0ea:	e7d8      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d0ec:	4542      	cmp	r2, r8
 801d0ee:	d10f      	bne.n	801d110 <__ieee754_atan2+0xb0>
 801d0f0:	4293      	cmp	r3, r2
 801d0f2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801d0f6:	d107      	bne.n	801d108 <__ieee754_atan2+0xa8>
 801d0f8:	2c02      	cmp	r4, #2
 801d0fa:	d84c      	bhi.n	801d196 <__ieee754_atan2+0x136>
 801d0fc:	4b34      	ldr	r3, [pc, #208]	@ (801d1d0 <__ieee754_atan2+0x170>)
 801d0fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d102:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d106:	e7ca      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d108:	2c02      	cmp	r4, #2
 801d10a:	d848      	bhi.n	801d19e <__ieee754_atan2+0x13e>
 801d10c:	4b31      	ldr	r3, [pc, #196]	@ (801d1d4 <__ieee754_atan2+0x174>)
 801d10e:	e7f6      	b.n	801d0fe <__ieee754_atan2+0x9e>
 801d110:	4543      	cmp	r3, r8
 801d112:	d0e4      	beq.n	801d0de <__ieee754_atan2+0x7e>
 801d114:	1a9b      	subs	r3, r3, r2
 801d116:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801d11a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d11e:	da1e      	bge.n	801d15e <__ieee754_atan2+0xfe>
 801d120:	2f00      	cmp	r7, #0
 801d122:	da01      	bge.n	801d128 <__ieee754_atan2+0xc8>
 801d124:	323c      	adds	r2, #60	@ 0x3c
 801d126:	db1e      	blt.n	801d166 <__ieee754_atan2+0x106>
 801d128:	4632      	mov	r2, r6
 801d12a:	463b      	mov	r3, r7
 801d12c:	f7e3 fbc6 	bl	80008bc <__aeabi_ddiv>
 801d130:	ec41 0b10 	vmov	d0, r0, r1
 801d134:	f7ff feb0 	bl	801ce98 <fabs>
 801d138:	f7ff fd16 	bl	801cb68 <atan>
 801d13c:	ec51 0b10 	vmov	r0, r1, d0
 801d140:	2c01      	cmp	r4, #1
 801d142:	d013      	beq.n	801d16c <__ieee754_atan2+0x10c>
 801d144:	2c02      	cmp	r4, #2
 801d146:	d015      	beq.n	801d174 <__ieee754_atan2+0x114>
 801d148:	2c00      	cmp	r4, #0
 801d14a:	d0a8      	beq.n	801d09e <__ieee754_atan2+0x3e>
 801d14c:	a318      	add	r3, pc, #96	@ (adr r3, 801d1b0 <__ieee754_atan2+0x150>)
 801d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d152:	f7e3 f8d1 	bl	80002f8 <__aeabi_dsub>
 801d156:	a318      	add	r3, pc, #96	@ (adr r3, 801d1b8 <__ieee754_atan2+0x158>)
 801d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15c:	e014      	b.n	801d188 <__ieee754_atan2+0x128>
 801d15e:	a118      	add	r1, pc, #96	@ (adr r1, 801d1c0 <__ieee754_atan2+0x160>)
 801d160:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d164:	e7ec      	b.n	801d140 <__ieee754_atan2+0xe0>
 801d166:	2000      	movs	r0, #0
 801d168:	2100      	movs	r1, #0
 801d16a:	e7e9      	b.n	801d140 <__ieee754_atan2+0xe0>
 801d16c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d170:	4619      	mov	r1, r3
 801d172:	e794      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d174:	a30e      	add	r3, pc, #56	@ (adr r3, 801d1b0 <__ieee754_atan2+0x150>)
 801d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d17a:	f7e3 f8bd 	bl	80002f8 <__aeabi_dsub>
 801d17e:	4602      	mov	r2, r0
 801d180:	460b      	mov	r3, r1
 801d182:	a10d      	add	r1, pc, #52	@ (adr r1, 801d1b8 <__ieee754_atan2+0x158>)
 801d184:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d188:	f7e3 f8b6 	bl	80002f8 <__aeabi_dsub>
 801d18c:	e787      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d18e:	a10a      	add	r1, pc, #40	@ (adr r1, 801d1b8 <__ieee754_atan2+0x158>)
 801d190:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d194:	e783      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d196:	a10c      	add	r1, pc, #48	@ (adr r1, 801d1c8 <__ieee754_atan2+0x168>)
 801d198:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d19c:	e77f      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d19e:	2000      	movs	r0, #0
 801d1a0:	2100      	movs	r1, #0
 801d1a2:	e77c      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d1a4:	a106      	add	r1, pc, #24	@ (adr r1, 801d1c0 <__ieee754_atan2+0x160>)
 801d1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1aa:	e778      	b.n	801d09e <__ieee754_atan2+0x3e>
 801d1ac:	f3af 8000 	nop.w
 801d1b0:	33145c07 	.word	0x33145c07
 801d1b4:	3ca1a626 	.word	0x3ca1a626
 801d1b8:	54442d18 	.word	0x54442d18
 801d1bc:	400921fb 	.word	0x400921fb
 801d1c0:	54442d18 	.word	0x54442d18
 801d1c4:	3ff921fb 	.word	0x3ff921fb
 801d1c8:	54442d18 	.word	0x54442d18
 801d1cc:	3fe921fb 	.word	0x3fe921fb
 801d1d0:	0801ec80 	.word	0x0801ec80
 801d1d4:	0801ec68 	.word	0x0801ec68
 801d1d8:	54442d18 	.word	0x54442d18
 801d1dc:	c00921fb 	.word	0xc00921fb
 801d1e0:	54442d18 	.word	0x54442d18
 801d1e4:	bff921fb 	.word	0xbff921fb
 801d1e8:	7ff00000 	.word	0x7ff00000

0801d1ec <_init>:
 801d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1ee:	bf00      	nop
 801d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1f2:	bc08      	pop	{r3}
 801d1f4:	469e      	mov	lr, r3
 801d1f6:	4770      	bx	lr

0801d1f8 <_fini>:
 801d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1fa:	bf00      	nop
 801d1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1fe:	bc08      	pop	{r3}
 801d200:	469e      	mov	lr, r3
 801d202:	4770      	bx	lr
